// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

isriotshield( var_0 )
{
    if ( issameweapon( var_0 ) && nullweapon( var_0 ) )
        return 0;

    if ( isstring( var_0 ) && var_0 == "none" )
        return 0;

    return weapontype( var_0 ) == "riotshield";
}

riotshield_hasweapon()
{
    var_0 = 0;
    var_1 = self getweaponslistprimaries();

    foreach ( var_3 in var_1 )
    {
        if ( isriotshield( var_3 ) )
        {
            var_0 = 1;
            break;
        }
    }

    return var_0;
}

riotshield_hastwo()
{
    var_0 = 0;
    var_1 = self getweaponslistprimaries();

    foreach ( var_3 in var_1 )
    {
        if ( isriotshield( var_3 ) )
            var_0++;

        if ( var_0 == 2 )
            break;
    }

    return var_0 == 2;
}

riotshield_attach( var_0, var_1 )
{
    var_2 = undefined;

    if ( var_0 )
    {
        self.riotshieldmodel = var_1;
        var_2 = "j_shield_ri";
    }
    else
    {
        self.riotshieldmodelstowed = var_1;
        var_2 = "tag_shield_back";
    }

    self attachshieldmodel( var_1, var_2, 0, !var_0 );
    self.hasriotshield = riotshield_hasweapon();
}

riotshield_detach( var_0 )
{
    var_1 = undefined;
    var_2 = undefined;

    if ( var_0 )
    {
        var_1 = self.riotshieldmodel;
        var_2 = "j_shield_ri";
    }
    else
    {
        var_1 = self.riotshieldmodelstowed;
        var_2 = "tag_shield_back";
    }

    self detachshieldmodel( var_1, var_2 );

    if ( var_0 )
        self.riotshieldmodel = undefined;
    else
        self.riotshieldmodelstowed = undefined;

    self.hasriotshield = riotshield_hasweapon();
}

riotshield_move( var_0 )
{
    var_1 = undefined;
    var_2 = undefined;
    var_3 = undefined;

    if ( var_0 )
    {
        var_3 = self.riotshieldmodel;
        var_1 = "j_shield_ri";
        var_2 = "tag_shield_back";
    }
    else
    {
        var_3 = self.riotshieldmodelstowed;
        var_1 = "tag_shield_back";
        var_2 = "j_shield_ri";
    }

    self moveshieldmodel( var_3, var_1, var_2, var_0 );

    if ( var_0 )
    {
        self.riotshieldmodelstowed = var_3;
        self.riotshieldmodel = undefined;
    }
    else
    {
        self.riotshieldmodel = var_3;
        self.riotshieldmodelstowed = undefined;
    }
}

riotshield_clear()
{
    self.hasriotshield = 0;
    self.riotshieldmodelstowed = undefined;
    self.riotshieldmodel = undefined;
}

riotshield_getmodel()
{
    var_0 = self getweaponslistprimaries();

    foreach ( var_2 in var_0 )
    {
        switch ( var_2.basename )
        {
            case "iw8_me_riotshield_mpv8":
                return "weapon_wm_riotshield_v8";
            case "iw8_me_riotshield_mpv7":
                return "weapon_wm_riotshield_v7";
            case "iw8_me_riotshield_mpv6":
                return "weapon_wm_riotshield_v6";
            case "iw8_me_riotshield_mpv5":
                return "weapon_wm_riotshield_v5";
            case "iw8_me_riotshield_mpv4":
                return "weapon_wm_riotshield_v4";
            case "iw8_me_riotshield_mpv3":
                return "weapon_wm_riotshield_v3";
            case "iw8_me_riotshield_mpv2":
                return "weapon_wm_riotshield_v2";
            case "iw8_me_riotshield_mp":
                return "weapon_wm_riotshield";
        }
    }
}

setignoreriotshieldxp()
{
    self.ignoreriotshieldxp = 1;
}

clearignoreriotshieldxp()
{
    self.ignoreriotshieldxp = undefined;
}
