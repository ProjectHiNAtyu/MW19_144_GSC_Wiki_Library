// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

requestentervehicle( var_0, var_1, var_2, var_3 )
{
    self.vehiclerequest = spawnstruct();
    self.vehiclerequest.vehicle = var_0;
    self.vehiclerequest.chosenvehicleposition = var_2;
    self.vehiclerequest.chosenvehicleanimpos = var_3;
    self.vehiclerequest.spawninvehicle = var_1;
}

waitforentervehicle()
{
    var_0 = scripts\engine\utility::_id_133F9( "entervehicle", "death", "long_death", "failedentervehicle" );

    if ( var_0 != "entervehicle" )
        return 0;

    return 1;
}

waitforarrivedatvehicle()
{
    self endon( "death" );
    self endon( "long_death" );

    while ( isdefined( self.vehiclerequest ) || isdefined( self._blackboard.currentvehicle ) && !istrue( self._blackboard.startedenteringvehicle ) && !istrue( self._blackboard.enteredvehicle ) && !istrue( self._blackboard.invehicle ) )
        waitframe();
}

entervehicle( var_0, var_1, var_2, var_3 )
{
    requestentervehicle( var_0, var_1, var_2, var_3 );
    return waitforentervehicle();
}

requestexitvehicle()
{
    self.exitvehiclerequested = 1;
}

waitforexitvehicle()
{
    self endon( "death" );
    self endon( "long_death" );

    while ( !istrue( self.hasexitedvehicle ) )
        waitframe();

    self.hasexitedvehicle = undefined;
}

exitvehicle()
{
    requestexitvehicle();
    waitforexitvehicle();
}

hasvehicle()
{
    return isdefined( self.vehiclerequest ) || isdefined( self._blackboard.currentvehicle );
}

setuprope()
{
    self._blackboard.vehiclesetuprope = 1;
}

exitingvehicle()
{
    if ( scripts\common\utility::issp() )
        return;

    self._blackboard.currentvehicle.display_reinforcement_called_icon = 0;
    self._blackboard.currentvehicle thread isvalidkillcam();
}

isvalidkillcam()
{
    self endon( "death" );
    waitframe();
    self.display_reinforcement_called_icon = 1;
}
