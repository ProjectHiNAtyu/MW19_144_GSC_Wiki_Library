// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

register_module_died_poorly_func( var_0 )
{
    var_0.riskspawn_initialset = 1;
    thread _id_12A3B( var_0 );
}

_id_12A3B( var_0 )
{
    self endon( "disconnect" );
    scripts\engine\utility::_id_133EF( "end_dragBreath", "death" );

    if ( isdefined( var_0 ) )
        var_0.riskspawn_initialset = undefined;
}

_id_127C3()
{
    var_0 = spawnstruct();
    var_0.trackriotshield_watchcancelswitchaway = [];
    var_0.playerzombiemonitorinput = [];
    var_0.delayedunsetbettermissionrewards = "";
    return var_0;
}

_id_12372( var_0, var_1, var_2 )
{
    foreach ( var_4 in var_0 )
    {
        if ( sat_wait_for_power( var_4 ) )
            var_0 = scripts\engine\utility::array_remove( var_0, var_4 );
    }

    if ( var_0.size == 0 )
        return;

    thread delayedshowtablets( var_0, var_1, var_2 );
}

_id_12373()
{
    var_0 = self getcorpseentity();
    var_0 setscriptablepartstate( "burning", "flareUp", 0 );
}

_id_12A3C()
{
    self notify( "stop_dragonsbreathDamage" );
    self.init_create_script_for_level = undefined;
}

delayedshowtablets( var_0, var_1, var_2 )
{
    self notify( "newBurningParts" );
    self endon( "disconnect" );
    self endon( "newBurningParts" );
    self endon( "stop_dragonsbreathDamage" );
    var_0 = scripts\engine\utility::array_remove_duplicates( var_0 );

    foreach ( var_4 in var_0 )
    {
        if ( isdefined( self.init_create_script_for_level.playerzombiemonitorinput[var_4] ) )
        {
            self.init_create_script_for_level.playerzombiemonitorinput[var_4] = self.init_create_script_for_level.playerzombiemonitorinput[var_4] + 0.5;
            self.init_create_script_for_level.playerzombiemonitorinput[var_4] = min( self.init_create_script_for_level.playerzombiemonitorinput[var_4], 4.0 );
            continue;
        }

        self.init_create_script_for_level.playerzombiemonitorinput[var_4] = 0.5;
    }

    childthread _id_1235D( var_1, var_2 );
    _id_1235E();

    for (;;)
    {
        wait 0.2;

        if ( !isalive( self ) || self.init_create_script_for_level.playerzombiemonitorinput.size == 0 )
            _id_12A3C();

        var_6 = 0;

        foreach ( var_9, var_8 in self.init_create_script_for_level.playerzombiemonitorinput )
        {
            self.init_create_script_for_level.playerzombiemonitorinput[var_9] = self.init_create_script_for_level.playerzombiemonitorinput[var_9] - 0.2;

            if ( self.init_create_script_for_level.playerzombiemonitorinput[var_9] <= 0 )
            {
                self.init_create_script_for_level.playerzombiemonitorinput = scripts\engine\utility::array_remove_key( self.init_create_script_for_level.playerzombiemonitorinput, var_9 );
                var_6 = 1;
            }
        }

        if ( var_6 )
            _id_1235E();
    }
}

_id_1235D( var_0, var_1 )
{
    var_2 = getcompleteweaponname( "dragonsbreath_mp" );
    var_2.vandalize_attack_max_cooldown = var_1;
    var_3 = 1.0;

    if ( level.gametype == "br" && var_1.classname == "spread" )
        var_3 = 0.75;

    for (;;)
    {
        wait 0.25;
        var_4 = scripts\engine\math::normalize_value( 5, 1, self.init_create_script_for_level.playerzombiemonitorinput.size );
        var_5 = scripts\engine\math::factor_value( 40, 54, var_4 );
        var_6 = int( var_5 * 0.25 ) * var_3;
        var_6 = floor( var_6 );
        self dodamage( var_6, self.origin, var_0, var_0, "MOD_FIRE", var_2 );
    }
}

_id_1235E()
{
    var_0 = "";
    var_1 = [];
    var_1["torso"] = 0;
    var_1["legs"] = 0;

    foreach ( var_5, var_3 in self.init_create_script_for_level.playerzombiemonitorinput )
    {
        var_4 = spotlight_max_dist_sq_from_node( var_5 );

        if ( isdefined( var_4 ) )
        {
            var_1[var_4] = var_1[var_4] + 1;
            continue;
        }
    }

    if ( var_1["torso"] > 2 )
        var_0 = "torso_l_";
    else if ( var_1["torso"] > 0 )
        var_0 = "torso_s_";

    if ( var_1["legs"] > 2 )
        var_0 = var_0 + "legs_l";
    else if ( var_1["legs"] > 0 )
        var_0 = var_0 + "legs_s";

    if ( var_0 == "" )
        var_0 = "neutral";

    if ( var_0 != self.init_create_script_for_level.delayedunsetbettermissionrewards )
    {
        if ( var_0 == "neutral" )
            scripts\mp\weapons::disableburnfx( 1, self.init_create_script_for_level.delayedunsetbettermissionrewards );
        else
            scripts\mp\weapons::enableburnfx( 1, var_0 );

        self.init_create_script_for_level.delayedunsetbettermissionrewards = var_0;
    }
}

spotlight_max_dist_sq_from_node( var_0 )
{
    switch ( var_0 )
    {
        case "helmet":
            return "torso";
        case "head":
            return "torso";
        case "neck":
            return "torso";
        case "torso_upper":
            return "torso";
        case "torso_lower":
            return "torso";
        case "right_arm_upper":
            return "torso";
        case "left_arm_upper":
            return "torso";
        case "right_arm_lower":
            return "torso";
        case "left_arm_lower":
            return "torso";
        case "right_hand":
            return "torso";
        case "left_hand":
            return "torso";
        case "right_leg_upper":
            return "legs";
        case "left_leg_upper":
            return "legs";
        case "right_leg_lower":
            return "legs";
        case "left_leg_lower":
            return "legs";
        case "right_foot":
            return "legs";
        case "left_foot":
            return "legs";
    }
}

risktokencount( var_0 )
{
    var_1 = getweaponammopoolname( var_0 );
    return var_1 == "WEAPON/AMMO_DB";
}

sat_wait_for_power( var_0 )
{
    if ( var_0 == "shield" )
        return 1;
    else
        return 0;
}
