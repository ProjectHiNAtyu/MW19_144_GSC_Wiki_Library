// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    relic_oneclip_stock_adjustment_monitor();
    var_0 = getdvarint( "PMORNPNTK", 1 );
    addglobalweaponrankxpmultiplier( var_0, "online_mp_weapon_xpscale" );
    level thread onplayerconnect();
}

onplayerconnect()
{
    for (;;)
    {
        level waittill( "connected", var_0 );

        if ( !isai( var_0 ) )
        {
            if ( level.weaponxpenabled )
            {
                var_1 = getdvarint( "LNQMMNNPSR" );
                var_2 = var_0 getprivatepartysize() > 1;

                if ( var_2 )
                    var_0 addweaponrankxpmultiplier( var_1, "online_mp_party_weapon_xpscale" );
            }
        }
    }
}

loadweaponranktable( var_0 )
{
    var_1 = spawnstruct();
    var_1.rankinfo = [];
    var_2 = 0;

    for (;;)
    {
        var_3 = int( tablelookuprownum( var_0, 0, var_2 ) );

        if ( !isdefined( var_3 ) || var_3 < 0 )
            break;

        var_4 = spawnstruct();
        var_1.rankinfo[var_2] = var_4;
        var_4.minxp = int( tablelookupbyrow( var_0, var_2, 1 ) );
        var_4.xptonextrank = int( tablelookupbyrow( var_0, var_2, 2 ) );
        var_4.maxxp = int( tablelookupbyrow( var_0, var_2, 3 ) );
        var_2++;
    }

    var_1.maxrank = var_2 - 1;
    return var_1;
}

relic_oneclip_stock_adjustment_monitor()
{
    level._id_135AF = loadweaponranktable( "mp/t9_weaponranktable.csv" );
    level.weaponranktable = loadweaponranktable( "mp/weaponRankTable.csv" );
    level.weaponranktable.maxweaponranks = [];
    var_0 = tablelookupgetnumrows( "mp/statstable.csv" );

    for ( var_1 = 0; var_1 < var_0; var_1++ )
    {
        var_2 = tablelookupbyrow( "mp/statstable.csv", var_1, 4 );
        var_3 = tablelookupbyrow( "mp/statstable.csv", var_1, 42 );

        if ( !isdefined( var_2 ) || var_2 == "" || !isdefined( var_3 ) || var_3 == "" )
            continue;

        var_3 = int( var_3 );
        level.weaponranktable.maxweaponranks[var_2] = var_3;
    }
}

getplayerweaponrank( var_0 )
{
    var_1 = getplayerweaponrankxp( var_0 );
    var_2 = getweaponrankforxp( var_1 );
    return var_2;
}

getplayerweaponrankxp( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = "all";

    switch ( var_1 )
    {
        case "mp":
            var_2 = self getplayerdata( "common", "sharedProgression", "weaponLevel", var_0, "mpXP" );
            return var_2;
        case "cp":
            var_3 = self getplayerdata( "common", "sharedProgression", "weaponLevel", var_0, "cpXP" );
            return var_3;
        case "all":
            var_2 = self getplayerdata( "common", "sharedProgression", "weaponLevel", var_0, "mpXP" );
            var_3 = self getplayerdata( "common", "sharedProgression", "weaponLevel", var_0, "cpXP" );
            return var_2 + var_3;
    }
}

isplayerweaponatmaxxp( var_0 )
{
    var_1 = getplayerweaponrankxp( var_0 );
    var_2 = getweaponmaxrankxp( var_0 );
    return var_1 >= var_2;
}

weaponshouldgetxp( var_0 )
{
    if ( self.pers["rank"] < 3 && !getdvarint( "OSPNSPSKL" ) )
        return 0;

    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0 );

    if ( !weaponhasranks( var_1 ) )
        return 0;

    return 1;
}

weaponhasranks( var_0 )
{
    if ( !isdefined( level.weaponranktable.maxweaponranks[var_0] ) )
        return 0;

    var_1 = level.weaponranktable.maxweaponranks[var_0] > 0;
    return var_1;
}

getweaponmaxrankxp( var_0 )
{
    var_1 = getmaxweaponrankforrootweapon( var_0 );
    return getweaponrankinfomaxxp( var_1 );
}

getweaponrankforxp( var_0 )
{
    if ( var_0 == 0 )
        return 0;

    for ( var_1 = getmaxweaponrank() - 1; var_1 >= 0; var_1-- )
    {
        if ( var_0 >= getweaponrankinfominxp( var_1 ) )
            return var_1;
    }

    return var_1;
}

onjoinedteamcb( var_0 )
{
    if ( var_0 == 0 )
        return 0;

    for ( var_1 = nuke_vault_jugg_shoot_at_scriptables() - 1; var_1 >= 0; var_1-- )
    {
        if ( var_0 >= onjoinspectators( var_1 ) )
            return var_1;
    }

    return var_1;
}

getmaxweaponrankforrootweapon( var_0 )
{
    return level.weaponranktable.maxweaponranks[var_0];
}

getmaxweaponrank()
{
    return level.weaponranktable.maxrank;
}

nuke_vault_jugg_shoot_at_scriptables()
{
    return level._id_135AF.maxrank;
}

getweaponrankinfominxp( var_0 )
{
    return level.weaponranktable.rankinfo[var_0].minxp;
}

onjoinspectators( var_0 )
{
    return level._id_135AF.rankinfo[var_0].minxp;
}

getweaponrankinfoxptonextrank( var_0 )
{
    return level.weaponranktable.rankinfo[var_0].xptonextrank;
}

getweaponrankinfomaxxp( var_0 )
{
    return level.weaponranktable.rankinfo[var_0].maxxp;
}

addglobalweaponrankxpmultiplier( var_0, var_1 )
{
    level addweaponrankxpmultiplier( var_0, var_1 );
}

getglobalweaponrankxpmultiplier()
{
    return level getweaponrankxpmultiplier();
}

obj_payload_stage()
{
    if ( self isbnetigrplayer() )
        return sortbydistancecullbyradius();

    return 1.0;
}

addweaponrankxpmultiplier( var_0, var_1 )
{
    if ( !isdefined( self.weaponrankxpmultipliers ) )
        self.weaponrankxpmultipliers = [];

    if ( isdefined( self.weaponrankxpmultipliers[var_1] ) )
        self.weaponrankxpmultipliers[var_1] = max( self.weaponrankxpmultipliers[var_1], var_0 );
    else
        self.weaponrankxpmultipliers[var_1] = var_0;
}

getweaponrankxpmultiplier()
{
    if ( !isdefined( self.weaponrankxpmultipliers ) )
        return 1.0;

    var_0 = 1.0;

    foreach ( var_2 in self.weaponrankxpmultipliers )
    {
        if ( !isdefined( var_2 ) )
            continue;

        var_0 = var_0 * var_2;
    }

    return var_0;
}

removeglobalweaponrankxpmultiplier( var_0 )
{
    level removeweaponrankxpmultiplier( var_0 );
}

removeweaponrankxpmultiplier( var_0 )
{
    if ( !isdefined( self.weaponrankxpmultipliers ) )
        return;

    if ( !isdefined( self.weaponrankxpmultipliers[var_0] ) )
        return;

    self.rankxpmultipliers[var_0] = undefined;
}

onusethanksbc()
{
    if ( !isdefined( level._id_11A71 ) )
        level._id_11A71 = getdvarfloat( "scr_playlist_weaponxp_scalar", 1.0 );

    return level._id_11A71;
}

getweaponrankxpmultipliertotal()
{
    var_0 = getweaponrankxpmultiplier();
    var_1 = getglobalweaponrankxpmultiplier();
    var_2 = next_subway_track_hurt_time();
    var_3 = obj_payload_stage();
    var_4 = onusethanksbc();
    return var_0 * var_1 * var_2 * var_3 * var_4;
}

next_subway_track_hurt_time()
{
    if ( !isdefined( level.lootcontentsadjusteconomy_toptier ) )
        level.lootcontentsadjusteconomy_toptier = float( tablelookup( "mp/gametypesTable.csv", 0, scripts\mp\utility\game::getgametype(), 19 ) );

    return level.lootcontentsadjusteconomy_toptier;
}

newhitlocs()
{
    if ( !isdefined( level.lootchopper_patrolzone ) )
        level.lootchopper_patrolzone = getdvarint( "scr_KPH_override", int( tablelookup( "mp/gametypesTable.csv", 0, scripts\mp\utility\game::getgametype(), 20 ) ) );

    return level.lootchopper_patrolzone;
}

next_drone_cd()
{
    if ( !isdefined( level.lootchopper_postmodifydamage ) )
    {
        var_0 = getdvarint( "scr_" + scripts\mp\utility\game::getgametype() + "_timelimit" );

        if ( var_0 == 0 )
            var_0 = 900;

        var_1 = getdvarint( "scr_" + scripts\mp\utility\game::getgametype() + "_winlimit" );

        if ( var_1 > 0 )
            var_0 = var_0 * ( var_1 * 2 - 1 );

        level.lootchopper_postmodifydamage = newhitlocs() / 60 * ( var_0 / 60 );
    }

    return level.lootchopper_postmodifydamage;
}
