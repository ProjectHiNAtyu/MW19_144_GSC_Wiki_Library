// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

superdeadsilence_beginsuper()
{
    scripts\mp\utility\perk::giveperk( "specialty_quieter" );
    scripts\mp\utility\perk::giveperk( "specialty_no_battle_chatter" );

    if ( !scripts\mp\utility\game::isanymlgmatch() )
        scripts\mp\utility\perk::giveperk( "specialty_lightweight" );

    self.deadsilencekills = 0;
    self playlocalsound( "deadsilence_start" );
    superdeadsilence_updateuistate( 0 );
    thread applyfovpresentation();
    thread _id_12AD2();
    return 1;
}

superdeadsilence_endsuper( var_0 )
{
    scripts\mp\utility\perk::removeperk( "specialty_quieter" );
    scripts\mp\utility\perk::removeperk( "specialty_no_battle_chatter" );

    if ( !scripts\mp\utility\game::isanymlgmatch() )
        scripts\mp\utility\perk::removeperk( "specialty_lightweight" );

    scripts\cp\helicopter\chopper_boss::unlink_on_ai_death( "super_deadsilence", self.deadsilencekills );

    if ( scripts\mp\utility\game::getgametype() != "infect" )
        scripts\mp\analyticslog::logevent_fieldupgradeexpired( self, level.superglobals.staticsuperdata["super_deadsilence"].id, self.deadsilencekills, istrue( var_0 ) );

    thread superdeadsilence_endhudsequence();

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "br", "superSlotCleanUp" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "br", "superSlotCleanUp" ) ]]( self );

    return 0;
}

superdeadsilence_onkill()
{
    if ( scripts\mp\utility\game::getgametype() != "infect" )
    {
        scripts\mp\utility\stats::incpersstat( "deadSilenceKills", 1 );
        scripts\mp\supers::combatrecordsuperkill( "super_deadsilence" );
        self.deadsilencekills++;
        var_0 = scripts\mp\supers::mp_speedball_check_trigger_pos( "super_deadsilence" );

        if ( self.deadsilencekills > var_0 )
        {
            var_1 = self.deadsilencekills - var_0;
            scripts\mp\supers::force_kill_off_other_ai( "super_deadsilence", var_1 );
        }
    }

    self playlocalsound( "deadsilence_start" );
    superdeadsilence_updateuistate( 1 );
    scripts\mp\supers::resetsuperusepercent();
    thread applyfovpresentation();
}

superdeadsilence_endhudsequence()
{
    self endon( "disconnect" );
    superdeadsilence_updateuistate( 2 );
    wait 1;
    superdeadsilence_updateuistate( -1 );
}

superdeadsilence_updateuistate( var_0 )
{
    self.deadsilenceuistate = var_0;
    self setclientomnvar( "ui_deadsilence_overlay", var_0 );
}

applyfovpresentation()
{
    self endon( "death_or_disconnect" );
    self notify( "applyFOVPresentation" );
    self endon( "applyFOVPresentation" );
    self lerpfovbypreset( "zombiedefault" );
    var_0 = self.super.staticdata.usetime;
    var_1 = var_0 - 2;
    scripts\engine\utility::_id_13409( var_1, "super_use_finished" );
    self lerpfovbypreset( "default_2seconds" );
    self playlocalsound( "deadsilence_end" );
}

_id_12AD2()
{
    self endon( "death_or_disconnect" );
    self endon( "super_use_finished" );
    self notify( "superDeadsilence_watchForGameEnded" );
    self endon( "superDeadsilence_watchForGameEnded" );
    level scripts\engine\utility::_id_133EF( "game_ended", "prematch_cleanup" );
    thread scripts\mp\supers::superusefinished();
}
