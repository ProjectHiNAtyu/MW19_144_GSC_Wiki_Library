// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init( var_0, var_1 )
{
    var_2 = scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) && [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]() == "br";

    if ( var_2 )
        var_3 = nuke_vault_alarm_on( var_1 );
    else
        var_3 = 180;

    if ( !isdefined( level.magic_shield_fake ) )
    {
        if ( var_2 )
            level.magic_shield_fake = getdvarfloat( "scr_br_gasMask_resist", 0 );
        else
            level.magic_shield_fake = 0.2;
    }

    self.gasmaskhealth = var_3;
    self.make_all_doors_solid = var_3;
    self.make_chair_ai_spawner = var_1;
    var_4 = 2;

    if ( risktokencountroll( var_1 ) )
        var_4 = 3;

    if ( isdefined( var_0 ) )
        self.gasmaskhealth = var_0;

    if ( var_2 )
        level.make_airlock_interactions_usable = self.gasmaskhealth / 6;

    level.make_all_doors_solid = var_3;
    self setclientomnvar( "ui_head_equip_class", var_4 );
    self setclientomnvar( "ui_gasmask_damage", self.gasmaskhealth / var_3 );
}

risktokencountroll( var_0 )
{
    return isdefined( var_0 ) && var_0 == "brloot_equip_gasmask_durable";
}

nuke_vault_alarm_on( var_0 )
{
    if ( risktokencountroll( var_0 ) )
        return level.br_pickups.counts["brloot_equip_gasmask_durable"];
    else
        return level.br_pickups.counts["brloot_equip_gasmask"];
}

processdamage( var_0 )
{
    var_1 = scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) && [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]() == "br";
    var_2 = self.gasmaskhealth / self.make_all_doors_solid;
    self.gasmaskhealth = self.gasmaskhealth - var_0;
    self.gasmaskhealth = max( 0, self.gasmaskhealth );

    if ( var_1 )
        var_3 = ( self.gasmaskhealth + 1 ) / self.make_all_doors_solid;
    else
        var_3 = self.gasmaskhealth / self.make_all_doors_solid;

    self setclientomnvar( "ui_gasmask_damage", var_3 );

    if ( self.gasmaskhealth <= 0 )
    {
        if ( var_1 && scripts\cp_mp\utility\script_utility::issharedfuncdefined( "gasmask", "breakGasMaskBR" ) )
            self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "gasmask", "breakGasMaskBR" ) ]]();
        else
            breakgasmask();
    }
    else if ( var_1 )
    {
        var_4 = floor( var_2 * 6 + 0.5 );
        var_5 = floor( var_3 * 6 + 0.5 );

        if ( var_4 > var_5 )
            self playsoundtoplayer( "br_gas_mask_crack_plr", self );
    }

    if ( !isdefined( self.gasdamagebuffer ) )
        self.gasdamagebuffer = 0;

    self.gasdamagebuffer = self.gasdamagebuffer + var_0 * level.magic_shield_fake;
    var_6 = floor( self.gasdamagebuffer );

    if ( var_6 >= 1 )
    {
        self dodamage( var_6, self.origin, self, undefined, "MOD_TRIGGER_HURT" );
        self.gasdamagebuffer = self.gasdamagebuffer - var_6;
    }
}

heli_activate_instruct( var_0, var_1 )
{
    var_2 = scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) && [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]() == "br";

    if ( !var_2 )
        return 0;

    if ( !isdefined( self.make_all_doors_solid ) )
        self.make_all_doors_solid = nuke_vault_alarm_on( self.make_chair_ai_spawner );

    var_3 = var_0 / self.make_all_doors_solid;
    var_4 = var_1 / self.make_all_doors_solid;
    var_5 = floor( var_3 * 6 + 0.5 );
    var_6 = floor( var_4 * 6 + 0.5 );
    return var_5 != var_6;
}

equipgasmask()
{
    self endon( "death_or_disconnect" );
    self playsoundtoplayer( "br_gas_mask_on_plr", self );
    var_0 = getcompleteweaponname( "none" );
    var_1 = self getcurrentweapon();

    if ( !isnullweapon( var_1, var_0 ) )
        self forceplaygestureviewmodel( "ges_visor_down" );

    self.gasmaskswapinprogress = 1;
    wait 0.338;
    self.gasmaskswapinprogress = 0;
    self.gasmaskequipped = 1;
    scripts\cp_mp\killstreaks\white_phosphorus::enableloopingcoughaudiosupression();

    if ( istrue( self.operatorcustomization.playerstarttimetracking ) )
        self attach( "hat_gasmask" );

    createoverlay();

    if ( isdefined( self.operatorcustomization.gender ) && self.operatorcustomization.gender == "female" )
        self _meth_87A8( "gasmask_female" );
    else
        self _meth_87A8( "gasmask_male" );
}

removegasmask()
{
    self endon( "death_or_disconnect" );

    if ( !istrue( self.gasmaskequipped ) )
        return;

    self playsoundtoplayer( "br_gas_mask_off_plr", self );
    var_0 = getcompleteweaponname( "none" );
    var_1 = self getcurrentweapon();

    if ( !isnullweapon( var_1, var_0 ) )
        self forceplaygestureviewmodel( "ges_visor_up" );

    self.gasmaskswapinprogress = 1;
    wait 0.521;
    self.gasmaskswapinprogress = 0;
    self.gasmaskequipped = 0;
    scripts\cp_mp\killstreaks\white_phosphorus::disableloopingcoughaudiosupression();

    if ( istrue( self.operatorcustomization.playerstarttimetracking ) )
        self detach( "hat_gasmask" );

    destroyoverlay();

    if ( isdefined( self.operatorcustomization.gender ) && self.operatorcustomization.gender == "female" )
        self _meth_87A8( "female" );
    else
        self _meth_87A8( "" );
}

breakgasmask()
{
    if ( !istrue( self.gasmaskequipped ) )
        return;

    self.gasmaskequipped = 0;
    self playsoundtoplayer( "br_gas_mask_crack_plr", self );

    if ( istrue( self.operatorcustomization.playerstarttimetracking ) )
        self detach( "hat_gasmask" );

    destroyoverlay();

    if ( isdefined( self.operatorcustomization.gender ) && self.operatorcustomization.gender == "female" )
        self _meth_87A8( "female" );
    else
        self _meth_87A8( "" );

    self playsoundtoplayer( "br_gas_mask_depleted_plr", self );
    self setclientomnvar( "ui_head_equip_class", 0 );
    self setclientomnvar( "ui_gasmask_damage", 0 );
}

createoverlay( var_0, var_1 )
{
    self.gasmaskoverlay = newclienthudelem( self );
    self.gasmaskoverlay.x = 0;
    self.gasmaskoverlay.y = 0;
    self.gasmaskoverlay.alignx = "left";
    self.gasmaskoverlay.aligny = "top";
    self.gasmaskoverlay.horzalign = "fullscreen";
    self.gasmaskoverlay.vertalign = "fullscreen";
    self.gasmaskoverlay setshader( "gasmask_overlay_delta2", 640, 480 );
    self.gasmaskoverlay.sort = -10;
    self.gasmaskoverlay.archived = 1;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) )
    {
        if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]() == "br" )
        {
            self.gasmaskoverlay.alpha = 0.0;

            if ( isdefined( var_0 ) )
            {
                if ( isdefined( var_1 ) )
                    wait( var_1 );

                if ( isdefined( self.gasmaskoverlay ) )
                    self.gasmaskoverlay fadeovertime( var_0 );
            }
        }
    }

    if ( isdefined( self.gasmaskoverlay ) )
    {
        self.gasmaskoverlay.alpha = 1.0;
        self.gasmaskoverlay.lowresbackground = 1;
    }
}

_id_1235C()
{
    if ( isdefined( self.gasmaskoverlay ) )
        self.gasmaskoverlay setshader( "gasmask_overlay_delta2_broken", 640, 480 );
}

kickafkplayer( var_0 )
{
    self.gasmaskoverlay.alpha = 1.0;
    self.gasmaskoverlay fadeovertime( var_0 );
    self.gasmaskoverlay.alpha = 0.0;
}

destroyoverlay( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );

    if ( !isdefined( self.gasmaskoverlay ) )
        return;

    if ( isdefined( var_0 ) )
    {
        if ( isdefined( var_1 ) )
            wait( var_1 );

        if ( isdefined( self.gasmaskoverlay ) )
        {
            kickafkplayer( var_0 );
            wait( var_0 );
        }
    }

    if ( isdefined( self.gasmaskoverlay ) )
    {
        self.gasmaskoverlay destroy();
        self.gasmaskoverlay = undefined;
    }
}

hasgasmask( var_0 )
{
    return isdefined( var_0.gasmaskhealth );
}
