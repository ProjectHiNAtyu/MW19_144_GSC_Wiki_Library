// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

calloutmarkerpingvo_play()
{
    if ( isdefined( level.canlock ) )
        return;

    level.canlock = 1;
    camper_damage_thread( 0, ::cam, ::camera_character_gamebattles, ::camera_character_preview_select );
    camper_damage_thread( 1, ::camera_character_preview_select_detail, ::camera_loadout_showcase_armory, ::camera_loadout_showcase_preview_barrel_alt2 );
    camper_damage_thread( 2, ::camera_loadout_showcase_preview_small_sticker, ::camera_loadout_showcase_preview_sticker, ::camera_loadout_showcase_preview_sticker_alt1 );
    camper_damage_thread( 4, ::camera_loadout_showcase_preview_large_sticker_alt2, ::camera_loadout_showcase_preview_large_sticker_alt3, ::camera_loadout_showcase_preview_large_stock_alt1 );
    camper_damage_thread( 5, ::camera_loadout_showcase_preview_charm_alt4, ::camera_loadout_showcase_preview_large_sticker, ::camera_loadout_showcase_preview_large_sticker_alt1 );
}

camper_damage_thread( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( level.canlogchangeweapon ) )
        level.canlogchangeweapon = [];

    var_4 = spawnstruct();
    var_4.unfreezeplayercontrols = var_1;
    var_4.uniquelootitemlookup = var_2;
    var_4.update_future_stations_track_timers = var_3;
    level.canlogchangeweapon[var_0] = var_4;
}

camera_loadout_showcase_preview_sticker_alt2( var_0, var_1 )
{
    var_2 = level.canlogchangeweapon[var_0];

    if ( isdefined( var_2.update_future_stations_track_timers ) )
        return self [[ var_2.update_future_stations_track_timers ]]( var_1 );
}

callouts( var_0, var_1 )
{
    var_2 = level.canlogchangeweapon[var_0];

    if ( isdefined( var_2.unfreezeplayercontrols ) )
        return self [[ var_2.unfreezeplayercontrols ]]( var_1 );
}

callprecisionairstrikeonlocation( var_0, var_1 )
{
    var_2 = level.canlogchangeweapon[var_0];

    if ( isdefined( var_2.uniquelootitemlookup ) )
        return self [[ var_2.uniquelootitemlookup ]]( var_1 );
}

calloutmarkerpingvohandlerpool( var_0, var_1 )
{
    if ( var_0 != "equip_binoculars" )
        return;

    calloutmarkerpingvo_play();
    thread cancelallmissions();
}

camera_loadout_showcase_preview_sticker_alt3( var_0, var_1 )
{
    if ( var_0 != "equip_binoculars" )
        return;

    self notify( "binoculars_take" );
}

can_use_super_func( var_0 )
{
    waitframe();

    if ( isdefined( var_0 ) )
        var_0 delete();
}

cancelallmissions()
{
    self endon( "disconnect" );
    self notify( "binoculars_watchForADS" );
    self endon( "binoculars_watchForADS" );
    var_0 = 0;

    for (;;)
    {
        var_1 = spawnstruct();
        childthread cancelled( var_1 );
        childthread cancelupcomingpublicevents( var_1 );
        childthread cankeepusingbomb( var_1 );
        childthread candles( var_1 );
        childthread cancelgivequest( var_1 );
        childthread cancelchecklinktotrain( var_1 );
        self waittill( "binoculars_watchRaceStart" );
        waittillframeend;
        var_2 = istrue( var_1.death );
        var_3 = istrue( var_1._id_12B62 );
        var_4 = istrue( var_1.are_equal );
        var_5 = istrue( var_1.are_all_players_in_region ) || istrue( var_1.laststand );

        if ( var_2 || var_3 )
        {
            self notify( "binoculars_watchRaceEnd" );
            calloutmarkerpingvo_getcalloutaliasstringloot();
            return;
        }

        if ( var_4 && !var_0 )
        {
            var_0 = 1;
            thread can_activate_battle_station();
        }
        else if ( var_5 && var_0 )
        {
            var_0 = 0;
            calloutmarkerpingvo_getcalloutaliasstringloot();
        }

        self notify( "binoculars_watchRaceEnd" );
    }
}

cancelled( var_0 )
{
    self endon( "binoculars_watchRaceEnd" );
    self waittill( "death" );
    var_0.death = 1;
    self notify( "binoculars_watchRaceStart" );
}

cancelupcomingpublicevents( var_0 )
{
    self endon( "binoculars_watchRaceEnd" );
    self waittill( "last_stand_start" );
    var_0.laststand = 1;
    self notify( "binoculars_watchRaceStart" );
}

cankeepusingbomb( var_0 )
{
    self endon( "binoculars_watchRaceEnd" );
    self waittill( "binoculars_take" );
    var_0._id_12B62 = 1;
    self notify( "binoculars_watchRaceStart" );
}

candles( var_0 )
{
    self endon( "binoculars_watchRaceEnd" );

    for (;;)
    {
        if ( !isdefined( self.offhandweapon ) || getweaponbasename( self.offhandweapon ) != "offhand_spotter_scope_mp" )
            break;

        waitframe();
    }

    var_0.are_all_players_in_region = 1;
    self notify( "binoculars_watchRaceStart" );
}

cancelgivequest( var_0 )
{
    self endon( "binoculars_watchRaceEnd" );

    for (;;)
    {
        self waittill( "offhand_ads_on", var_1 );

        if ( getweaponbasename( var_1 ) == "offhand_spotter_scope_mp" )
            break;
    }

    var_0.are_equal = 1;
    self notify( "binoculars_watchRaceStart" );
}

cancelchecklinktotrain( var_0 )
{
    self endon( "binoculars_watchRaceEnd" );

    for (;;)
    {
        self waittill( "offhand_ads_off", var_1 );

        if ( !isdefined( var_1 ) || getweaponbasename( var_1 ) == "offhand_spotter_scope_mp" )
            break;
    }

    var_0.are_all_players_in_region = 1;
    self notify( "binoculars_watchRaceStart" );
}

calloutmarkerpingvo_getcalloutaliasstringloot()
{
    self notify( "binoculars_ads_off" );

    if ( isdefined( self.canopendoor ) )
    {
        self.canopendoor.are_equal = undefined;

        if ( isdefined( self.canopendoor.targetmarkergroup ) )
        {
            scripts\cp_mp\targetmarkergroups::targetmarkergroup_off( self.canopendoor.targetmarkergroup );
            self.canopendoor.targetmarkergroup = undefined;
        }

        calloutmarkerpingvo_getcalloutaliasstringentity();

        foreach ( var_2, var_1 in self.canopendoor._id_12BA6 )
        {
            if ( !isdefined( var_1 ) )
                continue;

            var_1.player_onspawn = undefined;

            if ( isdefined( var_1.headicon ) )
                can_spawn_heli_group( var_1, self );
        }
    }
}

can_activate_battle_station()
{
    self endon( "disconnect" );
    self endon( "binoculars_ads_off" );
    self notify( "binoculars_ads_on" );

    if ( !isdefined( self.canopendoor ) )
    {
        self.canopendoor = spawnstruct();
        self.canopendoor._id_12BA6 = [];
    }

    self.canopendoor.are_equal = 1;
    self.canopendoor.targetmarkergroup = scripts\cp_mp\targetmarkergroups::targetmarkergroup_on( "rcdmarker", self, undefined, self, 0, 0, 0 );
    thread camoname();
}

calloutmarkerpingvo_playpredictivepingacknowledged()
{
    return isdefined( self.canopendoor ) && istrue( self.canopendoor.are_equal );
}

camoname()
{
    self endon( "disconnect" );
    self notify( "binoculars_processTargetData" );
    self endon( "binoculars_processTargetData" );
    self.canopendoor.spawn_tac_rovers = -1;
    self.canopendoor.spawn_spawners_multi = -1;

    for (;;)
    {
        var_0 = level.characters;
        var_1 = getdvarfloat( "scr_binoculars_projection_distance", 72.0 );
        self.canopendoor.spawn_speed = [];
        self.canopendoor.spawn_soldiers_in_convoy_truck = [];
        self.canopendoor.maxrange = calloutmarkerpingvo_getcalloutaliasstringworld();
        self.canopendoor.start_persistent_turbulence = self.canopendoor.maxrange * self.canopendoor.maxrange;
        self.canopendoor.gametypeweaponxpmodifier = cos( calloutmarkerpingvo_getcalloutaliasstringvehicle() );
        self.canopendoor._id_11BC3 = var_1 * var_1;
        self.canopendoor.markingtarget = 0;
        self.canopendoor.squadlink_outline_id = 0;
        self.canopendoor.squadlink_wid = 0;
        var_2 = 0;

        foreach ( var_4 in var_0 )
        {
            var_5 = 0;
            var_6 = self.canopendoor._id_12BA6[var_4 getentitynumber()];

            if ( isdefined( var_6 ) )
                var_5 = var_6.state;

            var_7 = camera_loadout_showcase_preview_sticker_alt2( var_5, var_4 );

            if ( var_7 != var_5 )
            {
                callprecisionairstrikeonlocation( var_5, var_4 );
                callouts( var_7, var_4 );
            }

            if ( !var_2 && var_7 != 0 )
                var_2 = 1;
        }

        if ( calloutmarkerpingvo_playpredictivepingacknowledged() )
        {
            camera_loadout_showcase_preview_sticker_alt4();
            can_trex_apply_to_player();
        }
        else if ( !var_2 )
        {
            self.canopendoor = undefined;
            break;
        }

        waitframe();
    }
}

camoset( var_0 )
{
    var_1 = scripts\engine\trace::create_contents( 0, 1, 0, 1, 1, 1, 0, 1 );
    var_2 = [ var_0.origin ];

    if ( isplayer( var_0 ) )
    {
        var_3 = var_0 scripts\mp\utility\player::oneoffuavsweeps();
        var_4 = var_0 scripts\mp\utility\player::getstancecenter();
        var_2 = [ var_3, var_4, var_0.origin ];
    }
    else if ( isagent( var_0 ) )
        var_2 = [ var_0.origin + ( 0, 0, 1 ) ];

    var_5 = [ self, var_0 ];
    var_6 = var_0 scripts\cp_mp\utility\player_utility::getvehicle();

    if ( isdefined( var_6 ) )
    {
        var_5[var_5.size] = var_6;
        var_7 = var_6 getlinkedchildren( 1 );

        foreach ( var_9 in var_7 )
            var_5[var_5.size] = var_6;
    }

    var_11 = 0;

    foreach ( var_13 in var_2 )
    {
        if ( !scripts\engine\trace::ray_trace_passed( self getvieworigin(), var_13, var_5, var_1 ) )
            continue;

        var_11 = 1;
        break;
    }

    var_15 = self.canopendoor._id_12BA6[var_0 getentitynumber()];
    var_15.spawn_soldiers = gettime();
    var_15.spawn_snipers_assault3 = var_11;
}

cameraentlinktag( var_0 )
{
    if ( !self.canopendoor.spawn_soldiers_in_convoy_truck.size )
        return 0;

    var_1 = 0;
    var_2 = undefined;

    foreach ( var_5, var_4 in self.canopendoor.spawn_soldiers_in_convoy_truck )
    {
        if ( var_5 >= self.canopendoor.spawn_spawners_multi )
        {
            camoset( var_4 );
            self.canopendoor.spawn_spawners_multi = var_5 + 1;
            var_1++;

            if ( !isdefined( var_2 ) )
                var_2 = var_5;

            if ( var_1 >= var_0 )
                break;
        }
    }

    if ( var_1 < var_0 )
    {
        self.canopendoor.spawn_spawners_multi = -1;

        foreach ( var_5, var_4 in self.canopendoor.spawn_soldiers_in_convoy_truck )
        {
            if ( isdefined( var_2 ) && var_2 == var_5 )
                break;

            if ( var_5 >= self.canopendoor.spawn_spawners_multi )
            {
                camoset( var_4 );
                self.canopendoor.spawn_spawners_multi = var_5 + 1;
                var_1++;

                if ( var_1 >= var_0 )
                    break;
            }
        }
    }

    return var_1;
}

cameraentmoving( var_0 )
{
    if ( !self.canopendoor.spawn_speed.size )
        return 0;

    var_1 = 0;
    var_2 = undefined;

    foreach ( var_5, var_4 in self.canopendoor.spawn_speed )
    {
        if ( var_5 >= self.canopendoor.spawn_tac_rovers )
        {
            camoset( var_4 );
            self.canopendoor.spawn_tac_rovers = var_5 + 1;
            var_1++;

            if ( !isdefined( var_2 ) )
                var_2 = var_5;

            if ( var_1 >= var_0 )
                break;
        }
    }

    if ( var_1 < var_0 )
    {
        self.canopendoor.spawn_tac_rovers = -1;

        foreach ( var_5, var_4 in self.canopendoor.spawn_speed )
        {
            if ( isdefined( var_2 ) && var_2 == var_5 )
                break;

            if ( var_5 >= self.canopendoor.spawn_tac_rovers )
            {
                camoset( var_4 );
                self.canopendoor.spawn_tac_rovers = var_5 + 1;
                var_1++;

                if ( var_1 >= var_0 )
                    break;
            }
        }
    }

    return var_1;
}

camera_loadout_showcase_preview_sticker_alt4()
{
    var_0 = 3;
    var_1 = cameraentlinktag( 1 );
    var_0 = var_0 - var_1;
    var_1 = cameraentmoving( var_0 );
}

can_be_interrupted( var_0, var_1 )
{
    var_2 = self.canopendoor._id_12BA6[var_0 getentitynumber()];

    if ( !isdefined( var_2 ) )
    {
        if ( var_1 == 0 )
            return;

        var_2 = spawnstruct();
        self.canopendoor._id_12BA6[var_0 getentitynumber()] = var_2;
    }

    var_2.state = var_1;
}

calloutmarkerpingvo_handleraddnewelement( var_0 )
{
    return isplayer( var_0 ) && var_0 scripts\mp\utility\perk::_hasperk( "specialty_noscopeoutline" );
}

can_man_turret( var_0, var_1 )
{
    var_2 = self.canopendoor._id_12BA6[var_0 getentitynumber()];

    if ( isdefined( var_2 ) )
        var_2.player_onspawn = 1;

    if ( !isdefined( self.canopendoor.targetmarkergroup ) )
        return;

    scripts\cp_mp\targetmarkergroups::targetmarkergroup_markentity( var_0, self.canopendoor.targetmarkergroup, 0 );
    var_3 = calloutmarkerpingvo_handleraddnewelement( var_0 );

    if ( var_3 )
        can_combat_action_be_interrupted( var_0, 3 );
    else if ( var_1 )
        can_combat_action_be_interrupted( var_0, 2 );
    else
        can_combat_action_be_interrupted( var_0, 1 );
}

can_support_mindia8_min_spawn( var_0, var_1 )
{
    if ( !isdefined( self.canopendoor.targetmarkergroup ) )
        return;

    var_2 = calloutmarkerpingvo_handleraddnewelement( var_0 );

    if ( var_2 )
        can_combat_action_be_interrupted( var_0, 3 );
    else if ( var_1 )
        can_combat_action_be_interrupted( var_0, 2 );
    else
        can_combat_action_be_interrupted( var_0, 1 );
}

calloutmarkerpingvo_handlerdoescontainpoolelement( var_0 )
{
    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];

    if ( isdefined( var_1 ) )
        var_1.player_onspawn = undefined;

    if ( !isdefined( self.canopendoor.targetmarkergroup ) )
        return;

    scripts\cp_mp\targetmarkergroups::targetmarkergroup_unmarkentity( var_0, var_0 getentitynumber(), self.canopendoor.targetmarkergroup );
}

can_combat_action_be_interrupted( var_0, var_1 )
{
    var_2 = ( var_1 >> 0 ) % 2 == 1;
    var_3 = ( var_1 >> 1 ) % 2 == 1;
    targetmarkergroupsetextrastate( self.canopendoor.targetmarkergroup, var_0, var_2 );
    addclienttotargetmarkergroupmask( self.canopendoor.targetmarkergroup, var_0, var_3 );
}

calloutmarkerping_watchwhenmissioncompletes( var_0 )
{
    var_1 = "hud_icon_head_marked";
    var_2 = 8;
    var_3 = 1;
    var_4 = 0;
    var_5 = 500;
    var_6 = self.canopendoor._id_12BA6[var_0 getentitynumber()];
    var_6.headicon = var_0 scripts\cp_mp\entityheadicons::setheadicon_singleimage( [], var_1, var_2, var_3, var_4, var_5, undefined, 1, 1 );
    thread calloutmarkerpingvo_debouncegarbagecollector( var_0 );
}

can_spawn_extras( var_0 )
{
    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];

    if ( !isdefined( var_1 ) || !isdefined( var_1.headicon ) )
        return;

    var_2 = scripts\mp\utility\teams::getteamdata( self.team, "players" );

    foreach ( var_4 in var_2 )
        can_spawn_heli_group( var_1, var_4 );
}

can_spawn_heli_group( var_0, var_1 )
{
    var_2 = 1;

    if ( var_1 == self && calloutmarkerpingvo_playpredictivepingacknowledged() && istrue( var_0.player_onspawn ) )
        var_2 = 0;

    if ( var_2 )
        scripts\cp_mp\entityheadicons::_id_12384( var_0.headicon, var_1 );
    else
        scripts\cp_mp\entityheadicons::_id_12385( var_0.headicon, var_1 );
}

calloutmarkerpingvo_debouncegarbagecollector( var_0 )
{
    var_1 = var_0 getentitynumber();
    self endon( "disconnect" );
    self endon( "removeHeadIcon_" + var_1 );
    var_0 waittill( "disconnect" );

    if ( isdefined( self.canopendoor ) && isdefined( self.canopendoor._id_12BA6 ) )
    {
        var_2 = self.canopendoor._id_12BA6[var_1];

        if ( isdefined( var_2 ) && isdefined( var_2.headicon ) )
            scripts\cp_mp\entityheadicons::setheadicon_deleteicon( var_2.headicon );
    }
}

camsetorbit( var_0 )
{
    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];
    scripts\cp_mp\entityheadicons::setheadicon_deleteicon( var_1.headicon );
    self notify( "removeHeadIcon_" + var_0 getentitynumber() );
}

cam( var_0 )
{
    calloutmarkerpingvo_handlerdoescontainpoolelement( var_0 );
    can_be_interrupted( var_0, 0 );
}

camera_character_gamebattles( var_0 )
{

}

camera_character_preview_select( var_0 )
{
    var_1 = can_path_to_target( var_0 );

    if ( var_1 )
        return 1;

    return 0;
}

camera_character_preview_select_detail( var_0 )
{
    calloutmarkerpingvo_handlerdoescontainpoolelement( var_0 );
    can_be_interrupted( var_0, 1 );
}

camera_loadout_showcase_armory( var_0 )
{

}

camera_loadout_showcase_preview_barrel_alt2( var_0 )
{
    var_1 = can_path_to_target( var_0 );

    if ( !var_1 )
        return 0;

    can_station_be_selected( var_0 );
    calloutmarkerping_watchwhenobjectivestartsprogress( var_0 );

    if ( calloutmarkerpingvo_calculatesounddebouncelength( var_0 ) )
        return 2;

    return 1;
}

camera_loadout_showcase_preview_small_sticker( var_0 )
{
    can_man_turret( var_0, 0 );
    can_be_interrupted( var_0, 2 );
}

camera_loadout_showcase_preview_sticker( var_0 )
{

}

camera_loadout_showcase_preview_sticker_alt1( var_0 )
{
    var_1 = can_path_to_target( var_0 );

    if ( !var_1 )
        return 0;

    can_station_be_selected( var_0 );
    calloutmarkerping_watchwhenobjectivestartsprogress( var_0 );

    if ( !calloutmarkerpingvo_calculatesounddebouncelength( var_0 ) )
        return 1;

    can_support_mindia8_min_spawn( var_0, 0 );

    if ( calloutmarkerpingvo_playpredictivepingcleared( var_0 ) )
    {
        if ( calloutmarkerpingvo_handleraddnewelement( var_0 ) )
        {
            self.canopendoor.squadlink_outline_id = 1;
            return 2;
        }

        return 4;
    }

    return 2;
}

camera_loadout_showcase_preview_large_sticker_alt2( var_0 )
{
    can_be_shot_again( var_0 );
    can_be_interrupted( var_0, 4 );
    self playlocalsound( "binoculars_marking" );
}

camera_loadout_showcase_preview_large_sticker_alt3( var_0 )
{
    calloutmarkerpingvo_getaffirmaliasstringloot( var_0 );
    self stoplocalsound( "binoculars_marking" );
}

camera_loadout_showcase_preview_large_stock_alt1( var_0 )
{
    var_1 = can_path_to_target( var_0 );

    if ( !var_1 )
        return 0;

    can_station_be_selected( var_0 );
    calloutmarkerping_watchwhenobjectivestartsprogress( var_0 );

    if ( !calloutmarkerpingvo_calculatesounddebouncelength( var_0 ) )
        return 1;

    if ( !calloutmarkerpingvo_playpredictivepingcleared( var_0 ) )
        return 2;

    if ( calloutmarkerpingvo_createcalloutbattlechatter( var_0 ) )
        return 5;

    self.canopendoor.markingtarget = 1;

    if ( self.canopendoor.squadlink_wid == 0 )
        self.canopendoor.squadlink_wid = calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d( var_0 );
    else
        self.canopendoor.squadlink_wid = int( min( self.canopendoor.squadlink_wid, calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d( var_0 ) ) );

    return 4;
}

camera_loadout_showcase_preview_charm_alt4( var_0 )
{
    calloutmarkerping_watchwhenmissioncompletes( var_0 );
    can_spawn_extras( var_0 );
    can_man_turret( var_0, 1 );
    can_be_seen_by_any_player( var_0 );
    calloutmarkerping_watchwhenobjectivedeleted( var_0 );
    can_be_interrupted( var_0, 5 );
    self playlocalsound( "binoculars_marked" );
    self stoplocalsound( "binoculars_marking" );
}

camera_loadout_showcase_preview_large_sticker( var_0 )
{
    camsetorbit( var_0 );
    calloutmarkerpingvo_doesoperatorsupportalias( var_0 );
}

camera_loadout_showcase_preview_large_sticker_alt1( var_0 )
{
    if ( !can_play_ending( var_0 ) )
        return 0;

    can_station_be_selected( var_0 );
    calloutmarkerping_watchwhenobjectivestartsprogress( var_0 );

    if ( calloutmarkerpingvo_playpredictivepingacknowledged() && calloutmarkerpingvo_calculatesounddebouncelength( var_0 ) && calloutmarkerpingvo_playpredictivepingcleared( var_0 ) )
        can_be_seen_by_any_player( var_0 );
    else if ( calloutmarkerpingvo_canplaywithspamavoidance( var_0 ) )
        return 0;

    can_spawn_extras( var_0 );
    can_support_mindia8_min_spawn( var_0, 1 );
    return 5;
}

can_path_to_target( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !calloutmarkerpingvo_playpredictivepingacknowledged() )
        return 0;

    if ( isplayer( var_0 ) && !scripts\mp\utility\player::isreallyalive( var_0 ) )
        return 0;

    if ( isagent( var_0 ) && !isalive( var_0 ) )
        return 0;

    if ( level.teambased )
    {
        if ( isdefined( var_0.team ) && var_0.team == self.team )
            return 0;
    }
    else if ( var_0 == self )
        return 0;

    if ( !calloutmarkerpingvo_playpredictivepingadded( var_0 ) )
        return 0;

    if ( !calloutmarkerpingvo_playpredictivepingacknowledgedcancel( var_0 ) )
        return 0;

    return 1;
}

can_play_ending( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( isplayer( var_0 ) && !scripts\mp\utility\player::isreallyalive( var_0 ) )
        return 0;

    if ( isagent( var_0 ) && !isalive( var_0 ) )
        return 0;

    if ( level.teambased )
    {
        if ( isdefined( var_0.team ) && var_0.team == self.team )
            return 0;
    }
    else if ( var_0 == self )
        return 0;

    return 1;
}

calloutmarkerpingvo_getcalloutaliasstringworld()
{
    var_0 = self playergetzoomlevelindex();

    if ( var_0 > 0 )
        return getdvarint( "scr_binoculars_max_range_zoomed", 30000 );
    else
        return getdvarint( "scr_binoculars_max_range_unzoomed", 15000 );
}

calloutmarkerpingvo_getcalloutaliasstringvehicle()
{
    var_0 = self playergetzoomfov();
    return var_0;
}

calloutmarkerpingvo_playpredictivepingadded( var_0 )
{
    return distancesquared( self.origin, var_0.origin ) < self.canopendoor.start_persistent_turbulence;
}

calloutmarkerpingvo_playpredictivepingacknowledgedcancel( var_0 )
{
    return scripts\engine\utility::within_fov( self.origin, self getplayerangles(), var_0.origin, self.canopendoor.gametypeweaponxpmodifier );
}

calloutmarkerpingvo_playpredictivepinginventoryrequest( var_0 )
{
    var_1 = self getvieworigin();
    var_2 = var_1 + anglestoforward( self getplayerangles() ) * self.canopendoor.maxrange;
    var_3 = [ var_0.origin ];

    if ( isplayer( var_0 ) )
    {
        var_4 = var_0 scripts\mp\utility\player::oneoffuavsweeps();
        var_5 = var_0 scripts\mp\utility\player::getstancecenter();
        var_3 = [ var_4, var_5, var_0.origin ];
    }
    else if ( isagent( var_0 ) )
        var_3 = [ var_0.origin + ( 0, 0, 1 ) ];

    foreach ( var_7 in var_3 )
    {
        var_8 = lengthsquared( vectorfromlinetopoint( var_1, var_2, var_7 ) );

        if ( var_8 < self.canopendoor._id_11BC3 )
            return 1;
    }

    return 0;
}

can_station_be_selected( var_0 )
{
    var_1 = calloutmarkerpingvo_playpredictivepinginventoryrequest( var_0 );
    var_2 = self.canopendoor._id_12BA6[var_0 getentitynumber()];

    if ( var_1 )
        var_2._id_135E8 = 1;
    else
        var_2._id_135E8 = undefined;
}

calloutmarkerpingvo_playpredictivepingcleared( var_0 )
{
    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];
    return istrue( var_1._id_135E8 );
}

calloutmarkerping_watchwhenobjectivestartsprogress( var_0 )
{
    var_1 = 0;

    if ( calloutmarkerpingvo_playpredictivepingcleared( var_0 ) )
        var_1 = 1;

    if ( var_1 )
        self.canopendoor.spawn_soldiers_in_convoy_truck[var_0 getentitynumber()] = var_0;
    else
        self.canopendoor.spawn_speed[var_0 getentitynumber()] = var_0;
}

calloutmarkerpingvo_calculatesounddebouncelength( var_0 )
{
    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];

    if ( !isdefined( var_1.spawn_soldiers ) || gettime() - var_1.spawn_soldiers > 1000 )
        return 0;

    return istrue( var_1.spawn_snipers_assault3 );
}

can_be_shot_again( var_0 )
{
    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];
    var_1.vehicle_update = gettime() + calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias3d( var_0 );
}

calloutmarkerpingvo_getaffirmaliasstringloot( var_0 )
{
    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];
    var_1.vehicle_update = undefined;
}

calloutmarkerpingvo_createcalloutbattlechatter( var_0 )
{
    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];

    if ( !isdefined( var_1.vehicle_update ) )
        return 0;

    return gettime() > var_1.vehicle_update;
}

calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias3d( var_0 )
{
    var_1 = getdvarfloat( "scr_binoculars_min_pending_distance", 2500 );
    var_2 = getdvarfloat( "scr_binoculars_max_pending_distance", 5000 );

    if ( var_1 >= var_2 )
        return getdvarfloat( "scr_binoculars_min_pending_time", 700 );

    var_3 = distance( self.origin, var_0.origin );

    if ( var_3 <= var_1 )
        return getdvarfloat( "scr_binoculars_min_pending_time", 700 );
    else if ( var_3 >= 5000 )
        return getdvarfloat( "scr_binoculars_max_pending_time", 2700 );
    else
    {
        var_4 = getdvarfloat( "scr_binoculars_min_pending_time", 700 );
        var_5 = getdvarfloat( "scr_binoculars_max_pending_time", 2700 );
        var_6 = ( var_3 - var_1 ) / ( var_2 - var_1 );
        return int( scripts\engine\math::lerp( var_4, var_5, var_6 ) );
    }
}

calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d( var_0 )
{
    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];

    if ( !isdefined( var_1.vehicle_update ) )
        return gettime() + calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias3d( var_0 );

    return var_1.vehicle_update;
}

can_be_seen_by_any_player( var_0 )
{
    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];
    var_2 = getdvarint( "scr_binoculars_expire_time", 5000 );
    var_1.isvehicleindanger = gettime() + var_2;
}

calloutmarkerpingvo_doesoperatorsupportalias( var_0 )
{
    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];
    var_1.isvehicleindanger = undefined;
}

calloutmarkerpingvo_canplaywithspamavoidance( var_0 )
{
    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];

    if ( !isdefined( var_1.isvehicleindanger ) )
        return 1;

    return gettime() >= var_1.isvehicleindanger;
}

calloutmarkerping_watchwhenobjectivedeleted( var_0 )
{
    if ( !isdefined( self.squadleaderbeacon_circleradius ) )
        self.squadleaderbeacon_circleradius = [];

    var_1 = var_0 getentitynumber();
    var_2 = scripts\engine\utility::ter_op( isdefined( self.matchdatalifeindex ), self.matchdatalifeindex, 0 );

    if ( !isdefined( self.squadleaderbeacon_circleradius[var_1] ) || self.squadleaderbeacon_circleradius[var_1] > var_2 )
    {
        self.squadleaderbeacon_circleradius[var_1] = var_2;
        scripts\mp\utility\points::giveunifiedpoints( "binoculars_marked" );
    }
}

can_node_be_added( var_0 )
{
    if ( !isdefined( self.canopendoor ) || !isdefined( self.canopendoor._id_12BA6 ) )
        return 0;

    var_1 = self.canopendoor._id_12BA6[var_0 getentitynumber()];

    if ( !isdefined( var_1 ) )
        return 0;

    return var_1.state == 5;
}

calloutmarkerpingvo_getmaxsoundaliaslength( var_0, var_1 )
{
    if ( !isdefined( level.canlock ) )
        return;

    if ( !isdefined( var_0 ) || !isdefined( var_1 ) || !isdefined( var_0.team ) )
        return;

    var_2 = scripts\mp\utility\teams::getteamdata( var_0.team, "players" );

    foreach ( var_4 in var_2 )
    {
        if ( var_4 == var_0 )
            continue;

        if ( var_4 can_node_be_added( var_1 ) )
            var_4 thread scripts\mp\utility\points::giveunifiedpoints( "binoculars_assist" );
    }
}

calloutmarkerpingvo_getcalloutaliasstringentity()
{
    self setclientomnvar( "ui_binoculars_timer", 0 );
    self setclientomnvar( "ui_binoculars_state", 0 );
    self stoplocalsound( "binoculars_marking" );
}

can_killstreak_be_detected( var_0, var_1 )
{
    if ( self getclientomnvar( "ui_binoculars_state" ) == var_0 && self getclientomnvar( "ui_binoculars_timer" ) == var_1 )
        return;

    self setclientomnvar( "ui_binoculars_state", var_0 );
    self setclientomnvar( "ui_binoculars_timer", var_1 );
}

can_trex_apply_to_player()
{
    var_0 = istrue( self.canopendoor.markingtarget );

    if ( var_0 )
    {
        can_killstreak_be_detected( 1, self.canopendoor.squadlink_wid );
        return;
    }

    var_1 = istrue( self.canopendoor.squadlink_outline_id );

    if ( var_1 )
    {
        can_killstreak_be_detected( 2, 0 );
        return;
    }

    can_killstreak_be_detected( 0, 0 );
}
