// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

vehicle_occupancy_mp_init()
{
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "onEnterVehicle", ::vehicle_occupancy_mp_onentervehicle );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "onExitVehicle", ::vehicle_occupancy_mp_onexitvehicle );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "registerInstance", ::vehicle_occupancy_mp_registerinstance );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "deregisterInstance", ::vehicle_occupancy_mp_deregisterinstance );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "updateOwner", ::vehicle_occupancy_mp_updateowner );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "registerSentient", ::vehicle_occupancy_mp_registersentient );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "unregisterSentient", ::vehicle_occupancy_mp_unregistersentient );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "isSentient", ::vehicle_occupancy_mp_issentient );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "takeRiotShield", ::_id_1325F );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "giveRiotShield", ::_id_1325C );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "updateRiotShield", ::_id_13261 );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "hideCashBag", ::_id_1325D );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "showCashBag", ::_id_1325E );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_occupancy", "changedSeats", ::_id_1325B );
    scripts\mp\playeractions::registeractionset( "vehicle", [ "gesture", "killstreaks", "supers", "cp_munitions" ] );
    scripts\mp\playeractions::registeractionset( "vehicle_passenger", [ "gesture", "supers", "cp_munitions" ] );
    level.vehicle._id_132B8 = getdvarint( "scr_vehicle_lights", 1 );
}

vehicle_occupancy_mp_onentervehicle( var_0, var_1, var_2, var_3 )
{
    var_2 scripts\mp\utility\perk::giveperk( "specialty_ghost" );
    var_2 scripts\mp\utility\perk::giveperk( "specialty_tracker_jammer" );
    var_4 = level.gametype == "br";

    if ( !var_4 || scripts\cp_mp\vehicles\vehicle_occupancy::_id_1324E( var_0, var_1 ) )
        var_2 scripts\mp\playeractions::allowactionset( "vehicle", 0 );
    else if ( var_4 )
        var_2 scripts\mp\playeractions::allowactionset( "vehicle_passenger", 0 );

    if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
        scripts\mp\gametypes\br_plunder.gsc::_id_11A9B( var_2, 0, 1 );

    _id_1325F( var_2 );
    scripts\mp\outofbounds::enableoobimmunity( var_2 );

    if ( scripts\mp\outofbounds::isoob( var_0, 1 ) )
        var_0 thread scripts\mp\vehicles\vehicle_oob_mp::vehicle_oob_mp_entercallbackforplayer( var_2 );

    if ( isdefined( var_2.team ) && isdefined( var_2.squadindex ) && istrue( var_0.israllypointvehicle ) )
        thread scripts\mp\spawnselection::_id_11DA4( var_2.team, var_2.squadindex );

    vehicle_occupancy_mp_updatemarkfilter( var_0 );
    _id_13260( var_0 );
    _id_13262( var_0 );
}

vehicle_occupancy_mp_onexitvehicle( var_0, var_1, var_2, var_3 )
{
    if ( !istrue( var_3.playerdisconnect ) && isdefined( var_2 ) )
    {
        if ( !istrue( var_3.playerdeath ) )
        {
            var_2 scripts\mp\utility\perk::removeperk( "specialty_ghost" );
            var_2 scripts\mp\utility\perk::removeperk( "specialty_tracker_jammer" );
            var_4 = level.gametype == "br";

            if ( !var_4 || scripts\cp_mp\vehicles\vehicle_occupancy::_id_1324E( var_0, var_1 ) )
                var_2 scripts\mp\playeractions::allowactionset( "vehicle", 1 );
            else if ( var_4 )
                var_2 scripts\mp\playeractions::allowactionset( "vehicle_passenger", 1 );

            if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
                scripts\mp\gametypes\br_plunder.gsc::_id_11A9B( var_2, 1, 1 );

            if ( scripts\mp\outofbounds::isoob( var_0, 1 ) )
                var_0 thread scripts\mp\vehicles\vehicle_oob_mp::vehicle_oob_mp_exitcallbackforplayer( var_2 );

            scripts\mp\outofbounds::disableoobimmunity( var_2 );
        }

        _id_1325C( var_2, var_3.playerdeath, var_3.playerlaststand );

        if ( isdefined( var_2.team ) && isdefined( var_2.squadindex ) && istrue( var_0.israllypointvehicle ) )
            thread scripts\mp\spawnselection::_id_11DA4( var_3.team, var_3.squadindex );

        var_2 notify( "vehicle_exit" );
    }

    vehicle_occupancy_mp_updatemarkfilter( var_0 );
    _id_13260( var_0 );
    _id_13262( var_0 );
}

_id_1325B( var_0, var_1, var_2, var_3 )
{
    var_4 = level.gametype == "br";

    if ( var_4 && isdefined( var_2 ) && isdefined( var_3 ) )
    {
        if ( scripts\cp_mp\vehicles\vehicle_occupancy::_id_1324E( var_1, var_2 ) )
        {
            var_0 scripts\mp\playeractions::allowactionset( "vehicle", 1 );
            var_0 scripts\mp\playeractions::allowactionset( "vehicle_passenger", 0 );
        }
        else if ( scripts\cp_mp\vehicles\vehicle_occupancy::_id_1324E( var_1, var_3 ) )
        {
            var_0 scripts\mp\playeractions::allowactionset( "vehicle_passenger", 1 );
            var_0 scripts\mp\playeractions::allowactionset( "vehicle", 0 );
        }
    }
}

vehicle_occupancy_mp_updatemarkfilter( var_0 )
{
    if ( !isdefined( var_0.occupants ) )
        return;

    if ( !isdefined( var_0.ss_removequestinstance ) )
        var_0.ss_removequestinstance = 1;

    var_1 = var_0.ss_removequestinstance;
    var_2 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getalloccupants( var_0 );
    var_0.ss_removequestinstance = var_2.size > 0;

    if ( var_1 && !var_0.ss_removequestinstance )
        var_0 disableplayermarks( "killstreak" );
    else if ( !var_1 && var_0.ss_removequestinstance )
        var_0 enableplayermarks( "killstreak" );

    if ( var_0.ss_removequestinstance )
    {
        if ( level.teambased )
        {
            var_3 = [];

            foreach ( var_5 in var_2 )
            {
                if ( !scripts\engine\utility::array_contains( var_3, var_5.team ) )
                    var_3[var_3.size] = var_5.team;
            }

            var_0 filteroutplayermarks( var_3 );
        }
        else
            var_0 filteroutplayermarks( var_2 );
    }
}

vehicle_occupancy_mp_registerinstance( var_0 )
{

}

vehicle_occupancy_mp_deregisterinstance( var_0 )
{

}

_id_1325D( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( var_0.vehiclename, var_1 );

    if ( istrue( var_4._id_12532 ) )
        return;

    if ( isdefined( level.spawn_rpgs_for_players ) && scripts\engine\utility::array_contains( level.spawn_rpgs_for_players, var_2 ) )
    {
        if ( isdefined( var_2.brdoesloadoutoptionusedropbags ) )
        {
            stopfxontag( level._effect["vfx_br_cashLeaderBag"], var_2, "j_bag_left" );
            var_2 hidepart( "j_bag_left", "accessory_money_bag_large_closed_player" );
        }
    }
}

_id_1325E( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( var_0.vehiclename, var_1 );

    if ( istrue( var_4._id_12532 ) )
        return;

    if ( isdefined( level.spawn_rpgs_for_players ) && scripts\engine\utility::array_contains( level.spawn_rpgs_for_players, var_2 ) )
    {
        if ( isdefined( var_2.brdoesloadoutoptionusedropbags ) )
        {
            var_2 showpart( "j_bag_left", "accessory_money_bag_large_closed_player" );
            playfxontag( level._effect["vfx_br_cashLeaderBag"], var_2, "j_bag_left" );
        }
    }
}

vehicle_occupancy_mp_updateowner( var_0 )
{
    vehicle_occupancy_mp_updatemarkfilter( var_0 );
}

_id_1325F( var_0, var_1, var_2 )
{
    var_3 = undefined;
    var_4 = undefined;
    var_5 = undefined;
    var_6 = var_0 getweaponslistprimaries();

    foreach ( var_8 in var_6 )
    {
        if ( nullweapon( var_8 ) )
            continue;

        if ( scripts\mp\riotshield::isriotshield( var_8 ) )
        {
            var_3 = var_8;

            if ( isnullweapon( var_3, var_0 getcurrentprimaryweapon() ) )
                var_4 = 1;

            continue;
        }

        if ( !isdefined( var_5 ) )
        {
            var_9 = var_8 getnoaltweapon();

            if ( var_9.inventorytype != "primary" )
                continue;

            var_5 = var_8;
        }
    }

    if ( isdefined( var_3 ) )
    {
        var_0 scripts\cp_mp\utility\inventory_utility::_takeweapon( var_3 );
        var_0._id_11FF7 = var_3;
        var_0._id_11FF3 = var_4;

        if ( istrue( var_4 ) )
            _id_13261( var_0, var_1, var_2 );

        var_0 scripts\mp\class::riotshieldonweaponchange( var_5 );
        var_0 notify( "modified_riot_shield" );
        var_0 endon( "modified_riot_shield" );
        var_0 childthread scripts\cp_mp\utility\inventory_utility::forcevalidweapon( var_5 );
    }
}

_id_1325C( var_0, var_1, var_2 )
{
    if ( isdefined( var_0._id_11FF7 ) )
    {
        if ( !istrue( var_1 ) && !istrue( var_2 ) )
        {
            var_0 scripts\cp_mp\utility\inventory_utility::_giveweapon( var_0._id_11FF7 );
            var_0 scripts\mp\class::_id_12D4D();

            if ( istrue( var_0._id_11FF3 ) )
            {
                var_0 notify( "modified_riot_shield" );
                var_0 endon( "modified_riot_shield" );
                var_0 childthread scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_0._id_11FF7 );
            }
        }

        var_0._id_11FF7 = undefined;
        var_0._id_11FF3 = undefined;
        var_0 notify( "modified_riot_shield" );
    }
}

_id_13261( var_0, var_1, var_2 )
{
    if ( isdefined( var_0._id_11FF7 ) && istrue( var_0._id_11FF3 ) )
    {
        if ( !isdefined( var_2 ) )
            return;

        if ( scripts\cp_mp\vehicles\vehicle_occupancy::_id_1324E( var_1, var_2 ) )
            return;

        if ( scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_shouldhideoccupantforseat( var_1, var_2 ) )
            return;

        var_3 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( var_1.vehiclename, var_2 );

        if ( isdefined( var_3._id_12F49 ) )
            return;

        var_0._id_11FF3 = undefined;
    }
}

_id_13262( var_0 )
{
    if ( !var_0 getscriptablehaspart( "stability" ) )
        return;

    var_1 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getalloccupants( var_0 );
    var_2 = var_0 vehicle_getspeed();

    if ( var_1.size > 0 )
        var_0 setscriptablepartstate( "stability", "stable", 1 );
    else if ( var_1.size == 0 && var_2 > 10 )
        var_0 setscriptablepartstate( "stability", "unstable", 1 );
}

_id_13260( var_0 )
{
    if ( !level.vehicle._id_132B8 )
        return;

    if ( !_id_13255() )
        return;

    if ( !var_0 getscriptablehaspart( "lights" ) )
        return;

    if ( !isdefined( var_0.playercanbuyrespawn ) )
        var_0.playercanbuyrespawn = 0;

    var_1 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getalloccupants( var_0 );

    if ( var_1.size > 0 && !var_0.playercanbuyrespawn )
    {
        var_0 setscriptablepartstate( "lights", "on", 1 );
        var_0.playercanbuyrespawn = 1;
    }
    else if ( var_1.size == 0 && var_0.playercanbuyrespawn )
    {
        var_0 setscriptablepartstate( "lights", "off", 1 );
        var_0.playercanbuyrespawn = 0;
    }
}

_id_13255()
{
    switch ( level.script )
    {
        case "mp_escape2_pm":
        case "mp_kstenod":
        case "mp_br_mechanics":
            return 1;
        default:
            break;
    }

    return 0;
}

vehicle_occupancy_mp_registersentient( var_0 )
{
    var_1 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforvehicle( var_0.vehiclename );

    if ( !isdefined( var_1.threatbiasgroup ) )
        return;

    if ( level.teambased )
    {
        var_2 = var_0.team;

        if ( isdefined( var_0.team ) && var_0.team == "neutral" )
            var_2 = undefined;

        if ( !isdefined( var_2 ) && isdefined( var_0.owner ) )
            var_2 = var_0.owner.team;

        if ( isdefined( var_2 ) )
        {
            if ( !isdefined( var_0.sentientteam ) || var_0.sentientteam != var_2 )
            {
                vehicle_occupancy_mp_unregistersentient( var_0 );
                var_0 scripts\mp\sentientpoolmanager::registersentient( var_1.threatbiasgroup, var_2 );
                var_0.sentientteam = var_2;
            }
        }
        else if ( isdefined( var_0.sentientteam ) )
            vehicle_occupancy_mp_unregistersentient( var_0 );
    }
}

vehicle_occupancy_mp_unregistersentient( var_0 )
{
    var_0 notify( "remove_sentient" );
    var_0.sentientteam = undefined;
}

vehicle_occupancy_mp_issentient( var_0 )
{
    return isdefined( var_0.sentientteam );
}
