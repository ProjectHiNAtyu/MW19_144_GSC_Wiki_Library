// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

getmapname()
{
    if ( !isdefined( level.mapname ) )
        level.mapname = getdvar( "mapname" );

    return level.mapname;
}

registerlargemap()
{
    level.largemap = 1;
}

islargemap()
{
    return istrue( level.largemap );
}

rpg_attack_apc()
{
    return level.gametype == "br" && islargemap();
}

_id_11DE2()
{
    level.riskspawn_debugdvar = 1;
}

riskspawn_debugdvar()
{
    return istrue( level.riskspawn_debugdvar );
}

_id_11DE3()
{
    level.impactfunc_fire = 1;
}

riskspawn_debugobjective()
{
    return istrue( level.impactfunc_fire );
}

_id_11E01( var_0 )
{
    level.sat_piece = 1;

    if ( !isdefined( var_0 ) )
        var_0 = "default";

    level.spotlight_speed = var_0;
}

sat_piece()
{
    return istrue( level.sat_piece );
}

registernightmap()
{
    level.nightmap = 1;
    getnodeindex( "killcam_night" );
}

isnightmap()
{
    return istrue( level.nightmap );
}

_id_11DF4()
{
    level.trap_room_wave_settings = 1;
}

run_kill_watcher()
{
    return istrue( level.trap_room_wave_settings );
}

registerarenamap()
{
    level.arenamap = 1;
    level.helis_assault3_check_size = 1;
    level._id_125AD = 1;
    level.requiresminstartspawns = 0;
}

_id_11E03()
{
    level.helis_assault3_check_size = 1;
    level._id_125AD = 1;
}

_id_11DEE()
{
    level._id_125B1 = 1;
}

isarenamap()
{
    return istrue( level.arenamap );
}

shouldskipfirstraise()
{
    return istrue( level._id_125AD );
}

getlocaleid()
{
    if ( !isdefined( level.localeid ) )
    {
        var_0 = getdvarint( "scr_localeID", 0 );

        if ( var_0 > 0 )
            level.localeid = "locale_" + var_0;
        else if ( var_0 == 0 )
            level.localeid = undefined;
        else if ( riskspawn_debugdvar() )
            level.localeid = "locale_6";
        else
        {
            switch ( getmapname() )
            {
                case "mp_quarry2":
                    level.localeid = "locale_5";
                    break;
                case "mp_downtown_gw":
                    level.localeid = "locale_6";
                    break;
                case "mp_farms2_gw":
                    level.localeid = "locale_9";
                    break;
                case "mp_aniyah":
                    level.localeid = "locale_17";
                    break;
            }
        }
    }

    return level.localeid;
}

getlocaleent( var_0, var_1 )
{
    var_2 = getentarray( var_0, "targetname" );
    var_3 = undefined;

    if ( isdefined( var_2 ) && var_2.size == 1 )
        return var_2[0];

    if ( isdefined( getlocaleid() ) )
    {
        foreach ( var_5 in var_2 )
        {
            if ( isdefined( var_5.script_noteworthy ) && var_5.script_noteworthy == level.localeid )
            {
                var_3 = var_5;
                continue;
            }

            if ( level.mapname == "mp_port2_gw" && var_0 == "airstrikeheight" )
            {
                if ( var_5.origin == ( 34880, -26944, 3072 ) )
                    var_3 = var_5;

                continue;
            }

            var_5 delete();
        }
    }
    else
    {
        foreach ( var_5 in var_2 )
        {
            if ( !isdefined( var_3 ) )
            {
                var_3 = var_5;
                continue;
            }

            var_5 delete();
        }
    }

    if ( isdefined( var_3 ) )
        return var_3;

    if ( istrue( var_1 ) )
        return;
}

nuke_hostmigration_waittillhostmigrationdone( var_0, var_1 )
{
    var_2 = scripts\engine\utility::getstructarray( var_0, "targetname" );
    var_3 = undefined;

    if ( isdefined( getlocaleid() ) )
    {
        foreach ( var_5 in var_2 )
        {
            if ( isdefined( var_5.script_noteworthy ) && var_5.script_noteworthy == level.localeid )
                var_3 = var_5;
        }
    }
    else
    {
        foreach ( var_5 in var_2 )
        {
            if ( !isdefined( var_3 ) )
            {
                var_3 = var_5;
                break;
            }
        }
    }

    if ( isdefined( var_3 ) )
        return var_3;

    if ( istrue( var_1 ) )
        return;
}

nuke_killplayer( var_0, var_1 )
{
    var_2 = scripts\engine\utility::getstructarray( var_0, "targetname" );
    var_3 = [];

    if ( isdefined( getlocaleid() ) )
    {
        foreach ( var_5 in var_2 )
        {
            if ( getmapname() == "mp_quarry2" )
            {
                var_3[var_3.size] = var_5;
                continue;
            }

            if ( isdefined( var_5.script_noteworthy ) && var_5.script_noteworthy == level.localeid )
                var_3[var_3.size] = var_5;
        }

        return var_3;
    }

    if ( var_2.size == 0 )
    {
        if ( istrue( var_1 ) )
        {

        }
    }
    else
    {

    }
}

isrealismenabled()
{
    if ( istrue( level.tacticalmode ) || istrue( self.isrealismenabled ) )
        return 1;

    return 0;
}

fadetoblackforplayer( var_0, var_1, var_2 )
{
    var_0 notify( "start_fade_to_black" );
    var_0 endon( "start_fade_to_black" );
    var_0 endon( "disconnect" );
    level endon( "game_ended" );
    var_3 = 0;

    if ( istrue( var_1 ) )
        var_3 = 1;

    if ( !isdefined( var_2 ) || var_2 == 0 )
    {
        var_0 setclientomnvar( "ui_total_fade", var_3 );
        return;
    }

    var_3 = 0;
    var_4 = int( var_2 / level.framedurationseconds );
    var_5 = 1 / var_4;

    if ( !istrue( var_1 ) )
    {
        var_5 = var_5 * -1;
        var_3 = 1;
    }

    while ( var_4 > 0 )
    {
        var_3 = var_3 + var_5;
        var_0 setclientomnvar( "ui_total_fade", var_3 );
        var_4--;
        waitframe();
    }
}

gettimesincegamestart()
{
    return [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game_utility", "getTimeSinceGameStart" ) ]]();
}

_id_1238F( var_0 )
{
    self.semtex_killstuckplayer = var_0;
}

startkeyearning()
{
    if ( isbot( self ) )
        return;

    if ( isdefined( self.reportchallengeuserevent_done ) )
        return;

    if ( !istrue( level.playerxpenabled ) )
        return;

    _id_1238F( 255 );
    var_0 = scripts\cp\helicopter\chopper_boss::mp_emporium_patch();

    if ( istrue( level.ismp ) )
        self reportchallengeuserevent( "start_match", var_0 );
    else
        self reportchallengeuserevent( "start_match", var_0 );

    self.reportchallengeuserevent_done = 0;
}

stopkeyearning( var_0 )
{
    if ( isbot( self ) )
        return;

    if ( istrue( self.reportchallengeuserevent_done ) )
        return;

    if ( !istrue( level.playerxpenabled ) )
        return;

    if ( !isdefined( self.semtex_killstuckplayer ) )
        _id_1238F( 255 );

    var_1 = 0;

    if ( isdefined( var_0 ) )
    {
        if ( level.teambased )
        {
            if ( var_0 == "eliminated" )
                var_1 = 4;
            else if ( var_0 == "tie" )
                var_1 = 3;
            else if ( isdefined( self.pers["team"] ) && self.pers["team"] == var_0 )
                var_1 = 1;
            else if ( isdefined( self.pers["team"] ) && self.pers["team"] != var_0 )
                var_1 = 2;
        }
        else if ( isdefined( self.connectedpostgame ) )
            var_1 = 0;
        else if ( !isdefined( self.timeplayed ) || self.timeplayed["total"] < 1 || self.pers["participation"] < 1 )
            var_1 = 0;
        else if ( !istrue( self.pers["hasDoneAnyCombat"] ) )
            var_1 = 0;
        else if ( !isdefined( level.placement ) )
            var_1 = 0;
        else if ( !isplayer( var_0 ) && var_0 == "eliminated" )
            var_1 = 4;
        else
        {
            var_2 = 0;

            for ( var_3 = 0; var_3 < min( level.placement["all"].size, 3 ); var_3++ )
            {
                if ( level.placement["all"][var_3] != self )
                    continue;

                var_2 = 1;
            }

            if ( var_2 )
                var_1 = 1;
            else
                var_1 = 2;
        }
    }

    var_4 = scripts\cp\helicopter\chopper_boss::mp_emporium_patch();
    var_5 = 0;
    var_6 = 0;

    if ( isdefined( self.pers["scavengerPickedUp"] ) )
        var_6 = self.pers["scavengerPickedUp"];

    var_7 = 0;

    if ( isdefined( self.pers["restockCount"] ) )
        var_7 = self.pers["restockCount"];

    var_8 = scripts\cp\helicopter\chopper_boss::nvidiaansel_scriptdisable();
    var_9 = int( gettimesincegamestart() / 1000.0 );

    if ( self.semtex_killstuckplayer != 255 )
        scripts\cp\helicopter\chopper_boss::unset_relic_aggressive_melee( self.semtex_killstuckplayer );

    var_10 = 100;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "rank", "getRankXPMultiplierTotal" ) )
    {
        var_11 = self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "rank", "getRankXPMultiplierTotal" ) ]]();
        var_10 = int( var_11 * 100.0 );
    }

    var_12 = 100;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "weaponrank", "getWeaponRankXPMultiplierTotal" ) )
    {
        var_11 = self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "weaponrank", "getWeaponRankXPMultiplierTotal" ) ]]();
        var_12 = int( var_11 * 100.0 );
    }

    var_13 = 100;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "rank", "getBattlePassXPultiplierTotal" ) )
    {
        var_11 = self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "rank", "getBattlePassXPultiplierTotal" ) ]]();
        var_13 = int( var_11 * 100.0 );
    }

    if ( istrue( level.ismp ) )
        self reportchallengeuserevent( "end_match", var_4, var_1, var_5, var_6, var_7, var_8, var_9, self.semtex_killstuckplayer, var_10, var_12, var_13 );
    else
    {
        if ( isdefined( var_0 ) && var_0 == "SUCCESS" )
            var_1 = 1;
        else
            var_1 = 2;

        self reportchallengeuserevent( "end_match", var_4, var_1, var_5, 0, 0, var_8, var_9, self.semtex_killstuckplayer, var_10, var_12, var_13 );
    }

    self.reportchallengeuserevent_done = 1;
}

_visionsetnakedforplayer( var_0, var_1 )
{
    if ( var_0 == "" )
    {
        self visionsetnakedforplayer( var_0, var_1 );

        if ( isdefined( self.activevisionsetlist ) )
            self.activevisionsetlist = undefined;

        return;
    }

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    if ( !isdefined( self.activevisionsetlist ) )
        self.activevisionsetlist = [];

    if ( !isdefined( self.activevisionsetlist[var_0] ) )
        self.activevisionsetlist[var_0] = 1;
    else
        self.activevisionsetlist[var_0]++;

    if ( self.activevisionsetlist[var_0] == 1 )
        self visionsetnakedforplayer( var_0, var_1 );
}

_visionunsetnakedforplayer( var_0 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self.activevisionsetlist[var_0]--;

    if ( self.activevisionsetlist[var_0] == 0 )
    {
        var_1 = [];

        foreach ( var_4, var_3 in self.activevisionsetlist )
        {
            if ( var_4 == var_0 )
                continue;

            var_1[var_4] = var_3;
        }

        self.activevisionsetlist = var_1;
        self visionsetnakedforplayer( "", 0 );

        foreach ( var_4, var_3 in var_1 )
            self visionsetnakedforplayer( var_4, level.framedurationseconds );
    }
}

_id_11ED4( var_0, var_1 )
{
    var_2 = getentarray();

    foreach ( var_4 in var_2 )
    {
        if ( isdefined( var_4.model ) && var_4.model == var_0 )
        {
            if ( istrue( var_1 ) && isdefined( var_4.target ) )
                _id_11ED3( var_4.target, "targetname" );

            var_4 delete();
        }
    }
}

_id_11ED2( var_0 )
{
    var_1 = getentarray();

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3.code_classname ) && var_3.code_classname == var_0 )
            var_3 delete();
    }
}

_id_11ED1( var_0 )
{
    var_1 = getentarray();

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3.classname ) && var_3.classname == var_0 )
            var_3 delete();
    }
}

_id_11ED3( var_0, var_1 )
{
    var_2 = getentarray( var_0, var_1 );

    foreach ( var_4 in var_2 )
        var_4 delete();
}

regendelayspeedfunc()
{
    var_0 = spawnstruct();
    level.dropping_minigun = var_0;
    var_0.game_type_col = [];
    var_0.game_type_col["dm"] = 5;
    var_0.game_type_col["war"] = 6;
    var_0.game_type_col["sd"] = 7;
    var_0.game_type_col["dom"] = 8;
    var_0.game_type_col["conf"] = 9;
    var_0.game_type_col["sr"] = 10;
    var_0.game_type_col["grind"] = 11;
    var_0.game_type_col["ball"] = 12;
    var_0.game_type_col["infect"] = 13;
    var_0.game_type_col["tjugg"] = 14;
    var_0.game_type_col["gun"] = 15;
    var_0.game_type_col["grnd"] = 16;
    var_0.game_type_col["siege"] = 17;
    var_0.game_type_col["koth"] = 18;
    var_0.game_type_col["ctf"] = 19;
    var_0.game_type_col["dd"] = 20;
    var_0.game_type_col["tdef"] = 21;
    var_0.game_type_col["front"] = 22;
    var_0.game_type_col["cmd"] = 23;
    var_0.game_type_col["br"] = 24;
    var_0.game_type_col["arena"] = 25;
    var_0.game_type_col["cyber"] = 26;
    var_0.game_type_col["rush"] = 27;
    var_0.game_type_col["esc"] = 28;
    var_0.game_type_col["vip"] = 29;
    var_0.game_type_col["btm"] = 30;
    var_0.game_type_col["rugby"] = 31;
    var_0.game_type_col["arm"] = 32;
    var_0.game_type_col["mtmc"] = 33;
    var_0.game_type_col["snatch"] = 34;
    var_0.game_type_col["hq"] = 35;
    var_0.game_type_col["defcon"] = 36;
    var_0.game_type_col["pill"] = 37;
    var_0.game_type_col["blitz"] = 38;
    var_0.game_type_col["brm"] = 39;
    var_0.game_type_col["hvt"] = 40;
    var_0.game_type_col["trial"] = 41;
    var_0.game_type_col["cp_survival"] = 42;
    var_0.game_type_col["cp_wave_sv"] = 43;
    var_0.game_type_col["brtdm"] = 44;
    var_0.game_type_col["oic"] = 45;
    var_0.game_type_col["cp_specops"] = 46;
}

game_utility_init()
{
    [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game_utility", "init" ) ]]();
}
