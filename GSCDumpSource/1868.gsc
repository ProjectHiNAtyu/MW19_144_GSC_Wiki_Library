// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\mp\playeractions::registeractionset( "laststand", [ "usability", "weapon_switch", "supers", "gesture", "killstreaks", "offhand_primary_weapons", "offhand_secondary_weapons", "offhand_weapons" ] );
    scripts\mp\playeractions::registeractionset( "laststand_killstreak", [ "usability", "weapon_switch", "gesture", "killstreaks", "supers", "fire", "melee", "offhand_primary_weapons", "offhand_secondary_weapons" ] );
    scripts\mp\playeractions::registeractionset( "laststand_revive", [ "allow_movement", "usability", "reload", "fire", "offhand_weapons", "offhand_primary_weapons", "offhand_secondary_weapons", "killstreaks", "supers", "gesture", "allow_jump", "sprint", "melee" ] );
    level.laststandreviveents = [];

    if ( isusingmatchrulesdata() )
    {

    }
    else
    {
        scripts\mp\utility\game::registerlaststandhealthdvar( 50 );
        scripts\mp\utility\game::registerlaststandrevivehealthdvar( 30 );
        scripts\mp\utility\game::registerlaststandtimerdvar( 10 );
        scripts\mp\utility\game::registerlaststandinvulntimerdvar( 1 );
        scripts\mp\utility\game::registerlaststandsuicidetimerdvar( 5 );
        scripts\mp\utility\game::registerlaststandrevivetimerdvar( 10 );
        scripts\mp\utility\game::registerlaststandweapondvar( "iw8_fists_mp_ls" );
        scripts\mp\utility\game::registerlaststandrevivedecayscaledvar( 0 );
        scripts\mp\utility\game::registerlaststandweapondelaydvar( 0 );
    }

    level.laststandhealth = scripts\mp\utility\dvars::obj_caches_threaded_nags_vo( "scr_" + scripts\mp\utility\game::getgametype() + "_lastStandHealth", "scr_player_lastStandHealth" );
    level.laststandrevivehealth = scripts\mp\utility\dvars::obj_caches_threaded_nags_vo( "scr_" + scripts\mp\utility\game::getgametype() + "_lastStandReviveHealth", "scr_player_lastStandReviveHealth" );

    if ( level.laststandhealth > scripts\mp\tweakables::gettweakablevalue( "player", "maxhealth" ) )
        level.laststandhealth = scripts\mp\tweakables::gettweakablevalue( "player", "maxhealth" );

    if ( level.laststandrevivehealth > scripts\mp\tweakables::gettweakablevalue( "player", "maxhealth" ) )
        level.laststandrevivehealth = scripts\mp\tweakables::gettweakablevalue( "player", "maxhealth" );

    level.laststandinvulntime = scripts\mp\utility\dvars::obj_caches_tanks( "scr_" + scripts\mp\utility\game::getgametype() + "_lastStandInvulnTime", "scr_player_lastStandInvulnTime" );
    level.setup_backup_respawn_points_in_verdansk = scripts\mp\utility\dvars::obj_caches_tanks( "scr_" + scripts\mp\utility\game::getgametype() + "_lastStandReviveDecayScale", "scr_player_lastStandReviveDecayScale" );
    level.laststandrevivetimer = scripts\mp\utility\dvars::obj_caches_tanks( "scr_" + scripts\mp\utility\game::getgametype() + "_lastStandReviveTimer", "scr_player_lastStandReviveTimer" );
    level.laststandsuicidetimer = scripts\mp\utility\dvars::obj_caches_tanks( "scr_" + scripts\mp\utility\game::getgametype() + "_lastStandSuicideTimer", "scr_player_lastStandSuicideTimer" );
    level.laststandtimer = scripts\mp\utility\dvars::obj_caches_tanks( "scr_" + scripts\mp\utility\game::getgametype() + "_lastStandTimer", "scr_player_lastStandTimer" );
    level.setup_bot_brtdm = scripts\mp\utility\dvars::obj_a_roof_jugg( "scr_" + scripts\mp\utility\game::getgametype() + "_lastStandWeapon", "scr_player_lastStandWeapon" );
    level.setup_bot_flag = scripts\mp\utility\dvars::obj_caches_tanks( "scr_" + scripts\mp\utility\game::getgametype() + "_lastStandWeaponDelay", "scr_player_lastStandWeaponDelay" );
    setdvarifuninitialized( "scr_player_lastStandAllyDragEnable", 0 );
    setdvarifuninitialized( "scr_player_lastStandAllyDragMoveSpeed", 0.3 );
    level thread laststandmonitor();
}

laststandthink()
{
    level endon( "game_ended" );
    onenter();
    var_0 = scripts\engine\utility::_id_13402( "last_stand_heal_success", "last_stand_revived", "last_stand_bleedout", "death", "disconnect", "last_stand_self_revive" );

    switch ( var_0 )
    {
        case "last_stand_revived":
            onrevive();
            break;
        case "last_stand_self_revive":
            onrevive( 1 );
            break;
        case "last_stand_bleedout":
            onbleedout();
            break;
        case "last_stand_heal_success":
            onrevive( 0, 1 );
            break;
        case "death":
            if ( !( ( scripts\mp\utility\game::isteamreviveenabled() || scripts\mp\utility\game::getgametype() == "br" ) && scripts\mp\flags::gameflag( "prematch_done" ) ) )
                ondeath();

            break;
        case "disconnect":
            ondeath();
            break;
    }

    if ( isdefined( self ) )
        self setclientomnvar( "ui_is_laststand", 0 );
}

onenter()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    self endon( "last_stand_finished" );
    self notify( "last_stand_start" );
    self setclientomnvar( "ui_is_laststand", 1 );
    level thread scripts\mp\battlechatter_mp::trysaylocalsound( self, "player_last_stand", undefined, 0.25 );
    var_0 = level.laststandhealth;

    if ( level.gametype == "br" )
        thread setburningdamage();

    self.health = var_0;
    thread makelaststandinvuln();
    scripts\mp\utility\perk::giveperk( "specialty_block_health_regen" );
    scripts\mp\utility\perk::giveperk( "specialty_blindeye" );
    self.inlaststand = 1;
    self.x1opsinfilsequenceend = undefined;
    self.hasshownlaststandicon = 0;

    if ( level.gametype == "br" && !istrue( self.player_move ) )
    {
        if ( isdefined( level.end_flares ) )
            [[ level.end_flares ]]();
    }

    self.laststandoldweaponobj = scripts\mp\utility\inventory::getlastweapon();

    if ( scripts\mp\utility\game::getgametype() == "br" )
    {
        scripts\common\utility::allow_weapon_switch_clip( 0 );

        if ( !istrue( self.gulag ) )
        {
            self.setroundwinstreakspecialcamos = gettime();
            self.cashcollectedwhileup = undefined;
            scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "onLastStandEnter" );

            if ( !istrue( level._id_125B4 ) )
            {
                var_1 = scripts\mp\gametypes\br_public.gsc::ondamagerelicfromabove( self.team, self.squadindex );

                foreach ( var_3 in var_1 )
                {
                    if ( !isdefined( var_3 ) )
                        continue;

                    if ( var_3 != self )
                        var_3 thread scripts\mp\hud_message::showsplash( "br_teammate_down", undefined, self );
                }
            }
        }
    }

    if ( !nullweapon( self getheldoffhand() ) )
        thread scripts\mp\equipment\gas_grenade::gas_takeheldoffhand();

    var_5 = level.setup_bot_brtdm;

    if ( isdefined( level.laststandweaponcallback ) && getdvarint( "scr_player_enableSecondWindAndPistol", 0 ) )
        var_5 = self [[ level.laststandweaponcallback ]]();

    if ( !issameweapon( var_5 ) )
        var_5 = getcompleteweaponname( var_5 );

    if ( !istrue( self.usingascender ) )
        self stopanimscriptsceneevent();

    if ( self isviewmodelanimplaying() )
        self stopviewmodelanim();

    if ( istrue( self.killstreaklaststand ) && isdefined( level.killstreak_laststand_func ) )
        self [[ level.killstreak_laststand_func ]]();
    else
    {
        if ( isdefined( level.modeonlaststandfunc ) )
            self [[ level.modeonlaststandfunc ]]();

        if ( isdefined( level.shouldzombiespawntags ) )
            self thread [[ level.shouldzombiespawntags ]]();

        if ( isdefined( level.customlaststandactionset ) )
            self.laststandactionset = level.customlaststandactionset;
        else
            self.laststandactionset = "laststand";

        if ( isdefined( self.vehicle ) )
            self waittill( "vehicle_exit" );

        scripts\mp\playeractions::allowactionset( self.laststandactionset, 0 );
        thread play_vo_on_intel_pickup( var_5 );

        if ( isdefined( level.animscripted_single_arrive_at ) )
            self [[ level.animscripted_single_arrive_at ]]();
        else
            addoverheadicon();

        var_6 = level.laststandsuicidetimer;
        scripts\cp_mp\utility\shellshock_utility::_shellshock( "last_stand_mp", "damage", var_6, 0 );
        thread revivesetup( self );
        self.fastcrouchspeedmod = getdvarfloat( "scr_player_lastStandSpeedAddition", 0 );
        scripts\cp\helicopter\chopper_boss::_id_12A36( "alive_not_downed" );

        if ( isdefined( self.setquestrewardtierteamomnvar ) && self.setquestrewardtierteamomnvar scripts\mp\utility\perk::_hasperk( "specialty_reduce_regen_delay_on_kill" ) )
            self.setquestrewardtierteamomnvar scripts\mp\perks\perkfunctions::regendelayreduce_onkill();

        if ( scripts\mp\utility\game::getgametype() != "br" )
        {
            childthread stucktime( var_6 );
            return;
        }

        if ( isdefined( self.pers["squadMemberIndex"] ) )
        {
            var_7 = "outline_nodepth_brplayer" + self.pers["squadMemberIndex"];
            self.setteamplunderhud = scripts\mp\utility\outline::outlineenableforteam( self, self.team, var_7, "laststand" );
        }

        childthread dodamagewhiledown();
    }
}

setburningdamage()
{
    if ( !istrue( self.getnexthelimodule ) && !istrue( self.heligotoplunderrepository ) )
    {
        self.getnexthelimodule = 1;
        self stoplocalsound( "deaths_door_out" );
        self playlocalsound( "deaths_door_in" );
        self setsoundsubmix( "deaths_door_mp", 0.2, 1 );
        self enableplayerbreathsystem( 0 );
        thread scripts\mp\healthoverlay::playerbreathingpainsound();
    }
}

play_vo_on_intel_pickup( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "last_stand_finished" );
    level endon( "game_ended" );

    while ( isdefined( self.currentweapon ) && isdefined( self.currentweapon.basename ) && ( self.currentweapon.basename == "armor_plate_deploy_mp" || self.currentweapon.basename == "teammate_revive_stim_mp" ) )
        waitframe();

    waitframe();
    var_1 = getcompleteweaponname( "iw8_gunless_last_stand_enter" );
    scripts\cp_mp\utility\inventory_utility::_giveweapon( var_1, undefined, undefined, 0 );
    thread scripts\cp_mp\utility\inventory_utility::_switchtoweapon( var_1 );
    wait 1.7;
    self notify( "last_stand_transition_done" );
    scripts\cp_mp\utility\inventory_utility::_takeweapon( var_1 );

    if ( !issameweapon( var_0 ) && ( var_0 == "none" || var_0 == "iw8_fists_mp_ls" ) )
        givedefaultlaststandweapon();
    else
    {
        var_2 = level.setup_bot_flag;

        if ( var_2 > 0 )
            thread handlelaststandweapongivedelay( var_2, var_0 );
        else
            givelaststandweapon( var_0 );
    }
}

_id_12B6A()
{
    var_0 = self;
    var_1 = getcompleteweaponname( "iw8_gunless_last_stand_enter" );

    if ( var_0 hasweapon( var_1 ) )
        var_0 scripts\cp_mp\utility\inventory_utility::_takeweapon( var_1 );
}

handlelaststandweapongivedelay( var_0, var_1 )
{
    self endon( "death" );
    self endon( "last_stand_revived" );
    level endon( "game_ended" );
    var_2 = givedefaultlaststandweapon();

    if ( isnullweapon( var_2, var_1 ) )
        return;

    wait( var_0 );
    self notify( "end_switchToFists" );
    scripts\cp_mp\utility\inventory_utility::_takeweapon( var_2 );
    givelaststandweapon( var_1 );
}

givedefaultlaststandweapon()
{
    var_0 = scripts\mp\utility\dvars::getwatcheddvar( "lastStandWeapon" );

    if ( !isdefined( var_0 ) )
        var_0 = "iw8_fists_mp_ls";

    var_1 = getcompleteweaponname( var_0 );
    scripts\cp_mp\utility\inventory_utility::_giveweapon( var_1, undefined, undefined, 1 );
    thread scripts\cp_mp\utility\inventory_utility::_switchtoweapon( var_1 );
    return var_1;
}

givelaststandweapon( var_0 )
{
    if ( !issameweapon( var_0 ) )
        var_0 = scripts\mp\class::buildweapon( var_0 );

    var_1 = createheadicon( var_0 );

    if ( !self hasweapon( var_1 ) )
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_0, undefined, undefined, 1 );

    thread scripts\cp_mp\utility\inventory_utility::_switchtoweapon( var_1 );
}

disableweaponsovertime( var_0 )
{
    level endon( "game_ended" );
    scripts\common\utility::allow_weapon( 0 );
    scripts\engine\utility::_id_13403( var_0, "death_or_disconnect" );
    scripts\common\utility::allow_weapon( 1 );
}

switchtofists( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "end_switchToFists" );

    while ( scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_0, 1 ) == 0 )
        waitframe();
}

dodamagewhiledown()
{
    self endon( "laststand_revived" );
    self endon( "disconnect" );
    self endon( "squad_wipe_death" );
    var_0 = level.laststandhealth;
    var_1 = level.laststandtimer;

    if ( var_1 <= 0 )
    {
        onbleedout();
        return;
    }

    var_2 = float( var_0 ) / float( var_1 );

    if ( getdvarfloat( "scr_player_lastStandHealthScalar", 0 ) > 0 )
        var_2 = var_2 * getdvarfloat( "scr_player_lastStandHealthScalar", 0 );

    wait 1.0;
    var_3 = getcompleteweaponname( "iw8_gunless" );

    if ( !istrue( level.setup_bot_arena ) )
        thread suicidesetup();

    var_4 = 0.0;

    while ( self.health > 0 )
    {
        if ( self isinexecutionvictim() )
        {
            wait 1.0;
            continue;
        }

        if ( !istrue( scripts\mp\playerlogic::movenavobstaclemonitor() ) )
        {
            var_5 = int( var_4 + var_2 ) - int( var_4 );
            var_4 = var_4 + var_2;
            self.rpg_building_guys = 1;
            self dodamage( var_5, self.origin, self, undefined, "MOD_TRIGGER_HURT", var_3, "none" );
            self.rpg_building_guys = undefined;
        }

        if ( self.health <= 0 )
            onbleedout();

        wait 1.0;
    }
}

stucktime( var_0 )
{
    self.stuckinlaststand = 1;
    wait( var_0 );
    self.stuckinlaststand = 0;

    if ( scripts\mp\utility\perk::_hasperk( "specialty_survivor" ) && getdvarint( "scr_player_lastStand" ) != 1 )
        var_1 = level.laststandtimer;
    else
        var_1 = level.laststandtimer;

    if ( !isdefined( var_1 ) )
        var_1 = level.laststandtimer;

    if ( scripts\mp\utility\game::getgametype() == "br" )
    {

    }

    if ( scripts\mp\utility\game::getgametype() != "br" )
        var_1 = max( var_1 - level.laststandsuicidetimer, 1 );

    self.timeuntilbleedout = var_1;
    thread bleedoutthink();
    thread suicidesetup();
}

_id_1224D( var_0 )
{
    if ( var_0 usinggamepad() )
        return var_0 weaponswitchbuttonpressed();
    else
        return var_0 activatekeypressed();
}

_id_1224F()
{
    var_0 = self;
    var_1 = var_0.owner;
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_1 endon( "death_or_disconnect" );
    var_1 endon( "last_stand_revived" );
    var_2 = scripts\mp\utility\dvars::getwatcheddvar( "lastStandReviveTimer" ) * 1000;

    if ( scripts\mp\utility\game::getgametype() == "br" && var_1 scripts\mp\utility\perk::_hasperk( "specialty_br_faster_revive" ) )
        var_2 = var_2 * 0.75;

    var_0.usetime = var_2;

    if ( !isdefined( self.curprogress ) )
        self.curprogress = 0;

    for (;;)
    {
        if ( _id_1224D( var_1 ) && !istrue( var_1.sat_wait_for_piece_added ) && var_1 isonground() )
        {
            var_0 notify( "self_revive_start" );
            var_1 setlaststandselfreviving( 1 );
            var_0 thread _id_1224E();
        }

        waitframe();
    }
}

_id_1224E()
{
    var_0 = self.owner;
    var_1 = self;
    level endon( "game_ended" );
    var_0 endon( "death_or_disconnect" );
    var_0 endon( "last_stand_finished" );
    var_1._id_133D5 = 0;
    var_1 thread _id_1224C();

    while ( scripts\mp\utility\player::isreallyalive( var_0 ) && _id_1224D( var_0 ) && var_1.curprogress < var_1.usetime )
    {
        while ( !var_0 isonground() && _id_1224D( var_0 ) && !istrue( var_0.sat_wait_for_piece_added ) )
            waitframe();

        if ( !_id_1224D( var_0 ) )
            break;

        if ( var_0 isinexecutionvictim() )
            break;

        if ( !istrue( var_0.sat_wait_for_piece_added ) )
        {
            var_0 thread scripts\mp\gametypes\br_public.gsc::_id_1194F( "iw8_ges_plyr_self_revive", 10 );

            if ( !istrue( var_0._id_12A10 ) )
            {
                var_0 attach( "offhand_wm_stim", "tag_accessory_left" );
                var_0._id_12A10 = 1;
            }

            var_0.sat_wait_for_piece_added = 1;
            var_0 allowmovement( 0 );
        }

        if ( !isdefined( var_1.userate ) )
            var_1.userate = 0;

        if ( istrue( var_0.beingrevived ) )
        {
            var_0 setclientomnvar( "ui_securing", 6 );
            break;
        }

        if ( !var_0 isonground() )
            break;

        var_1.curprogress = var_1.curprogress + level.frameduration * var_1.userate;
        var_1.userate = 1;
        var_0 scripts\mp\gameobjects::updateuiprogress( var_1, 1 );

        if ( var_1.curprogress >= var_1.usetime )
        {
            var_0 stopgestureviewmodel( "ges_equip_stim_self_revive" );
            wait 0.5;

            if ( scripts\mp\utility\game::getgametype() == "br" )
                scripts\mp\gametypes\br_analytics.gsc::cloudref( var_0 );

            var_0 lastplundereventtype( "self_revive_success", var_0 );

            if ( isdefined( level._id_11EE0 ) )
                var_0 [[ level._id_11EE0 ]]();

            return;
        }

        waitframe();
    }

    if ( !istrue( var_0.beingrevived ) )
    {
        scripts\mp\gametypes\br.gsc::_id_130BA( var_0, var_0, var_1.curprogress, 1 );
        var_1 thread decayreviveprogress();
    }

    var_0 notify( "stopped_self_revive" );
}

_id_1224C()
{
    var_0 = self.owner;
    var_1 = self;
    level endon( "game_ended" );
    var_0 notify( "self_revive_cleanup_start" );
    var_0 endon( "self_revive_cleanup_start" );
    var_0 scripts\engine\utility::_id_133FF( "last_stand_finished", "stopped_self_revive", "death_or_disconnect" );

    if ( !istrue( var_0.beingrevived ) )
        var_0 scripts\mp\gameobjects::updateuiprogress( var_1, 0 );

    var_0 allowmovement( 1 );

    if ( istrue( var_0._id_12A10 ) )
    {
        var_0 detach( "offhand_wm_stim", "tag_accessory_left" );
        var_0._id_12A10 = 0;
    }

    var_0 stopgestureviewmodel( "ges_equip_stim_self_revive" );
    var_0 setlaststandselfreviving( 0 );
    var_0.sat_wait_for_piece_added = 0;
}

onexitcommon( var_0 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self.laststandactionset = undefined;
    thread clearlaststandinvuln();
    self.fastcrouchspeedmod = 0;
    scripts\mp\weapons::updatemovespeedscale();

    if ( scripts\mp\utility\perk::_hasperk( "specialty_block_health_regen" ) )
        scripts\mp\utility\perk::removeperk( "specialty_block_health_regen" );

    if ( scripts\mp\utility\perk::_hasperk( "specialty_blindeye" ) )
        scripts\mp\utility\perk::removeperk( "specialty_blindeye" );

    var_1 = level.setup_bot_brtdm;
    var_1 = getcompleteweaponname( var_1 );

    if ( self getcurrentprimaryweapon() != var_1 )
    {
        self notify( "end_switchToFists" );
        scripts\cp_mp\utility\inventory_utility::abortmonitoredweaponswitch( var_1 );
    }
    else
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_1 );

    self notify( "last_stand_finished" );
    self.laststandoldweapon = undefined;

    if ( istrue( scripts\mp\playerlogic::movenavobstaclemonitor() ) )
        scripts\mp\playerlogic::_id_12358( 0 );

    if ( level.gametype == "br" )
    {
        scripts\mp\gametypes\br.gsc::_id_130BA( self, self, 0, 1 );
        scripts\mp\gametypes\br_public.gsc::_id_123B9( 0 );
        self.combo_progression = undefined;
    }

    scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );

    if ( isdefined( level.supply_crate_vo_when_used ) )
        self [[ level.supply_crate_vo_when_used ]]( var_0 );

    waittillframeend;
    self.inlaststand = 0;
}

onrevive( var_0, var_1 )
{
    var_2 = self.laststandoldweaponobj;
    scripts\common\utility::allow_vehicle_use( 1 );
    scripts\common\utility::allow_crate_use( 1 );
    scripts\common\utility::blink_wheelson_chosen_spawn( 1 );

    if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
        scripts\mp\gametypes\br_plunder.gsc::_id_11A9B( self, 1, 1 );

    if ( isdefined( self.laststandactionset ) )
        scripts\mp\playeractions::allowactionset( self.laststandactionset, 1 );

    onexitcommon( 1 );
    self laststandrevive();
    self notify( "laststand_revived" );
    var_3 = level.setup_bot_brtdm;

    if ( var_3 != "none" )
        thread scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_2, 1 );

    if ( !istrue( var_1 ) )
    {
        var_4 = level.laststandrevivehealth;

        if ( !getdvarint( "scr_player_lastStandReviveRetainHealth" ) || self.health < level.laststandrevivehealth )
            self.health = level.laststandrevivehealth;
    }
    else
        self.health = self.maxhealth;

    if ( game["state"] == "postgame" )
        scripts\mp\gamelogic::freezeplayerforroundend();

    scripts\mp\playerlogic::_id_12358( 0 );

    if ( scripts\mp\utility\game::getgametype() == "br" && !istrue( self.gulag ) )
    {
        scripts\common\utility::allow_weapon_switch_clip( 1 );

        if ( !istrue( level._id_125B4 ) )
        {
            var_5 = scripts\mp\gametypes\br_public.gsc::ondamagerelicfromabove( self.team, self.squadindex );

            foreach ( var_7 in var_5 )
            {
                if ( !isdefined( var_7 ) )
                    continue;

                if ( var_7 != self )
                    var_7 thread scripts\mp\hud_message::showsplash( "br_teammate_revived", undefined, self );
            }
        }
    }

    scripts\cp_mp\utility\shellshock_utility::_stopshellshock();

    if ( istrue( var_0 ) && istrue( level.allowselfrevive ) )
        allowselfrevive( 0 );

    self.setquestrewardtierteamomnvar = undefined;
    self.setteamasextracted = undefined;
    self.setup_bot_hq = undefined;
    self.setsoundsubmixfadetoblackamb = undefined;
    self.setreduceregendelayonkill = undefined;
    self.setreduceregendelayonkills = undefined;
}

onbleedout()
{
    if ( !isdefined( self ) )
        return;

    thread onexitcommon();
    dropcarryobject();

    if ( isdefined( self.setquestrewardtierteamomnvar ) )
        self.setquestrewardtierteamomnvar thread scripts\mp\rank::scoreeventpopup( "kill_confirmed" );

    if ( level.gametype == "br" )
    {
        if ( !istrue( level.gameended ) )
        {
            self.getnexthelimodule = 0;
            self clearsoundsubmix( "deaths_door_mp" );
            self playlocalsound( "deaths_door_death" );
            self enableplayerbreathsystem( 1 );
        }
    }

    scripts\mp\utility\damage::_suicide();
}

ondeath( var_0 )
{
    if ( !isdefined( self ) )
        return;

    if ( isdefined( var_0 ) && isdefined( self.setquestrewardtierteamomnvar ) && istrue( self.setquestrewardtierteamomnvar.inlaststand ) )
        self.setquestrewardtierteamomnvar thread unset_force_aitype_shotgun( var_0, self.setteamasextracted, self.setup_bot_hq );

    if ( istrue( self.sat_wait_for_piece_added ) )
        self notify( "stopped_self_revive" );

    if ( level.gametype == "br" )
    {
        if ( !istrue( level.gameended ) )
        {
            self.getnexthelimodule = 0;
            self clearsoundsubmix( "deaths_door_mp" );
            self playlocalsound( "deaths_door_death" );
            self enableplayerbreathsystem( 1 );
        }
    }

    if ( isdefined( level.end_freight_lift ) )
        [[ level.end_freight_lift ]]( self, 1 );

    thread onexitcommon();
    dropcarryobject();
}

dropcarryobject()
{
    if ( isdefined( self.carryobject ) )
        self.carryobject thread scripts\mp\gameobjects::setdropped();
}

revivesetup( var_0 )
{
    var_0 endon( "death_or_disconnect" );
    level endon( "game_ended" );
    var_0 waittill( "last_stand_transition_done" );
    var_1 = spawn( "script_model", var_0.origin );
    var_1 setmodel( "tag_origin" );
    var_1 setcursorhint( "HINT_NOICON" );
    var_1 setusehideprogressbar( 1 );
    var_1 setuseholdduration( "duration_none" );
    var_1 sethintstring( &"MP/LASTSTAND_REVIVE_USE" );
    var_1 setusepriority( -2 );
    var_2 = var_0.team;
    var_1 linkto( var_0, "tag_origin", ( 0, 0, 6 ), ( 0, 0, 0 ) );
    var_1.owner = var_0;
    var_1.inuse = 0;
    var_1.id = "laststand_reviver";
    var_1.trigger = spawnstruct();
    var_1.trigger.owner = var_0;
    var_1.trigger.id = "laststand_reviver";
    var_1.trigger.targetname = "revive_trigger";
    var_1 makeusable();
    var_1 thread trackteamchanges( var_2 );
    var_1 thread revivetriggerthink( var_2 );
    var_1 thread endreviveonownerdeathordisconnect();

    if ( getdvarint( "scr_player_lastStandEnableSecondWind", 0 ) && getdvarint( "scr_player_enableSecondWindAndPistol", 0 ) )
        var_0 thread _id_121F4();

    var_0.laststandreviveent = var_1;
    level.laststandreviveents[var_1 getentitynumber()] = var_1;
    var_1 thread removereviveentfromlevelarrayondeath();

    if ( var_0 scripts\mp\gametypes\br_public.gsc::player_move() )
        var_0.laststandreviveent _id_1224F();
}

_id_121F4()
{
    var_0 = self;
    var_0 endon( "death_or_disconnect" );
    var_0 endon( "last_stand_finished" );
    level endon( "game_ended" );
    var_1 = gettime();
    var_0 waittill( "killed_enemy_in_last_stand", var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );

    for (;;)
    {
        if ( var_9 )
        {
            var_0 waittill( "killed_enemy_in_last_stand", var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );
            continue;
        }

        break;
    }

    var_11 = var_2.setquestrewardtierteamomnvar;

    if ( !isdefined( var_11 ) )
        var_11 = var_2;

    var_12 = isdefined( var_11 ) && var_11 != var_0;
    var_13 = var_9;
    var_14 = var_10 || isdefined( var_3 ) && var_3 getentitynumber() == worldentnumber();
    var_15 = gettime() - var_1;
    var_16 = float( var_15 / 1000.0 );

    if ( scripts\mp\utility\game::getgametype() == "br" )
        scripts\mp\gametypes\br_analytics.gsc::cloudorigin( var_0, var_11, var_2, var_5, var_6, var_7, var_8, var_12, var_13, var_14, var_16 );

    var_0 lastplundereventtype( "self_revive_on_kill_success", var_0 );
    var_0 thread scripts\mp\hud_message::showsplash( "br_second_wind" );
    var_17 = scripts\mp\utility\teams::getteamdata( var_0.team, "players" );

    foreach ( var_19 in var_17 )
    {
        if ( var_19 != var_0 && isalive( var_19 ) )
            var_19 thread scripts\mp\hud_message::showsplash( "br_teammate_second_wind", undefined, var_0 );
    }
}

unset_force_aitype_shotgun( var_0, var_1, var_2 )
{
    var_3 = var_0.victim;
    var_4 = var_0.inflictor;
    var_5 = var_0.objweapon;
    var_6 = var_0.meansofdeath;
    var_7 = var_0.weaponfullstring;
    var_8 = var_0.attacker != self;
    var_9 = istrue( var_0.assistedsuicide );
    var_10 = undefined;

    if ( isdefined( var_2 ) )
        var_10 = createheadicon( var_2 );

    self notify( "killed_enemy_in_last_stand", var_3, var_4, var_5, var_6, var_7, var_1, var_10, var_8, var_9 );
}

endreviveonownerdeathordisconnect()
{
    self endon( "death" );
    self.owner scripts\engine\utility::_id_133F0( "death_or_disconnect", "last_stand_finished", "last_stand_heal_active" );
    self delete();
}

removereviveentfromlevelarrayondeath()
{
    level endon( "game_ended" );
    var_0 = self getentitynumber();
    self waittill( "death" );
    level.laststandreviveents[var_0] = undefined;
}

updateusablebyteam( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( var_0 == var_2.team && var_2 != self.owner && !istrue( var_2 scripts\mp\utility\perk::_hasperk( "specialty_revive_use_weapon" ) ) )
            self enableplayeruse( var_2 );
        else
            self disableplayeruse( var_2 );

        if ( istrue( var_2 scripts\mp\utility\perk::_hasperk( "specialty_revive_use_weapon" ) ) )
            var_2.hiddenreviveents[self getentitynumber()] = self;
    }
}

trackteamchanges( var_0 )
{
    self endon( "death" );
    self.owner endon( "last_stand_finished" );

    for (;;)
    {
        updateusablebyteam( var_0 );
        level waittill( "joined_team" );
    }
}

revivetriggerthink( var_0 )
{
    self.owner endon( "last_stand_finished" );
    self.owner endon( "last_stand_heal_active" );
    self.owner endon( "disconnect" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "trigger", var_1 );

        if ( istrue( var_1.iszombie ) )
            continue;

        if ( var_1 scripts\mp\gametypes\br_public.gsc::zombie() )
            continue;

        while ( !var_1 isonground() && var_1 usebuttonpressed() )
            waitframe();

        if ( istrue( var_1.relic_squadlink_onsteppedfar ) )
        {
            var_1 notify( "br_try_armor_cancel" );

            while ( istrue( var_1.relic_squadlink_onsteppedfar ) && var_1 usebuttonpressed() )
                waitframe();
        }

        if ( !var_1 usebuttonpressed() )
            continue;

        self.owner scripts\mp\playerlogic::_id_12358( 1 );
        var_2 = 0;
        self.owner notify( "handle_revive_message" );
        self makeunusable();
        self.owner allowmovement( 0 );
        var_1 setlaststandreviving( 1 );
        var_1._id_11FC8 = 1;
        thread useholdthink( var_1 );
        var_1 thread _id_12B11( self.owner );

        if ( level.gametype == "br" )
            self.owner scripts\mp\gametypes\br_public.gsc::_id_123B9( 1 );

        var_3 = scripts\engine\utility::_id_133FF( "use_hold_revive_success", "use_hold_revive_fail", "death_or_disconnect" );

        if ( var_3 == "use_hold_revive_success" )
            var_2 = 1;

        var_1 notify( "finish_buddy_reviving" );
        self.owner scripts\mp\playerlogic::_id_12358( 0 );
        var_2 = self.owner lastplundereventtype( var_3, var_1 );

        if ( var_2 )
            return;

        thread decayreviveprogress();
        self makeusable();
        updateusablebyteam( var_0 );
    }
}

_id_12B11( var_0 )
{
    var_1 = self;
    var_1 endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( istrue( var_1._id_133D6 ) )
        return;

    var_2 = getcompleteweaponname( "teammate_revive_stim_mp" );
    var_3 = var_1 scripts\cp_mp\utility\killstreak_utility::createstreakinfo( "", var_1 );
    var_3._id_11FC7 = var_2;

    for ( var_4 = 0; !var_4 || istrue( var_1.cargo_truck ); var_1._id_133D6 = 1 )
    {
        var_4 = var_1 scripts\cp_mp\killstreaks\killstreakdeploy::switchtodeployweapon( var_2, var_3, ::_id_12BDC, undefined, ::update_bomb_vest_controller, undefined, ::update_bomb_vest_lua, 0 );
        waitframe();
    }

    var_1.cargo_truck = 1;
    var_1._id_133D6 = 0;
    var_1 thread _id_134E4();
    var_1 thread _id_13501( var_0 );
    var_1 thread _id_13502( var_0 );
}

update_bomb_vest_controller( var_0, var_1 )
{
    var_2 = self;
    var_2 disableweaponswitch();
}

update_bomb_vest_lua( var_0, var_1 )
{
    var_2 = self;
    var_2 enableweaponswitch();
    var_2 notify( "revive_stim_finished" );

    while ( isdefined( self.currentweapon ) && isdefined( self.currentweapon.basename ) && self.currentweapon.basename == "teammate_revive_stim_mp" )
        waitframe();

    waitframe();
    var_2.cargo_truck = 0;
}

_id_12BDC( var_0 )
{
    var_1 = self;
    level endon( "game_ended" );

    if ( !istrue( var_1._id_11FC8 ) )
        return;

    var_1 scripts\engine\utility::_id_133FF( "death_or_disconnect", "finish_buddy_reviving", "last_stand_start" );
}

_id_134E4()
{
    var_0 = self;
    var_0 endon( "finish_buddy_reviving" );
    var_0 endon( "disconnect" );
    level endon( "game_ended" );
    var_0 waittill( "death" );
    var_0 enableweaponswitch();
}

_id_13501( var_0 )
{
    var_1 = self;
    var_1 endon( "finish_buddy_reviving" );
    var_1 endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( isalive( var_0 ) )
        var_0 waittill( "death_or_disconnect" );

    var_1 notify( "finish_buddy_reviving" );
}

_id_13502( var_0 )
{
    var_1 = self;
    var_1 endon( "finish_buddy_reviving" );
    var_1 endon( "death_or_disconnect" );
    level endon( "game_ended" );
    var_0 waittill( "last_stand_revived" );
    var_1 notify( "finish_buddy_reviving" );
}

lastplundereventtype( var_0, var_1 )
{
    var_2 = self;
    var_3 = 0;

    if ( !isdefined( var_2 ) || !isalive( var_2 ) )
        return 0;

    if ( var_0 == "use_hold_revive_success" || var_0 == "self_revive_on_kill_success" || var_0 == "self_revive_success" )
        var_3 = 1;

    var_2.beingrevived = 0;
    var_2.sat_wait_for_piece_added = 0;

    if ( var_0 == "self_revive_success" )
        var_2 selfrevivingdoneanimevent();

    if ( level.gametype == "br" )
    {
        self.setroundwinstreakspecialcamos = undefined;
        var_2 scripts\mp\gametypes\br_public.gsc::_id_123B9( 0 );
        var_2 scripts\mp\gametypes\br_public.gsc::_id_123C2( 0 );
    }

    var_2 allowmovement( 1 );

    if ( var_3 )
    {
        var_2 scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
        var_2 notify( "last_stand_revived" );
        self.fastcrouchspeedmod = 0;
        scripts\mp\weapons::updatemovespeedscale();

        if ( level.gametype == "br" )
        {
            if ( !istrue( level.gameended ) )
            {
                var_2 scripts\mp\gametypes\br_public.gsc::_id_123BB( 0 );
                scripts\mp\events::revivedplayer( var_1, var_2 );
                scripts\cp\helicopter\chopper_boss::unset_force_aitype_sniper( var_1, var_2 );
                var_2 scripts\cp\helicopter\chopper_boss::_id_129AD( "alive_not_downed" );

                if ( var_1 != var_2 )
                    var_1 scripts\mp\utility\stats::incpersstat( "rescues", 1 );

                var_2 scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "onLastStandRevive", var_1 );
                var_2.getnexthelimodule = 0;
                var_2 stoplocalsound( "deaths_door_in" );

                if ( !istrue( var_2.clear_remaining_objective ) )
                {
                    var_2 playlocalsound( "deaths_door_out" );
                    var_2 clearsoundsubmix( "deaths_door_mp" );
                    var_2 playlocalsound( scripts\engine\utility::ter_op( scripts\mp\utility\player::isfemale(), "Fem_breathing_better", "breathing_better" ) );
                    var_2 enableplayerbreathsystem( 1 );
                }
            }

            if ( !scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() && !istrue( var_2.clear_remaining_objective ) )
                playsoundatpos( var_2.origin, "br_player_revived" );

            if ( isdefined( self.setteamplunderhud ) )
            {
                scripts\mp\utility\outline::outlinedisable( self.setteamplunderhud, self );
                self.setteamplunderhud = undefined;
            }
        }

        var_4 = var_2 setstance( "crouch" );

        if ( !var_4 )
            var_4 = var_2 setstance( "prone" );
    }

    var_2 _id_12B6A();
    var_2 thread fake_digit_pool();
    return var_3;
}

fake_digit_pool()
{
    self endon( "death_or_disconnect" );

    if ( level.gametype != "br" )
        return;

    scripts\common\utility::allow_offhand_secondary_weapons( 0, "laststand_throwback" );

    while ( self isthrowingbackgrenade() )
    {
        self._id_12C59 = 1;
        self giveandfireoffhand( "rock_mp" );
        wait 1;
    }

    scripts\common\utility::allow_offhand_secondary_weapons( 1, "laststand_throwback" );
}

decayreviveprogress()
{
    self.owner endon( "last_stand_finished" );
    self.owner endon( "last_stand_heal_active" );
    self.owner endon( "disconnect" );
    self endon( "use_hold_revive_start" );
    self endon( "self_revive_start" );
    self endon( "death" );
    level endon( "game_ended" );
    var_0 = level.setup_backup_respawn_points_in_verdansk;

    if ( var_0 <= 0 )
        return;

    for (;;)
    {
        self.curprogress = self.curprogress - level.frameduration * var_0;

        if ( self.curprogress <= 0 )
        {
            self.curprogress = 0;
            return;
        }

        waitframe();
    }
}

useholdthink( var_0, var_1 )
{
    self.owner endon( "last_stand_finished" );
    var_0 endon( "death" );
    level endon( "game_ended" );
    var_2 = self.owner;
    var_3 = getdvarint( "scr_player_lastStandAllyDragEnable" );
    var_4 = spawn( "script_origin", self.origin );
    var_4 hide();

    if ( !var_3 )
        var_0 scripts\mp\playeractions::allowactionset( "laststand_revive", 0 );

    self notify( "use_hold_revive_start" );
    var_0 thread _id_12498();

    if ( var_3 )
        dragallyprototype( var_0, var_2 );

    if ( !isdefined( self.curprogress ) )
        self.curprogress = 0;

    self.inuse = 1;
    self.userate = 0;
    var_5 = 0;

    if ( isdefined( var_1 ) )
        self.usetime = var_1;
    else if ( var_0 scripts\mp\utility\perk::_hasperk( "specialty_medic" ) )
        self.usetime = scripts\mp\utility\dvars::getwatcheddvar( "lastStandReviveTimer" ) * 1000 * getdvarfloat( "perk_medicReviveSpeedRatio" );
    else
        self.usetime = scripts\mp\utility\dvars::getwatcheddvar( "lastStandReviveTimer" ) * 1000;

    if ( scripts\mp\utility\game::getgametype() == "br" && var_0 scripts\mp\utility\perk::_hasperk( "specialty_br_faster_revive" ) )
        self.usetime = self.usetime * 0.75;

    level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_0, "reviving" );
    thread useholdthinkcleanup( var_0, var_4 );
    thread useholdthinkloop( var_0 );
}

dragallyprototype( var_0, var_1 )
{
    var_2 = self;
    var_1 playerlinkto( var_0 );
    var_1 playerlinkedoffsetenable();
    var_1 allowmovement( 0 );
    var_0 setmovespeedscale( getdvarfloat( "scr_player_lastStandAllyDragMoveSpeed" ) );
}

cleanupdragallyprototype( var_0, var_1 )
{
    var_1 unlink();
    var_1 allowmovement( 1 );
    var_0 setmovespeedscale( 1 );
}

useholdthinkcleanup( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    var_2 = getdvarint( "scr_player_lastStandAllyDragEnable" );
    var_3 = self.owner;
    var_4 = var_3 scripts\engine\utility::_id_13400( "death_or_disconnect", "use_hold_think_success", "use_hold_think_fail", "last_stand_finished" );
    self.inuse = 0;
    var_1 delete();
    var_0 buddyrevivingdoneanimevent();
    var_0 setlaststandreviving( 0 );
    var_0._id_11FC8 = 0;

    if ( isdefined( var_0 ) )
        var_0 scripts\mp\gameobjects::updateuiprogress( self, 0 );

    if ( isdefined( var_3 ) )
        var_3 scripts\mp\gameobjects::updateuiprogress( self, 0 );

    if ( scripts\mp\utility\player::isreallyalive( var_0 ) )
    {
        if ( var_2 )
            cleanupdragallyprototype( var_0, var_3 );
        else
            var_0 scripts\mp\playeractions::allowactionset( "laststand_revive", 1 );
    }

    var_0 notify( "sfx_revive_done" );

    if ( var_4 == "use_hold_think_success" )
    {
        var_0 thread scripts\mp\utility\points::giveunifiedpoints( "reviver" );

        if ( istrue( level.allowselfrevive ) )
            var_0 allowselfrevive( 1 );

        var_3 thread scripts\mp\rank::scoreeventpopup( "revived" );
        var_3 thread scripts\mp\hud_message::showsplash( "revived", undefined, var_0 );
        var_3.inlaststand = 0;
        self notify( "use_hold_revive_success" );
        return;
    }
    else if ( var_4 == "use_hold_think_fail" )
        var_3 notify( "handle_revive_message" );

    self notify( "use_hold_revive_fail" );
}

_id_12498()
{
    var_0 = spawn( "script_origin", self.origin );
    var_0 linkto( self );
    var_0 playloopsound( "br_reviver_use_lp" );
    self waittill( "sfx_revive_done" );
    playsoundatpos( self.origin, "br_reviver_use_end" );
    var_0 delete();
}

useholdthinkloop( var_0 )
{
    var_1 = self.owner;
    level endon( "game_ended" );
    var_1 endon( "death_or_disconnect" );
    var_1 endon( "last_stand_finished" );

    while ( scripts\mp\utility\player::isreallyalive( var_0 ) && var_0 usebuttonpressed() && self.curprogress < self.usetime && ( !isdefined( var_0.inlaststand ) || !var_0.inlaststand ) && distancesquared( var_0.origin, self.origin ) <= 65536 )
    {
        if ( istrue( var_0.tacopsmedicrole ) )
            return scripts\mp\utility\player::isreallyalive( var_0 );

        self.curprogress = self.curprogress + level.frameduration * self.userate;
        self.userate = 1;
        var_0 scripts\mp\gameobjects::updateuiprogress( self, 1 );

        if ( self.curprogress >= self.usetime )
        {
            var_1 notify( "use_hold_think_success" );
            return;
        }

        waitframe();
    }

    var_1 notify( "use_hold_think_fail" );
    return;
}

suicidesetup()
{
    self endon( "death_or_disconnect" );
    self endon( "last_stand_finished" );
    level endon( "game_ended" );
    thread showsuicidehintstring();

    if ( !isbot( self ) )
        thread _id_12AC0();

    var_0 = 0;

    for (;;)
    {
        waitframe();

        if ( self stancebuttonpressed() && self isinexecutionvictim() == 0 && !scripts\mp\playerlogic::movenavobstaclemonitor() )
        {
            var_0 = var_0 + level.framedurationseconds;

            if ( var_0 >= 0.5 )
                break;
        }
        else
            var_0 = 0;
    }

    _id_12AC1();
}

_id_12AC0()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    self notifyonplayercommand( "stance_pressed_down", "+movedown" );
    self notifyonplayercommand( "stance_pressed_up", "-movedown" );
    self notifyonplayercommand( "stance_pressed_down", "+stancedown" );
    self notifyonplayercommand( "stance_pressed_up", "-stancedown" );
    var_0 = gettime();
    var_1 = 0;
    var_2 = 0;
    var_3 = 500.0;
    var_4 = 0;

    while ( !var_4 && !var_1 )
    {
        var_1 = 0;

        if ( !var_2 )
            var_0 = gettime();

        var_5 = scripts\engine\utility::_id_13407( 0.5, "stance_pressed_down", "stance_pressed_up", "last_stand_finished", "last_stand_self_revive", "last_stand_bleedout" );

        switch ( var_5 )
        {
            case "stance_pressed_down":
                var_0 = gettime();
                var_2 = 1;
                break;
            case "stance_pressed_up":
            case "timeout":
                if ( var_2 && gettime() - var_0 >= var_3 )
                    var_1 = 1;

                var_2 = 0;
                break;
            default:
                var_4 = 1;
                break;
        }

        waitframe();
    }

    if ( var_1 )
        _id_12AC1();

    self notifyonplayercommandremove( "stance_pressed_down", "+movedown" );
    self notifyonplayercommandremove( "stance_pressed_up", "-movedown" );
    self notifyonplayercommandremove( "stance_pressed_down", "+stancedown" );
    self notifyonplayercommandremove( "stance_pressed_up", "-stancedown" );
}

_id_12AC1()
{
    if ( istrue( self.allowselfrevive ) )
        self notify( "last_stand_self_revive" );
    else
        self notify( "last_stand_bleedout" );
}

showsuicidehintstring()
{
    if ( istrue( self.allowselfrevive ) )
        self forceusehinton( &"MP/HEROES_RETURN" );
    else if ( level.gametype != "br" )
        thread handlerevivemessage();

    scripts\engine\utility::waittill_any_ents( self, "death_or_disconnect", self, "last_stand_finished", level, "game_ended" );

    if ( !isdefined( self ) )
        return;

    scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    self forceusehintoff();
}

handlerevivemessage()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "last_stand_finished" );

    for (;;)
    {
        scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
        var_0 = 0;
        var_1 = scripts\mp\supers::getcurrentsuperref();

        if ( isdefined( var_1 ) && var_1 == "super_laststand_heal" && scripts\mp\supers::issuperready() )
            var_0 = 1;

        if ( istrue( scripts\mp\playerlogic::movenavobstaclemonitor() ) )
            scripts\mp\utility\lower_message::setlowermessageomnvar( 22 );
        else if ( istrue( self.laststandhealisactive ) )
            scripts\mp\utility\lower_message::setlowermessageomnvar( 23 );
        else if ( isdefined( self.timeuntilbleedout ) )
        {
            if ( var_0 )
                scripts\mp\utility\lower_message::setlowermessageomnvar( 19, int( gettime() + self.timeuntilbleedout * 1000 ) );
            else if ( scripts\mp\utility\game::getgametype() != "dm" )
            {
                if ( self.pers["lives"] == 0 && scripts\mp\utility\game::isteamreviveenabled() )
                    scripts\mp\utility\lower_message::setlowermessageomnvar( 5, int( gettime() + self.timeuntilbleedout * 1000 ) );
                else
                    scripts\mp\utility\lower_message::setlowermessageomnvar( 20, int( gettime() + self.timeuntilbleedout * 1000 ) );
            }
            else
                scripts\mp\utility\lower_message::setlowermessageomnvar( 21, int( gettime() + self.timeuntilbleedout * 1000 ) );
        }
        else if ( var_0 )
            scripts\mp\utility\lower_message::setlowermessageomnvar( 19 );
        else if ( self.pers["lives"] == 0 && scripts\mp\utility\game::isteamreviveenabled() )
            scripts\mp\utility\lower_message::setlowermessageomnvar( 5 );
        else
            scripts\mp\utility\lower_message::setlowermessageomnvar( 20 );

        for (;;)
        {
            var_2 = scripts\engine\utility::_id_133FE( "super_ready", "handle_revive_message" );

            if ( var_2 == "super_ready" && scripts\mp\supers::getcurrentsuperref() != "super_laststand_heal" )
                continue;
            else
                break;
        }
    }
}

bleedoutthink()
{
    self endon( "death_or_disconnect" );
    self endon( "last_stand_finished" );
    self endon( "last_stand_heal_active" );
    level endon( "game_ended" );
    var_0 = self.timeuntilbleedout;

    if ( var_0 != 0 )
    {
        for (;;)
        {
            waitframe();

            if ( self isinexecutionvictim() )
                continue;

            if ( !istrue( scripts\mp\playerlogic::movenavobstaclemonitor() ) )
                var_0 = var_0 - level.framedurationseconds;

            if ( var_0 <= level.framedurationseconds )
            {
                self notify( "last_stand_bleedout" );
                break;
            }

            self.timeuntilbleedout = var_0;
        }
    }
}

addoverheadicon()
{
    var_0 = self.origin;
    var_1 = newteamhudelem( self.team );
    var_1.x = var_0[0];
    var_1.y = var_0[1];
    var_1.z = var_0[2] + 32;
    var_1.alpha = 1.0;
    var_1.archived = 0;
    var_1.showinkillcam = 0;

    if ( level.splitscreen )
        var_1 setshader( "hud_realism_head_revive", 10, 10 );
    else
        var_1 setshader( "hud_realism_head_revive", 5, 5 );

    var_1 setwaypoint( 0 );
    var_1 settargetent( self );
    thread cleanupoverheadicon( var_1 );
}

cleanupoverheadicon( var_0 )
{
    self waittill( "last_stand_finished" );
    var_0 destroy();
}

showwaverespawnmessage()
{
    var_0 = getdvarint( "scr_" + scripts\mp\utility\game::getgametype() + "_waverespawndelay" ) > 0;

    if ( !var_0 )
        return;

    self endon( "last_stand_finished" );

    for (;;)
    {
        self.respawntimerstarttime = gettime();
        var_0 = getdvarint( "scr_" + scripts\mp\utility\game::getgametype() + "_waverespawndelay" ) > 0;

        if ( var_0 )
        {
            var_1 = scripts\mp\playerlogic::timeuntilwavespawn( 0.0 );
            scripts\mp\utility\lower_message::setlowermessageomnvar( 10, int( gettime() + var_1 * 1000 ) );
            wait( var_1 );
            scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
        }

        wait 2.0;
    }
}

allowselfrevive( var_0 )
{
    self.allowselfrevive = var_0;
    self setclientomnvar( "ui_self_revive", var_0 );
}

laststandmonitor()
{
    level endon( "game_ended" );

    if ( istrue( level.settargetmarkerstate ) )
        return;

    for (;;)
    {
        waitframe();

        if ( scripts\mp\utility\game::getgametypenumlives() == 0 && !istrue( level.disablespawning ) )
            continue;

        level thread laststandkillteamifdown();
    }
}

laststandkillteamifdown()
{
    foreach ( var_1 in level.teamnamelist )
    {
        var_2 = scripts\mp\utility\teams::getfriendlyplayers( var_1, 1 );
        var_3 = [];

        foreach ( var_5 in var_2 )
        {
            if ( istrue( var_5.inlaststand ) )
                var_3[var_3.size] = var_5;
        }

        if ( var_3.size > 0 && var_2.size <= var_3.size )
        {
            level.laststandrequiresmelee = 0;

            foreach ( var_5 in var_3 )
            {
                if ( !isdefined( var_5 ) )
                    continue;

                var_5 notify( "last_stand_bleedout" );
            }
        }
    }
}

getclassiclaststandpistol()
{
    var_0 = self getweaponslistprimaries();

    foreach ( var_2 in var_0 )
    {
        var_3 = weaponclass( var_2 );

        if ( weaponclass( var_2 ) == "pistol" )
            return var_2;
    }

    var_2 = scripts\mp\class::buildweapon( scripts\mp\utility\weapon::getweaponrootname( "iw8_pi_golf21_mp" ), [], "none", "none", -1 );
    return var_2;
}

makelaststandinvuln()
{
    var_0 = level.laststandinvulntime;
    clearlaststandinvuln();
    self endon( "disconnect" );
    self endon( "clear_last_stand_invuln" );
    scripts\cp_mp\utility\damage_utility::adddamagemodifier( "last_stand_invuln", 0, 0, ::laststandinvulnignorefunc );
    scripts\engine\utility::waittill_notify_or_timeout( "death", var_0 );
    thread clearlaststandinvuln();
}

clearlaststandinvuln()
{
    self notify( "clear_last_stand_invuln" );
    scripts\cp_mp\utility\damage_utility::removedamagemodifier( "last_stand_invuln", 0 );
}

laststandinvulnignorefunc( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( var_4 == "MOD_TRIGGER_HURT" )
        return 1;

    return 0;
}

getdefaultlaststandtimervalue()
{
    return 10;
}

getdefaultlaststandrevivetimervalue()
{
    return 10;
}

getshellshockinterruptdelayms( var_0 )
{
    return var_0 * 1000;
}
