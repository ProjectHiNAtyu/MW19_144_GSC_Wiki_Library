// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.scoreinfo = [];
    var_0 = getdvarint( "LKKNORQKTP" );
    level.server_unlocked = getdvarint( "scr_kill_bracket_scaling_disable", 1 );

    if ( level.server_unlocked != 1 )
    {
        level.serverroomdogtagrevive = getdvarint( "scr_kill_bracket_start", 25 );
        level.server_triggered = getdvarint( "scr_kill_bracket_range", 10 );
        level.server_structs = getdvarint( "scr_kill_bracket_percent", 10 ) / 100;
        level.server_rack_clip = getdvarint( "scr_kill_bracket_count", 5 );
    }

    if ( var_0 > 4 || var_0 < 0 )
        exitlevel( 0 );

    addglobalrankxpmultiplier( var_0, "online_mp_xpscale" );
    var_1 = getdvarint( "LTKKKPSRSK" );

    if ( var_1 > 4 || var_1 < 0 )
        exitlevel( 0 );

    animscripted_clear( var_1, "online_battle_xpscale_dvar" );
    level.ranktable = [];
    level.weaponranktable = [];
    var_2 = _func_424();
    level.maxrank = int( tablelookup( var_2, 0, "maxrank", 1 ) );
    level.start_fly_over = int( tablelookup( var_2, 0, "maxelder", 1 ) );

    for ( var_3 = 0; var_3 <= level.maxrank; var_3++ )
    {
        level.ranktable[var_3][0] = int( tablelookup( var_2, 0, var_3, 2 ) );
        level.ranktable[var_3][1] = int( tablelookup( var_2, 0, var_3, 3 ) );
        level.ranktable[var_3][2] = int( tablelookup( var_2, 0, var_3, 7 ) );
        level.ranktable[var_3][3] = tablelookup( var_2, 0, var_3, 15 );
    }

    scripts\mp\weaponrank::init();
    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::onplayerspawned );
    level.prestigeextras = [];
    level thread onplayerconnect();
}

isregisteredevent( var_0 )
{
    if ( isdefined( level.scoreinfo[var_0] ) )
        return 1;
    else
        return 0;
}

registerscoreinfo( var_0, var_1, var_2 )
{
    level.scoreinfo[var_0][var_1] = var_2;

    if ( var_0 == "kill" && var_1 == "value" )
        setomnvar( "ui_game_type_kill_value", int( var_2 ) );
}

use_emp_drone_func( var_0, var_1 )
{
    var_2 = getdvarint( "scr_" + scripts\mp\utility\game::getgametype() + "_score_" + var_0, var_1 );
    level.scoreinfo[var_0]["value"] = var_2;
}

getscoreinfovalue( var_0 )
{
    var_1 = "scr_" + scripts\mp\utility\game::getgametype() + "_score_" + var_0;

    if ( getdvar( var_1 ) != "" )
        return getdvarint( var_1 );
    else
        return level.scoreinfo[var_0]["value"];
}

getscoreinfocategory( var_0, var_1 )
{
    if ( istrue( level.removekilleventsplash ) && !isdefined( level.scoreinfo[var_0] ) )
        return;

    switch ( var_1 )
    {
        case "value":
            var_2 = "scr_" + scripts\mp\utility\game::getgametype() + "_score_" + var_0;

            if ( getdvar( var_2 ) != "" )
                return getdvarint( var_2 );
            else
                return level.scoreinfo[var_0]["value"];
        default:
            return level.scoreinfo[var_0][var_1];
    }
}

getrankinfominxp( var_0 )
{
    return level.ranktable[var_0][0];
}

getrankinfoxpamt( var_0 )
{
    return level.ranktable[var_0][1];
}

getrankinfomaxxp( var_0 )
{
    return level.ranktable[var_0][2];
}

get_players_not_targeted_by_other_battle_station( var_0 )
{
    var_1 = spawnstruct();
    var_2 = level.loadoutsgroup;
    var_1.wave_time_set = var_0 getplayerdata( var_2, "squadMembers", "player_xp" );
    var_1._id_13571 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_ar_mike4" );
    var_1._id_1356A = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_ar_akilo47" );
    var_1._id_1356B = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_ar_asierra12" );
    var_1._id_1356D = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_ar_falpha" );
    var_1._id_13570 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_ar_mcharlie" );
    var_1._id_1356E = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_ar_golf36" );
    var_1._id_1356F = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_ar_kilo433" );
    var_1._id_1356C = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_ar_falima" );
    var_1._id_13572 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_ar_scharlie" );
    var_1._id_13590 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sm_mpapa5" );
    var_1._id_1358E = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sm_beta" );
    var_1._id_1358D = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sm_augolf" );
    var_1._id_13592 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sm_papa90" );
    var_1._id_13591 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sm_mpapa7" );
    var_1._id_13594 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sm_uzulu" );
    var_1._id_13595 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sm_victor" );
    var_1._id_13589 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sh_dpapa12" );
    var_1._id_13588 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sh_charlie725" );
    var_1._id_1358B = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sh_oscar12" );
    var_1._id_1358C = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sh_romeo870" );
    var_1._id_1357C = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_lm_kilo121" );
    var_1._id_13581 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_lm_pkilo" );
    var_1._id_1357D = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_lm_lima86" );
    var_1._id_1357E = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_lm_mgolf34" );
    var_1._id_1359D = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sn_mike14" );
    var_1._id_1359C = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sn_kilo98" );
    var_1._id_1359E = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sn_sbeta" );
    var_1._id_13596 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sn_alpha50" );
    var_1._id_13597 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sn_awhiskey" );
    var_1._id_13599 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sn_delta" );
    var_1._id_1359B = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sn_hdromeo" );
    var_1._id_13598 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sn_crossbow" );
    var_1._id_13587 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_pi_papa320" );
    var_1._id_13583 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_pi_cpapa" );
    var_1._id_13586 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_pi_mike1911" );
    var_1._id_13585 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_pi_golf21" );
    var_1._id_13584 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_pi_decho" );
    var_1._id_1357B = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_la_rpapa7" );
    var_1._id_13577 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_la_gromeo" );
    var_1._id_1357A = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_la_mike32" );
    var_1._id_13578 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_la_juliet" );
    var_1._id_13579 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_la_kgolf" );
    var_1._id_13576 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_knife" );
    var_1._id_13582 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_me_riotshield" );
    var_1._id_13575 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_fists" );
    var_1._id_1358F = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sm_charlie9" );
    var_1._id_13574 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_ar_tango21" );
    var_1._id_1357F = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_lm_mgolf36" );
    var_1._id_13573 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_ar_sierra552" );
    var_1._id_13580 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_lm_mkilo3" );
    var_1._id_1359A = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sn_golf28" );
    var_1._id_13593 = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sm_smgolf45" );
    var_1._id_1358A = var_0 getplayerdata( var_2, "squadMembers", "weapon_xp", "iw8_sh_mike26" );
    return var_1;
}

get_power_charges_in_slot( var_0, var_1, var_2 )
{
    var_3 = var_1 - var_0;

    if ( var_3 != 0 )
    {
        var_2.xp = var_2.xp + var_3;
        var_2.count++;
    }
}

get_positions_around_vector( var_0, var_1 )
{
    var_2 = var_1.wave_time_set - var_0.wave_time_set;
    var_3 = spawnstruct();
    var_3.xp = 0;
    var_3.count = 0;
    get_power_charges_in_slot( var_0._id_13571, var_1._id_13571, var_3 );
    get_power_charges_in_slot( var_0._id_1356A, var_1._id_1356A, var_3 );
    get_power_charges_in_slot( var_0._id_1356B, var_1._id_1356B, var_3 );
    get_power_charges_in_slot( var_0._id_1356D, var_1._id_1356D, var_3 );
    get_power_charges_in_slot( var_0._id_13570, var_1._id_13570, var_3 );
    get_power_charges_in_slot( var_0._id_1356E, var_1._id_1356E, var_3 );
    get_power_charges_in_slot( var_0._id_1356F, var_1._id_1356F, var_3 );
    get_power_charges_in_slot( var_0._id_1356C, var_1._id_1356C, var_3 );
    get_power_charges_in_slot( var_0._id_13572, var_1._id_13572, var_3 );
    get_power_charges_in_slot( var_0._id_13590, var_1._id_13590, var_3 );
    get_power_charges_in_slot( var_0._id_1358E, var_1._id_1358E, var_3 );
    get_power_charges_in_slot( var_0._id_1358D, var_1._id_1358D, var_3 );
    get_power_charges_in_slot( var_0._id_13592, var_1._id_13592, var_3 );
    get_power_charges_in_slot( var_0._id_13591, var_1._id_13591, var_3 );
    get_power_charges_in_slot( var_0._id_13594, var_1._id_13594, var_3 );
    get_power_charges_in_slot( var_0._id_13595, var_1._id_13595, var_3 );
    get_power_charges_in_slot( var_0._id_13589, var_1._id_13589, var_3 );
    get_power_charges_in_slot( var_0._id_13588, var_1._id_13588, var_3 );
    get_power_charges_in_slot( var_0._id_1358B, var_1._id_1358B, var_3 );
    get_power_charges_in_slot( var_0._id_1358C, var_1._id_1358C, var_3 );
    get_power_charges_in_slot( var_0._id_1357C, var_1._id_1357C, var_3 );
    get_power_charges_in_slot( var_0._id_13581, var_1._id_13581, var_3 );
    get_power_charges_in_slot( var_0._id_1357D, var_1._id_1357D, var_3 );
    get_power_charges_in_slot( var_0._id_1357E, var_1._id_1357E, var_3 );
    get_power_charges_in_slot( var_0._id_1359D, var_1._id_1359D, var_3 );
    get_power_charges_in_slot( var_0._id_1359C, var_1._id_1359C, var_3 );
    get_power_charges_in_slot( var_0._id_1359E, var_1._id_1359E, var_3 );
    get_power_charges_in_slot( var_0._id_13596, var_1._id_13596, var_3 );
    get_power_charges_in_slot( var_0._id_13597, var_1._id_13597, var_3 );
    get_power_charges_in_slot( var_0._id_13599, var_1._id_13599, var_3 );
    get_power_charges_in_slot( var_0._id_1359B, var_1._id_1359B, var_3 );
    get_power_charges_in_slot( var_0._id_13598, var_1._id_13598, var_3 );
    get_power_charges_in_slot( var_0._id_13587, var_1._id_13587, var_3 );
    get_power_charges_in_slot( var_0._id_13583, var_1._id_13583, var_3 );
    get_power_charges_in_slot( var_0._id_13586, var_1._id_13586, var_3 );
    get_power_charges_in_slot( var_0._id_13585, var_1._id_13585, var_3 );
    get_power_charges_in_slot( var_0._id_13584, var_1._id_13584, var_3 );
    get_power_charges_in_slot( var_0._id_1357B, var_1._id_1357B, var_3 );
    get_power_charges_in_slot( var_0._id_13577, var_1._id_13577, var_3 );
    get_power_charges_in_slot( var_0._id_1357A, var_1._id_1357A, var_3 );
    get_power_charges_in_slot( var_0._id_13578, var_1._id_13578, var_3 );
    get_power_charges_in_slot( var_0._id_13579, var_1._id_13579, var_3 );
    get_power_charges_in_slot( var_0._id_13576, var_1._id_13576, var_3 );
    get_power_charges_in_slot( var_0._id_13582, var_1._id_13582, var_3 );
    get_power_charges_in_slot( var_0._id_13575, var_1._id_13575, var_3 );
    get_power_charges_in_slot( var_0._id_1358F, var_1._id_1358F, var_3 );
    get_power_charges_in_slot( var_0._id_13574, var_1._id_13574, var_3 );
    get_power_charges_in_slot( var_0._id_1357F, var_1._id_1357F, var_3 );
    get_power_charges_in_slot( var_0._id_13573, var_1._id_13573, var_3 );
    get_power_charges_in_slot( var_0._id_13580, var_1._id_13580, var_3 );
    get_power_charges_in_slot( var_0._id_1359A, var_1._id_1359A, var_3 );
    get_power_charges_in_slot( var_0._id_13593, var_1._id_13593, var_3 );
    get_power_charges_in_slot( var_0._id_1358A, var_1._id_1358A, var_3 );

    if ( var_2 != 0 || var_3.xp != 0 )
        self dlog_recordplayerevent( "dlog_event_player_stats_hack", [ "player_xp_start", var_0.wave_time_set, "player_xp_end", var_1.wave_time_set, "diff_weapon_xp_count", var_3.count, "diff_weapon_xp", var_3.xp ] );
}

onplayerconnect()
{
    for (;;)
    {
        level waittill( "connected", var_0 );

        if ( !isai( var_0 ) )
            var_0.get_power_name_in_slot = get_players_not_targeted_by_other_battle_station( var_0 );

        if ( !isai( var_0 ) )
        {
            if ( level.playerxpenabled )
            {
                var_0.pers["rankxp"] = var_0 getplayerdata( level.loadoutsgroup, "squadMembers", "player_xp" );
                var_0.pers["battlepassxp"] = var_0 getplayerdata( level.loadoutsgroup, "squadMembers", "battlepass_xp" );
                var_1 = var_0 getplayerdata( level.loadoutsgroup, "squadMembers", "season_rank" );

                if ( !isdefined( var_0.pers["xpEarnedThisMatch"] ) )
                    var_0.pers["xpEarnedThisMatch"] = 0;
            }
            else
            {
                var_1 = 0;
                var_0.pers["rankxp"] = 0;
                var_0.pers["battlepassxp"] = 0;
            }
        }
        else
        {
            var_1 = 0;
            var_0.pers["rankxp"] = 0;
            var_0.pers["battlepassxp"] = 0;
        }

        var_0.pers["weaponxp"] = [];

        if ( var_0.pers["rankxp"] < 0 )
            var_0.pers["rankxp"] = 0;

        if ( var_0.pers["battlepassxp"] < 0 )
            var_0.pers["battlepassxp"] = 0;

        var_2 = var_0 getrankxp();
        var_3 = var_0 getrankforxp( var_2 );
        var_4 = var_0 omnvars( var_2 );
        var_0.pers["rank"] = var_3;
        var_0.pers["prestige"] = var_1;
        var_0 setrank( var_3 + var_4, var_1 );
        var_0.pers["participation"] = 0;
        var_0.scoreupdatetotal = 0;
        var_0.scorepointsqueue = 0;
        var_0.scoreeventqueue = [];
        var_0.postgamepromotion = 0;
        var_0 setclientdvar( "ui_promotion", 0 );

        if ( !isdefined( var_0.pers["summary"] ) )
        {
            var_0.pers["summary"] = [];
            var_0.pers["summary"]["xp"] = 0;
            var_0.pers["summary"]["score"] = 0;
            var_0.pers["summary"]["challenge"] = 0;
            var_0.pers["summary"]["match"] = 0;
            var_0.pers["summary"]["misc"] = 0;
            var_0.pers["summary"]["medal"] = 0;
            var_0.pers["summary"]["bonusXP"] = 0;
        }

        var_0 setclientdvar( "MQNNLTKNTS", 0 );

        if ( level.playerxpenabled )
        {
            var_5 = getdvarint( "NTLKOKLKRS" );
            var_6 = var_0 getprivatepartysize() > 1;

            if ( var_6 )
                var_0 addrankxpmultiplier( var_5, "online_mp_party_xpscale" );

            if ( var_0 getplayerdata( "mp", "prestigeDoubleWeaponXp" ) )
                var_0.prestigedoubleweaponxp = 1;
            else
                var_0.prestigedoubleweaponxp = 0;
        }

        var_0.scoreeventcount = 0;
        var_0.scoreeventlistindex = 0;
        var_0 setclientomnvar( "ui_score_event_control", -1 );
        var_0 setclientomnvar( "ui_potg_score_event_control", -1 );
    }
}

onplayerspawned()
{
    if ( isai( self ) )
        self.pers["rankxp"] = scripts\mp\bots\bots_util::get_rank_xp_for_bot();
    else if ( !level.playerxpenabled )
        self.pers["rankxp"] = 0;
    else
    {

    }

    playerupdaterank();
}

playerupdaterank()
{
    var_0 = self.pers["rankxp"];

    if ( var_0 < 0 )
    {
        var_0 = 0;
        self.pers["rankxp"] = 0;
    }

    var_1 = getrankforxp( var_0 );
    self.pers["rank"] = var_1;

    if ( isai( self ) || !isdefined( self.pers["prestige"] ) )
    {
        if ( level.playerxpenabled && isdefined( self.bufferedstats ) )
            var_2 = getprestigelevel();
        else
            var_2 = 0;

        self setrank( var_1, var_2 );
        self.pers["prestige"] = var_2;
    }
}

tryresetrankxp()
{
    if ( issubstr( self.class, "custom" ) )
    {
        if ( !level.playerxpenabled )
            self.pers["rankxp"] = 0;
        else if ( isai( self ) )
            self.pers["rankxp"] = 0;
        else
        {

        }
    }
}

giverankxp( var_0, var_1, var_2, var_3, var_4 )
{
    self endon( "disconnect" );

    if ( isdefined( self.owner ) && !isbot( self ) )
    {
        self.owner giverankxp( var_0, var_1, var_2 );
        return;
    }

    if ( isai( self ) || !isplayer( self ) )
        return;

    var_5 = botnodeavailabletoteam( self );
    var_1 = int( var_1 * var_5 );

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    if ( !isdefined( var_4 ) )
        var_4 = 0;

    if ( !level.playerxpenabled )
    {
        if ( var_3 == 0 )
            scripts\mp\utility\points::displayscoreeventpoints( var_1, var_0 );

        return;
    }

    if ( !isdefined( var_1 ) || var_1 == 0 )
        return;

    var_6 = getscoreinfocategory( var_0, "group" );

    if ( ( !isdefined( level.forceranking ) || !level.forceranking ) && !scripts\mp\menus::boltunlinkonnote() )
    {
        if ( level.teambased )
        {
            var_7 = 0;

            foreach ( var_9 in level.teamnamelist )
            {
                if ( scripts\mp\utility\teams::getteamdata( var_9, "teamCount" ) )
                {
                    var_7++;

                    if ( var_7 >= 2 )
                        break;
                }
            }

            if ( var_7 < 2 )
                return;
        }
        else
        {
            var_11 = 0;

            foreach ( var_9 in level.teamnamelist )
            {
                var_11 = var_11 + scripts\mp\utility\teams::getteamdata( var_9, "teamCount" );

                if ( var_11 >= 2 )
                    break;
            }

            if ( var_11 < 2 )
                return;
        }
    }

    var_1 = bot_hq_think( var_1 );
    var_14 = getscoreinfocategory( var_0, "allowBonus" );
    var_15 = 1.0;
    var_16 = var_1;
    var_17 = 0;

    if ( istrue( var_14 ) )
    {
        var_15 = getrankxpmultipliertotal();
        var_16 = int( var_1 * var_15 );
        var_17 = int( max( var_16 - var_1, 0 ) );
    }

    if ( !var_3 )
        scripts\mp\utility\points::displayscoreeventpoints( var_16, var_0 );

    thread waitandapplyxp( var_0, var_1, var_16, var_17, var_2, var_4 );
}

bot_hq_think( var_0 )
{
    var_1 = var_0;

    if ( level.server_unlocked != 1 )
    {
        if ( self.kills > level.serverroomdogtagrevive )
        {
            var_2 = min( int( 1 + ( self.kills - level.serverroomdogtagrevive ) / level.server_triggered ), level.server_rack_clip );
            var_3 = 1 - level.server_structs * var_2;
            var_1 = int( var_0 * var_3 );
        }
    }

    return var_1;
}

waitandapplyxp( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    self endon( "disconnect" );

    if ( !isdefined( var_5 ) )
        var_5 = 0;

    if ( !var_5 )
    {
        waitframe();
        scripts\mp\utility\script::waittillslowprocessallowed();
    }

    var_6 = getrankxp();

    if ( updaterank( var_6 ) )
    {

    }

    syncxpstat();
    var_7 = 0;

    if ( isdefined( var_4 ) )
    {
        if ( isdefined( var_4.vandalize_attack_max_cooldown ) )
            var_4 = var_4.vandalize_attack_max_cooldown;

        if ( scripts\mp\weaponrank::weaponshouldgetxp( var_4.basename ) )
        {
            var_7 = var_1;
            var_7 = var_7 * scripts\mp\weaponrank::getweaponrankxpmultipliertotal();
            var_7 = int( var_7 );
        }
    }

    incrankxp( var_2, var_4, var_7, var_0 );

    if ( level.playerxpenabled && !isai( self ) )
    {
        if ( isdefined( var_4 ) && ( scripts\mp\utility\weapon::iscacprimaryweapon( var_4 ) || scripts\mp\utility\weapon::iscacsecondaryweapon( var_4 ) ) )
        {
            if ( !scripts\mp\utility\weapon::ispickedupweapon( var_4 ) || scripts\mp\utility\game::getgametype() == "br" )
                scripts\common\utility::_id_12ED6( level.stadium_three_death_func, scripts\mp\utility\weapon::getweaponrootname( var_4 ), "xp_earned", var_7, -1, var_4 );
        }
    }

    recordxpgains( var_0, var_1, var_3 );
    var_8 = getprestigelevel();
    var_9 = getrank();
}

recordxpgains( var_0, var_1, var_2 )
{
    var_3 = var_1 + var_2;
    var_4 = getscoreinfocategory( var_0, "group" );

    if ( !isdefined( var_4 ) || var_4 == "" )
    {
        self.pers["summary"]["misc"] = self.pers["summary"]["misc"] + var_1;
        self.pers["summary"]["bonusXP"] = self.pers["summary"]["bonusXP"] + var_2;
        self.pers["summary"]["xp"] = self.pers["summary"]["xp"] + var_3;
        return;
    }

    switch ( var_4 )
    {
        case "match_bonus":
            self.pers["summary"]["match"] = self.pers["summary"]["match"] + var_1;
            self.pers["summary"]["bonusXP"] = self.pers["summary"]["bonusXP"] + var_2;
            self.pers["summary"]["xp"] = self.pers["summary"]["xp"] + var_3;
            break;
        case "challenge":
            self.pers["summary"]["challenge"] = self.pers["summary"]["challenge"] + var_1;
            self.pers["summary"]["bonusXP"] = self.pers["summary"]["bonusXP"] + var_2;
            self.pers["summary"]["xp"] = self.pers["summary"]["xp"] + var_3;
            break;
        case "medal":
            if ( !isdefined( self.pers["combatXP"] ) )
                self.pers["combatXP"] = var_1;
            else
                self.pers["combatXP"] = self.pers["combatXP"] + var_1;

            self.pers["summary"]["medal"] = self.pers["summary"]["medal"] + var_1;
            self.pers["summary"]["bonusXP"] = self.pers["summary"]["bonusXP"] + var_2;
            self.pers["summary"]["xp"] = self.pers["summary"]["xp"] + var_3;
            break;
        case "combat":
            if ( !isdefined( self.pers["combatXP"] ) )
                self.pers["combatXP"] = var_1;
            else
                self.pers["combatXP"] = self.pers["combatXP"] + var_1;

            self.pers["summary"]["score"] = self.pers["summary"]["score"] + var_1;
            self.pers["summary"]["bonusXP"] = self.pers["summary"]["bonusXP"] + var_2;
            self.pers["summary"]["xp"] = self.pers["summary"]["xp"] + var_3;
            break;
        case "looting":
            if ( !isdefined( self.pers["lootingXP"] ) )
                self.pers["lootingXP"] = var_1;
            else
                self.pers["lootingXP"] = self.pers["lootingXP"] + var_1;

            self.pers["summary"]["score"] = self.pers["summary"]["score"] + var_1;
            self.pers["summary"]["bonusXP"] = self.pers["summary"]["bonusXP"] + var_2;
            self.pers["summary"]["xp"] = self.pers["summary"]["xp"] + var_3;
            break;
        case "missions":
            if ( !isdefined( self.pers["missionXP"] ) )
                self.pers["missionXP"] = var_1;
            else
                self.pers["missionXP"] = self.pers["missionXP"] + var_1;

            self.pers["summary"]["score"] = self.pers["summary"]["score"] + var_1;
            self.pers["summary"]["bonusXP"] = self.pers["summary"]["bonusXP"] + var_2;
            self.pers["summary"]["xp"] = self.pers["summary"]["xp"] + var_3;
            break;
        default:
            self.pers["summary"]["score"] = self.pers["summary"]["score"] + var_1;
            self.pers["summary"]["bonusXP"] = self.pers["summary"]["bonusXP"] + var_2;
            self.pers["summary"]["xp"] = self.pers["summary"]["xp"] + var_3;
            break;
    }
}

updaterank( var_0 )
{
    var_1 = getrank();
    var_2 = getprestigelevel();
    var_3 = self.pers["rank"] + self.pers["prestige"];
    var_4 = var_1 + var_2;
    self.pers["rank"] = var_1;
    self.pers["prestige"] = var_2;

    if ( var_4 == var_3 || var_4 >= level.maxrank + level.start_fly_over )
        return 0;

    self setrank( var_1, var_2 );
    return 1;
}

updaterankannouncehud()
{
    self endon( "disconnect" );
    self notify( "update_rank" );
    self endon( "update_rank" );
    var_0 = self.pers["team"];

    if ( !isdefined( var_0 ) )
        return;

    if ( !scripts\mp\flags::levelflag( "game_over" ) )
        level scripts\engine\utility::waittill_notify_or_timeout( "game_over", 0.25 );

    var_1 = self.pers["rank"] + self.pers["prestige"];

    for ( var_2 = 0; var_2 < level.players.size; var_2++ )
    {
        var_3 = level.players[var_2];
        var_4 = var_3.pers["team"];

        if ( isdefined( var_4 ) && var_4 == var_0 )
            var_3 iprintln( &"RANK/PLAYER_WAS_PROMOTED", self, var_1 + 1 );
    }
}

queuescorepointspopup( var_0 )
{
    self.scorepointsqueue = self.scorepointsqueue + var_0;
}

flushscorepointspopupqueue()
{
    scorepointspopup( self.scorepointsqueue );
    self.scorepointsqueue = 0;
}

flushscorepointspopupqueueonspawn()
{
    self endon( "disconnect" );
    self endon( "joined_team" );
    self endon( "joined_spectators" );
    self notify( "flushScorePointsPopupQueueOnSpawn()" );
    self endon( "flushScorePointsPopupQueueOnSpawn()" );
    self waittill( "spawned_player" );
    wait 0.1;
    flushscorepointspopupqueue();
}

scorepointspopup( var_0, var_1 )
{
    self endon( "disconnect" );
    self endon( "joined_team" );
    self endon( "joined_spectators" );

    if ( var_0 == 0 )
        return;

    if ( !scripts\mp\utility\player::isreallyalive( self ) && !self ismlgspectator() && !scripts\mp\utility\player::isusingremote() )
    {
        if ( !istrue( var_1 ) || scripts\mp\utility\player::isinkillcam() )
        {
            queuescorepointspopup( var_0 );
            thread flushscorepointspopupqueueonspawn();
            return;
        }
    }

    self notify( "scorePointsPopup" );
    self endon( "scorePointsPopup" );
    self.scoreupdatetotal = self.scoreupdatetotal + var_0;
    self setclientomnvar( "ui_points_popup", self.scoreupdatetotal );
    self setclientomnvar( "ui_points_popup_notify", gettime() );
    wait 1.0;
    self.scoreupdatetotal = 0;
}

notifyplayerscore()
{
    waitframe();
    level notify( "update_player_score", self, self.scoreupdatetotal );
}

queuescoreeventpopup( var_0 )
{
    self.scoreeventqueue[self.scoreeventqueue.size] = var_0;
}

flushscoreeventpopupqueue()
{
    var_0 = self.scoreeventqueue;
    self.scoreeventqueue = [];

    foreach ( var_2 in var_0 )
        scoreeventpopup( var_2 );
}

flushscoreeventpopupqueueonspawn()
{
    self endon( "disconnect" );
    self endon( "joined_team" );
    self endon( "joined_spectators" );
    self notify( "flushScoreEventPopupQueueOnSpawn()" );
    self endon( "flushScoreEventPopupQueueOnSpawn()" );
    self waittill( "spawned_player" );
    wait 0.1;
    flushscoreeventpopupqueue();
}

getscoreeventpriority( var_0 )
{
    if ( getdvarint( "scr_disableScoreSplash", 0 ) == 1 )
        return 0;

    var_1 = getscoreinfocategory( var_0, "priority" );

    if ( !istrue( var_1 ) )
        return 0;

    return var_1;
}

scoreeventalwaysshowassplash( var_0 )
{
    if ( getdvarint( "scr_disableScoreSplash", 0 ) == 1 )
        return 0;

    var_1 = getscoreinfocategory( var_0, "alwaysShowSplash" );

    if ( !istrue( var_1 ) )
        return 0;

    return 1;
}

scoreeventhastext( var_0 )
{
    if ( getdvarint( "scr_disableScoreSplash", 0 ) == 1 )
        return 0;

    var_1 = getscoreinfocategory( var_0, "eventID" );
    var_2 = getscoreinfocategory( var_0, "text" );

    if ( !isdefined( var_1 ) || var_1 < 0 || !isdefined( var_2 ) || var_2 == "" )
        return 0;

    return 1;
}

scoreeventpopup( var_0 )
{
    if ( getdvarint( "scr_disableScoreSplash", 0 ) == 1 )
        return;

    if ( isdefined( self.owner ) )
        self.owner scoreeventpopup( var_0 );

    if ( !isplayer( self ) )
        return;

    var_1 = getscoreinfocategory( var_0, "eventID" );
    var_2 = getscoreinfocategory( var_0, "text" );

    if ( !isdefined( var_1 ) || var_1 < 0 || !isdefined( var_2 ) || var_2 == "" )
        return;

    if ( !scripts\mp\utility\player::isreallyalive( self ) && !self ismlgspectator() && !scripts\mp\utility\player::isusingremote() )
    {
        queuescoreeventpopup( var_0 );
        thread flushscoreeventpopupqueueonspawn();
        return;
    }

    if ( !isdefined( self.scoreeventlistsize ) )
    {
        self.scoreeventlistsize = 1;
        thread clearscoreeventlistafterwait();
    }
    else
    {
        self.scoreeventlistsize++;

        if ( self.scoreeventlistsize > 5 )
        {
            self.scoreeventlistsize = 5;
            return;
        }
    }

    self setclientomnvar( "ui_potg_score_event_list_" + self.scoreeventlistindex, var_1 );
    self setclientomnvar( "ui_score_event_list_" + self.scoreeventlistindex, var_1 );
    self setclientomnvar( "ui_score_event_control", self.scoreeventcount % 10 );
    self setclientomnvar( "ui_potg_score_event_control", self.scoreeventcount % 10 );
    self.scoreeventlistindex++;
    self.scoreeventlistindex = self.scoreeventlistindex % 5;
    self.scoreeventcount++;
}

clearscoreeventlistafterwait()
{
    self endon( "disconnect" );
    self notify( "clearScoreEventListAfterWait()" );
    self endon( "clearScoreEventListAfterWait()" );
    scripts\engine\utility::waittill_notify_or_timeout( "death", 0.5 );
    self.scoreeventlistsize = undefined;
}

getrank()
{
    var_0 = self.pers["rankxp"];
    var_1 = self.pers["rank"];

    if ( var_0 < getrankinfominxp( var_1 ) + getrankinfoxpamt( var_1 ) )
        return var_1;
    else
        return getrankforxp( var_0 );
}

omnvars( var_0 )
{
    var_1 = getrankinfomaxxp( level.maxrank );

    if ( var_0 >= var_1 )
    {
        var_2 = var_0 - var_1;
        var_3 = int( var_2 / getdvarint( "ONRNRMQSO" ) + 1 );
        return var_3;
    }

    return 0;
}

getrankforxp( var_0 )
{
    var_1 = level.maxrank;

    if ( var_0 >= getrankinfominxp( var_1 ) )
        return var_1;
    else
        var_1--;

    while ( var_1 > 0 )
    {
        if ( var_0 >= getrankinfominxp( var_1 ) && var_0 < getrankinfominxp( var_1 ) + getrankinfoxpamt( var_1 ) )
            return var_1;

        var_1--;
    }

    return var_1;
}

getmatchbonusspm()
{
    var_0 = getrank() + 1;
    return ( 3 + var_0 * 0.5 ) * 10;
}

getprestigelevel()
{
    if ( isai( self ) && isdefined( self.pers["prestige_fake"] ) )
        return self.pers["prestige_fake"];
    else
        return self getplayerdata( level.loadoutsgroup, "squadMembers", "season_rank" );
}

getrankxp()
{
    return self.pers["rankxp"];
}

movelatejoinerstospectators()
{
    return self.pers["battlepassxp"];
}

onuseitem( var_0 )
{
    if ( isdefined( self.pers["weaponxp"][var_0] ) )
        return self.pers["weaponxp"][var_0];
    else if ( isenumvaluevalid( level.loadoutsgroup, "LoadoutWeapon", var_0 ) )
        return self getplayerdata( level.loadoutsgroup, "squadMembers", "weapon_xp", var_0 );
    else
        return 0;
}

incrankxp( var_0, var_1, var_2, var_3 )
{
    if ( !level.playerxpenabled )
        return;

    if ( isai( self ) )
        return;

    if ( !isdefined( level.start_coop_escort_protect_hvi ) )
        level.start_coop_escort_protect_hvi = getdvarint( "scr_beta_max_level", 0 );

    if ( level.start_coop_escort_protect_hvi > 0 && getrank() + 1 >= level.start_coop_escort_protect_hvi )
        var_0 = 0;

    var_4 = getrankxp();
    var_5 = int( min( var_4 + var_0, getrankinfomaxxp( level.maxrank ) - 1 ) );

    if ( self.pers["rank"] == level.maxrank && var_5 >= getrankinfomaxxp( level.maxrank ) )
        var_5 = getrankinfomaxxp( level.maxrank );

    self.pers["xpEarnedThisMatch"] = self.pers["xpEarnedThisMatch"] + var_0;
    self.pers["rankxp"] = var_5;
    var_6 = movement_vector();
    var_7 = var_0 * var_6;
    var_8 = movelatejoinerstospectators();
    self.pers["battlepassxp"] = var_8 + var_7;
    var_9 = "";

    if ( isdefined( var_1 ) )
    {
        var_9 = scripts\mp\utility\weapon::nag_get_in_heli( var_1.basename );
        var_10 = scripts\mp\utility\weapon::getweaponrootname( var_9 );
        var_11 = onuseitem( var_10 );
        self.pers["weaponxp"][var_10] = var_11 + var_2;
    }

    var_12 = getrankxpmultipliertotal();
    var_13 = scripts\mp\weaponrank::getweaponrankxpmultipliertotal();
    var_14 = movement_vector();
    var_15 = int( scripts\cp_mp\utility\game_utility::gettimesincegamestart() / 1000.0 );
    self reportchallengeuserevent( "mp_addxp", var_0, scripts\mp\teams::lookupcurrentoperator( self.team ), var_9, var_2, var_7, int( var_12 * 100.0 ), int( var_13 * 100.0 ), int( var_14 * 100.0 ), var_15 );
    scripts\mp\analyticslog::spawn_elevator_gate( self, var_0, var_9, var_2, var_3 );
}

syncxpstat()
{
    var_0 = getrankxp();
    var_1 = self getplayerdata( "common", "mpProgression", "playerLevel", "xp" );

    if ( var_1 > var_0 )
        return;

    self setplayerdata( "common", "mpProgression", "playerLevel", "xp", var_0 );
}

delayplayerscorepopup( var_0, var_1, var_2 )
{
    wait( var_0 );
    thread scripts\mp\utility\points::giveunifiedpoints( var_1 );
}

getgametypexpmultiplier()
{
    if ( !isdefined( level.gametypexpmodifier ) )
    {
        var_0 = getdvarfloat( "scr_match_bonus_mode_override", 1.0 );

        if ( var_0 != 1.0 )
            level.gametypexpmodifier = var_0;
        else
            level.gametypexpmodifier = float( tablelookup( "mp/gametypesTable.csv", 0, scripts\mp\utility\game::getgametype(), 17 ) );
    }

    return level.gametypexpmodifier;
}

addglobalrankxpmultiplier( var_0, var_1 )
{
    level addrankxpmultiplier( var_0, var_1 );
}

getglobalrankxpmultiplier()
{
    var_0 = level getrankxpmultiplier();
    var_1 = getdvarint( "scr_disable_xp_scale_quit", 0 ) == 0;

    if ( ( var_0 > 4 || var_0 < 0 ) && var_1 )
        exitlevel( 0 );

    return var_0;
}

addrankxpmultiplier( var_0, var_1 )
{
    var_2 = 4 / level getrankxpmultiplier();

    if ( var_0 > var_2 )
        return;

    if ( !isdefined( self.rankxpmultipliers ) )
        self.rankxpmultipliers = [];

    if ( isdefined( self.rankxpmultipliers[var_1] ) )
        self.rankxpmultipliers[var_1] = max( self.rankxpmultipliers[var_1], var_0 );
    else
        self.rankxpmultipliers[var_1] = var_0;
}

getrankxpmultiplier()
{
    if ( !isdefined( self.rankxpmultipliers ) )
        return 1.0;

    var_0 = 1.0;

    foreach ( var_2 in self.rankxpmultipliers )
    {
        if ( !isdefined( var_2 ) )
            continue;

        var_0 = var_0 * var_2;
    }

    return var_0;
}

obj_ow_atvs_spawned()
{
    if ( self isbnetigrplayer() )
        return getbnetigrweaponxpmultiplier();
    else if ( self isps4player() )
    {
        var_0 = getdvarfloat( "MPPRMTPSLT", 1.0 );
        return var_0;
    }

    return 1.0;
}

removeglobalrankxpmultiplier( var_0 )
{
    level removerankxpmultiplier( var_0 );
}

removerankxpmultiplier( var_0 )
{
    if ( !isdefined( self.rankxpmultipliers ) )
        return;

    if ( !isdefined( self.rankxpmultipliers[var_0] ) )
        return;

    self.rankxpmultipliers[var_0] = undefined;
}

addteamrankxpmultiplier( var_0, var_1, var_2 )
{
    if ( !level.teambased )
        var_1 = "all";

    if ( !isdefined( self.teamrankxpmultipliers ) )
        level.teamrankxpmultipliers = [];

    if ( !isdefined( level.teamrankxpmultipliers[var_1] ) )
        level.teamrankxpmultipliers[var_1] = [];

    if ( isdefined( level.teamrankxpmultipliers[var_1][var_2] ) )
        level.teamrankxpmultipliers[var_1][var_2] = max( self.teamrankxpmultipliers[var_1][var_2], var_0 );
    else
        level.teamrankxpmultipliers[var_1][var_2] = var_0;
}

removeteamrankxpmultiplier( var_0, var_1 )
{
    if ( !level.teambased )
        var_0 = "all";

    if ( !isdefined( level.teamrankxpmultipliers ) )
        return;

    if ( !isdefined( level.teamrankxpmultipliers[var_0] ) )
        return;

    if ( !isdefined( level.teamrankxpmultipliers[var_0][var_1] ) )
        return;

    level.teamrankxpmultipliers[var_0][var_1] = undefined;
}

getteamrankxpmultiplier( var_0 )
{
    if ( !level.teambased )
        var_0 = "all";

    if ( !isdefined( var_0 ) || !isdefined( level.teamrankxpmultipliers ) || !isdefined( level.teamrankxpmultipliers[var_0] ) )
        return 1.0;

    var_1 = 1.0;

    foreach ( var_3 in level.teamrankxpmultipliers[var_0] )
    {
        if ( !isdefined( var_3 ) )
            continue;

        var_1 = var_1 * var_3;
    }

    return var_1;
}

old_maxhealth()
{
    if ( !isdefined( level._id_11A72 ) )
        level._id_11A72 = getdvarfloat( "scr_playlist_xp_scalar", 1.0 );

    return level._id_11A72;
}

getrankxpmultipliertotal()
{
    var_0 = getrankxpmultiplier();
    var_1 = getglobalrankxpmultiplier();
    var_2 = getteamrankxpmultiplier( self.team );
    var_3 = obj_ow_atvs_spawned();
    var_4 = old_maxhealth();
    var_5 = var_0 * var_1 * var_2 * var_3 * var_4;
    return var_5;
}

animscripted_clear( var_0, var_1 )
{
    level anim_ref( var_0, var_1 );
}

nextfixupcheckms()
{
    var_0 = level moveleadmarkers();
    var_1 = getdvarint( "scr_disable_xp_scale_quit", 0 ) == 0;

    if ( ( var_0 > 4 || var_0 < 0 ) && var_1 )
        exitlevel( 0 );

    return var_0;
}

anim_ref( var_0, var_1 )
{
    var_2 = 4 / level moveleadmarkers();

    if ( var_0 > var_2 )
        return;

    if ( !isdefined( self.caclulate_track_distance ) )
        self.caclulate_track_distance = [];

    if ( isdefined( self.caclulate_track_distance[var_1] ) )
        self.caclulate_track_distance[var_1] = max( self.caclulate_track_distance[var_1], var_0 );
    else
        self.caclulate_track_distance[var_1] = var_0;
}

moveleadmarkers()
{
    if ( !isdefined( self.caclulate_track_distance ) )
        return 1.0;

    var_0 = 1.0;

    foreach ( var_2 in self.caclulate_track_distance )
    {
        if ( !isdefined( var_2 ) )
            continue;

        var_0 = var_0 * var_2;
    }

    return var_0;
}

movement_vector()
{
    var_0 = moveleadmarkers();
    var_1 = nextfixupcheckms();
    var_2 = radiusdamagestepped( self );
    var_3 = var_0 * var_1 * var_2;
    return var_3;
}
