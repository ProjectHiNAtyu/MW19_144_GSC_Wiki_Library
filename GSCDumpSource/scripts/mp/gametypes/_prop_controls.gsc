// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_1245C()
{
    if ( isbot( self ) )
        return;

    self notifyonplayercommand( "lock", "+attack" );
    self notifyonplayercommand( "lock", "+attack_akimbo_accessible" );
    self notifyonplayercommand( "changeProp", "+weapnext" );
    self notifyonplayercommand( "setToSlope", "+usereload" );
    self notifyonplayercommand( "setToSlope", "+activate" );
    self notifyonplayercommand( "propAbility", "+smoke" );
    self notifyonplayercommand( "cloneProp", "+actionslot 2" );
    self notifyonplayercommand( "zoomin", "+actionslot 3" );
    self notifyonplayercommand( "zoomout", "+actionslot 4" );
    thread failx1stashquest();
}

failx1stashquest()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "cleanupKeyBindings" );
    self waittill( "death" );
    thread failx1finquest();
}

failx1finquest()
{
    self notify( "cleanupKeyBindings" );

    if ( isbot( self ) )
        return;

    self notifyonplayercommandremove( "lock", "+attack" );
    self notifyonplayercommandremove( "lock", "+attack_akimbo_accessible" );
    self notifyonplayercommandremove( "changeProp", "+weapnext" );
    self notifyonplayercommandremove( "setToSlope", "+usereload" );
    self notifyonplayercommandremove( "setToSlope", "+activate" );
    self notifyonplayercommandremove( "propAbility", "+smoke" );
    self notifyonplayercommandremove( "cloneProp", "+actionslot 2" );
    self notifyonplayercommandremove( "zoomin", "+actionslot 3" );
    self notifyonplayercommandremove( "zoomout", "+actionslot 4" );
}

apce_p1( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\hud_util::createfontstring( "default", 0.9 );
    var_4.x = 15;
    var_4.y = self.get_surface_point;
    var_4.alignx = "left";
    var_4.aligny = "top";
    var_4.horzalign = "left_adjustable";
    var_4.vertalign = "top_adjustable";
    var_4.fontscale = 1;
    var_4.alpha = 1;
    var_4.glowalpha = 0;
    var_4.hidewheninmenu = 0;
    var_4._id_129B9 = var_4.fontscale;

    if ( isdefined( var_3 ) && !scripts\engine\utility::is_player_gamepad_enabled() )
        var_4.label = var_3;
    else if ( isdefined( var_0 ) )
        var_4.label = var_0;
    else if ( isdefined( var_2 ) )
    {

    }

    if ( isdefined( var_1 ) )
        var_4 setvalue( var_1 );

    self.get_surface_point = self.get_surface_point + 18;
    return var_4;
}

_id_11BE2()
{
    self.get_surface_point = 152;
    self.ejectplayerfromturret = apce_p1( &"MP_PH/CHANGE", 0 );
    self._id_1286B = apce_p1( &"MP_PH/SPIN", undefined, undefined, &"MP_PH/SPIN_PC" );
    self.spawn_caches_tank = apce_p1( &"MP_PH/LOCK" );
    self.start_anim_train_scene = apce_p1( &"MP_PH/SLOPE", undefined, undefined, &"MP_PH/SLOPE_PC" );
    self.ai_washitbyvehicle = apce_p1();
    self.first_switch = apce_p1( &"MP_PH/CLONE" );
    _id_1239C();
    self._id_13734 = apce_p1( &"MP_PH/ZOOM" );
    thread _id_130C2();
}

fake_magic_grenade_watch_individual()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self waittill( "death" );
    thread failx1finquest();
    thread fake_magic_grenade_watch();
}

_id_120D2( var_0 )
{
    if ( isdefined( var_0 ) )
        var_0 destroy();
}

fake_magic_grenade_watch()
{
    self notify( "cleanupPropControlsHUD" );
    _id_120D2( self.ejectplayerfromturret );
    _id_120D2( self._id_1286B );
    _id_120D2( self.spawn_caches_tank );
    _id_120D2( self.start_anim_train_scene );
    _id_120D2( self.ai_washitbyvehicle );
    _id_120D2( self._id_13734 );
    _id_120D2( self._id_12856 );
    _id_120D2( self.first_switch );
}

_id_130C2()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );

    if ( isbot( self ) )
        return;

    waittillframeend;
    var_0 = scripts\engine\utility::is_player_gamepad_enabled();

    for (;;)
    {
        var_1 = scripts\engine\utility::is_player_gamepad_enabled();

        if ( var_1 != var_0 )
        {
            var_0 = var_1;

            if ( var_1 )
            {
                if ( !istrue( self._id_125DA ) )
                    self.start_anim_train_scene.label = &"MP_PH/SLOPE";
                else
                    self.start_anim_train_scene.label = &"MP_PH/SLOPED";
            }
            else if ( !istrue( self._id_125DA ) )
                self.start_anim_train_scene.label = &"MP_PH/SLOPE_PC";
            else
                self.start_anim_train_scene.label = &"MP_PH/SLOPED_PC";
        }

        waitframe();
    }
}

_id_11BF2()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    self.lock = 0;
    self._id_125DA = 0;

    if ( isbot( self ) )
        return;

    if ( !scripts\mp\gametypes\br_gametype_prop.gsc::_id_13120() )
    {
        self setclientomnvar( "ui_ph_is_locked", 0 );
        self setclientomnvar( "ui_ph_matching_slope", 0 );
    }

    thread _id_11BFF();
    thread _id_11BD7();
    thread _id_11C05();
    self._id_11C10 = 0;
    self.intro_techos_deposit_fullcar = 0;
    self.getsixthsensedirection = 1;

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_133FA( "lock", "changeProp", "setToSlope", "propAbility", "cloneProp" );

        if ( !isdefined( var_0 ) )
            continue;

        if ( self._id_11C10 )
            continue;

        if ( self.intro_techos_deposit_fullcar )
            continue;

        waittillframeend;

        if ( var_0 == "lock" )
        {
            _id_11BF6();
            continue;
        }

        if ( var_0 == "changeProp" )
        {
            _id_11BD8();
            continue;
        }

        if ( var_0 == "setToSlope" )
        {
            _id_11BF7();
            continue;
        }

        if ( var_0 == "propAbility" )
        {
            _id_11BD1();
            continue;
        }

        if ( var_0 == "cloneProp" )
            _id_11BE0();
    }
}

_id_11BF6()
{
    if ( self ismantling() )
        return;

    if ( self.lock )
        _id_12FD4();
    else
        spawn_cache4_rpgs();
}

_id_11DFC( var_0 )
{
    var_1 = 3;

    if ( !isdefined( var_0._id_13102 ) )
        var_0._id_13102 = 0;

    var_0._id_13101[var_0._id_13102] = var_0.prop.info;
    var_0._id_13102++;

    if ( var_0._id_13102 >= var_1 )
        var_0._id_13102 = 0;
}

_id_11BD8( var_0 )
{
    if ( !_id_11BEB() && !istrue( var_0 ) )
        return;

    if ( istrue( level.pc ) && !istrue( var_0 ) )
    {
        var_1 = 300;

        if ( isdefined( self.setplayergulagindex ) && gettime() - self.setplayergulagindex < var_1 )
            return;

        self.setplayergulagindex = gettime();
    }

    self notify( "changed_prop" );
    _id_11DFC( self );
    self.prop.info = scripts\mp\gametypes\br_gametype_prop.gsc::num_shot_taken_to_next_damage_state( self );
    _id_11BDA( self.prop.info );
    self.maxhealth = int( scripts\mp\gametypes\br_gametype_prop.gsc::obj_room_fire_08( self.prop.info ) );
    self setnormalhealth( 1.0 );
    _id_1239B( self.get_start_ang );
    _id_1239B( "CLONE" );

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_13120() )
    {
        self.ai_washitbyvehicle.alpha = 1;
        self.first_switch.alpha = 1;
    }

    if ( !istrue( var_0 ) )
        _id_11BE4();
}

_id_11BEB()
{
    return self.elements_hidden > 0;
}

_id_11BE4()
{
    _id_11C07( self.elements_hidden - 1 );
}

_id_11C07( var_0 )
{
    self.elements_hidden = var_0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_13120() )
    {
        self.ejectplayerfromturret setvalue( self.elements_hidden );

        if ( self.elements_hidden <= 0 )
            self.ejectplayerfromturret.alpha = 0.5;
        else if ( self.elements_hidden > 0 && self.ejectplayerfromturret.alpha < 1 )
            self.ejectplayerfromturret.alpha = 1.0;
    }
    else
        self setclientomnvar( "ui_ph_num_changes_left", self.elements_hidden );
}

_id_11BDA( var_0 )
{
    self.prop.info = var_0;
    self._id_11BF1 = var_0;
    self.prop setmodel( var_0.modelname );
    self.prop._id_1368A = var_0._id_1368A;
    self.prop.bot_abort_tactical_goal_for_revive = var_0.bot_abort_tactical_goal_for_revive;
    self.prop unlink();
    self._id_11BE7 unlink();
    self._id_11BE7.origin = self._id_11BD5.origin;
    self.prop.origin = self._id_11BE7.origin;
    self._id_11BE7.angles = ( self.angles[0], self._id_11BE7.angles[1], self.angles[2] );
    self.prop.angles = self._id_11BE7.angles;

    if ( istrue( self.respawntokenclosewithgulag ) )
    {
        self.prop.angles = self.angles;
        self.respawntokenclosewithgulag = 0;
    }

    scripts\mp\gametypes\br_gametype_prop.gsc::bot_loadout();
    scripts\mp\gametypes\br_gametype_prop.gsc::bot_has_player_enemy();
    self.prop linkto( self._id_11BE7, "J_prop_1" );

    if ( self._id_125DA && istrue( self.lock ) )
        self._id_11BE7 _id_122DC( self.prop );

    self._id_11BE7 linkto( self._id_11BD5 );
    self._id_12C4A = var_0._id_11C02;
    self._id_12C49 = var_0._id_11BEE;
    self setcamerathirdperson( 1, self._id_12C4A, self._id_12C49 );
}

_id_11BF7()
{
    if ( !istrue( self._id_125DA ) )
    {
        self._id_125DA = 1;

        if ( istrue( self.lock ) )
        {
            self._id_11BE7 unlink();
            self._id_11BE7 _id_122DC( self.prop );
            self._id_11BE7 linkto( self._id_11BD5 );
        }

        if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_13120() )
        {
            if ( scripts\engine\utility::is_player_gamepad_enabled() )
                self.start_anim_train_scene.label = &"MP_PH/SLOPED";
            else
                self.start_anim_train_scene.label = &"MP_PH/SLOPED_PC";
        }
        else
            self setclientomnvar( "ui_ph_matching_slope", 1 );
    }
    else
    {
        self._id_125DA = 0;

        if ( istrue( self.lock ) )
        {
            self._id_11BE7 unlink();
            self._id_11BE7.angles = ( self.angles[0], self._id_11BE7.angles[1], self.angles[2] );
            self._id_11BE7.origin = self._id_11BD5.origin;
            self._id_11BE7 linkto( self._id_11BD5 );
        }

        if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_13120() )
        {
            if ( scripts\engine\utility::is_player_gamepad_enabled() )
                self.start_anim_train_scene.label = &"MP_PH/SLOPE";
            else
                self.start_anim_train_scene.label = &"MP_PH/SLOPE_PC";
        }
        else
            self setclientomnvar( "ui_ph_matching_slope", 0 );
    }
}

_id_11BD1()
{
    if ( _id_11BED() )
    {
        thread lbravo_spawner_safehouse2();
        _id_11BE6();
    }
}

_id_11BE0()
{
    if ( _id_11BEC() )
    {
        thread first_time();
        thread _id_11BE5();
    }
}

_id_11BEC()
{
    return self.firstinfectedsplash > 0;
}

_id_11BE5()
{
    _id_11C08( self.firstinfectedsplash - 1 );
}

_id_11C08( var_0 )
{
    self.firstinfectedsplash = var_0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_13120() )
    {
        self.first_switch setvalue( self.firstinfectedsplash );

        if ( self.firstinfectedsplash <= 0 )
            self.first_switch.alpha = 0.5;
        else if ( self.firstinfectedsplash > 0 && self.first_switch.alpha < 1 )
            self.first_switch.alpha = 1.0;
    }
    else
        self setclientomnvar( "ui_ph_num_clones_left", self.firstinfectedsplash );
}

_id_11BED()
{
    return self.ai_weapons_free > 0;
}

_id_11BE6()
{
    _id_11C09( self.ai_weapons_free - 1 );
}

_id_11C09( var_0 )
{
    self.ai_weapons_free = var_0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_13120() )
    {
        self.ai_washitbyvehicle setvalue( self.ai_weapons_free );

        if ( self.ai_weapons_free <= 0 )
            self.ai_washitbyvehicle.alpha = 0.5;
        else if ( self.ai_weapons_free > 0 && self.ai_washitbyvehicle.alpha < 1 )
            self.ai_washitbyvehicle.alpha = 1.0;
    }
    else
        self setclientomnvar( "ui_ph_num_flashes_left", self.ai_weapons_free );
}

_id_122DC( var_0 )
{
    var_1 = milestonephasepercent_vips( var_0, 0 );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = anglestoforward( self.angles );
    var_3 = anglestoright( self.angles );
    var_4 = vectortoangles( var_1 );
    var_5 = angleclamp180( var_4[0] + 90 );
    var_4 = ( 0, var_4[1], 0 );
    var_6 = anglestoforward( var_4 );
    var_7 = vectordot( var_6, var_3 );

    if ( var_7 < 0 )
        var_7 = -1;
    else
        var_7 = 1;

    var_8 = vectordot( var_6, var_2 );
    var_9 = var_8 * var_5;
    var_10 = ( 1 - abs( var_8 ) ) * var_5 * var_7;
    self.angles = ( var_9, self.angles[1], var_10 );
}

node_grid( var_0, var_1 )
{
    var_2 = 128;
    var_3 = game["defenders"];
    var_4 = level.teamdata[var_3]["alivePlayers"];

    if ( var_4.size > var_2 )
    {
        var_4 = scripts\mp\utility\player::getplayersinradius( var_0, 500, var_3 );

        if ( var_4.size > var_2 )
        {
            var_4 = scripts\mp\utility\player::getplayersinradius( var_0, 50, var_3 );

            if ( var_4.size > var_2 )
                return var_1;
        }
    }

    var_5 = [];

    foreach ( var_7 in var_4 )
        var_5[var_5.size] = var_7.prop;
}

milestonephasepercent_vips( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_2 = self;
    else
        var_2 = var_0;

    var_3 = node_grid( self.origin, var_2 );
    var_4 = [ self.origin ];

    for ( var_5 = -1.0; var_5 <= 1.0; var_5 = var_5 + 2.0 )
    {
        for ( var_6 = -1.0; var_6 <= 1.0; var_6 = var_6 + 2.0 )
        {
            var_7 = var_2 getpointinbounds( var_5, var_6, 0.0 );
            var_7 = ( var_7[0], var_7[1], self.origin[2] );
            var_4[var_4.size] = var_7;
        }
    }

    var_8 = ( 0, 0, 0 );
    var_9 = 0;

    foreach ( var_11 in var_4 )
    {
        var_12 = scripts\engine\trace::_bullet_trace( var_11 + ( 0, 0, 4 ), var_11 + ( 0, 0, -16 ), 0, var_3 );
        var_13 = var_12["fraction"] > 0.0 && var_12["fraction"] < 1;

        if ( var_13 )
        {
            var_8 = var_8 + var_12["normal"];
            var_9++;
        }
    }

    if ( var_9 > 0 )
    {
        var_8 = var_8 / var_9;
        return var_8;
    }
    else
        return undefined;
}

_id_11BFF()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    var_0 = 0;
    var_1 = 0;
    var_2 = 0;

    for (;;)
    {
        waitframe();
        var_3 = self getnormalizedmovement();
        var_4 = self jumpbuttonpressed();

        if ( !isdefined( var_3 ) )
            continue;

        if ( self._id_11C10 )
            continue;

        var_5 = var_3[0] != 0 || var_3[1] != 0 || var_4;

        if ( self.lock && var_2 && !var_5 )
            var_2 = 0;
        else if ( self.lock && !var_0 && var_5 )
            var_2 = 1;
        else if ( self.lock && var_5 && !var_2 )
            _id_12FD4();

        var_0 = self.lock;
        var_1 = var_5;
    }
}

_id_12FD4()
{
    self unlink();

    if ( self._id_125DA )
    {
        self._id_11BE7 unlink();
        self._id_11BE7.angles = ( self.angles[0], self._id_11BE7.angles[1], self.angles[2] );
        self._id_11BE7.origin = self._id_11BD5.origin;
        self._id_11BE7 linkto( self._id_11BD5 );
    }

    self._id_11BD5 linkto( self );
    self.lock = 0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_13120() )
    {
        self.spawn_caches_tank.label = &"MP_PH/LOCK";
        thread leaderplunderstring();
    }
    else
        self setclientomnvar( "ui_ph_is_locked", 0 );
}

spawn_cache4_rpgs()
{
    if ( !display_message_to_teammates() )
        return;

    self._id_11BD5 unlink();
    self._id_11BD5.origin = self.origin;
    var_0 = self getgroundentity();

    if ( isdefined( var_0 ) && var_0 isattachmentvariantlocked() )
        self._id_11BD5 linkto( var_0 );

    self playerlinkto( self._id_11BD5 );

    if ( self._id_125DA )
    {
        self._id_11BE7 unlink();
        self._id_11BE7 _id_122DC( self.prop );
        self._id_11BE7.origin = self.origin;
        self._id_11BE7 linkto( self._id_11BD5 );
    }

    self.lock = 1;
    self notify( "locked" );

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_13120() )
    {
        self.spawn_caches_tank.label = &"MP_PH/LOCKED";
        thread leaderplunderstring();
    }
    else
        self setclientomnvar( "ui_ph_is_locked", 1 );
}

isattachmentvariantlocked()
{
    return isalive( self ) && ( scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "script_vehicle" );
}

leaderplunderstring()
{
    self endon( "death" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    self notify( "flashLockPropKey" );
    self endon( "flashLockPropKey" );
    var_0 = self.spawn_caches_tank._id_129B9 + 0.75;
    self.spawn_caches_tank changefontscaleovertime( 0.1 );
    self.spawn_caches_tank.fontscale = var_0;
    wait 0.1;

    if ( isdefined( self.spawn_caches_tank ) )
    {
        self.spawn_caches_tank changefontscaleovertime( 0.1 );
        self.spawn_caches_tank.fontscale = self.spawn_caches_tank._id_129B9;
    }
}

display_message_to_teammates()
{
    if ( !self isonground() )
    {
        var_0 = getgroundposition( self.origin, 15, 30000, 0 );
        var_1 = getentarray( "trigger_hurt", "classname" );

        foreach ( var_3 in var_1 )
        {
            if ( ispointinvolume( var_0, var_3 ) )
                return 0;
        }
    }

    return 1;
}

_id_11C0D()
{
    level endon( "noPropsToSpectate" );
    self._id_11C10 = 0;
    self.intro_techos_deposit_fullcar = 0;

    if ( !isdefined( self._id_12857 ) )
        self._id_12857 = 0;

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_133F6( "spectate" );

        if ( self.intro_techos_deposit_fullcar )
            continue;

        if ( var_0 == "spectate" )
        {
            if ( self._id_11C10 )
            {
                self notify( "endPropSpectate" );
                continue;
            }

            scripts\mp\gametypes\br_gametype_prop.gsc::get_max_from_call_count();

            if ( self._id_12853.size <= 1 )
                continue;

            self._id_11C10 = 1;
            _id_11BD2( 0 );
            thread _id_11C0E();
            childthread _id_11C0F();
        }
    }
}

_id_11C0F()
{
    self endon( "endPropSpectate" );

    if ( end_module_if_weapons_free() )
        _id_12859();
    else
    {
        lasthungry( 1 );
        _id_12859();
    }

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_133F7( "zoomin", "zoomout" );

        if ( self.intro_techos_deposit_fullcar )
            continue;

        if ( var_0 == "zoomin" )
        {
            lasthungry( 1 );
            end_module_if_weapons_free();
            time_after_shoot();
        }

        if ( var_0 == "zoomout" )
        {
            lasthungry( 0 );
            end_module_if_weapons_free();
            time_after_shoot();
        }
    }
}

end_module_if_weapons_free()
{
    var_0 = self._id_12853[self._id_12857];

    if ( !isdefined( var_0 ) )
        return 0;

    if ( var_0 == self )
        return 0;

    if ( scripts\mp\utility\player::isreallyalive( var_0 ) )
        return 1;

    return 0;
}

lasthungry( var_0 )
{
    var_1 = self._id_12857;

    for (;;)
    {
        if ( istrue( var_0 ) )
            self._id_12857++;
        else
            self._id_12857--;

        if ( var_0 && self._id_12853.size <= self._id_12857 )
            self._id_12857 = 0;
        else if ( self._id_12857 < 0 )
            self._id_12857 = self._id_12853.size - 1;

        if ( self._id_12857 == var_1 )
            break;

        if ( end_module_if_weapons_free() )
            break;
    }
}

_id_11C0E()
{
    self endon( "death_or_disconnect" );
    get_max_charges();
    scripts\engine\utility::waittill_any_ents( self, "endPropSpectate", level, "noPropsToSpectate" );

    if ( istrue( self.intro_techos_deposit_fullcar ) )
        return;

    self.intro_techos_deposit_fullcar = 1;
    has_ammo_drain_passive();
    _id_11F91();
    waittillframeend;
    _id_11BD2( 1 );
    self._id_11C10 = 0;
    self.intro_techos_deposit_fullcar = 0;
}

get_max_charges()
{
    self._id_12855 = scripts\mp\hud_util::createfontstring( "default", 1 );
    self._id_12855.label = &"MP_PH/SPECCOMMANDS";
    self._id_12855.x = 20;
    self._id_12855.y = -80;
    self._id_12855.alignx = "center";
    self._id_12855.aligny = "middle";
    self._id_12855.horzalign = "center_adjustable";
    self._id_12855.vertalign = "bottom_adjustable";
    self._id_12855.archived = 1;
    self._id_12855.fontscale = 1;
    self._id_12855.alpha = 1;
    self._id_12855.glowalpha = 0.5;
    self._id_12855.hidewheninmenu = 0;
}

has_ammo_drain_passive()
{
    if ( isdefined( self._id_12855 ) )
        self._id_12855 destroy();
}

_id_12859()
{
    var_0 = self._id_12853[self._id_12857];
    self._id_1285B = var_0;
    self._id_11BD5 unlink();
    self._id_11BD5.origin = self.origin;
    self setorigin( var_0.origin );
    self.angles = var_0.angles;
    self playerlinkto( var_0._id_11BD5 );
}

time_after_shoot()
{
    var_0 = self._id_12853[self._id_12857];
    self unlink();
    self.origin = var_0.origin;
    self.angles = var_0.angles;
    self playerlinkto( var_0._id_11BD5 );
}

_id_11F91()
{
    self unlink();
    self setorigin( self._id_11BD5.origin );

    if ( self.lock )
        self playerlinkto( self._id_11BD5 );
    else
    {
        self._id_11BD5 linkto( self );
        self._id_11BD5.origin = self.origin;
    }
}

traps_disabled()
{
    level endon( "game_ended" );
    level waittill( "noPropsToSpectate" );
    _id_120D2( self._id_12856 );
}

_id_11BD7()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    var_0 = 10;
    self._id_12C4A = self.prop.info._id_11C02;

    for (;;)
    {
        var_1 = scripts\engine\utility::_id_133F7( "zoomin", "zoomout" );

        if ( istrue( self.intro_techos_deposit_fullcar ) )
            continue;

        if ( !isdefined( var_1 ) )
            continue;

        if ( istrue( self._id_11C10 ) )
            continue;

        if ( var_1 == "zoomin" )
        {
            if ( self._id_12C4A - var_0 < 50 )
                continue;

            self._id_12C4A = self._id_12C4A - var_0;
            self setcamerathirdperson( 1, self._id_12C4A, self._id_12C49 );
            continue;
        }

        if ( var_1 == "zoomout" )
        {
            var_2 = clamp( self.prop.info._id_11C02 + 50, 50, 360 );

            if ( self._id_12C4A + var_0 > var_2 )
                continue;

            self._id_12C4A = self._id_12C4A + var_0;
            self setcamerathirdperson( 1, self._id_12C4A, self._id_12C49 );
        }
    }
}

_id_11C05()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    for (;;)
    {
        if ( self adsbuttonpressed( 1 ) && !istrue( self._id_11BE7._id_1286A ) )
        {
            self._id_11BE7 scriptmodelpauseanim( 0 );
            self._id_11BE7._id_1286A = 1;
        }
        else if ( !self adsbuttonpressed( 1 ) && istrue( self._id_11BE7._id_1286A ) )
        {
            self._id_11BE7 scriptmodelpauseanim( 1 );
            self._id_11BE7._id_1286A = 0;
        }

        wait 0.05;
    }
}

_id_1239C()
{
    switch ( self.get_start_ang )
    {
        case "FLASH":
            self.ai_washitbyvehicle.label = &"MP_PH/FLASH";
            break;
        default:
            break;
    }
}

_id_1239B( var_0, var_1 )
{
    switch ( var_0 )
    {
        case "FLASH":
            if ( !isdefined( var_1 ) )
                var_1 = level.vehomn_getleveldata.settings._id_11C01;

            _id_11C09( var_1 );
            break;
        case "CLONE":
            if ( !isdefined( var_1 ) )
                var_1 = level.vehomn_getleveldata.settings._id_11C00;

            _id_11C08( var_1 );
            break;
        default:
            break;
    }
}

leadmarkerdata( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    thread scripts\mp\shellshock::endondeath();
    self endon( "end_explode" );
    self waittill( "explode", var_1 );

    if ( !isdefined( var_0 ) )
        return;

    lbravo_spawner_safehouse2( var_0, var_1 );
}

lbravo_spawner_safehouse2( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = self;

    if ( !isdefined( var_1 ) )
        var_1 = self.origin;

    playfx( scripts\engine\utility::getfx( "propFlash" ), var_1 + ( 0, 0, 4 ) );
    playsoundatpos( var_1, "prop_flashbang" );

    foreach ( var_3 in level.players )
    {
        if ( var_3 == var_0 )
            continue;

        if ( istrue( var_3.leader_intro_dialogue ) )
            continue;

        if ( !isdefined( var_3 ) || !isalive( var_3 ) || !isdefined( var_3.team ) || var_3 scripts\mp\gametypes\br_gametype_prop.gsc::zombieingas() )
            continue;

        var_4 = var_1 + ( 0, 0, 4 ) - var_3 geteye();
        var_5 = length( var_4 );
        var_6 = 500.0;
        var_7 = 150.0;

        if ( var_5 <= var_6 )
        {
            if ( var_5 <= var_7 )
                var_8 = 1;
            else
                var_8 = 1 - ( var_5 - var_7 ) / ( var_6 - var_7 );

            var_9 = vectornormalize( var_4 );
            var_10 = anglestoforward( var_3 getplayerangles() );
            var_11 = vectordot( var_10, var_9 );
            var_3 applyflash( var_1 + ( 0, 0, 4 ), var_8, var_11, var_0, var_0.team, 2.0 );
        }
    }
}

applyflash( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = 2.5;

    if ( !isdefined( var_5 ) )
        var_5 = 0;

    if ( var_2 < 0.25 )
        var_2 = 0.25;
    else if ( var_2 > 0.8 )
        var_2 = 1;

    var_7 = var_1 * var_2 * var_6;
    var_7 = var_7 + var_5;

    if ( var_7 < 0.25 )
        return;

    var_3 thread scripts\mp\damagefeedback::updatedamagefeedback( "standard" );
    thread scripts\mp\equipment\flash_grenade::applyflash( var_3, var_7 );
}

hackomnvarclamp()
{
    var_0 = 9;

    if ( self._id_11BE1.size + 1 <= var_0 )
        return;

    var_1 = 0;

    foreach ( var_3 in self._id_11BE1 )
    {
        if ( isdefined( var_3 ) )
            var_1++;
    }

    if ( var_1 + 1 <= var_0 )
        return;

    var_5 = [];
    var_6 = undefined;

    for ( var_7 = 0; var_7 < self._id_11BE1.size; var_7++ )
    {
        var_3 = self._id_11BE1[var_7];

        if ( !isdefined( var_3 ) )
            continue;

        if ( !isdefined( var_6 ) )
        {
            var_6 = var_3;
            continue;
        }

        var_5[var_5.size] = var_3;
    }

    var_6 notify( "maxDelete" );
    var_6 delete();
    self._id_11BE1 = var_5;
}

first_time()
{
    if ( !isdefined( self._id_11BE1 ) )
        self._id_11BE1 = [];
    else
        hackomnvarclamp();

    var_0 = spawn( "script_model", self.prop.origin );
    var_0.targetname = "propClone";
    var_0 setmodel( self.prop.model );
    var_0.angles = self.prop.angles;
    var_0.health = 50;
    var_0.playerowner = self;
    var_0 setcandamage( 1 );
    var_0 thread scripts\mp\damage::monitordamage( var_0.health, "hitequip", ::first_pressure_switch_triggered, ::getcirclerangemin );
    var_0 thread scripts\mp\gametypes\br_gametype_prop.gsc::playerwatchspectate( game["defenders"], "outline_nodepth_orange" );
    var_0 scripts\mp\sentientpoolmanager::registersentient( "Tactical_Static", self.team );
    self._id_11BE1[self._id_11BE1.size] = var_0;
}

getcirclerangemin( var_0 )
{
    if ( !isdefined( var_0.attacker ) )
        return 0;

    if ( isplayer( var_0.attacker ) )
    {
        if ( istrue( self.risktokenonuse ) )
            return 0;

        var_0.attacker thread scripts\mp\damagefeedback::updatedamagefeedback( "hitequip" );
        self.lastattacker = var_0.inflictor;
    }

    return var_0.damage;
}

first_pressure_switch_triggered( var_0 )
{
    if ( !isdefined( self.risktokenonuse ) )
        self.risktokenonuse = 1;

    if ( isdefined( self.lastattacker ) )
    {
        self.lastattacker thread scripts\mp\gametypes\br_gametype_prop.gsc::padcorner3to0dist( "clone_destroyed" );

        if ( isdefined( self.playerowner ) )
            self.playerowner thread scripts\mp\gametypes\br_gametype_prop.gsc::padcorner3to0dist( "clone_was_destroyed" );
    }

    var_1 = "prop_death";
    var_2 = "propDeathFX";
    playsoundatpos( self.origin + ( 0, 0, 4 ), var_1 );
    playfx( scripts\engine\utility::getfx( var_2 ), self.origin + ( 0, 0, 4 ) );

    if ( isdefined( self ) )
        self delete();
}

kickplayer( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( !isdefined( var_0 ) )
        var_0 = 5;

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    if ( !isdefined( var_2 ) )
        var_2 = 1;

    var_3 = newclienthudelem( self );
    var_3.foreground = 0;
    var_3.x = 0;
    var_3.y = 0;
    var_3 setshader( "black", 640, 480 );
    var_3.alignx = "left";
    var_3.aligny = "top";
    var_3.horzalign = "fullscreen";
    var_3.vertalign = "fullscreen";
    var_3.alpha = 0;
    waitframe();

    if ( var_1 > 0 )
        var_3 fadeovertime( var_1 );

    var_3.alpha = 1;
    wait( var_0 - var_2 );

    if ( var_2 > 0 )
        var_3 fadeovertime( var_2 );

    var_3.alpha = 0;
    wait( var_2 );
    waitframe();
    _id_120D2( var_3 );
}

_id_13520()
{
    self endon( "death_or_disconnect" );
    self notifyonplayercommand( "specialGrenade", "+smoke" );

    for (;;)
    {
        self waittill( "specialGrenade" );
        self._id_12C66 = self._id_12C66 + 1;
    }
}

playerstreamhintlocationinternal()
{
    level waittill( "game_ended" );

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_13120() )
    {
        level.initbunkerbackwallkeypads.alpha = 0;
        level.vehomn_getleveldata._id_135CC.alpha = 0;
        level._id_135CD.alpha = 0;
    }

    foreach ( var_1 in level.players )
        var_1 _id_11BD2( 0 );
}

_id_120E2( var_0, var_1 )
{
    if ( isdefined( var_0 ) )
        var_0.alpha = var_1;
}

_id_11BD2( var_0, var_1 )
{
    if ( istrue( var_0 ) )
        var_2 = 1;
    else
        var_2 = 0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_13120() || istrue( var_1 ) )
    {
        _id_120E2( self.ejectplayerfromturret, var_2 );
        _id_120E2( self._id_1286B, var_2 );
        _id_120E2( self.spawn_caches_tank, var_2 );
        _id_120E2( self.start_anim_train_scene, var_2 );
        _id_120E2( self.ai_washitbyvehicle, var_2 );
        _id_120E2( self.first_switch, var_2 );
        _id_120E2( self._id_13734, var_2 );

        if ( !istrue( level.trap_toggle_fx_logic ) )
            _id_120E2( self._id_12856, var_2 );
    }
}
