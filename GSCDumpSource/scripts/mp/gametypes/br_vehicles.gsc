// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

brvehiclesinit()
{
    level.modecontrolledvehiclespawningonly = 1;
    level.ignorevehicletypeinstancelimit = 1;
    var_0 = getdvarint( "scr_br_dynamic_spawn_veh_buffer", 24 );
    level.br_totalvehiclesmax = 128 - var_0;
    level.br_totalvehiclesspawned = 0;
    level.br_helosmax = getdvarint( "scr_br_helos_max", 3 );
    level.clearandrestoreinfectedtacinsert = getdvarint( "scr_br_truck_max", -1 );
    level.br_vehtargetnametoref = [];
    level.br_vehtargetnametoref["atv_spawn"] = "atv";
    level.br_vehtargetnametoref["cargotruck_spawn"] = "cargo_truck";
    level.br_vehtargetnametoref["cargotruckmg_spawn"] = "cargo_truck_mg";
    level.br_vehtargetnametoref["copcar_spawn"] = "cop_car";
    level.br_vehtargetnametoref["hoopty_spawn"] = "hoopty";
    level.br_vehtargetnametoref["hooptytruck_spawn"] = "hoopty_truck";
    level.br_vehtargetnametoref["jeep_spawn"] = "jeep";
    level.br_vehtargetnametoref["largetransport_spawn"] = "large_transport";
    level.br_vehtargetnametoref["littlebird_spawn"] = "little_bird";
    level.br_vehtargetnametoref["littlebirdmg_spawn"] = "little_bird_mg";
    level.br_vehtargetnametoref["veh_a10fd"] = "veh_a10fd";
    level.br_vehtargetnametoref["mediumtransport_spawn"] = "medium_transport";
    level.br_vehtargetnametoref["motorcycle_spawn"] = "motorcycle";
    level.br_vehtargetnametoref["pickuptruck_spawn"] = "pickup_truck";
    level.br_vehtargetnametoref["tacrover_spawn"] = "tac_rover";
    level.br_vehtargetnametoref["technical_spawn"] = "technical";
    level.br_vehtargetnametoref["van_spawn"] = "van";
    level._effect["vehicle_flares"] = loadfx( "vfx/iw8_mp/killstreak/vfx_apache_angel_flares.vfx" );
}

brvehiclesonstartgametype()
{
    setupvehiclespawnvolumes();
    brvehiclesreset();
}

setupvehiclespawnvolumes()
{
    var_0 = "vehicle_volume";

    if ( getdvarint( "scr_br_veh_vol_simple", 1 ) )
        var_0 = "vehicle_volume_simplified";

    level.brvehspawnvols = getentarray( var_0, "script_noteworthy" );

    foreach ( var_2 in level.brvehspawnvols )
        initvehiclespawnvolume( var_2 );

    level.br_vehicleallspawns = [];
    level.br_vehiclealwaysspawns = [];
    level.br_helospawns = [];
    level.clearaveragevelocities = [];
    var_4 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_getleveldata();

    foreach ( var_14, var_6 in var_4.databyref )
    {
        var_7 = [[ var_6.getspawnstructscallback ]]();

        if ( isdefined( level.last_attacker ) )
            var_7 = [[ level.last_attacker ]]( var_7 );

        _id_12ED8( var_7 );
        fx_thermal( var_7, "atv_spawn", "atv", "motorcycle_spawn", "motorcycle", "motorcycle_spawn_percent" );
        level.br_vehicleallspawns = scripts\engine\utility::array_combine_unique( level.br_vehicleallspawns, var_7 );

        foreach ( var_9 in var_7 )
        {
            if ( isdefined( var_9.script_priority ) && var_9.script_priority > 0 && ( level.clearandrestoreinfectedtacinsert < 0 || !rewardorigin( var_9 ) ) )
            {
                var_10 = level.br_vehiclealwaysspawns.size;
                level.br_vehiclealwaysspawns[var_10] = var_9;
                continue;
            }

            if ( isdefined( var_9.targetname ) && ( var_9.targetname == "littlebird_spawn" || var_9.targetname == "littlebirdmg_spawn" ) )
            {
                level.br_helospawns[level.br_helospawns.size] = var_9;
                continue;
            }

            if ( level.clearandrestoreinfectedtacinsert >= 0 && rewardorigin( var_9 ) )
            {
                level.clearaveragevelocities[level.clearaveragevelocities.size] = var_9;
                continue;
            }

            foreach ( var_2 in level.brvehspawnvols )
            {
                if ( ispointinvolume( var_9.origin, var_2 ) )
                {
                    var_10 = var_2.vehiclespawns.size;
                    var_2.vehiclespawns[var_10] = var_9;
                    break;
                }
            }
        }
    }
}

initvehiclespawnvolume( var_0 )
{
    var_0.vehiclespawns = [];
    var_0.vehiclesspawned = 0;

    switch ( level.mapname )
    {
        case "mp_don3":
        case "mp_donetsk":
        case "mp_kstenod":
            assignvehicleminimumsforvolume( var_0 );
            break;
        case "mp_don4":
            branalytics_spawntablet( var_0 );
            break;
        case "mp_wz_island":
            branalytics_teameliminated( var_0 );
            break;
    }
}

branalytics_teameliminated( var_0 )
{

}

branalytics_spawntablet( var_0 )
{
    var_0.minvehicles = 0;

    switch ( var_0.targetname )
    {
        case "boneyard":
            var_0.minvehicles = 2;
            break;
        case "summit":
            var_0.minvehicles = 2;
            break;
        case "summit_helipad":
            var_0.minvehicles = 1;
            break;
        case "downtown":
            var_0.minvehicles = 4;
            break;
        case "downtownpark":
            var_0.minvehicles = 1;
            break;
        case "farm":
            var_0.minvehicles = 4;
            break;
        case "gulag":
            var_0.minvehicles = 1;
            break;
        case "hospital":
            var_0.minvehicles = 0;
            break;
        case "junkyard":
            var_0.minvehicles = 1;
            break;
        case "layover":
            var_0.minvehicles = 3;
            break;
        case "lumber":
            var_0.minvehicles = 2;
            break;
        case "militarybase":
            var_0.minvehicles = 3;
            break;
        case "port":
            var_0.minvehicles = 2;
            break;
        case "quarry":
            var_0.minvehicles = 2;
            break;
        case "stadium":
            var_0.minvehicles = 1;
            break;
        case "storagewars":
            var_0.minvehicles = 1;
            break;
        case "super":
            var_0.minvehicles = 1;
            break;
        case "torez":
            var_0.minvehicles = 1;
            break;
        case "transit":
            var_0.minvehicles = 2;
            break;
        case "tvstation":
            var_0.minvehicles = 1;
            break;
        case "duga":
            var_0.minvehicles = 1;
            break;
        case "abandoned":
            var_0.minvehicles = 1;
            break;
        case "test_zone":
            var_0.minvehicles = 1;
            break;
    }
}

assignvehicleminimumsforvolume( var_0 )
{
    var_0.minvehicles = 0;

    switch ( var_0.targetname )
    {
        case "boneyard":
            var_0.minvehicles = 2;
            break;
        case "dam":
            var_0.minvehicles = 2;
            break;
        case "downtown":
            var_0.minvehicles = 4;
            break;
        case "downtownpark":
            var_0.minvehicles = 1;
            break;
        case "farm":
            var_0.minvehicles = 4;
            break;
        case "gulag":
            var_0.minvehicles = 1;
            break;
        case "hospital":
            var_0.minvehicles = 0;
            break;
        case "junkyard":
            var_0.minvehicles = 1;
            break;
        case "layover":
            var_0.minvehicles = 3;
            break;
        case "lumber":
            var_0.minvehicles = 2;
            break;
        case "militarybase":
            var_0.minvehicles = 3;
            break;
        case "port":
            var_0.minvehicles = 2;
            break;
        case "quarry":
            var_0.minvehicles = 2;
            break;
        case "stadium":
            var_0.minvehicles = 1;
            break;
        case "storagewars":
            var_0.minvehicles = 1;
            break;
        case "super":
            var_0.minvehicles = 1;
            break;
        case "torez":
            var_0.minvehicles = 1;
            break;
        case "transit":
            var_0.minvehicles = 2;
            break;
        case "tvstation":
            var_0.minvehicles = 1;
            break;
        case "test_zone":
            var_0.minvehicles = 1;
            break;
    }
}

emptyallvehicles()
{
    if ( !isdefined( level.vehicle ) || !isdefined( level.vehicle.instances ) )
        return;

    foreach ( var_5, var_1 in level.vehicle.instances )
    {
        foreach ( var_3 in var_1 )
        {
            if ( scripts\cp_mp\vehicles\vehicle_occupancy::_id_1324D( var_3 ) )
                scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_ejectalloccupants( var_3 );
        }
    }
}

deleteextantvehicles( var_0 )
{
    if ( !isdefined( level.vehicle ) || !isdefined( level.vehicle.instances ) )
        return;

    scripts\cp_mp\vehicles\vehicle_spawn::_id_13281();
    level.suppressvehicleexplosion = 1;

    foreach ( var_7, var_2 in level.vehicle.instances )
    {
        var_3 = scripts\mp\vehicles\damage::get_death_callback( var_7 );

        foreach ( var_5 in var_2 )
        {
            if ( isdefined( var_0 ) && scripts\engine\utility::array_contains( var_0, var_5 ) )
                continue;

            scripts\cp_mp\vehicles\vehicle_spawn::_id_13287( var_5 );
            var_5 [[ var_3 ]]( undefined );
        }
    }

    level.suppressvehicleexplosion = 0;
}

tryspawnavehicle( var_0, var_1, var_2, var_3 )
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::roof_enemy_groups( "vehicleSpawns" ) )
        return;

    if ( ( var_0 == "little_bird" || var_0 == "little_bird_mg" ) && scripts\mp\gametypes\br_gametypes.gsc::roof_enemy_groups( "littleBirdSpawns" ) )
        return;

    if ( ( var_0 == "cargo_truck" || var_0 == "cargo_truck_mg" ) && scripts\mp\gametypes\br_gametypes.gsc::roof_enemy_groups( "truckSpawns" ) )
        return;

    if ( var_0 == "jeep" && scripts\mp\gametypes\br_gametypes.gsc::roof_enemy_groups( "jeepSpawns" ) )
        return;

    if ( var_0 == "tac_rover" && scripts\mp\gametypes\br_gametypes.gsc::roof_enemy_groups( "tacRoverSpawns" ) )
        return;

    if ( var_0 == "atv" && scripts\mp\gametypes\br_gametypes.gsc::roof_enemy_groups( "atvSpawns" ) )
        return;

    if ( var_0 == "motorcycle" && scripts\mp\gametypes\br_gametypes.gsc::roof_enemy_groups( "motorcycleSpawns" ) )
        return;

    if ( scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_canspawnvehicle( var_0, undefined, undefined, var_1 ) )
    {
        var_4 = spawnavehicle( var_0, var_1, var_3 );

        if ( isdefined( var_4 ) )
            return var_4;
    }

    return undefined;
}

spawnavehicle( var_0, var_1, var_2 )
{
    var_3 = var_1.origin;
    var_4 = var_1.angles;

    if ( !isdefined( var_4 ) )
        var_4 = ( 0, randomfloat( 360 ), 0 );

    var_5 = spawnstruct();
    var_5.origin = var_3;
    var_5.angles = var_4;
    var_5.spawntype = "GAME_MODE";
    var_6 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( var_0, var_5, var_2 );

    if ( isdefined( var_6 ) )
    {
        if ( scripts\mp\gametypes\br_gametypes.gsc::revive_stim( "postSpawnVehicle" ) )
            scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "postSpawnVehicle", var_6, var_0 );

        scripts\mp\gametypes\br_analytics.gsc::codephonescodeenteredringingfrenzy( var_6, var_0 );
    }

    return var_6;
}

spawninitialvehicles()
{
    var_0 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_getleveldata();
    level.br_totalvehiclesspawned = 0;
    var_1 = 0;
    var_2 = [];
    var_3 = level.br_vehicleallspawns;
    var_4 = scripts\engine\utility::array_randomize( level.br_vehiclealwaysspawns );

    foreach ( var_6 in var_4 )
    {
        var_7 = spawnstruct();
        var_8 = level.br_vehtargetnametoref[var_6.targetname];
        var_9 = tryspawnavehicle( var_8, var_6, "alwaysSpawn", var_7 );

        if ( isdefined( var_9 ) )
        {
            level.br_totalvehiclesspawned++;
            var_2[var_2.size] = var_6;
            var_10 = 0;

            foreach ( var_12 in level.brvehspawnvols )
            {
                if ( ispointinvolume( var_6.origin, var_12 ) )
                {
                    var_12.vehiclesspawned++;
                    var_10 = 1;
                    break;
                }
            }

            if ( !var_10 )
            {

            }

            if ( level.br_totalvehiclesspawned >= level.br_totalvehiclesmax )
                break;

            waitframe();
            continue;
        }

        var_1++;
    }

    var_19 = 0;

    if ( level.br_totalvehiclesspawned < level.br_totalvehiclesmax )
    {
        var_20 = scripts\engine\utility::array_randomize( level.brvehspawnvols );

        foreach ( var_12 in var_20 )
        {
            var_22 = var_12.minvehicles;

            if ( isdefined( var_22 ) && var_22 > 0 )
            {
                if ( var_22 > var_12.vehiclespawns.size )
                {

                }

                if ( var_12.vehiclesspawned < var_22 && var_12.vehiclespawns.size > 0 )
                {
                    var_23 = scripts\engine\utility::array_randomize( var_12.vehiclespawns );

                    for ( var_24 = 0; var_12.vehiclesspawned < var_22 && var_24 < var_23.size; var_24++ )
                    {
                        var_7 = spawnstruct();
                        var_6 = var_23[var_24];
                        var_8 = level.br_vehtargetnametoref[var_6.targetname];
                        var_9 = tryspawnavehicle( var_8, var_6, var_12.targetname, var_7 );

                        if ( !isdefined( var_9 ) )
                        {
                            var_19++;
                            continue;
                        }

                        level.br_totalvehiclesspawned++;
                        var_2[var_2.size] = var_6;
                        var_12.vehiclesspawned++;

                        if ( level.br_totalvehiclesspawned >= level.br_totalvehiclesmax )
                            break;

                        waitframe();
                    }

                    if ( level.br_totalvehiclesspawned >= level.br_totalvehiclesmax )
                        break;
                }
            }
        }
    }

    if ( level.br_totalvehiclesspawned < level.br_totalvehiclesmax )
    {
        var_26 = 0;
        var_27 = scripts\engine\utility::array_randomize( level.br_helospawns );

        foreach ( var_6 in var_27 )
        {
            var_7 = spawnstruct();
            var_8 = level.br_vehtargetnametoref[var_6.targetname];
            var_9 = tryspawnavehicle( var_8, var_6, "heloSpawn", var_7 );

            if ( isdefined( var_9 ) )
            {
                level.br_totalvehiclesspawned++;
                var_2[var_2.size] = var_6;
                var_26++;

                if ( var_26 >= level.br_helosmax )
                    break;

                if ( level.br_totalvehiclesspawned >= level.br_totalvehiclesmax )
                    break;

                waitframe();
            }
        }
    }

    if ( level.clearandrestoreinfectedtacinsert > 0 && level.br_totalvehiclesspawned < level.br_totalvehiclesmax )
    {
        var_30 = 0;
        var_31 = scripts\engine\utility::array_randomize( level.clearaveragevelocities );

        foreach ( var_6 in var_31 )
        {
            var_7 = spawnstruct();
            var_8 = level.br_vehtargetnametoref[var_6.targetname];
            var_9 = tryspawnavehicle( var_8, var_6, "truckSpawn", var_7 );

            if ( isdefined( var_9 ) )
            {
                level.br_totalvehiclesspawned++;
                var_2[var_2.size] = var_6;
                var_30++;

                if ( var_30 >= level.clearandrestoreinfectedtacinsert )
                    break;

                if ( level.br_totalvehiclesspawned >= level.br_totalvehiclesmax )
                    break;

                waitframe();
            }
        }
    }

    if ( level.clearandrestoreinfectedtacinsert >= 0 )
        var_3 = scripts\engine\utility::array_remove_array( var_3, level.clearaveragevelocities );

    if ( level.br_totalvehiclesspawned < level.br_totalvehiclesmax )
    {
        var_23 = 0;
        var_3 = scripts\engine\utility::array_remove_array( var_3, var_2 );
        var_3 = scripts\engine\utility::array_randomize( var_3 );

        foreach ( var_6 in var_3 )
        {
            var_8 = level.br_vehtargetnametoref[var_6.targetname];

            while ( !scripts\cp_mp\vehicles\vehicle_tracking::canspawnvehicle() )
                wait 1;

            var_7 = spawnstruct();
            var_9 = tryspawnavehicle( var_8, var_6, "randomSpawns", var_7 );

            if ( isdefined( var_9 ) )
            {
                level.br_totalvehiclesspawned++;
                var_23++;

                if ( level.br_totalvehiclesspawned >= level.br_totalvehiclesmax )
                    break;

                waitframe();
            }
        }
    }

    var_36 = 0;
    var_44 = var_1 + var_19;

    if ( var_36 > 0 )
        return;
}

brvehiclespawnvolreset()
{
    level.br_totalvehiclesspawned = 0;
    var_0 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_getleveldata();

    foreach ( var_2 in level.brvehspawnvols )
        var_2.vehiclesspawned = 0;
}

waitforvehiclestodeletethenspawninitial()
{
    level endon( "game_ended" );
    level notify( "br_vehiclesWaitForDelete" );
    level endon( "br_vehiclesWaitForDelete" );
    waitframe();
    waittillframeend;

    if ( scripts\mp\gametypes\br_gametypes.gsc::revive_stim( "spawnInitialVehicles" ) )
        scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "spawnInitialVehicles" );
    else
        spawninitialvehicles();
}

brvehiclesreset()
{
    emptyallvehicles();
    deleteextantvehicles();
    brvehiclespawnvolreset();
    level thread waitforvehiclestodeletethenspawninitial();
    level notify( "br_vehiclesReset" );
}

brvehicleonprematchstarted()
{
    wait 1.5;
    scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_allowvehicleuseglobal( 0 );
    brvehiclesreset();
    scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_allowvehicleuseglobal( 1 );
}

currentnumber()
{
    var_0 = scripts\engine\utility::array_combine( level.vehicle.instances["little_bird"], level.vehicle.instances["little_bird_mg"] );
    return var_0;
}

dangercircletick( var_0, var_1 )
{
    if ( !isdefined( level.vehicle ) || !isdefined( level.vehicle.instances ) )
        return;

    var_2 = 160.0;
    var_3 = 36.0;
    var_4 = 100.0;
    var_5 = getdvarfloat( "scr_br_heli_circle_damage_tick", var_4 );
    var_6 = currentnumber();

    if ( isdefined( var_6 ) )
    {
        foreach ( var_8 in var_6 )
        {
            var_9 = 0;
            var_10 = var_8.origin;
            var_11 = distance2d( var_0, var_10 );

            if ( var_11 + var_2 > var_1 )
                var_9 = 1;
            else
            {
                var_12 = var_8 gettagorigin( "tail_rotor_jnt" );
                var_11 = distance2d( var_0, var_12 );

                if ( var_11 + var_3 > var_1 )
                    var_9 = 1;
            }

            if ( var_9 )
            {
                var_13 = var_8.health;
                var_14 = var_8.maxhealth;
                var_15 = 100;
                var_8 dodamage( var_5, var_10, undefined, undefined, "MOD_TRIGGER_HURT", "danger_circle_br" );
            }
        }
    }
}

fx_thermal( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = getdvarfloat( var_5, 0 );

    if ( var_6 == 0 )
        return;

    var_6 = clamp( var_6, 0, 100 ) / 100;
    var_7 = [];

    foreach ( var_9 in var_0 )
    {
        if ( scorelimitreached( var_9, var_1, var_2 ) )
            var_7[var_7.size] = var_9;
    }

    var_7 = scripts\engine\utility::array_randomize( var_7 );
    var_11 = floor( var_7.size * var_6 );

    for ( var_12 = 0; var_12 < var_7.size && var_12 < var_11; var_12++ )
    {
        var_7[var_12].targetname = var_3;
        var_7[var_12].refname = var_4;
    }
}

scorelimitreached( var_0, var_1, var_2 )
{
    if ( isdefined( var_0.targetname ) && var_0.targetname == var_1 )
        return 1;

    if ( isdefined( var_0.refname ) && var_0.refname == var_2 )
        return 1;

    return 0;
}

_id_12ED8( var_0 )
{
    var_1 = getdvarfloat( "lb_mg_spawn_percent", 0 );

    if ( var_1 == 0 )
        return;

    var_1 = clamp( var_1, 0, 100 ) / 100;
    var_2 = [];

    foreach ( var_4 in var_0 )
    {
        if ( rpg_enemy_damage_debug( var_4 ) )
            var_2[var_2.size] = var_4;
    }

    var_2 = scripts\engine\utility::array_randomize( var_2 );
    var_6 = floor( var_2.size * var_1 );

    for ( var_7 = 0; var_7 < var_6; var_7++ )
    {
        var_4 = var_2[var_7];
        var_4.targetname = "littlebirdmg_spawn";
        var_4.refname = "little_bird_mg";
    }
}

rpg_enemy_damage_debug( var_0 )
{
    if ( isdefined( var_0.targetname ) && var_0.targetname == "littlebird_spawn" )
        return 1;

    if ( isdefined( var_0.refname ) && var_0.refname == "little_bird" )
        return 1;

    return 0;
}

rewardorigin( var_0 )
{
    if ( isdefined( var_0.targetname ) && var_0.targetname == "cargotruck_spawn" )
        return 1;

    if ( isdefined( var_0.targetname ) && var_0.targetname == "cargotruckmg_spawn" )
        return 1;

    if ( isdefined( var_0.refname ) && var_0.refname == "cargo_truck" )
        return 1;

    if ( isdefined( var_0.refname ) && var_0.refname == "cargo_truck_mg" )
        return 1;

    return 0;
}
