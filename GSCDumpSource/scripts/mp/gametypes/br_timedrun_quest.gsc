// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "timedrun", 1 );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "timedrun" ).subscribetoquestlocale = getdvarint( "scr_br_tr_missionTimeBase", 120 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "timedrun" ).set_relic_grounded = getdvarint( "scr_br_tr_kioskSearchRadiusMax", 23000 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "timedrun" ).set_relic_gun_game = getdvarint( "scr_br_tr_kioskSearchRadiusMin", 10000 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "timedrun" ).set_relic_focus_fire = getdvarint( "scr_br_tr_kioskSearchRadiusIdealMax", 23000 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "timedrun" ).set_relic_gas_martyr = getdvarint( "scr_br_tr_kioskSearchRadiusIdealMin", 17000 );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "timedrun", ::_id_12D1D );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF6( "timedrun", ::_id_12D1B );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::_id_11E05( "timedrun", ::_id_12EAF );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestlocale( "timedrun_locale" );
    scripts\mp\gametypes\br_quest_util.gsc::registercreatequestlocale( "timedrun_locale", ::_id_12D15 );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "timedrun_locale", ::_id_12D1C );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF5( "timedrun_locale", ::_id_12D17 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF8( "timedrun_locale", ::_id_12D1E );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "timedrun_locale", ::_id_12D14 );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestthink( "timedrun_locale", ::_id_12D16, 0.1 );
    game["dialog"]["mission_timedrun_accept"] = "mission_mission_time_accept";
    game["dialog"]["mission_timedrun_fail"] = "mission_mission_time_failed";
}

_id_12EAF()
{
    var_0 = _id_12D19( self );
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::lastgunkilltime( "timedrun", var_0 );

    if ( !isdefined( var_1 ) )
        return 0;

    self._id_11F03 = var_1;
    return 1;
}

takequestitem( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( "timedrun", self.team, var_0.index, var_0 );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( self.team, self );
    var_1.team = self.team;
    var_1.startlocation = self.origin;
    var_1._id_129D5 = self;
    scripts\mp\gametypes\br_quest_util.gsc::passes_final_capsule_check( self.team, "br_mission_pickup_tablet" );
    var_2 = _id_12D19( var_0 );
    var_1.starttime = gettime();
    var_3 = var_1 scripts\mp\gametypes\br_quest_util.gsc::requestquestlocale( "timedrun_locale", var_2, 1 );
    var_3.team = self.team;

    if ( !var_3.enabled )
    {
        var_1.result = "no_locale";
        var_1 scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
        return;
    }

    scripts\mp\gametypes\br_quest_util.gsc::_id_11C73( "timedrun", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF9( "timedrun", ::_id_12D1A );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::_id_11C74( getdvarint( "scr_br_timedrun_questTimeBase", getdvarint( "scr_br_tr_missionTimeBase", 120 ) ), 4 );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "timedrun", var_1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_129E2( "timedrun", self, self.team );
    var_4 = spawnstruct();
    var_4.excludedplayers = [];
    var_4.excludedplayers[0] = self;
    var_4._id_11AEF = scripts\mp\gametypes\br_quest_util.gsc::objective_hide_for_mlg_spectator( "timedrun", scripts\mp\gametypes\br_quest_util.gsc::objectiveids( self.team ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( self, "br_timedrun_quest_start_tablet_finder", var_4 );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_1.team, "br_timedrun_quest_start_team_notify", var_4 );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_timedrun_accept", var_1.team, 1, 1 );
}

enablesplitscreen( var_0 )
{
    if ( var_0.team == self.subscribedinstances[0].team )
        return 1;
    else
        return 0;
}

_id_12D1F( var_0 )
{
    var_1 = spawnstruct();
    var_1._id_121E3 = "GetEntitylessScriptableArray";
    var_1._id_121DF = var_0;
    var_1._id_121E6 = 6000;
    var_1._id_121E7 = 0;
    var_1._id_121E4 = 4000;
    var_1._id_121E5 = 0;
    var_1.mintime = 1;
    return var_1;
}

_id_12D19( var_0 )
{
    var_1 = spawnstruct();
    var_1._id_121E3 = "getKiosks";
    var_1.partname = "br_plunder_box";
    var_1.statename = "visible";
    var_1._id_121DF = var_0.origin;
    var_1._id_121E6 = scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "timedrun" ).set_relic_grounded;
    var_1._id_121E7 = scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "timedrun" ).set_relic_gun_game;
    var_1._id_121E4 = scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "timedrun" ).set_relic_focus_fire;
    var_1._id_121E5 = scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "timedrun" ).set_relic_gas_martyr;
    var_1._id_121E1 = 1;
    var_1._id_11F03 = var_0._id_11F03;
    var_1.mintime = 1;
    return var_1;
}

_id_12D18( var_0 )
{
    foreach ( var_2 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
    {
        if ( distance2d( self.startlocation, var_2.origin ) < 1500 )
        {
            if ( isdefined( var_2.vehicle ) )
                return;
        }
    }

    var_4 = getentarrayinradius( "script_vehicle", "classname", var_0._id_121DF, var_0._id_121E6 );
    var_4 = sortbydistance( var_4, var_0._id_121DF );

    foreach ( var_6 in var_4 )
    {
        if ( var_6.isempty )
        {
            self._id_12BBF = var_6;
            break;
        }
        else if ( var_6.ownerteam == self.team )
            break;
    }

    if ( !isdefined( self._id_12BBF ) )
        return;

    self._id_132C0 = scripts\mp\utility\outline::outlineenableforteam( self._id_12BBF, self.team, "outlinefill_nodepth_yellow", "level_script" );
    thread farah_nobraids_body();
    thread _id_134E9();
}

_id_134E9()
{
    level endon( "game_ended" );
    self endon( "remove_TR_Outline" );
    var_0 = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    scripts\engine\utility::waittill_any_ents_array( var_0, "vehicle_enter" );

    foreach ( var_2 in var_0 )
    {
        if ( distance2d( var_2.origin, self._id_12BBF.origin ) < 2000 )
        {
            scripts\mp\utility\outline::outlinedisable( self._id_132C0, self._id_12BBF );
            self notify( "remove_TR_Outline" );
        }
    }
}

farah_nobraids_body()
{
    level endon( "game_ended" );
    self endon( "remove_TR_Outline" );

    for (;;)
    {
        if ( self._id_12BBF.isempty != 1 || gettime() > self.starttime + 60000 )
        {
            scripts\mp\utility\outline::outlinedisable( self._id_132C0, self._id_12BBF );
            self notify( "remove_TR_Outline" );
        }

        wait 0.2;
    }
}

_id_12D15( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createlocaleinstance( "timedrun_locale", "timedrun", self.team );

    if ( !isdefined( var_0 ) )
    {
        var_1.curorigin = ( 0, 0, 0 );
        var_1.enabled = 0;
        return var_1;
    }

    var_1.playerlist = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    var_1.curorigin = var_0.origin;
    var_1 scripts\mp\gametypes\br_quest_util.gsc::get_model_for_color_wire_cut( "ui_mp_br_mapmenu_icon_timedrun_objective", "current", var_1.curorigin + ( 0, 0, 65 ) );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "timedrun_locale", var_1 );
    var_1 _id_1245E( var_0 );
    return var_1;
}

_id_1245E( var_0 )
{
    if ( !isdefined( var_0 ) )
    {
        var_1 = self.subscribedinstances[0];

        foreach ( var_3 in scripts\mp\utility\teams::getteamdata( var_1.team, "players" ) )
            var_3 scripts\mp\utility\lower_message::_id_12394( "br_assassination_notargets", undefined, 5 );

        var_1.result = "no_locale";
        var_1 scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        return 0;
    }

    self._id_12BAC = var_0;
    thread _id_12C7B( self._id_12BAC.origin );
    _id_130C3();
    return 1;
}

_id_12C7B( var_0, var_1 )
{
    var_2 = spawnfx( level._effect["vfx_marker_base_orange_pulse"], var_0 + ( 0, 0, 10 ) );
    var_2.angles = vectortoangles( ( 0, 0, 1 ) );
    var_2 hide();
    wait 0.5;
    triggerfx( var_2 );

    foreach ( var_4 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
        var_2 showtoplayer( var_4 );

    self.lastmovingplatform = var_2;
}

_id_12D1D()
{
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
}

_id_12D1C()
{
    handle_no_ammo_mun();

    if ( isdefined( self.lastmovingplatform ) )
        self.lastmovingplatform delete();

    self.playerlist = undefined;
    self.subscribedinstances = undefined;
}

_id_12D16()
{
    foreach ( var_1 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
    {
        if ( getdvarint( "scr_br_alt_mode_gxp", 0 ) )
        {
            if ( var_1 scripts\mp\gametypes\br_public.gsc::zombie() )
                continue;
        }

        if ( distance( var_1.origin, self.curorigin ) < 150 )
        {
            foreach ( var_3 in self.subscribedinstances )
            {
                if ( var_3.team == var_1.team )
                {
                    var_3 freeze_bomb_case_timer( self._id_12BAC, var_1 );
                    return;
                }
            }
        }
    }
}

freeze_bomb_case_timer( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::objectiveids( self.team );
    var_4 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "timedrun" );
    var_5 = scripts\mp\gametypes\br_quest_util.gsc::objective_origin( scripts\mp\gametypes\br_quest_util.gsc::objective_minimapupdate( "timedrun" ) );
    var_6 = scripts\mp\gametypes\br_alt_mode_bblitz.gsc::calculateeventstarttime( var_1 );
    var_2.usingobject = scripts\mp\gametypes\br_quest_util.gsc::v_start_pos( var_4, var_3, var_5, undefined, var_6 );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_timedrun_quest_complete", var_2 );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_misc_success", self.team, 1, 1 );
    var_7 = scripts\mp\utility\teams::getteamdata( self.team, "players" );

    foreach ( var_9 in var_7 )
    {
        if ( isdefined( var_9 ) && !istrue( var_9.clean_up_search ) )
            scripts\mp\gametypes\br_armory_kiosk.gsc::set_relic_headbullets( var_0, var_9 );
    }

    self._id_11FD5 = undefined;
    self.result = "success";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

killed_by_chopper()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_timedrun_quest_circle_failure" );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_obj_circle_fail", self.team, 1, 1 );
    self.result = "fail";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

_id_12D1A()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_timedrun_quest_timer_expired" );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_timedrun_fail", self.team, 1, 1 );
}

_id_12D14( var_0, var_1 )
{
    if ( !isdefined( self.lastcircletick ) )
        self.lastcircletick = -1;

    var_2 = gettime();

    if ( self.lastcircletick == var_2 )
        return;

    self.lastcircletick = var_2;
    var_3 = distance2d( self.curorigin, var_0 );

    if ( var_3 > var_1 )
    {
        foreach ( var_5 in self.subscribedinstances )
            var_5 killed_by_chopper();
    }
}

_id_12D1B( var_0 )
{
    if ( var_0.team == self.team )
    {
        scripts\mp\gametypes\br_quest_util.gsc::getquestinstancedata( "timedrun_locale", self.team ).playerlist = scripts\mp\utility\teams::getteamdata( self.team, "players" );

        if ( !scripts\mp\gametypes\br_quest_util.gsc::isteamvalid( var_0.team ) )
        {
            self.result = "fail";
            scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        }
    }
}

_id_12D17( var_0 )
{
    if ( !enablesplitscreen( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
    scripts\mp\gametypes\br_quest_util.gsc::playertouching( var_0 );
}

_id_12D1E( var_0 )
{
    if ( !enablesplitscreen( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "timedrun" );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12552( var_0 );
}

_id_130C3()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::sortvalidplayersinarray( self.playerlist );

    foreach ( var_2 in var_0["valid"] )
    {
        var_2 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "timedrun" );
        scripts\mp\gametypes\br_quest_util.gsc::_id_12552( var_2 );
    }

    foreach ( var_2 in var_0["invalid"] )
    {
        var_2 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
        scripts\mp\gametypes\br_quest_util.gsc::playertouching( var_2 );
    }
}

playerupdatebesttimehud( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::playertouching( var_0 );
    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
}

handle_no_ammo_mun()
{
    foreach ( var_1 in self.playerlist )
        playerupdatebesttimehud( var_1 );

    scripts\mp\gametypes\br_quest_util.gsc::hacks_started();
}
