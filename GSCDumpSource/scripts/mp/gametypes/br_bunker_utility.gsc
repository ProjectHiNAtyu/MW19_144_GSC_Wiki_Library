// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    ref_angle_doors();
    reflectprojectile();
    ref_anim();
    relic_bullet_reward_hud_display();
}

#using_animtree("animated_props");

ref_angle_doors()
{
    level.scr_animtree["bunker_door"] = #animtree;
    level.scr_anim["bunker_door"]["door_open"] = %mp_verdansk_bunkerdoor_open;
    level.scr_animname["bunker_door"]["door_open"] = "mp_verdansk_bunkerdoor_open";
    level.scr_anim["bunker_door"]["door_open_puzzle"] = %mp_verdansk_bunkerdoor_open_puzzle;
    level.scr_animname["bunker_door"]["door_open_puzzle"] = "mp_verdansk_bunkerdoor_open_puzzle";
}

reflectprojectile()
{

}

ref_name( var_0, var_1, var_2 )
{
    var_3 = getentarray( var_0.target, "targetname" );

    foreach ( var_5 in var_3 )
    {
        if ( var_5.script_noteworthy == "right_door_clip" )
        {
            var_0.firestation_jugg_test = var_5;
            var_0.firestation_jugg_test setnonstick( 1 );
            continue;
        }

        if ( var_5.script_noteworthy == "left_door_clip" )
        {
            var_0.firing_start_locs = var_5;
            var_0.firing_start_locs setnonstick( 1 );
        }
    }

    var_0.animname = "bunker_door";
    var_0 scripts\common\anim::setanimtree();

    if ( !istrue( var_2 ) )
        level thread reflectbolt( var_0, var_1 );

    var_7 = anglestoforward( var_0.angles );
    var_8 = var_0.origin + ( 0, 0, -110 ) + var_7 * -128;
    var_9 = getent( "clip256x256x256", "targetname" );
    var_10 = spawn( "script_model", var_8 );
    var_10.angles = var_0.angles;
    var_10 clonebrushmodeltoscriptmodel( var_9 );
    var_0.anim_spawnposition_override = var_10;
}

reflectbolt( var_0, var_1 )
{

}

updateassassinationthreatlevel( var_0, var_1, var_2, var_3 )
{

}

_id_127A6( var_0, var_1 )
{
    if ( !isdefined( level.br_pickups ) )
        return;

    var_2 = mp_raid_patch( var_0, var_1 );
    var_3 = scripts\engine\utility::getstructarray( var_2.target, "targetname" );
    var_4 = [];
    var_5 = [];
    var_6 = [];
    var_7 = [];
    var_8 = getdvarint( "scr_br_bunkerCache_Lege_Min", 0 );
    var_9 = getdvarint( "scr_br_bunkerCache_Lege_Max", 1 );
    var_10 = getdvarint( "scr_br_bunkerCache_Basic_Min", 1 );
    var_11 = getdvarint( "scr_br_bunkerCache_Basic_Max", 2 );

    foreach ( var_13 in var_3 )
    {
        if ( var_13.script_noteworthy == "br_loot_cache_lege" )
        {
            var_4[var_4.size] = var_13;
            continue;
        }

        if ( var_13.script_noteworthy == "br_loot_cache" )
        {
            var_5[var_5.size] = var_13;
            continue;
        }

        if ( issubstr( var_13.script_noteworthy, "uniqueLootItem" ) )
        {
            var_6[var_6.size] = var_13;
            continue;
        }

        var_7[var_7.size] = var_13;
    }

    var_15 = randomintrange( var_8, var_9 );
    var_4 = scripts\engine\utility::array_randomize( var_4 );
    var_5 = scripts\engine\utility::array_randomize( var_5 );

    for ( var_16 = 0; var_16 < var_15; var_16++ )
    {
        if ( isdefined( var_4[var_16] ) )
        {
            var_17 = easepower( var_4[var_16].script_noteworthy, var_4[var_16].origin, var_4[var_16].angles );
            scripts\mp\gametypes\br_pickups.gsc::_id_11E02( var_17 );
        }
    }

    var_15 = randomintrange( var_10, var_11 );

    for ( var_16 = 0; var_16 < var_15; var_16++ )
    {
        if ( isdefined( var_5[var_16] ) )
        {
            var_17 = easepower( var_5[var_16].script_noteworthy, var_5[var_16].origin, var_5[var_16].angles );
            scripts\mp\gametypes\br_pickups.gsc::_id_11E02( var_17 );
        }
    }

    foreach ( var_24, var_13 in var_6 )
    {
        if ( isdefined( var_13.script_noteworthy ) )
        {
            var_19 = _id_12FC2( var_13.script_noteworthy );
            var_20 = normalspeed( var_19 );
            var_21 = var_13.origin;
            var_22 = var_13.angles;

            if ( var_13.script_noteworthy == "uniqueLootItem_1" )
            {
                if ( level.mapname == "mp_bm_bunker01" )
                {
                    switch ( var_24 )
                    {
                        case 0:
                            continue;
                        case 1:
                            var_21 = ( 1969, 639, 68 );
                            var_22 = ( 0, 106.6, 75 );
                            break;
                        case 2:
                            var_21 = ( 1962, 665, 68 );
                            var_22 = ( 0, 106.6, 75 );
                            break;
                    }
                }
                else if ( scripts\cp_mp\utility\game_utility::riskspawn_debugdvar() )
                {
                    switch ( var_24 )
                    {
                        case 0:
                            continue;
                        case 1:
                            var_21 = ( -3858, 62596, 573 );
                            var_22 = ( 0, 106.6, 75 );
                            break;
                        case 2:
                            var_21 = ( -3850, 62571, 573 );
                            var_22 = ( 0, 106.6, 75 );
                            break;
                    }
                }
            }

            var_23 = scripts\mp\gametypes\br_pickups.gsc::nospectatablepropswatch( var_21, var_22 );
            var_17 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_19, var_23, var_20, 0 );

            if ( isdefined( var_17 ) )
                var_17._id_12FC1 = var_13.script_noteworthy;
        }
    }

    foreach ( var_13 in var_7 )
    {
        if ( isdefined( var_13.script_noteworthy ) )
        {
            var_26 = var_13.script_noteworthy;

            if ( var_13.script_noteworthy == "jugg_minigun" )
            {
                if ( getdvarint( "scr_br_spawnBunkerMiniGun", 1 ) == 0 )
                    continue;

                var_26 = "brloot_weapon_lm_dblmg_lege";
            }
            else if ( var_13.script_noteworthy == "jugg_minigun_chance" )
            {
                var_27 = randomintrange( 1, 100 );

                if ( var_27 > getdvarint( "scr_br_chanceForBunkerSpecialLoot", 60 ) )
                    continue;
                else
                    var_26 = onweapondroppickedup();
            }

            var_20 = normalspeed( var_26 );
            var_23 = scripts\mp\gametypes\br_pickups.gsc::nospectatablepropswatch( var_13.origin, var_13.angles );
            var_17 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_26, var_23, var_20, 0 );
        }
    }
}

normalspeed( var_0 )
{
    if ( isdefined( level.br_lootiteminfo[var_0] ) )
        return level.br_lootiteminfo[var_0].location_objective_remover.clipsize;
    else if ( isdefined( level.br_ammo_clipsize[var_0] ) )
        return level.br_ammo_clipsize[var_0];
    else
        return 1;
}

_id_12FC2( var_0 )
{
    switch ( var_0 )
    {
        case "uniqueLootItem_2":
        case "uniqueLootItem_1":
        default:
    }
}

onweapondroppickedup()
{
    var_0 = 0;
    var_1 = 0;
    var_2 = scripts\mp\utility\game::onfieldupgradeendbuffer();

    if ( level.gametype == "br" && ( var_2 == "br" || var_2 == "jugg" || var_2 == "mini" ) )
    {
        var_0 = 2;
        var_1 = 2;
    }

    var_3 = getdvarint( "scr_br_lootbunkerChance_AUAV", 0 );
    var_4 = getdvarint( "scr_br_lootBunkerChance_Specialist", 0 );
    var_5 = getdvarint( "scr_br_lootBunkerChance_LoadoutDrop", 0 );
    var_6 = getdvarint( "scr_br_lootBunkerChance_Gasmask", 0 );
    var_7 = getdvarint( "scr_br_lootBunkerChance_MiniGun", 0 );
    var_8 = getdvarint( "scr_br_lootBunkerChance_JuggDrop", 0 );
    var_9 = getdvarint( "scr_br_lootBunkerChance_AssaultDrone", 0 );
    var_10 = getdvarint( "scr_br_lootBunkerChance_CirclePeek", 0 );
    var_11 = 1 + var_3 + var_4 + var_5 + var_6 + var_7 + var_8 + var_9 + var_10;
    var_12 = randomintrange( 1, var_11 );

    if ( var_12 <= var_3 )
        return "brloot_killstreak_auav";
    else if ( var_12 <= var_3 + var_4 )
        return "brloot_specialist_bonus";
    else if ( var_12 <= var_3 + var_4 + var_5 )
        return "brloot_offhand_advancedsupplydrop";
    else if ( var_12 <= var_3 + var_4 + var_5 + var_6 )
        return "brloot_equip_gasmask_durable";
    else if ( var_12 <= var_3 + var_4 + var_5 + var_6 + var_7 )
        return "brloot_weapon_lm_dblmg_lege";
    else if ( var_12 <= var_3 + var_4 + var_5 + var_6 + var_7 + var_8 )
        return "brloot_killstreak_juggernaut";
    else if ( var_12 <= var_3 + var_4 + var_5 + var_6 + var_7 + var_8 + var_9 )
        return "brloot_killstreak_assaultdrone";
    else
        return "brloot_killstreak_circle_peek";
}

mp_raid_patch( var_0, var_1 )
{
    var_2 = scripts\engine\utility::getstructarray( var_1, "targetname" );

    if ( isdefined( var_2 ) )
    {
        if ( var_2.size == 1 )
            return var_2[0];
        else
        {
            var_3 = undefined;
            var_4 = undefined;

            for ( var_5 = 0; var_5 < var_2.size; var_5++ )
            {
                var_6 = distance2dsquared( var_0, var_2[var_5].origin );

                if ( !isdefined( var_4 ) || var_6 < var_4 )
                {
                    var_4 = var_6;
                    var_3 = var_2[var_5];
                }
            }

            return var_3;
        }
    }

    return undefined;
}

aq_playerdisconnect( var_0 )
{
    if ( ringcodephoneconstantly( var_0.angles[1], 106, 1 ) )
    {
        var_1 = anglestoforward( var_0.angles );
        return [ var_0.origin + var_1 * 30, ( var_0.angles[0], 106, 90 ) ];
    }
    else if ( ringcodephoneconstantly( var_0.angles[1], 90, 1 ) )
    {
        var_1 = anglestoforward( var_0.angles );
        return [ var_0.origin - var_1 * 10, var_0.angles ];
    }
    else if ( ringcodephoneconstantly( var_0.angles[1], 70, 1 ) )
        return [ var_0.origin, ( var_0.angles[0], var_0.angles[1], 0 ) ];

    return [ var_0.origin, var_0.angles ];
}

ringcodephoneconstantly( var_0, var_1, var_2 )
{
    return abs( var_0 - var_1 ) <= var_2;
}

helilifetime()
{
    helidrivableenablesiteondeath( ( -17923, -42192, -252 ) );
    helidrivableenablesiteondeath( ( -15045, 45467, -186 ) );
    helidrivableenablesiteondeath( ( 1992, 38955, 1378 ) );
    helidrivableenablesiteondeath( ( 49764, 34322, 206 ) );
    helidrivableenablesiteondeath( ( 52510, -32696, -119 ) );
    helidrivableenablesiteondeath( ( 47158, -10562, 131 ) );
    helidrivableenablesiteondeath( ( -39282, -2005, -78 ) );
    helidrivableenablesiteondeath( ( 41919, -41349, -580 ) );
    helidrivableenablesiteondeath( ( -38426, -19360, 403 ) );
    helidrivableenablesiteondeath( ( 21085, 16700, 246 ) );
    helidrivableenablesiteondeath( ( 17893, -34039, -561 ) );
}

helidrivabledeathall()
{
    helidrivableenablesiteondeath( ( -4337, 62466, 580 ) );
}

helidrivableenablesiteondeath( var_0, var_1 )
{
    var_2 = 2000;

    if ( !isdefined( var_1 ) )
        var_1 = var_2;

    var_3 = getlootspawnpoint( var_0, var_1, 0, 0 );

    foreach ( var_5 in var_3 )
    {
        if ( ringcodephoneconstantly( var_0[2], var_5.origin[2], 100 ) )
            getlootspawnpointcount( var_5.index );
    }
}

ref_anim()
{
    level.delay_turn_on_headlights = [];
    var_0 = scripts\engine\utility::getstructarray( "bunker_back_keypad", "targetname" );

    foreach ( var_2 in var_0 )
    {
        var_3 = easepower( "maphint_keypad_bunker_interior", var_2.origin );
        var_3.buildblueprintpickupweapon = 1;

        if ( isdefined( var_2.script_noteworthy ) )
        {
            var_3.delaydestroyhudelem = int( var_2.script_noteworthy );
            level.delay_turn_on_headlights[var_3.delaydestroyhudelem] = var_3;
        }
    }
}

seq3_crate_usable( var_0, var_1, var_2, var_3, var_4 )
{
    level thread addbattlepassxpmultiplier( var_0, var_1, var_2, var_3, var_4 );
}

addbattlepassxpmultiplier( var_0, var_1, var_2, var_3, var_4 )
{

}

sentryturret_watchgameend( var_0 )
{
    level endon( "game_ended" );
    self endon( "keypad_kickPlayerFromKeypadMSG" );
    thread send_notify_to_module_struct( var_0 );
    thread sentryturret_allowpickupofturret( var_0 );
    thread sentryturret_canpickup( var_0 );
    scripts\mp\gametypes\br_keypad_util.gsc::_id_119B5( 1 );
    var_1 = 8;

    if ( isdefined( var_0.fly_over_start ) )
        var_1 = var_0.fly_over_start;

    scripts\mp\gametypes\br_keypad_util.gsc::_id_119B3( var_1 );
    scripts\mp\gametypes\br_keypad_util.gsc::_id_119B4( [ 0 ] );

    if ( istrue( var_0.fly_toward_retreat_struct ) && var_0.fly_over_start <= 5 )
        scripts\mp\gametypes\br_keypad_util.gsc::_id_119B4( var_0.flightyaw["array"] );

    while ( isdefined( self ) && scripts\mp\gametypes\br_keypad_util.gsc::nuclear_core_carrier_escaped() != 0 )
    {
        self waittill( "luinotifyserver", var_2, var_3 );

        if ( isdefined( var_2 ) )
        {
            if ( var_2 == "submit_br_keypad" )
            {
                if ( getdvarint( "scr_br_bunker_keypad_refresh_idle_timer_on_try", 0 ) )
                    thread sentryturret_canpickup( var_0 );

                if ( isdefined( var_0.flightyaw ) && ringphoneoccasionally( var_0, var_3 ) )
                {
                    scripts\mp\gametypes\br_keypad_util.gsc::_id_119B5( 2 );
                    var_0.fn_damage_pack = 2;

                    if ( isdefined( var_0._id_12AB4 ) )
                        [[ var_0._id_12AB4 ]]( var_0 );

                    break;
                }
                else
                {
                    if ( soundexists( "br_keypad_deny" ) )
                        playsoundatpos( self.origin, "br_keypad_deny" );

                    var_0.fn_damage_pack = 3;
                    scripts\mp\gametypes\br_keypad_util.gsc::_id_119B5( 3 );
                    waitframe();

                    if ( isdefined( self ) )
                        scripts\mp\gametypes\br_keypad_util.gsc::_id_119B5( 1 );
                }

                continue;
            }

            if ( var_2 == "exit_br_keypad" )
            {
                var_0.fn_damage_pack = 3;

                if ( isdefined( var_0.groundtriggers ) )
                    level notify( var_0.groundtriggers );

                break;
            }
        }
    }

    scripts\mp\gametypes\br_keypad_util.gsc::_id_119B4( [ 0 ] );
    self notify( "doneWithKeypad" );
}

send_notify_to_module_struct( var_0 )
{
    self endon( "keypad_kickPlayerFromKeypadMSG" );
    level endon( "game_ended" );
    self waittill( "death_or_disconnect" );

    if ( isdefined( var_0.groundtriggers ) )
        level notify( var_0.groundtriggers );

    scripts\mp\gametypes\br_keypad_util.gsc::_id_119B4( [ 0 ] );
    self notify( "keypad_kickPlayerFromKeypadMSG" );
}

sentryturret_allowpickupofturret( var_0 )
{
    self endon( "keypad_kickPlayerFromKeypadMSG" );
    level endon( "game_ended" );
    self waittill( "last_stand_start" );

    if ( isdefined( var_0.groundtriggers ) )
        level notify( var_0.groundtriggers );

    scripts\mp\gametypes\br_keypad_util.gsc::_id_119B4( [ 0 ] );
    self notify( "keypad_kickPlayerFromKeypadMSG" );
}

sentryturret_canpickup( var_0 )
{
    self endon( "keypad_kickPlayerFromKeypadMSG" );
    self notify( "keypad_playerIdleWatch" );
    self endon( "keypad_playerIdleWatch" );
    wait( getdvarint( "scr_br_bunker_keypad_idle_timer", 60 ) );

    if ( isdefined( var_0.groundtriggers ) )
        level notify( var_0.groundtriggers );

    scripts\mp\gametypes\br_keypad_util.gsc::_id_119B4( [ 0 ] );
    self notify( "keypad_kickPlayerFromKeypadMSG" );
}

send_wave_spawns_to_roof( var_0, var_1 )
{
    if ( isdefined( var_0.groundtriggers ) )
        level waittill( var_0.groundtriggers );

    var_0 setscriptablepartstate( var_1, "on" );
}

ringphoneoccasionally( var_0, var_1 )
{
    if ( !isdefined( var_0.flightyaw["string"] ) )
        return;

    if ( var_1 == -1 )
        return 0;

    var_2 = int( var_0.flightyaw["string"] );

    if ( var_1 == var_2 )
        return 1;

    return 0;
}

managejumpmasterinfodisplay( var_0, var_1 )
{
    var_2 = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];

    for ( var_3 = 0; var_3 < var_0; var_3++ )
    {
        var_2 = scripts\engine\utility::array_randomize( var_2 );
        var_1.flightyaw[var_3] = var_2[0];
        var_2 = scripts\engine\utility::array_remove( var_2, var_2[0] );
    }
}

managedropbags( var_0, var_1, var_2, var_3 )
{
    var_4 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ];
    var_1.flightyaw = [];

    if ( !isdefined( var_2 ) )
        var_2 = 0;
    else
        var_1.flightyaw["doubles"] = [];

    if ( !isdefined( var_3 ) )
        var_3 = 0;
    else
        var_1.flightyaw["triples"] = [];

    var_5 = var_0 - var_2 - var_3 * 2;
    var_6 = scripts\engine\utility::array_randomize( var_4 );
    var_4 = [];
    var_7 = randomintrange( 1, 9 );

    foreach ( var_10, var_9 in var_6 )
    {
        if ( var_10 == var_7 )
        {
            var_4[var_4.size] = 0;
            continue;
        }

        var_4[var_4.size] = var_9;
    }

    for ( var_11 = 0; var_11 < var_5; var_11++ )
        var_1.flightyaw["array"][var_11] = var_4[var_11];

    var_12 = var_1.flightyaw["array"];

    for ( var_11 = 0; var_11 < var_2; var_11++ )
    {
        var_13 = var_12[var_11];
        var_1.flightyaw["array"][var_1.flightyaw["array"].size] = var_13;
        var_1.flightyaw["doubles"][var_1.flightyaw["doubles"].size] = var_13;
        var_12 = scripts\engine\utility::array_remove( var_12, var_12[var_11] );
    }

    for ( var_11 = 0; var_11 < var_3; var_11++ )
    {
        var_14 = var_12[var_11];

        for ( var_15 = 0; var_15 < 2; var_15++ )
            var_1.flightyaw["array"][var_1.flightyaw["array"].size] = var_14;

        var_1.flightyaw["triples"][var_1.flightyaw["triples"].size] = var_14;
        var_12 = scripts\engine\utility::array_remove( var_12, var_12[var_11] );
    }

    var_1.flightyaw["array"] = scripts\engine\utility::array_randomize( var_1.flightyaw["array"] );
    var_1.flightyaw["string"] = "";

    foreach ( var_9 in var_1.flightyaw["array"] )
    {
        var_17 = "" + var_9;
        var_1.flightyaw["string"] = var_1.flightyaw["string"] + var_17;
    }
}

manageafktracking( var_0, var_1, var_2, var_3 )
{
    if ( var_2 > var_0["doubles"].size )
        var_2 = 0;

    if ( var_3 > var_0["triples"].size )
        var_3 = 0;

    var_4 = 0;
    var_5 = 0;
    var_6 = scripts\engine\utility::array_randomize( scripts\engine\utility::array_remove_duplicates( var_0["array"] ) );
    var_7 = [];

    for ( var_8 = 0; var_8 < var_1; var_8++ )
    {
        if ( var_4 < var_2 )
        {
            var_9 = var_0["doubles"][var_4];
            var_4++;
        }
        else if ( var_5 < var_3 )
        {
            var_9 = var_0["triples"][var_5];
            var_5++;
        }
        else
            var_9 = var_6[0];

        var_7[var_9] = var_8 + 1;
        var_6 = scripts\engine\utility::array_remove( var_6, var_9 );
    }

    var_10 = [];
    var_11 = getarraykeys( var_7 );

    foreach ( var_19, var_13 in var_11 )
    {
        var_10[var_19] = var_0["array"];
        var_14 = 0;

        foreach ( var_18, var_16 in var_10[var_19] )
        {
            if ( var_16 == var_13 && var_14 )
            {
                var_10[var_19][var_18] = "symbol" + var_7[var_13];
                var_17 = 1;
                continue;
            }

            if ( var_16 == var_13 && !var_14 )
            {
                var_14 = 1;
                continue;
            }

            if ( scripts\engine\utility::array_contains( var_11, var_16 ) )
                var_10[var_19][var_18] = "symbol" + var_7[var_16];
        }
    }

    return var_10;
}

branalytics_missionstart( var_0, var_1 )
{
    var_0 = scripts\engine\utility::array_randomize( var_0 );

    foreach ( var_4, var_3 in var_0 )
    {
        if ( var_4 > var_1.size )
            var_4 = 0;

        var_3.scriptable.highesttraceindex = var_4;
    }
}

mp_rust_patch( var_0, var_1 )
{
    return var_0.highlight_atvs_until_router[var_1];
}

spawn_carepackage( var_0 )
{
    if ( isdefined( var_0.doors ) )
    {
        foreach ( var_2 in var_0.doors )
            var_2 scriptabledoorfreeze( 1 );
    }
}

_id_12FD5( var_0 )
{
    if ( isdefined( var_0.doors ) )
    {
        foreach ( var_2 in var_0.doors )
            var_2 scriptabledoorfreeze( 0 );
    }
}

updatecollectionui( var_0, var_1 )
{
    foreach ( var_3 in var_0.doors )
        var_3 scriptabledooropen( "away", var_0.origin );

    if ( istrue( var_1 ) )
    {
        wait 1;
        spawn_carepackage( var_0 );
    }
}

flagwatchradarownerlost( var_0, var_1 )
{
    foreach ( var_3 in var_0.doors )
        var_3 scriptabledoorclose( 1 );

    if ( istrue( var_1 ) )
    {
        var_5 = 0;

        while ( !var_5 )
        {
            var_6 = 0;

            foreach ( var_3 in var_0.doors )
            {
                if ( !var_3 scriptabledoorisclosed() )
                    var_6 = 1;
            }

            if ( !var_6 )
                var_5 = 1;

            waitframe();
        }

        spawn_carepackage( var_0 );
    }
}

relic_bullet_reward_hud_display()
{
    level.infectbonussuperontacinsert = getdvarint( "NROSLKMMQQ", 0 ) > 0;
    scripts\mp\gamelogic::_id_11F05( 9 );
    level.indanger = getent( "clip128x128x8", "targetname" );
}

_id_121B1( var_0 )
{
    foreach ( var_2 in var_0 )
        var_2 thread _id_121B0();

    var_4 = 0;

    for (;;)
    {
        var_4 = 1;

        foreach ( var_2 in var_0 )
        {
            if ( var_2 _id_121B6() )
            {
                var_4 = 0;
                break;
            }
        }

        if ( var_4 )
            break;

        waitframe();
    }

    return 1;
}

_id_121B2( var_0 )
{
    foreach ( var_2 in var_0 )
        var_2 _id_121B3();
}

_id_121B0()
{
    self endon( "door_cl_end" );

    if ( istrue( self.incrementobjectiveachievementkill ) )
        return;

    self.incrementobjectiveachievementkill = 1;
    var_0 = combineangles( self.angles, ( 0, -1 * self scriptabledoorangle(), 0 ) );
    var_1 = self.origin;
    var_2 = anglestoforward( var_0 );
    var_3 = anglestoup( self.angles );
    var_4 = 28.0;
    var_5 = 48.0;
    var_1 = var_1 + var_2 * var_4;
    var_1 = var_1 + var_3 * var_5;
    var_6 = sqrt( pow( 28.0, 2 ) + pow( 48.0, 2 ) ) + 20;
    var_7 = var_1 + var_3 * 128 * -0.5;
    var_8 = combineangles( var_0, ( 0, -90, 0 ) );

    if ( 1 && isdefined( level.indanger ) )
    {
        var_9 = spawn( "script_model", ( 0, 0, 0 ) );
        var_9 clonebrushmodeltoscriptmodel( level.indanger );
        var_9.origin = var_7;
        var_9.angles = var_8;
        self.infectbonusscore = var_9;
    }

    self.infectbonussuperonspawn = [];

    while ( !self scriptabledoorisclosed() )
    {
        self scriptabledoorclose();

        if ( 1 )
        {
            var_10 = scripts\mp\utility\player::getplayersinradius( var_1, var_6 );

            foreach ( var_12 in var_10 )
            {
                var_13 = var_12 getentitynumber();

                if ( !var_12 scripts\cp_mp\utility\player_utility::_isalive() )
                {
                    self.infectbonussuperonspawn[var_13] = undefined;
                    continue;
                }

                if ( !isdefined( self.infectbonussuperonspawn[var_13] ) )
                {
                    var_12 _id_121B4( 1 );
                    self.infectbonussuperonspawn[var_13] = var_12;
                }
            }

            foreach ( var_13, var_12 in self.infectbonussuperonspawn )
            {
                if ( !isdefined( var_12 ) || !var_12 scripts\cp_mp\utility\player_utility::_isalive() )
                {
                    self.infectbonussuperonspawn[var_13] = undefined;
                    continue;
                }

                var_16 = 1;

                foreach ( var_18 in var_10 )
                {
                    if ( var_18 == var_12 )
                    {
                        var_16 = 0;
                        break;
                    }
                }

                if ( var_16 )
                {
                    var_12 _id_121B4( 0 );
                    self.infectbonussuperonspawn[var_13] = undefined;
                }
            }
        }

        waitframe();
    }

    self scriptabledoorfreeze();
    thread _id_121B3();
}

_id_121B3()
{
    self notify( "door_cl_end" );
    self.incrementobjectiveachievementkill = undefined;

    if ( isdefined( self.infectbonusscore ) )
    {
        self.infectbonusscore delete();
        self.infectbonusscore = undefined;
    }

    if ( isdefined( self.infectbonussuperonspawn ) )
    {
        foreach ( var_1 in self.infectbonussuperonspawn )
        {
            if ( !isdefined( var_1 ) || !var_1 scripts\cp_mp\utility\player_utility::_isalive() )
                continue;

            var_1 _id_121B4( 0 );
        }
    }

    self.infectbonussuperonspawn = undefined;
}

_id_121B4( var_0 )
{
    scripts\common\utility::allow_melee( !var_0, "door_cl" );
    scripts\common\utility::allow_usability( !var_0, "door_cl" );
}

_id_121B6()
{
    return istrue( self.incrementobjectiveachievementkill );
}

_id_121B5()
{
    return istrue( level.infectbonussuperontacinsert );
}

fridgeusethink( var_0 )
{
    playsoundatpos( var_0.origin, "br_computer_deny" );
    var_0 setscriptablepartstate( var_0.type, "off" );
    wait 3;
    var_0 setscriptablepartstate( var_0.type, "on" );
}
