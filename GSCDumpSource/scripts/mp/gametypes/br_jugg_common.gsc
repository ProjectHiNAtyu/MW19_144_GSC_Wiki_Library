// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.animscripted_single = ::_id_1236D;
    level.animscripted_loop_relative = ::animscripted_loop_relative;
    level.findfirstaliveplayer = ::init_nuke_vault_oil_puddles;
    scripts\cp_mp\utility\script_utility::registersharedfunc( "br_juggernaut", "onCrateActivate", ::uav_isenemygettingnotified );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "br_juggernaut", "onCrateUse", ::uavdirectionalid );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "br_juggernaut", "onCrateDestroy", ::uavbestid );
    level thread scripts\mp\gametypes\br_c130airdrop.gsc::init();
    level.activejuggernauts = [];
    level.convoy4_roof_jugg = [];
    thread relic_amped_reset_deathshield_on_revived();
}

relic_amped_reset_deathshield_on_revived()
{
    waittillframeend;
    register_player_character();
    level.trial_time_remaining = 0;
}

_id_1236D()
{
    self.usageloop = 100;
    self.usablecarriables = 3.0;
    self.usb_left = 1.0;
    self.usb_keys = 0.5;
    self.usb = 5;
    self.infiniteammo = 0;
    self.maxhealth = getdvarint( "scr_br_jugg_health", 2000 );
    self.startinghealth = getdvarint( "scr_br_jugg_health", 2000 );
    self._id_132A0 = int( self.maxhealth / self.start_safehouse_gunshop );
    var_0 = getdvarint( "scr_br_jugg_weapon_pickup", 0 );
    self._id_13134 = var_0;
    var_1 = getdvarint( "scr_br_jugg_reload", 1 );

    if ( var_1 )
    {
        self.classstruct.loadoutprimary = "iw8_minigunksjugg_reload_mp";
        self._id_13124 = var_1;
    }

    self.allows["reload"] = undefined;
}

swap_access_card( var_0 )
{
    var_1 = getdvarfloat( "scr_br_jugg_vs_gas_scale", 7.0 );
    var_2 = var_0 * var_1;
    return int( var_2 );
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( isdefined( var_1 ) && isplayer( var_1 ) && var_1 scripts\mp\utility\killstreak::isjuggernaut() && getdvarint( "scr_jugg_regen_health_on_kill", 1 ) )
    {
        var_10 = var_1.health;
        var_11 = int( var_1.maxhealth / 6 );
        var_12 = var_10 + var_11;

        if ( var_12 > var_1.maxhealth )
            var_12 = var_1.maxhealth;

        var_1.health = var_12;
        var_1 notify( "jugg_health_regen" );
    }

    if ( isdefined( self ) && scripts\mp\utility\killstreak::isjuggernaut() )
        self.prevcallback = undefined;
}

animscripted_loop_relative()
{
    var_0 = self.juggcontext.juggconfig;
    var_1 = getdvarint( "scr_br_jugg_overheat", 0 );

    if ( var_1 )
    {
        thread _id_13516( var_0 );
        thread _id_1350A( var_0 );
    }

    thread spawnrisktoken( var_0 );
}

init_nuke_vault_oil_puddles()
{
    var_0 = scripts\mp\gametypes\br_pickups.gsc::register_respawn_functions();
    scripts\mp\gametypes\br_pickups.gsc::init_patches( var_0 );
    scripts\mp\gametypes\br_pickups.gsc::init_preset_solutions( var_0 );
    scripts\mp\gametypes\br_pickups.gsc::init_placed_equipment( var_0 );
    scripts\mp\gametypes\br_pickups.gsc::init_player_characters( var_0 );
    scripts\mp\gametypes\br_pickups.gsc::init_player_falling_anims( var_0 );
    scripts\mp\gametypes\br_pickups.gsc::init_range( var_0 );
    scripts\mp\gametypes\br_pickups.gsc::init_post_bsp_fx( var_0 );
    scripts\mp\gametypes\br_pickups.gsc::init_player_achievements( var_0 );
    scripts\mp\gametypes\br_pickups.gsc::init_pushable_minecart( var_0 );
    scripts\mp\gametypes\br_pickups.gsc::init_relic_trex( var_0 );
}

register_player_character()
{
    if ( !isdefined( level.calloutglobals.tr_entergulag ) || level.calloutglobals.tr_entergulag.size == 0 )
        return;

    level.select_back_door_spawners = [];

    foreach ( var_3, var_1 in level.calloutglobals.tr_entergulag )
    {
        var_2 = spawnstruct();
        var_2.id = var_3;
        var_2.origin = var_1.origin;
        var_2.occupied = 0;
        level.select_back_door_spawners[level.select_back_door_spawners.size] = var_2;
    }
}

need_respawn( var_0 )
{
    var_1 = undefined;

    if ( isdefined( level.select_back_door_spawners ) && level.select_back_door_spawners.size > 0 )
    {
        foreach ( var_3 in level.select_back_door_spawners )
        {
            if ( !isdefined( level._id_11FAF ) )
            {
                if ( !safehouse_restart( var_3, var_0 ) )
                    continue;
            }

            if ( istrue( var_3.occupied ) )
                continue;

            if ( run_guards_spawner( var_3.origin ) )
                continue;

            if ( run_global_functions_for_relics( var_3.origin ) )
                continue;

            var_1 = var_3;
            var_3.occupied = 1;
            break;
        }

        if ( !isdefined( var_1 ) )
            var_1 = get_landing_spots_in_current_circle();
    }
    else
    {
        var_5 = undefined;
        var_1 = get_landing_spots_in_current_circle( var_5 );
    }

    return var_1;
}

safehouse_restart( var_0, var_1 )
{
    if ( level.br_circle_disabled || !isdefined( level.br_circle ) || level.br_circle.circleindex < 0 )
        return 1;

    var_2 = scripts\mp\gametypes\br_circle.gsc::getsafecircleorigin();
    var_3 = scripts\mp\gametypes\br_circle.gsc::getsafecircleradius();
    var_4 = var_3 + var_1;
    var_5 = var_4 * var_4;

    if ( distance2dsquared( var_0.origin, var_2 ) <= var_5 )
        return 1;

    return 0;
}

run_guards_spawner( var_0 )
{
    var_1 = getdvarint( "scr_br_jugg_min_dist_crate", 20000 );
    var_2 = var_1 * var_1;

    foreach ( var_4 in level.delete_trapfunc )
    {
        if ( distance2dsquared( var_0, var_4.origin ) < var_2 )
            return 1;
    }

    return 0;
}

run_global_functions_for_relics( var_0 )
{
    var_1 = scripts\mp\gametypes\br_circle.gsc::getsafecircleradius();
    var_2 = int( var_1 - var_1 / 3 );
    var_3 = var_2 * var_2;

    foreach ( var_5 in level.activejuggernauts )
    {
        if ( isdefined( var_5 ) && distance2dsquared( var_0, var_5.origin ) < var_3 )
            return 1;
    }

    return 0;
}

get_landing_spots_in_current_circle( var_0 )
{
    var_1 = spawnstruct();

    if ( isdefined( var_0 ) )
        var_1.origin = var_0;
    else
    {
        var_2 = 10;

        while ( !isdefined( var_1.origin ) )
        {
            var_3 = scripts\mp\gametypes\br_circle.gsc::oicvariantid();

            if ( isdefined( level.activejuggernauts ) && level.activejuggernauts.size > 0 )
            {
                if ( !run_global_functions_for_relics( var_3 ) )
                    var_1.origin = var_3;
            }
            else
                var_1.origin = var_3;

            var_2--;

            if ( var_2 == 0 && !isdefined( var_1.origin ) )
                var_1.origin = var_3;

            waitframe();
        }
    }

    return var_1;
}

_id_12537( var_0, var_1 )
{
    level endon( "game_ended" );
    var_2 = 50000;

    if ( istrue( var_1 ) )
    {
        if ( !istrue( level.br_circle_disabled ) )
            level waittill( "br_circle_set" );
    }
    else
        var_2 = 0;

    var_3 = [];

    for ( var_4 = 0; var_4 < var_0; var_4++ )
    {
        var_5 = need_respawn( var_2 );
        var_5.calculatewinningteam = spawn( "script_model", var_5.origin );
        var_5.calculatewinningteam setmodel( "ks_airdrop_crate_br" );
        var_5.calculatewinningteam setscriptablepartstate( "jugg_drop_beacon", "on", 0 );
        var_5 scripts\mp\gametypes\br_quest_util.gsc::get_minigun_path( 11, 6, 2, var_5.origin );
        var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_12395( 5000 );
        var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_1254F();
        var_3[var_3.size] = var_5;
    }

    return var_3;
}

_id_129B1( var_0, var_1 )
{
    level endon( "game_ended" );
    scripts\mp\gametypes\br_gametype_dmz.gsc::_id_12557( "br_juggdrop_incoming" );

    foreach ( var_4, var_3 in var_0 )
    {
        level thread init_relic_amped( var_3, var_1 );
        wait( randomfloatrange( 5.0, 10.0 ) );
    }
}

init_relic_amped( var_0, var_1 )
{
    level endon( "game_ended" );

    if ( !isdefined( var_0.init_relic_rocket_kill_ammo ) )
        var_0.init_relic_rocket_kill_ammo = 5000;

    var_2 = scripts\mp\gametypes\br_circle.gsc::oic_rewardammo( var_0.origin, var_0.init_relic_rocket_kill_ammo );
    var_3 = scripts\mp\gametypes\br_c130airdrop.gsc::delete_old_gate( undefined, var_2, 1 );
    var_4 = distance( var_3.startpt, var_3.endpt );
    var_5 = scripts\mp\gametypes\br_c130.gsc::getc130speed();
    var_6 = var_4 / var_5;
    var_7 = scripts\mp\gametypes\br_c130airdrop.gsc::delete_starting_boxes( var_3, var_4, var_5, var_6 );
    var_7.init_relic_dogtags = ::init_relic_dogtags;
    var_7._id_1268A = var_1;
    var_7 scripts\mp\gametypes\br_c130airdrop.gsc::delete_structs_on_self_death( 1, "battle_royale_juggernaut", "jugg_world", var_0 );
}

init_relic_dogtags( var_0, var_1, var_2, var_3 )
{
    var_4 = self.startpt;
    var_5 = self.centerpt;
    var_6 = self.speed;
    var_7 = distance2d( var_4, var_5 ) / var_6;
    var_8 = 0;
    var_9 = 0;

    for ( level.trial_time_remaining = level.trial_time_remaining + var_0; var_8 < var_0; var_12._id_1312F = multieventdisabled() )
    {
        wait( var_7 );
        var_10 = scripts\mp\gametypes\br_c130airdrop.gsc::delete_on_unloaded( self.origin, 1 );
        var_11 = scripts\cp_mp\killstreaks\airdrop::init_pipe_room_obj( var_10 + ( 0, 0, level.delete_race - 100 ), var_10, self.angles, var_1, var_2, var_3.transitionplayersoutofac130cinematic );
        var_8++;
        var_11.init_reach_icbm_launch = var_3;
        var_11._id_1268A = self._id_1268A;
        level.delete_trapfunc[level.delete_trapfunc.size] = var_11;
        var_12 = scripts\cp_mp\killstreaks\airdrop::gettriggerobject( var_11 );
    }
}

_id_13516( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "juggernaut_end" );
    level endon( "game_ended" );
    var_1 = var_0.usageloop;
    var_2 = var_0.usablecarriables;
    var_0.playerentercombatareamessage = 0;

    for (;;)
    {
        self waittill( "weapon_fired" );
        var_0.playerentercombatareamessage++;
        var_0.setmlgobjectivestatusicon = gettime();

        if ( var_0.playerentercombatareamessage >= var_1 )
        {
            iprintlnbold( "OVERHEAT" );
            scripts\common\utility::allow_fire( 0 );
            wait( var_2 );
            iprintlnbold( "COOLDOWN" );
            scripts\common\utility::allow_fire( 1 );
        }
    }
}

_id_1350A( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "juggernaut_end" );
    level endon( "game_ended" );
    var_1 = var_0.usb_left;
    var_2 = var_0.usb_keys;
    var_3 = var_0.usb;

    for (;;)
    {
        if ( var_0.playerentercombatareamessage > 0 && gettime() - var_0.setmlgobjectivestatusicon >= var_1 * 1000 )
        {
            var_4 = var_0.playerentercombatareamessage - var_2;

            if ( var_4 < 0 )
                var_4 = 0;

            var_0.playerentercombatareamessage = int( var_4 );
        }

        wait 0.05;
    }
}

spawnrisktoken( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "juggernaut_end" );
    level endon( "game_ended" );
    var_1 = 5;

    for (;;)
    {
        var_2 = scripts\engine\utility::_id_133F7( "deaths_door_enter", "jugg_health_regen" );
        var_3 = 1;

        if ( var_2 == "deaths_door_enter" )
        {
            var_3 = 0;
            self.prevcallback = 1;
            wait( var_1 );
        }
        else if ( var_2 == "jugg_health_regen" )
        {
            var_4 = self.health / self.maxhealth;

            if ( var_4 >= 0.75 )
            {
                if ( istrue( self.prevcallback ) )
                    self.prevcallback = undefined;
            }
        }

        scripts\mp\healthoverlay::onexitdeathsdoor( var_3 );
    }
}

droponplayerdeath( var_0 )
{
    scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "onJuggDropOnDeath", var_0 );
    level.trial_time_remaining--;
}

init_relic_doomslayer()
{
    var_0 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 0, 1, 1, 1 );
    var_1 = scripts\engine\trace::ray_trace( self.origin + ( 0, 0, 40 ), self.origin - ( 0, 0, 10000 ), self, var_0 );
    var_2 = self.origin;

    if ( isdefined( var_1 ) && isdefined( var_1["hittype"] ) && var_1["hittype"] != "hittype_none" )
        var_2 = var_1["position"];

    var_3 = scripts\cp_mp\killstreaks\airdrop::init_pipe_room_obj( self.origin + ( 0, 0, 10 ), var_2, self.angles, "battle_royale_juggernaut", "jugg_world" );

    if ( isdefined( var_3 ) )
    {
        var_4 = scripts\cp_mp\killstreaks\airdrop::gettriggerobject( var_3 );
        var_4._id_1312F = multieventdisabled();
    }
}

uav_isenemygettingnotified( var_0 )
{
    scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "onJuggCrateActivate", var_0 );

    if ( istrue( var_0 ) )
    {
        thread _id_134D3();
        thread _id_134D2();
    }

    if ( istrue( level.br_pe_jugg_hide_vfx_when_grounded ) && isdefined( self.init_reach_icbm_launch ) )
        cratecleanupdropcircle( self.init_reach_icbm_launch );
}

_id_134D3()
{
    self endon( "death" );
    var_0 = getdvarint( "scr_br_jugg_crate_lifetime", 300 );
    wait( var_0 );
    scripts\cp_mp\killstreaks\airdrop::destroycrate();
}

_id_134D2()
{
    self endon( "death" );

    if ( istrue( level.br_circle_disabled ) )
        return;

    var_0 = getdvarint( "scr_br_jugg_crate_gas_lifetime", 30 );

    for (;;)
    {
        wait 0.05;

        if ( !isdefined( level.br_circle ) || level.br_circle.circleindex < 0 )
            continue;

        var_1 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
        var_2 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius();

        if ( distance2dsquared( var_1, self.origin ) > var_2 * var_2 )
            break;
    }

    wait( var_0 );
    scripts\cp_mp\killstreaks\airdrop::destroycrate();
}

uavdirectionalid( var_0 )
{
    var_0.sec_sys_struct_1 = self._id_1268A;
    scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "onJuggCrateUse", var_0 );
    trial_active_ring( var_0 );
    generatespawnpoint();
}

trial_active_ring( var_0 )
{
    var_1 = self.origin;
    var_2 = 5000;
    var_3 = scripts\common\utility::playersincylinder( var_1, var_2 );

    foreach ( var_5 in var_3 )
    {
        if ( isdefined( var_5 ) && scripts\mp\utility\player::isreallyalive( var_5 ) && var_5 != var_0 )
        {
            var_6 = "br_jugg_capture_positive";

            if ( var_5.team != var_0.team )
                var_6 = "br_jugg_capture_negative";

            var_5 playlocalsound( var_6 );
        }
    }
}

uavbestid( var_0 )
{
    scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "onJuggCrateDestroy", var_0 );
    level.trial_time_remaining--;
    generatespawnpoint();
}

generatespawnpoint()
{
    if ( isdefined( self.init_reach_icbm_launch ) )
        cratecleanupdropcircle( self.init_reach_icbm_launch );

    if ( isdefined( level.delete_trapfunc ) )
        level.delete_trapfunc = scripts\engine\utility::array_remove( level.delete_trapfunc, self );
}

cratecleanupdropcircle( var_0 )
{
    var_0.occupied = 0;

    if ( isdefined( var_0.mapcircle ) )
        var_0 scripts\mp\gametypes\br_quest_util.gsc::hacks_needed();

    if ( isdefined( var_0.calculatewinningteam ) )
    {
        var_0.calculatewinningteam setscriptablepartstate( "jugg_drop_beacon", "off" );
        var_0.calculatewinningteam delete();
    }
}

proptiebreaker( var_0, var_1, var_2 )
{
    if ( !isdefined( var_2 ) )
        var_2 = "default";

    if ( !isdefined( level.convoy4_roof_jugg[var_2] ) )
        level.convoy4_roof_jugg[var_2] = [];

    level.convoy4_roof_jugg[var_2][var_0] = var_1;
}

markedentities_removeentsbyindex( var_0, var_1 )
{
    var_2 = undefined;

    if ( isdefined( var_1 ) )
    {
        if ( isdefined( level.convoy4_roof_jugg[var_1] ) )
            var_2 = level.convoy4_roof_jugg[var_1][var_0];
    }

    if ( !isdefined( var_2 ) )
        var_2 = level.convoy4_roof_jugg["default"][var_0];

    return var_2;
}

multieventdisabled()
{
    return getdvarfloat( "scr_br_jugg_crate_use_time", 5 );
}

numdepositers()
{
    return getdvarint( "scr_br_jugg_num_drops", 3 );
}

notcanon()
{
    return getdvarfloat( "scr_br_jugg_vs_jugg_scale", 1.0 );
}

nuke_vault_runner()
{
    return getdvarfloat( "scr_br_jugg_minigun_scale", 1.25 );
}
