// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.clear_vehicles = spawnstruct();
    level.clear_vehicles.autotarget = 0;
    level.clear_vehicles.setlocaledefaultvalue = -1;
    level.clear_vehicles.setup_train_array = [];
    level.clear_vehicles.teams = [ "allies", "axis" ];
    level.clear_vehicles.updatetimedrunhud = getdvarint( "scr_br_ter_outpost_sequential", 0 );
    level.clear_vehicles._id_11EFF = getdvarint( "scr_br_ter_require_all_outpost", 1 );
    level.clear_vehicles.blockingcover = getdvarfloat( "scr_br_ter_allow_repair", 1 );
    level.clear_vehicles._id_11AB2 = getdvarint( "scr_br_ter_plunder_repair", 2 );
    level.clear_vehicles._id_11AA1 = getdvarint( "scr_br_ter_plunder_destroy", 2 );
    level.clear_vehicles._id_13279 = getdvarfloat( "scr_br_ter_vehicle_respawn_delay", 5 );
    level.clear_vehicles.types = [];
    register_fuel_stability_event();
    register_disabled_seats_for_vehicle();
    registerscriptableinstance();
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "circle" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "gulag" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "oneLife" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "waitLoadoutDone" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "drogBagLoadout" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "playerCountLandmarks" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "placedKiosks" );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "spawnInitialVehicles", ::spawninitialvehicles );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "infilSequence", ::hvt_visual_callout );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "skipInfilSequence", ::_id_125B2 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "playerKilledSpawn", ::playerrespawn );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "onPlayerKilled", ::onplayerkilled );
    level.col_localethink_itemspawn = 6;
    level thread register_valid_gametypes_for_create_script();
}

register_valid_gametypes_for_create_script()
{
    waittillframeend;
    scripts\mp\flags::gameflaginit( "ter_vehicle_spawn", 0 );
    scripts\mp\flags::gameflaginit( "ter_layout_spawned", 0 );
    scripts\mp\flags::gameflaginit( "infil_complete", 0 );
    level._id_11B8D = ::createhudtimer;
    level.superslotcleanup = ::create_script_wait_for_flags;
    scripts\engine\scriptable::_id_1219E( "ter_damageable", ::getcash );
    level.clear_vehicles._id_11F52 = getdvarint( "scr_br_ter_spawn_delay", 0 );
    thread _id_1354F( "allies" );
    thread _id_1354F( "axis" );
    relic_nuketimer_waitforcompleteobjectives();
    initstructs();
    registerontimerupdate();
    scripts\mp\flags::gameflagwait( "prematch_done" );
    var_0 = getdvar( "scr_br_ter_layout_name", "default" );
    var_1 = level.clear_vehicles.setup_train_array[var_0];
    var_1 setup_train_entarray();
    scripts\mp\flags::gameflagset( "ter_layout_spawned" );
    var_1 setup_teleport_rooms();
}

relic_nuketimer_waitforcompleteobjectives()
{
    level.clear_vehicles.vo = spawnstruct();
    level.clear_vehicles.vo._id_12C7A = [];

    foreach ( var_1 in level.clear_vehicles.teams )
        level.clear_vehicles.vo._id_12C85[var_1] = [];

    var_3 = getdvarint( "scr_br_ter_dialog_all_debounce_losing", 5000 );
    var_4 = getdvarint( "scr_br_ter_dialog_all_debounce_securing", 5000 );
    relic_nuketimer_waitforobjectives( "objective", "boost_groundwar" );
    relic_nuketimer_waitforobjectives( "securing_default", "flag_securing", var_4 );
    relic_nuketimer_waitforobjectives( "securing_base", "hq_securing", var_4 );
    relic_nuketimer_waitforobjectives( "securing_a", "securing_a", var_4 );
    relic_nuketimer_waitforobjectives( "securing_b", "securing_b", var_4 );
    relic_nuketimer_waitforobjectives( "securing_c", "securing_c", var_4 );
    relic_nuketimer_waitforobjectives( "securing_d", "securing_d", var_4 );
    relic_nuketimer_waitforobjectives( "securing_e", "securing_e", var_4 );
    relic_nuketimer_waitforobjectives( "secured_default", "flag_secured" );
    relic_nuketimer_waitforobjectives( "secured_base", "hq_secured" );
    relic_nuketimer_waitforobjectives( "secured_a", "secured_a" );
    relic_nuketimer_waitforobjectives( "secured_b", "secured_b" );
    relic_nuketimer_waitforobjectives( "secured_c", "secured_c" );
    relic_nuketimer_waitforobjectives( "secured_d", "secured_d" );
    relic_nuketimer_waitforobjectives( "secured_e", "secured_e" );
    relic_nuketimer_waitforobjectives( "losing_default", "flag_losing", var_3 );
    relic_nuketimer_waitforobjectives( "losing_base", "hq_capturing_enemy", var_3 );
    relic_nuketimer_waitforobjectives( "losing_a", "losing_a", var_3 );
    relic_nuketimer_waitforobjectives( "losing_b", "losing_b", var_3 );
    relic_nuketimer_waitforobjectives( "losing_c", "losing_c", var_3 );
    relic_nuketimer_waitforobjectives( "losing_d", "losing_d", var_3 );
    relic_nuketimer_waitforobjectives( "losing_e", "losing_e", var_3 );
    relic_nuketimer_waitforobjectives( "lost_default", "flag_lost" );
    relic_nuketimer_waitforobjectives( "lost_base", "hq_disabled" );
    relic_nuketimer_waitforobjectives( "lost_a", "lost_a" );
    relic_nuketimer_waitforobjectives( "lost_b", "lost_b" );
    relic_nuketimer_waitforobjectives( "lost_c", "lost_c" );
    relic_nuketimer_waitforobjectives( "lost_d", "lost_d" );
    relic_nuketimer_waitforobjectives( "lost_e", "lost_e" );
}

relic_nuketimer_waitforobjectives( var_0, var_1, var_2 )
{
    game["dialog"][var_0] = var_1;

    if ( isdefined( var_2 ) )
        _id_12488( var_0, var_2 );
}

register_fuel_stability_event()
{
    level.clear_vehicles.getbestintersectionpt = [];
    level.clear_vehicles.getbestintersectionpt["br_ter_damageable_server"] = get_grenade_fuse_time( "scriptable" );
    level.clear_vehicles.getbestintersectionpt["generator"] = get_grenade_fuse_time( "script_model", "br_ter_ent_damageable_generator", 350, "br_ter_ent_damageable_generator_destroyed" );
    level.clear_vehicles.getbestintersectionpt["oil_drum"] = get_grenade_fuse_time( "script_model", "br_ter_ent_damageable_oil_drum", 250, "br_ter_ent_damageable_oil_drum_destroyed" );
    level.clear_vehicles.getbestintersectionpt["server"] = get_grenade_fuse_time( "script_model", "br_ter_ent_damageable_server", 450, "br_ter_ent_damageable_server_destroyed" );
    level.clear_vehicles.getbestintersectionpt["tape_server"] = get_grenade_fuse_time( "script_model", "br_ter_ent_damageable_tape_server", 400, "br_ter_ent_damageable_tape_server_destroyed" );
    level.clear_vehicles.getbestintersectionpt["ac_unit"] = get_grenade_fuse_time( "script_model", "br_ter_ent_damageable_ac_unit", 300, "br_ter_ent_damageable_ac_unit_destroyed" );
}

get_grenade_fuse_time( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4.getbestsepctatecandidatefromlist = var_0;

    if ( var_0 == "script_model" )
    {
        var_4.model = var_1;
        var_4.health = var_2;
        var_4.modeldestroyed = var_3;
    }

    return var_4;
}

register_disabled_seats_for_vehicle()
{
    var_0 = [ "means_of_death", "weapon_type", "weapon_class_name", "weapon_base_name" ];

    foreach ( var_2 in var_0 )
    {
        level.clear_vehicles.getburnfxstatepriority[var_2] = [];
        level.clear_vehicles.getc130airdropheight[var_2] = [];
    }

    level.clear_vehicles.getc130airdropheight["means_of_death"]["mod_melee"] = 0.1;
    level.clear_vehicles.getc130airdropheight["weapon_class_name"]["spread"] = 0.25;
    level.clear_vehicles.getcashnags = getdvarint( "scr_br_damageable_vehicle_damage", 50 );
    level.clear_vehicles.getchallengegamemode = getdvarint( "scr_br_damageable_vehicle_damage_debounce_ms", 500 );
    level.clear_vehicles.getcircleclosetime = getdvarfloat( "scr_br_damageable_vehicle_min_speed", 5.0 );
}

registerscriptableinstance()
{
    level.clear_vehicles.solospawn = [];
    level.clear_vehicles.solospawn["default"] = get_last_stand_id( "ui_mp_br_mapmenu_icon_tower", "ui_icon_br_ter_default", &"BR_TER/LOC_NAME_DEFAULT", "default" );
    level.clear_vehicles.solospawn["a"] = get_last_stand_id( "icon_waypoint_dom_a", "ui_icon_br_ter_a", &"BR_TER/LOC_NAME_A", "a" );
    level.clear_vehicles.solospawn["b"] = get_last_stand_id( "icon_waypoint_dom_b", "ui_icon_br_ter_b", &"BR_TER/LOC_NAME_B", "b" );
    level.clear_vehicles.solospawn["c"] = get_last_stand_id( "icon_waypoint_dom_c", "ui_icon_br_ter_c", &"BR_TER/LOC_NAME_C", "c" );
    level.clear_vehicles.solospawn["d"] = get_last_stand_id( "icon_waypoint_dom_d", "ui_icon_br_ter_d", &"BR_TER/LOC_NAME_D", "d" );
    level.clear_vehicles.solospawn["e"] = get_last_stand_id( "icon_waypoint_dom_e", "ui_icon_br_ter_e", &"BR_TER/LOC_NAME_E", "e" );

    foreach ( var_1 in level.clear_vehicles.teams )
        level.clear_vehicles.solospawn[var_1] = get_last_stand_id( "ui_mp_br_mapmenu_icon_obstacle", "ui_icon_br_ter_base", &"BR_TER/LOC_NAME_BASE", "base" );
}

get_last_stand_id( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4.trychangesuitsforplayer = var_0;
    var_4.hudicon = var_1;
    var_4.locname = var_2;
    var_4._id_13358 = "_" + var_3;
    return var_4;
}

initstructs()
{
    if ( isdefined( level.relic_mythic_next_pain_time ) )
        [[ level.relic_mythic_next_pain_time ]]();
}

registerontimerupdate()
{
    var_0 = scripts\engine\utility::getstructarray( "ter_layout", "targetname" );

    foreach ( var_2 in var_0 )
    {
        var_2._id_12BBD = "layout";
        var_2.name = var_2.script_noteworthy;
        var_2.script_noteworthy = undefined;
        level.clear_vehicles.setup_train_array[var_2.name] = var_2;
    }

    foreach ( var_2 in level.clear_vehicles.setup_train_array )
        var_2 _id_12BB2();
}

_id_12BB2()
{
    self.targets = [];

    if ( !isdefined( self.target ) )
        return;

    var_0 = scripts\engine\utility::getstructarray( self.target, "targetname" );
    self.target = undefined;

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        var_2 = var_0[var_1];

        if ( isdefined( var_2.script_noteworthy ) && var_2.script_noteworthy == "pass" && isdefined( var_2.target ) )
        {
            var_3 = scripts\engine\utility::getstructarray( var_2.target, "targetname" );

            foreach ( var_5 in var_3 )
                var_0[var_0.size] = var_5;
        }
    }

    foreach ( var_2 in var_0 )
    {
        if ( isdefined( var_2.script_noteworthy ) && var_2.script_noteworthy == "pass" )
            continue;

        if ( !istrue( var_2._id_11BAC ) )
        {
            var_2._id_12BBD = var_2.script_noteworthy;
            var_2.script_noteworthy = undefined;
            var_2.name = var_2.script_parameters;
            var_2.script_parameters = undefined;
            var_2._id_11BAC = 1;
            var_2 _id_12BB2();
        }

        if ( !isdefined( self.targets[var_2._id_12BBD] ) )
            self.targets[var_2._id_12BBD] = [];

        var_8 = self.targets[var_2._id_12BBD].size;
        self.targets[var_2._id_12BBD][var_8] = var_2;

        if ( !isdefined( var_2._id_12BB1 ) )
            var_2._id_12BB1 = [];

        var_2._id_12BB1[var_2._id_12BB1.size] = self;
    }
}

setup_train_entarray()
{
    addexecutionquip();
    level.clear_vehicles.types["location"] = scripts\engine\utility::array_combine( level.clear_vehicles.types["base"], level.clear_vehicles.types["outpost"] );
}

addexecutionquip()
{
    if ( istrue( self.spawned ) )
        return;

    self.spawned = 1;
    var_0 = self._id_12BBD;

    if ( !isdefined( level.clear_vehicles.types[var_0] ) )
        level.clear_vehicles.types[var_0] = [];

    var_1 = level.clear_vehicles.types[var_0].size;
    level.clear_vehicles.types[var_0][var_1] = self;

    foreach ( var_0, var_3 in self.targets )
    {
        foreach ( var_6, var_5 in var_3 )
        {
            var_5 _id_12BB9();
            var_5 addexecutionquip();
        }
    }
}

_id_12BB9()
{
    switch ( self._id_12BBD )
    {
        case "damageable":
            self.team = self._id_12BB1[0].team;
            thread getcargotruckspawns();
            break;
        case "vehicle_current":
        case "vehicle_not_destroyed":
        case "vehicle_destroyed":
        case "vehicle":
            thread _id_132C8();
            break;
        case "base":
            self.team = self.name;
            rear_spotlight( "outpost" );
            break;
        case "outpost":
            self.team = self._id_12BB1[0].team;

            if ( !isdefined( self.name ) )
                self.name = "default";

            rear_spotlight( "outpost" );
            break;
        case "kiosk":
            thread set_relic_healthpacks();
            break;
        default:
            break;
    }
}

getcargotruckspawns()
{
    var_0 = undefined;
    var_1 = level.clear_vehicles.getbestintersectionpt[self.name];

    switch ( var_1.getbestsepctatecandidatefromlist )
    {
        case "scriptable":
            var_0 = easepower( self.name, self.origin, self.angles );
            break;
        case "script_model":
            var_0 = spawn( "script_model", self.origin );
            var_0.angles = self.angles;
            var_0 setmodel( var_1.model );
            var_0 solid();
            break;
        default:
            break;
    }

    self.getbestsepctatecandidatefromlist = var_1.getbestsepctatecandidatefromlist;
    self.ent = var_0;
    self.ent._id_12BB4 = self;
}

_id_132C8()
{
    self.state = "init";
}

setup_teleport_rooms()
{
    setup_techo_lmgs();

    foreach ( var_1 in self.targets["base"] )
    {
        var_1 burningstate();
        var_1 thread spawn_ai_and_seat_in_vehicle( var_1 );
    }

    self waittillmatch( "child_changed_state", "destroyed" );
    var_3 = [];

    foreach ( var_1 in self.targets["base"] )
    {
        if ( var_1.state == "destroyed" )
            var_3[var_3.size] = var_1.team;
    }

    if ( var_3.size == 1 )
        var_6 = var_3[0];
    else
        var_6 = scripts\engine\utility::random( level.clear_vehicles.teams );

    var_7 = obj_a_goals( var_6 );
    var_8 = "objective_completed";
    thread scripts\mp\gametypes\br.gsc::update_ai_volumes( var_6, 2, undefined, 1, 1, 1 );
    thread scripts\mp\gametypes\br.gsc::brendgame( var_7, game["end_reason"][var_8], 0 );
}

spawn_ai_and_seat_in_vehicle( var_0 )
{
    if ( isdefined( self.state ) )
        return;

    self endon( "destroyed" );
    source( var_0 );

    foreach ( var_2 in self.targets["outpost"] )
        var_2 thread spawn_ai_and_seat_in_vehicle( var_0 );

    thread spawn_ai_func_ref();

    if ( level.clear_vehicles.updatetimedrunhud )
        spawn_ai_single( "protected" );
    else
        spawn_ai_single( "active" );

    if ( level.clear_vehicles._id_11EFF )
        spawn_bomb();
    else
        spawn_bomb_hostage();

    spawn_ai_single( "current" );
}

spawn_ai_func_ref()
{
    self endon( "destroyed" );
    spawn_backup_helispawner_jammer2();
    thread spawn_ai_single( "destroyed" );
}

burningstate()
{

}

source( var_0 )
{
    foreach ( var_2 in self.targets["damageable"] )
        var_2 publiceventsenabled();

    self.state = "";
    sp_stealth_broken_listener( var_0 );
    spawn_ai_single( "hidden" );
    var_4 = [ "spawn_def", "spawn_att", "spawn_start" ];

    foreach ( var_6 in var_4 )
    {
        if ( !isdefined( self.targets[var_6] ) )
            continue;

        self.train_mover_test[var_6] = 0;
        self.targets[var_6] = scripts\engine\utility::array_randomize( self.targets[var_6] );
    }
}

publiceventsenabled()
{
    self.state = "";
    getc130knownsafeheight( "protected" );
}

spawn_ai_single( var_0, var_1 )
{
    if ( self.state == var_0 )
        return;

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    self.state = var_0;

    switch ( self.state )
    {
        case "hidden":
            spawn_ai_group( 0 );
            spawn_ai_individual( "done", 1, 0, 0 );
            spawn_and_enter_cargo_truck_mg( 0.0 );
            break;
        case "protected":
            spawn_ai_group( 0 );
            spawn_ai_individual( "active", 1, 1, 0 );
            spawn_and_enter_cargo_truck_mg( 0.5 );
            sort_by_ai_assigned( "vehicle" );
            sort_by_ai_assigned( "vehicle_not_destroyed" );
            break;
        case "active":
            spawn_ai_group( 1 );
            spawn_ai_individual( "active", 1, 0, 0 );
            spawn_and_enter_cargo_truck_mg( 1.0 );
            sort_by_ai_assigned( "vehicle" );
            sort_by_ai_assigned( "vehicle_not_destroyed" );
            break;
        case "current":
            spawn_ai_group( 1 );
            spawn_ai_individual( "current", 4, 0, 1 );
            spawn_and_enter_cargo_truck_mg( 1.0 );
            sort_by_ai_assigned( "vehicle_not_destroyed" );
            sort_by_ai_assigned( "vehicle_current" );
            break;
        case "destroyed":
            foreach ( var_3 in self.targets["outpost"] )
                var_3 spawn_ai_single( "destroyed", 1 );

            spawn_ai_group( 0 );
            spawn_ai_individual( "done", 1, 0, 0 );
            spawn_another_group_and_run_regular_death();
            sort_by_ai_assigned( "vehicle_destroyed" );
            sortsitesbydistance( "vehicle_not_destroyed" );
            sortsitesbydistance( "vehicle_current" );

            if ( !var_1 )
            {
                level thread scripts\mp\hud_message::notifyteam( "br_ter_outpost_lost", "br_ter_outpost_captured", self.team );
                cprooftopcratecapturecallback( sounddebouncetimestamp(), obj_a_goals( self.team ) );
                cprooftopcratecapturecallback( sound_events(), self.team );
            }

            break;
        default:
            break;
    }

    self notify( self.state );

    foreach ( var_6 in self._id_12BB1 )
        var_6 notify( "child_changed_state", self.state );
}

sp_stealth_broken_listener( var_0 )
{
    self.objidnum = scripts\mp\objidpoolmanager::requestobjectiveid();

    if ( self.objidnum != -1 )
    {
        var_1 = sortvalue();
        scripts\mp\objidpoolmanager::objective_add_objective( self.objidnum, "invisible", self.origin );
        scripts\mp\objidpoolmanager::update_objective_setbackground( self.objidnum, 1 );
        scripts\mp\objidpoolmanager::objective_set_play_intro( self.objidnum, 0 );
        scripts\mp\objidpoolmanager::objective_set_play_outro( self.objidnum, 0 );
        scripts\mp\objidpoolmanager::update_objective_icon( self.objidnum, var_1.trychangesuitsforplayer );
        scripts\mp\objidpoolmanager::update_objective_ownerteam( self.objidnum, var_0.team );
        objective_setfriendlylabel( self.objidnum, "BR_TER/OBJ_DEFEND" );
        objective_setenemylabel( self.objidnum, "BR_TER/OBJ_DESTROY" );
        _func_421( self.objidnum, 1 );
    }
}

spawninitialvehicles()
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        scripts\mp\gametypes\br_vehicles.gsc::spawninitialvehicles();
    else
        scripts\mp\flags::gameflagset( "ter_vehicle_spawn" );
}

vehicle_spawn_mp_gamemodesupportsrespawn()
{
    return 1;
}

onplayerkilled( var_0 )
{
    var_1 = var_0.victim;

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        return;

    if ( isdefined( var_1 ) )
    {
        if ( !istrue( var_1.br_infilstarted ) )
            return;

        var_1 _id_11A02();
    }
}

_id_11A02( var_0 )
{
    if ( !istrue( var_0 ) )
    {
        if ( isdefined( self._id_12825 ) )
        {
            var_1 = getdvarfloat( "scr_br_ter_player_spawn_type_min_sec", 8.0 );
            var_2 = var_1 * 1000;
            var_3 = gettime() - self._id_12825;

            if ( var_3 < var_2 )
                return;
        }
    }

    var_4 = undefined;
    var_5 = undefined;

    foreach ( var_7 in level.clear_vehicles.types["location"] )
    {
        if ( var_7.state == "current" )
        {
            var_8 = distance( var_7.origin, self.origin );

            if ( !isdefined( var_5 ) || var_8 < var_5 )
            {
                var_5 = var_8;
                var_4 = var_7;
            }
        }
    }

    if ( isdefined( var_4 ) )
    {
        var_10 = 1;
        var_11 = whistlestarttimer_internal();

        if ( var_11 == "base" )
        {
            var_12 = weapongroupdata();
            var_13 = distance( var_12.origin, self.origin );

            if ( var_13 < var_5 )
                var_10 = 0;
        }

        if ( var_10 )
        {
            if ( var_4.team == self.team )
                _id_119A8( var_4 );
            else
                _id_1199E( var_4 );
        }
    }
}

hvt_visual_callout( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    if ( !scripts\mp\gametypes\br_gametypes.gsc::roof_enemy_groups( "oneLife" ) )
    {
        level.disablespawning = 1;
        setdynamicdvar( "scr_" + scripts\mp\utility\game::getgametype() + "_numLives", 1 );
    }

    _id_1343E();

    for ( var_1 = 0; var_1 < level.players.size; var_1++ )
    {
        var_2 = level.players[var_1];

        if ( !isdefined( var_2 ) )
            continue;

        if ( !isalive( var_2 ) )
            var_2 scripts\mp\playerlogic::spawnplayer( 0 );

        if ( istrue( var_2.clean_up_search ) )
            scripts\mp\gametypes\br.gsc::_id_12FD8( var_2 );

        var_2 setclientomnvar( "ui_br_infil_started", 1 );
        var_2 setclientomnvar( "ui_br_infiled", 1 );
        var_2.br_infilstarted = 1;

        if ( !var_0 )
            var_2 scripts\mp\gametypes\br_gulag.gsc::gulagfadetoblack();

        var_2 thread weapon_xp_iw8_sn_sbeta();
    }

    if ( !var_0 )
        wait 2.0;

    level.completesmokinggunquest._id_12A72 = 0;

    foreach ( var_2 in level.players )
    {
        if ( !isdefined( var_2 ) )
            continue;

        var_2 thread weapon_xp_iw8_sn_hdromeo();
    }

    scripts\mp\flags::gameflagset( "prematch_fade_done" );
    _id_1343F( 10 );

    if ( !var_0 )
    {
        foreach ( var_2 in level.players )
        {
            if ( isdefined( var_2 ) )
                var_2 scripts\mp\gametypes\br_gulag.gsc::gulagfadefromblack();
        }
    }

    waitframe();

    foreach ( var_2 in level.players )
        var_2 weapon_xp_iw8_sn_mike14();

    scripts\mp\flags::gameflagset( "infil_complete" );
    cpvehiclename( "objective" );
}

_id_1343E()
{
    var_0 = gettime() + 10000;

    while ( gettime() < var_0 && getactiveclientcount() != level.players.size )
        waitframe();
}

_id_125B2()
{
    hvt_visual_callout( 1 );
}

weapon_xp_iw8_sn_sbeta()
{
    _id_119BB( "base" );
    self.lasttimespawngroupcalled = whistlestarttimer();
    scripts\mp\gametypes\br_gulag.gsc::_id_11977( self.lasttimespawngroupcalled );
}

weapon_xp_iw8_sn_hdromeo()
{
    self endon( "disconnect" );
    scripts\mp\gametypes\br_public.gsc::_id_11981();
    self.forcespawnorigin = self.lasttimespawngroupcalled.origin;
    self.forcespawnangles = self.lasttimespawngroupcalled.angles;
    self._id_11F59 = 1;
    self.plotarmor = 1;
    scripts\mp\playerlogic::spawnplayer( 0 );

    if ( istrue( self.clean_up_search ) )
        scripts\mp\gametypes\br.gsc::_id_12FD8( self );

    waitframe();
    self.lasttimespawngroupcalled = undefined;
    self.plotarmor = undefined;
    self._id_11F59 = undefined;
    self.registerhint = undefined;
    self freezecontrols( 1 );
    self playerhide();
    scripts\mp\gametypes\br_public.gsc::_id_11A13();
    level.completesmokinggunquest._id_12A72++;
}

weapon_xp_iw8_sn_mike14()
{
    self cameraunlink();
    self freezecontrols( 0 );
    self playershow();
    weapon_xp_iw8_sn_golf28();
}

_id_1343F( var_0 )
{
    var_1 = gettime() + var_0 * 1000;

    while ( gettime() < var_1 && level.completesmokinggunquest._id_12A72 < level.players.size )
        waitframe();
}

create_script_wait_for_flags( var_0 )
{
    return 1;
}

playerrespawn( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) || !istrue( self.br_infilstarted ) )
        return 0;

    thread _id_119D2( var_0 );
    return 1;
}

_id_119D2( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    level endon( "sudden_death_started" );

    if ( !istrue( level.choppergunner_watchexplosioninfluencepoint ) )
        self.class = scripts\mp\gametypes\br.gsc::viphud_hidefromplayer();

    var_1 = level.teamdata[self.team]["nextRespawn"];
    var_2 = scripts\mp\utility\teams::getteamdata( self.team, "teamCount" );

    if ( var_2 > 1 )
        thread scripts\mp\gametypes\br_spectate.gsc::spawnspectator( var_0, undefined, 1 );

    self.waitingtospawn = 1;
    createhudtimer( 0, var_1 );
    self.waitingtospawn = 0;
    thread scripts\mp\playerlogic::spawnplayer( undefined, 0 );
    self freezecontrols( 1 );

    while ( !isalive( self ) )
        waitframe();

    waitframe();
    weapon_xp_iw8_sn_golf28();
    var_3 = !self isplayerheadless();
    var_4 = gettime();

    if ( var_3 )
    {
        while ( isalive( self ) && isdefined( self.weaponlist ) && !self hasloadedviewweapons( self.weaponlist ) )
        {
            if ( var_4 + 3000 < gettime() )
                break;

            waitframe();
        }
    }

    self notify( "brWaitAndSpawnClientComplete" );
    self.waitingtospawn = 0;
    self freezecontrols( 0 );
    scripts\mp\gametypes\br.gsc::_id_12FD8( self );
}

weapon_xp_iw8_sn_golf28()
{
    if ( getdvarint( "scr_br_ter_last_stand", 0 ) != 0 )
        scripts\mp\gametypes\br.gsc::parachute_get_path( self );

    scripts\mp\gametypes\br_armor.gsc::participantplunder( 1 );
    var_0 = getdvarint( "scr_br_ter_start_ammo", 1 );

    if ( var_0 == -2 )
    {
        foreach ( var_2 in [ self.primaryweapon, self.secondaryweapon ] )
        {
            if ( isdefined( var_2 ) )
            {
                var_3 = weaponclipsize( var_2 );
                self setweaponammoclip( var_2, var_3 );
                self givemaxammo( var_2 );
            }
        }

        scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
    }
    else if ( var_0 == -1 )
        scripts\mp\gametypes\br_weapons.gsc::choppersupport_modifydamage_trial();
    else if ( var_0 > 0 )
    {
        foreach ( var_6 in [ self.primaryweapon, self.secondaryweapon ] )
        {
            if ( isdefined( var_6 ) )
            {
                var_3 = weaponclipsize( var_6 );
                self setweaponammoclip( var_6, var_3 );
                var_2 = asmdevgetallstates( var_6 );
                var_7 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_2 );

                if ( isdefined( var_7 ) )
                    scripts\mp\gametypes\br_weapons.gsc::br_ammo_give_type( self, var_7, var_3 * var_0 );
            }
        }

        scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
    }

    thread scripts\mp\gametypes\br.gsc::clampstepbulletdamage();
}

createhudtimer( var_0, var_1 )
{
    var_2 = 4.0;
    var_3 = 3.0;
    var_4 = var_2 + var_3;

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
    {
        scripts\mp\gametypes\br.gsc::createhudtimer( var_0 );
        return;
    }

    if ( self isplayerheadless() )
    {
        self setclientomnvar( "ui_br_extended_load_screen", 0 );
        return;
    }

    foreach ( var_6 in level.players )
        var_6 clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 1 );

    thread scripts\mp\gametypes\br.gsc::createinvalidcirclearea();

    if ( !isdefined( self.registerhint ) )
    {
        var_8 = onteamleadgained( self.team, var_1 );
        var_9 = var_8 > 0;
        var_10 = undefined;
        var_11 = max( var_8 - var_4, 0 );

        if ( var_9 )
        {
            var_10 = var_8 * 1000;
            var_12 = scripts\mp\utility\teams::getteamdata( self.team, "teamCount" );

            if ( var_12 == 1 )
            {
                self setclientomnvar( "ui_show_spectateHud", self getentitynumber() );
                scripts\mp\gametypes\br_spectate.gsc::weapon_xp_iw8_ar_golf36();
                scripts\mp\gametypes\br.gsc::spawnintermission( self.origin + ( 0, 0, 100 ), self.angles );
                scripts\mp\spectating::setdisabled();
                scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_10 ) );
            }

            scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_10 ) );
            wait( var_11 );
        }

        self._id_11B77 = whistlestarttimer();

        if ( isdefined( self._id_11B77 ) )
            self._id_11B77.index = -1;

        var_13 = scripts\mp\gametypes\br_public.gsc::_id_119E6( self._id_11B77.origin, self._id_11B77.height );
        var_14 = getdvarint( "scr_br_drop_prespawn_timeout_ms", 9000 );
        scripts\mp\gametypes\br_public.gsc::_id_119E7( var_13, var_14, 1, 0, var_10 );

        if ( var_9 )
        {
            var_15 = 1.0;
            var_16 = 0.25;
            var_17 = var_15 - var_16;
            thread scripts\mp\gametypes\br_gulag.gsc::fadeoutin( var_15 );
            wait( var_17 );
            scripts\mp\gametypes\br_spectate.gsc::weapon_xp_iw8_ar_golf36();
            scripts\mp\gametypes\br.gsc::spawnintermission( var_13, self._id_11B77.angles );
            scripts\mp\spectating::setdisabled();
            scripts\mp\gametypes\br.gsc::current_respawn_point_override( var_13[0], var_13[1], level.give_player_grenade_on_respawn );
            self setclientomnvar( "ui_br_transition_type", 2 );
            wait( var_16 );
            var_18 = max( var_8 - var_11 - var_15, 0 );
            wait( var_18 );
            scripts\mp\gametypes\br_public.gsc::weapon_xp_iw8_ar_kilo433();
            self setclientomnvar( "ui_show_spectateHud", -1 );
        }
        else
        {
            var_19 = 0.5;
            scripts\mp\gametypes\br.gsc::current_respawn_point_override( var_13[0], var_13[1], level.give_player_grenade_on_respawn );
            self setclientomnvar( "ui_br_transition_type", 4 );
            wait( var_19 );
            scripts\mp\gametypes\br.gsc::spawnintermission( var_13, self._id_11B77.angles );
            scripts\mp\spectating::setdisabled();
            scripts\mp\gametypes\br_public.gsc::_id_11A13();
        }
    }
    else
    {
        self.registerhint = undefined;
        scripts\mp\gametypes\br_public.gsc::_id_11A13();
    }

    scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    self freezecontrols( 0 );
}

whistlestarttimer( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    var_1 = self.team;
    var_2 = whistlestarttimer_internal();
    var_3 = [];

    if ( var_2 != "base" )
    {
        foreach ( var_5 in level.clear_vehicles.types["location"] )
        {
            var_6 = var_2 == "defender" && var_5.team == self.team || var_2 == "attacker" && var_5.team != self.team;

            if ( var_6 && var_5.state == "current" )
                var_3[var_3.size] = var_5;
        }
    }

    if ( !var_3.size )
    {
        foreach ( var_9 in level.clear_vehicles.types["base"] )
        {
            if ( var_9.team == self.team )
                var_3[var_3.size] = var_9;
        }
    }

    var_5 = undefined;
    var_11 = undefined;

    if ( usestartspawns() )
    {
        var_9 = weapongroupdata();

        if ( isdefined( var_9.targets["spawn_start"] ) )
        {
            var_11 = "spawn_start";
            var_5 = var_9;
        }
    }

    if ( !isdefined( var_11 ) )
    {
        if ( var_2 == "attacker" )
            var_11 = "spawn_att";
        else
            var_11 = "spawn_def";

        if ( isdefined( self._id_127F1 ) )
        {
            foreach ( var_13 in var_3 )
            {
                if ( self._id_127F1 == var_13 )
                {
                    var_5 = var_13;
                    break;
                }
            }
        }

        if ( !isdefined( var_5 ) )
        {
            var_5 = scripts\engine\utility::random( var_3 );
            self._id_127F1 = var_5;
        }
    }

    var_15 = var_5.targets[var_11][var_5.train_mover_test[var_11]];

    if ( !var_0 )
    {
        var_5.train_mover_test[var_11]++;

        if ( var_5.train_mover_test[var_11] >= var_5.targets[var_11].size )
            var_5.train_mover_test[var_11] = 0;
    }

    var_15.height = 0;
    return var_15;
}

_id_1354F( var_0 )
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "infil_complete" );
    level.teamdata[var_0]["nextRespawn"] = 0;

    if ( level.clear_vehicles._id_11F52 == 0 )
        return;

    for (;;)
    {
        level.teamdata[var_0]["nextRespawn"] = gettime() + level.clear_vehicles._id_11F52 * 1000;
        wait( level.clear_vehicles._id_11F52 );
    }
}

onteamleadgained( var_0, var_1 )
{
    if ( level.clear_vehicles._id_11F52 == 0 )
        return 0;

    if ( !isdefined( var_1 ) )
        var_1 = level.teamdata[var_0]["nextRespawn"];

    var_2 = max( var_1 - gettime(), 0 );
    var_3 = int( var_2 / 1000 );
    return var_3;
}

_id_1199E( var_0 )
{
    _id_119BB( "attacker", var_0 );
}

_id_119A8( var_0 )
{
    _id_119BB( "defender", var_0 );
}

_id_119BB( var_0, var_1 )
{
    self._id_12825 = gettime();
    self.spawntype = var_0;
    self._id_127F1 = var_1;
}

whistlestarttimer_internal()
{
    if ( !isdefined( self.spawntype ) )
        return "base";

    return self.spawntype;
}

spawn_ai_individual( var_0, var_1, var_2, var_3 )
{
    scripts\mp\objidpoolmanager::update_objective_state( self.objidnum, var_0 );
    scripts\mp\objidpoolmanager::update_objective_setbackground( self.objidnum, var_1 );
    _func_428( self.objidnum, var_2 );
    objective_setshowprogress( self.objidnum, var_3 );
}

spawn_acceleration()
{
    self notify( "objective_hot" );
    self endon( "objective_hot" );
    scripts\mp\objidpoolmanager::update_objective_sethot( self.objidnum, 0 );
    wait 0.1;
    scripts\mp\objidpoolmanager::update_objective_sethot( self.objidnum, 1 );
    wait 0.5;
    scripts\mp\objidpoolmanager::update_objective_sethot( self.objidnum, 0 );
}

spawn_and_enter_little_bird_mg()
{
    if ( level.clear_vehicles.plundercountdownplayers._id_132F4 == 1 )
        spawn_apache_chopper( "icon", ( 1, 0.760784, 0.0823529 ), 1.0 );
    else
        spawn_apache_chopper( "label_bg", ( 1, 0.760784, 0.0823529 ), 1.0 );
}

spawn_and_hide_usb()
{
    thread spawn_assault2_extras( "bar", ( 1, 0.341176, 0.341176 ) );
    thread spawn_acceleration();
}

spawn_assault2_extras( var_0, var_1 )
{
    if ( isdefined( self.plundercountroll ) )
    {
        foreach ( var_3 in level.clear_vehicles.teams )
        {
            var_4 = self.plundercountroll.init_wind_tunnels[var_3][var_0];

            if ( isdefined( var_4 ) )
                var_4 thread plunder_value_picked_up( var_1 );
        }
    }
}

spawn_apache_chopper( var_0, var_1, var_2 )
{
    if ( isdefined( self.plundercountroll ) )
    {
        foreach ( var_4 in level.clear_vehicles.teams )
        {
            var_5 = self.plundercountroll.init_wind_tunnels[var_4][var_0];

            if ( isdefined( var_5 ) )
                var_5 thread plunder_updaterepositorywidgetforplayer( var_1, var_2 );
        }
    }
}

spawn_and_enter_cargo_truck_mg( var_0 )
{
    if ( isdefined( self.plundercountroll ) )
    {
        foreach ( var_2 in level.clear_vehicles.teams )
        {
            foreach ( var_4 in self.plundercountroll.init_wind_tunnels[var_2] )
            {
                if ( !isdefined( var_4 ) )
                    continue;

                var_4.alpha = var_0;
            }
        }
    }
}

spawn_another_group_and_run_regular_death()
{
    if ( isdefined( self.plundercountroll ) )
    {
        foreach ( var_1 in level.clear_vehicles.teams )
        {
            foreach ( var_4, var_3 in self.plundercountroll.init_wind_tunnels[var_1] )
            {
                if ( !isdefined( var_3 ) )
                    continue;

                if ( var_4 == "label_bg" )
                {
                    if ( var_1 == self.team )
                    {
                        var_3 plunder_value_dropped();
                        var_3 plunderrepositoryref( ( 1, 0.341176, 0.341176 ) );
                    }
                    else
                    {
                        var_3 plunder_value_dropped();
                        var_3 plunderrepositoryref( ( 0.337255, 0.690196, 0.929412 ) );
                    }

                    continue;
                }

                if ( var_4 == "label" )
                {
                    if ( var_1 == self.team )
                    {
                        var_3 plunder_value_dropped();
                        var_3 plunderrepositoryref( ( 1, 0.341176, 0.341176 ) );
                    }
                    else
                    {
                        var_3 plunder_value_dropped();
                        var_3 plunderrepositoryref( ( 0.337255, 0.690196, 0.929412 ) );
                    }

                    continue;
                }

                if ( var_4 == "icon" )
                {
                    if ( var_1 == self.team )
                    {
                        var_3 setshader( "ui_icon_br_ter_secured", 15, 15 );

                        if ( level.clear_vehicles.plundercountdownplayers._id_132F4 == 1 )
                        {
                            var_3 plunder_value_dropped();
                            var_3 plunderrepositoryref( ( 1, 0.341176, 0.341176 ) );
                        }
                    }
                    else
                    {
                        var_3 setshader( "ui_icon_br_ter_lost", 15, 15 );

                        if ( level.clear_vehicles.plundercountdownplayers._id_132F4 == 1 )
                        {
                            var_3 plunder_value_dropped();
                            var_3 plunderrepositoryref( ( 0.337255, 0.690196, 0.929412 ) );
                        }
                    }

                    continue;
                }

                if ( var_4 == "bar" )
                    var_3.alpha = 0;
            }
        }
    }
}

spawn_atmines()
{
    var_0 = self.targets["damageable"].size;
    var_1 = 0;

    foreach ( var_3 in self.targets["damageable"] )
    {
        if ( var_3.state == "destroyed" )
            var_1++;
    }

    var_5 = var_1 / var_0;
    objective_setprogress( self.objidnum, var_5 );

    if ( isdefined( self.plundercountroll ) )
    {
        foreach ( var_7 in level.clear_vehicles.teams )
        {
            var_8 = self.plundercountroll.init_wind_tunnels[var_7]["bar"];

            if ( isdefined( var_8 ) )
                var_8 setshader( "progress_bar_fill", int( ( 1.0 - var_5 ) * 45 ), 15 );
        }
    }
}

spawn_ai_group( var_0 )
{
    foreach ( var_2 in self.targets["damageable"] )
    {
        if ( var_0 )
        {
            if ( var_2.state == "protected" )
                var_2 getc130knownsafeheight( "undamaged" );

            continue;
        }

        var_2 getc130knownsafeheight( "protected" );
    }
}

spawn_bomb_hostage()
{
    for (;;)
    {
        if ( sortbyhvttags() )
            break;

        self waittillmatch( "child_changed_state", "destroyed" );
    }
}

sortbyhvttags()
{
    if ( !isdefined( self.targets["outpost"] ) )
        return 1;

    if ( !self.targets["outpost"].size )
        return 1;

    foreach ( var_1 in self.targets["outpost"] )
    {
        if ( var_1.state == "destroyed" )
            return 1;
    }

    return 0;
}

spawn_bomb()
{
    for (;;)
    {
        if ( sort_wave_spawning_ai() )
            break;

        self waittillmatch( "child_changed_state", "destroyed" );
    }
}

sort_wave_spawning_ai()
{
    if ( !isdefined( self.targets["outpost"] ) )
        return 1;

    foreach ( var_1 in self.targets["outpost"] )
    {
        if ( var_1.state != "destroyed" )
            return 0;
    }

    return 1;
}

spawn_backup_helispawner_jammer2()
{
    for (;;)
    {
        spawn_atmines();

        if ( sort_goal_positions_by_priority() )
            break;

        self waittill( "damageable_state_change" );
    }
}

sort_goal_positions_by_priority()
{
    if ( !isdefined( self.targets["damageable"] ) )
        return 1;

    foreach ( var_1 in self.targets["damageable"] )
    {
        if ( var_1.state != "destroyed" )
            return 0;
    }

    return 1;
}

sort_by_ai_assigned( var_0 )
{
    if ( !isdefined( self.targets[var_0] ) )
        return;

    foreach ( var_2 in self.targets[var_0] )
        var_2 thread _id_13297();
}

_id_13297()
{
    if ( self.state == "activated" )
        return;

    self.state = "activated";
    self notify( "activated" );
    scripts\mp\flags::gameflagwait( "ter_vehicle_spawn" );
    _id_133AC();

    if ( level.vehiclecount >= 100 )
        return;

    thread _id_132CE();
}

_id_132CE()
{
    self endon( "deactivated" );
    var_0 = spawnstruct();

    for (;;)
    {
        var_1 = scripts\mp\gametypes\br_vehicles.gsc::tryspawnavehicle( self.name, self, "ter_spawns", var_0 );

        if ( !isdefined( var_1 ) )
            return;

        self.ent = var_1;
        self.ent._id_12BB4 = self;

        if ( level.clear_vehicles._id_13279 < 0 )
            return;

        var_1 waittill( "death" );
        wait( level.clear_vehicles._id_13279 );
    }
}

solved( var_0 )
{
    if ( !isdefined( self.targets[var_0] ) )
        return;

    foreach ( var_2 in self.targets[var_0] )
        var_2 thread _id_13298();
}

_id_13298()
{
    _id_13297();
    _id_132A8();
}

sortsitesbydistance( var_0 )
{
    if ( !isdefined( self.targets[var_0] ) )
        return;

    foreach ( var_2 in self.targets[var_0] )
        var_2 thread _id_132A8();
}

_id_132A8()
{
    if ( self.state == "deactivated" )
        return;

    self.state = "deactivated";
    self notify( "deactivated" );
}

sortvalue()
{
    var_0 = self.name;

    if ( !isdefined( level.clear_vehicles.solospawn[self.name] ) )
        var_0 = "default";

    return level.clear_vehicles.solospawn[var_0];
}

soundorg_int()
{
    return sound_distraction_mechanic_init( "securing" );
}

sounddebouncetimestamp()
{
    return sound_distraction_mechanic_init( "secured" );
}

sound_ent()
{
    return sound_distraction_mechanic_init( "losing" );
}

sound_events()
{
    return sound_distraction_mechanic_init( "lost" );
}

sound_distraction_mechanic_init( var_0 )
{
    var_1 = sortvalue();
    return var_0 + var_1._id_13358;
}

weapongroupdata()
{
    foreach ( var_1 in level.clear_vehicles.types["base"] )
    {
        if ( var_1.team == self.team )
            return var_1;
    }

    return undefined;
}

x1opsendgame( var_0 )
{
    var_1 = spawnstruct();
    var_1._id_125BB = 1;
    scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( self.plundercount + var_0, var_1 );
}

obj_a_goals( var_0 )
{
    if ( var_0 == "allies" )
        return "axis";
    else
        return "allies";
}

nuke_vault_key( var_0 )
{
    return munitions_override_time( "means_of_death", var_0 );
}

onunlockitem( var_0 )
{
    return munitions_override_time( "weapon_type", var_0 );
}

onteammatereviveweaponswitchcomplete( var_0 )
{
    return munitions_override_time( "weapon_class_name", var_0 );
}

onteamleadlost( var_0 )
{
    return munitions_override_time( "weapon_base_name", var_0 );
}

munitions_override_time( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        return 1.0;

    var_1 = tolower( var_1 );
    var_2 = level.clear_vehicles.getburnfxstatepriority[var_0][var_1];

    if ( !isdefined( var_2 ) )
    {
        var_3 = level.clear_vehicles.getc130airdropheight[var_0][var_1];

        if ( !isdefined( var_3 ) )
            var_3 = 1.0;

        var_2 = getdvarfloat( "scr_br_damage_scale_" + var_0 + "_" + var_1, var_3 );
        level.clear_vehicles.getburnfxstatepriority[var_0][var_1] = var_2;
    }

    return var_2;
}

cpvehiclename( var_0 )
{
    foreach ( var_2 in level.clear_vehicles.teams )
        cprooftopcratecapturecallback( var_0, var_2 );
}

cprooftopcratecapturecallback( var_0, var_1 )
{
    if ( risk_flagspawnminactivetospawn( var_0, var_1 ) )
        return;

    level thread scripts\mp\utility\dialog::leaderdialog( var_0, var_1 );
    _id_12489( var_0, var_1 );
}

risk_flagspawnminactivetospawn( var_0, var_1 )
{
    var_2 = onstim( var_0 );

    if ( !isdefined( var_2 ) || var_2 == 0 )
        return 0;

    var_3 = onstompeenemyprogressupdate( var_0, var_1 );

    if ( !isdefined( var_3 ) )
        return 0;

    return gettime() < var_3 + var_2;
}

_id_12489( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
        level.clear_vehicles.vo._id_12C85[var_1][var_0] = gettime();
    else
    {
        foreach ( var_1 in level.clear_vehicles.teams )
            _id_12489( var_0, var_1 );
    }
}

onstompeenemyprogressupdate( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
        return level.clear_vehicles.vo._id_12C85[var_1][var_0];
    else
    {
        var_2 = undefined;

        foreach ( var_1 in level.clear_vehicles.teams )
        {
            var_4 = onstompeenemyprogressupdate( var_0, var_1 );

            if ( isdefined( var_2 ) )
            {
                if ( isdefined( var_4 ) && var_4 < var_2 )
                    var_2 = var_4;

                continue;
            }

            var_2 = var_4;
        }
    }
}

_id_12488( var_0, var_1 )
{
    var_2 = getdvarint( "scr_br_ter_dialog_debounce_" + var_0, var_1 );
    level.clear_vehicles.vo._id_12C7A[var_0] = var_2;
}

onstim( var_0 )
{
    if ( !isdefined( level.clear_vehicles.vo._id_12C7A[var_0] ) )
        _id_12488( var_0, 0 );

    return level.clear_vehicles.vo._id_12C7A[var_0];
}

_id_133AC()
{
    while ( level.clear_vehicles.setlocaledefaultvalue == gettime() )
        waitframe();

    level.clear_vehicles.setlocaledefaultvalue = gettime();
}

usestartspawns()
{
    return !scripts\mp\flags::gameflag( "infil_complete" );
}

getbestspectatecandidate( var_0 )
{
    var_1 = self._id_12BB4;

    if ( isdefined( var_0.attacker ) )
    {
        var_0.attacker thread scripts\mp\rank::scoreeventpopup( "br_ter_obj_destroyed" );
        scripts\mp\utility\sound::playsoundonplayers( "mp_bodycount_tick_positive", obj_a_goals( var_1.team ) );
        scripts\mp\utility\sound::playsoundonplayers( "mp_bodycount_tick_negative", var_1.team );
        var_0.attacker x1opsendgame( level.clear_vehicles._id_11AA1 );
    }

    var_1 getc130knownsafeheight( "destroyed" );
}

getblueprintforpickupweapon( var_0 )
{
    var_1 = var_0.damage;
    var_2 = self._id_12BB4;
    var_3 = getdvarint( "scr_br_ter_allow_friendly_damage", 0 );

    if ( isdefined( var_0.attacker ) && var_2.team == var_0.attacker.team && !var_3 )
        var_1 = 0;
    else if ( isdefined( var_0.inflictor ) && var_0.inflictor scripts\cp_mp\vehicles\vehicle::isvehicle() )
    {
        if ( var_0.inflictor vehicle_getspeed() < level.clear_vehicles.getcircleclosetime )
            var_1 = 0;
        else if ( isdefined( var_2.train_sfx_init ) && gettime() < var_2.train_sfx_init )
            var_1 = 0;
        else
        {
            var_1 = level.clear_vehicles.getcashnags;
            var_2.train_sfx_init = gettime() + level.clear_vehicles.getchallengegamemode;
        }
    }
    else
    {
        var_1 = var_1 * nuke_vault_key( var_0.meansofdeath );

        if ( isdefined( var_0.objweapon ) )
        {
            var_1 = var_1 * onunlockitem( var_0.objweapon.type );
            var_1 = var_1 * onteammatereviveweaponswitchcomplete( var_0.objweapon.classname );
            var_1 = var_1 * onteamleadlost( var_0.objweapon.basename );
        }

        var_1 = int( ceil( var_1 ) );
    }

    if ( var_1 > 0 )
    {
        if ( isdefined( var_0.attacker ) )
            var_0.attacker _id_1199E( var_2._id_12BB1[0] );

        var_2 getc130knownsafeheight( "damaged" );
        var_4 = var_2 getblockedweaponvariantidsmap();
        cprooftopcratecapturecallback( var_4 soundorg_int(), obj_a_goals( var_4.team ) );
        cprooftopcratecapturecallback( var_4 sound_ent(), var_4.team );
        var_4 spawn_and_enter_little_bird_mg();
    }

    return var_1;
}

getboltmodel()
{
    if ( self.getbestsepctatecandidatefromlist == "scriptable" )
        thread getbrplayersnoteliminated();
    else
        thread getbunkernamefromkeypadscriptableinstance();
}

getbrplayersnoteliminated()
{
    self endon( "monitorDamageEnd" );
    self.ent setscriptablepartstate( "base", "unprotected" );

    while ( self.ent getscriptablepartstate( "base" ) != "destroyed" )
        waitframe();

    getc130knownsafeheight( "destroyed" );
}

getbunkernamefromkeypadscriptableinstance()
{
    var_0 = level.clear_vehicles.getbestintersectionpt[self.name];
    self.ent scripts\mp\damage::monitordamage( var_0.health, "hitequip", ::getbestspectatecandidate, ::getblueprintforpickupweapon );
}

getbombteam()
{
    if ( self.getbestsepctatecandidatefromlist == "scriptable" )
        thread getbrendsplashpostgamestate();
    else
        thread getbrgametypedata();
}

getbrendsplashpostgamestate()
{
    self.ent setscriptablepartstate( "base", "protected" );
    self notify( "monitorDamageEnd" );
}

getbrgametypedata()
{
    self.ent scripts\mp\damage::monitordamageend();
}

getc130knownsafeheight( var_0 )
{
    if ( var_0 == self.state )
        return;

    if ( self.getbestsepctatecandidatefromlist == "script_model" )
    {
        switch ( var_0 )
        {
            case "protected":
                self.ent hudoutlinedisable();
                getbombteam();
                break;
            case "undamaged":
                if ( isdefined( self.ent.damagetaken ) )
                    self.ent.damagetaken = 0;

                self.ent hudoutlineenable( "outline_depth_green" );
                self.ent setscriptablepartstate( "ter_damageable", "default" );
                getboltmodel();
                break;
            case "damaged":
                self.ent hudoutlineenable( "outline_depth_red" );
                self.ent setscriptablepartstate( "ter_damageable", "damaged" );
                var_1 = getdvarint( "scr_br_ter_allow_enemy_repair", 0 );

                foreach ( var_3 in level.players )
                {
                    if ( !level.clear_vehicles.blockingcover )
                    {
                        self.ent disablescriptableplayeruse( var_3 );
                        continue;
                    }

                    if ( var_1 || var_3.team == self.team )
                    {
                        self.ent enablescriptableplayeruse( var_3 );
                        continue;
                    }

                    self.ent disablescriptableplayeruse( var_3 );
                }

                break;
            case "destroyed":
                self.ent hudoutlinedisable();
                var_5 = level.clear_vehicles.getbestintersectionpt[self.name];
                self.ent setmodel( var_5.modeldestroyed );
                self.ent setscriptablepartstate( "ter_damageable", "destroyed" );
                getbombteam();
                var_6 = getblockedweaponvariantidsmap();
                var_6 spawn_and_hide_usb();
                break;
            default:
                break;
        }
    }

    self.state = var_0;

    foreach ( var_8 in self._id_12BB1 )
        var_8 notify( "damageable_state_change", self );
}

getcash( var_0, var_1, var_2, var_3, var_4 )
{
    var_3 _id_119A8( var_0.entity._id_12BB4._id_12BB1[0] );
    var_3 thread scripts\mp\rank::scoreeventpopup( "br_ter_obj_repaired" );
    var_3 playlocalsound( "mp_bodycount_tick_positive" );
    var_3 x1opsendgame( level.clear_vehicles._id_11AB2 );
    var_0.entity._id_12BB4 getc130knownsafeheight( "undamaged" );
}

getblockedweaponvariantidsmap()
{
    return self._id_12BB1[0];
}

set_relic_healthpacks()
{
    _id_133AC();
    self.ent = easepower( "br_plunder_box", self.origin, self.angles );
    self.ent._id_12BB4 = self;
    level.br_armory_kiosk.scriptables[level.br_armory_kiosk.scriptables.size] = self.ent;
    self.ent setscriptablepartstate( "br_plunder_box", "visible" );
    self.ent.visible = 1;
}

setup_techo_lmgs()
{
    level.clear_vehicles.plundercountdownplayers = spawnstruct();
    level.clear_vehicles.plundercountdownplayers._id_12CDC = getdvarint( "scr_br_hud_top_offset", 40 );
    level.clear_vehicles.plundercountdownplayers._id_132F4 = getdvarint( "scr_br_ter_hud_version", 0 );
    level.clear_vehicles.plundercountdownplayers.enabled = getdvarint( "scr_br_ter_hud_enabled", 1 );

    if ( !level.clear_vehicles.plundercountdownplayers.enabled )
        return;

    level.clear_vehicles.plundercountdownplayers.temp = spawnstruct();
    level.clear_vehicles.plundercountdownplayers.temp.start_escape_silo = [];
    level.clear_vehicles.plundercountdownplayers.temp.start_countdown_till_sequence_is_cleared = [];
    level.clear_vehicles.plundercountdownplayers.temp.comms_crates = [];

    foreach ( var_1 in level.clear_vehicles.teams )
    {
        level.clear_vehicles.plundercountdownplayers.temp.start_escape_silo[var_1] = 0;
        level.clear_vehicles.plundercountdownplayers.temp.start_countdown_till_sequence_is_cleared[var_1] = 0;
        level.clear_vehicles.plundercountdownplayers.temp.comms_crates[var_1] = [];
    }

    foreach ( var_4 in self.targets["base"] )
        var_4 spawn_addtoarrays( 0 );

    foreach ( var_4 in self.targets["base"] )
        var_4 sortplayerplunderscores();

    level.clear_vehicles.plundercountdownplayers.temp = undefined;
}

spawn_addtoarrays( var_0 )
{
    if ( isdefined( self.plundercountroll ) )
        return;

    self.plundercountroll = spawnstruct();
    self.plundercountroll.temp = spawnstruct();

    if ( isdefined( level.clear_vehicles.plundercountdownplayers.temp.comms_crates[self.team][var_0] ) )
        level.clear_vehicles.plundercountdownplayers.temp.comms_crates[self.team][var_0]++;
    else
        level.clear_vehicles.plundercountdownplayers.temp.comms_crates[self.team][var_0] = 0;

    var_1 = level.clear_vehicles.plundercountdownplayers.temp.comms_crates[self.team][var_0];
    level.clear_vehicles.plundercountdownplayers.temp.start_countdown_till_sequence_is_cleared[self.team] = max( level.clear_vehicles.plundercountdownplayers.temp.start_countdown_till_sequence_is_cleared[self.team], var_1 );
    level.clear_vehicles.plundercountdownplayers.temp.start_escape_silo[self.team] = max( level.clear_vehicles.plundercountdownplayers.temp.start_escape_silo[self.team], var_0 );
    self.plundercountroll.temp.handlematchscoreboardinfo = var_0;
    self.plundercountroll.temp.commandwatcher = level.clear_vehicles.plundercountdownplayers.temp.comms_crates[self.team][var_0];

    foreach ( var_4, var_3 in self.targets["outpost"] )
        var_3 spawn_addtoarrays( var_0 + 1 );
}

sortplayerplunderscores()
{
    if ( isdefined( self.plundercountroll.init_wind_tunnels ) )
        return;

    var_0 = sortvalue();
    self.plundercountroll.init_wind_tunnels = [];

    foreach ( var_2 in level.clear_vehicles.teams )
    {
        if ( !isdefined( self.plundercountroll.init_wind_tunnels[var_2] ) )
            self.plundercountroll.init_wind_tunnels[var_2] = [];

        var_3 = level.clear_vehicles.plundercountdownplayers.temp.start_escape_silo[self.team];
        var_4 = 5;
        var_5 = 45 + var_4;
        var_5 = var_5 + 60 * ( var_3 - self.plundercountroll.temp.handlematchscoreboardinfo );
        var_6 = 4;
        var_7 = 7.5;
        var_7 = var_7 + level.clear_vehicles.plundercountdownplayers._id_12CDC;
        var_7 = var_7 + ( 15 + var_6 ) * self.plundercountroll.temp.commandwatcher;
        var_8 = level.clear_vehicles.plundercountdownplayers.temp.start_countdown_till_sequence_is_cleared[self.team];
        var_9 = level.clear_vehicles.plundercountdownplayers.temp.comms_crates[self.team][self.plundercountroll.temp.handlematchscoreboardinfo];

        if ( var_8 > 0 && var_9 < var_8 )
        {
            var_10 = var_6 + 15;
            var_10 = var_10 * ( ( var_8 - var_9 ) / var_8 );
            var_7 = var_7 + var_10;
        }

        var_11 = var_5;

        if ( level.clear_vehicles.plundercountdownplayers._id_132F4 != 1 )
            var_11 = var_11 + 15;

        var_12 = var_7;

        if ( self.team == var_2 )
        {
            var_5 = var_5 * -1;
            var_11 = var_11 * -1;
            var_13 = "LEFT";
        }
        else
            var_13 = "RIGHT";

        var_14 = var_2;
        var_15 = scripts\engine\utility::ter_op( self.team == var_2, ( 0.337255, 0.690196, 0.929412 ), ( 1, 0.341176, 0.341176 ) );
        var_16 = scripts\engine\utility::ter_op( level.clear_vehicles.plundercountdownplayers._id_132F4 == 1, var_15, ( 1, 1, 1 ) );
        var_17 = hudicon( var_14, var_0.hudicon, var_16 );
        var_17 scripts\mp\hud_util::setpoint( var_13, "CENTERTOP", var_11, var_12 );
        self.plundercountroll.init_wind_tunnels[var_2]["icon"] = var_17;

        if ( level.clear_vehicles.plundercountdownplayers._id_132F4 != 1 )
        {
            var_18 = plunderextractalertnearby( var_14, var_15 );
            var_18 scripts\mp\hud_util::setpoint( var_13, "CENTERTOP", var_11, var_12 );
            self.plundercountroll.init_wind_tunnels[var_2]["label_bg"] = var_18;
        }

        var_19 = plunder_repositoryplayerplundereventcallback( var_14 );
        var_19 scripts\mp\hud_util::setpoint( var_13, "CENTERTOP", var_5, var_7 );
        self.plundercountroll.init_wind_tunnels[var_2]["bar"] = var_19;
    }

    foreach ( var_23, var_22 in self.targets["outpost"] )
        var_22 sortplayerplunderscores();

    self.plundercountroll.temp = undefined;
}

hudicon( var_0, var_1, var_2 )
{
    var_3 = newteamhudelem( var_0 );
    var_3.archived = 0;
    var_3.elemtype = "";
    var_3.width = 15;
    var_3.height = 15;
    var_3.xoffset = 0;
    var_3.yoffset = 0;
    var_3.children = [];
    var_3.sort = 0;
    var_3 plunderrepositoryref( var_2 );
    var_3.alpha = 1.0;
    var_3 scripts\mp\hud_util::setparent( level.uiparent );
    var_3 setshader( var_1, 15, 15 );
    var_3.hidden = 0;
    return var_3;
}

plundereventtotal( var_0, var_1 )
{
    var_2 = 15 / level.fontheight;
    var_3 = newteamhudelem( var_0 );
    var_3.archived = 0;
    var_3.elemtype = "font";
    var_3.font = "default";
    var_3.fontscale = var_2;
    var_3.basefontscale = var_2;
    var_3.sort = 0;
    var_3.width = 11;
    var_3.height = 15;
    var_3.xoffset = 0;
    var_3.yoffset = 0;
    var_3.children = [];
    var_3 scripts\mp\hud_util::setparent( level.uiparent );
    var_3.hidden = 0;
    var_3.label = var_1;
    var_3 plunderrepositoryref( ( 1, 1, 1 ) );
    return var_3;
}

plunderextractalertnearby( var_0, var_1 )
{
    var_2 = newteamhudelem( var_0 );
    var_2.archived = 0;
    var_2.elemtype = "";
    var_2.width = 15;
    var_2.height = 15;
    var_2.xoffset = 0;
    var_2.yoffset = 0;
    var_2.children = [];
    var_2.sort = -1;
    var_2 plunderrepositoryref( var_1 );
    var_2.alpha = 1.0;
    var_2 scripts\mp\hud_util::setparent( level.uiparent );
    var_2 setshader( "progress_bar_fill", 15, 15 );
    var_2.hidden = 0;
    return var_2;
}

plunder_repositoryplayerplundereventcallback( var_0 )
{
    var_1 = newteamhudelem( var_0 );
    var_1.archived = 0;
    var_1.elemtype = "";
    var_1.width = 45;
    var_1.height = 15;
    var_1.xoffset = 0;
    var_1.yoffset = 0;
    var_1.children = [];
    var_1.sort = -3;
    var_1 plunderrepositoryref( ( 1, 1, 1 ) );
    var_1.alpha = 1.0;
    var_1 scripts\mp\hud_util::setparent( level.uiparent );
    var_1 setshader( "progress_bar_fill", 45, 15 );
    var_1.hidden = 0;
    return var_1;
}

plunderrepositoryref( var_0 )
{
    self.color = var_0;
    self.give_objective_xp_to_all_players = var_0;
}

plunder_value_picked_up( var_0 )
{
    self endon( "death" );
    self notify( "end_flash" );
    self endon( "end_flash" );
    self.color = var_0;
    wait 0.2;
    self.color = self.give_objective_xp_to_all_players;
}

plunder_updaterepositorywidgetforplayer( var_0, var_1 )
{
    self endon( "death" );
    self endon( "end_flashing" );
    self.leaderboarddata = var_0;

    if ( isdefined( self.leaderinteractionthink ) )
    {
        var_2 = gettime() + var_1 * 1000;

        if ( var_2 > self.leaderinteractionthink )
            self.leaderinteractionthink = var_2;

        return;
    }
    else
        self.leaderinteractionthink = gettime() + var_1 * 1000;

    while ( gettime() < self.leaderinteractionthink )
    {
        self.color = self.leaderboarddata;
        wait 0.1;
        self.color = self.give_objective_xp_to_all_players;
        wait 0.1;
    }

    plunder_value_dropped();
}

plunder_value_dropped()
{
    self.color = self.give_objective_xp_to_all_players;
    self.leaderboarddata = undefined;
    self.leaderinteractionthink = undefined;
    self notify( "end_flashing" );
}

rear_spotlight( var_0 )
{
    if ( !isdefined( self.targets ) )
        self.targets = [];

    if ( !isdefined( self.targets[var_0] ) )
        self.targets[var_0] = [];
}

forbiddencachespawns( var_0, var_1 )
{
    var_2 = var_0[0];
    var_3 = var_0[1];
    var_4 = var_0[2];
    return ( ( 1 - var_2 ) * var_1 + var_2, ( 1 - var_3 ) * var_1 + var_3, ( 1 - var_4 ) * var_1 + var_4 );
}
