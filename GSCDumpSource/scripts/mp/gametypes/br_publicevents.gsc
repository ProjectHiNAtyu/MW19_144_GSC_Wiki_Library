// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.cleanupmolotovs = getdvarint( "scr_br_pe_grabbag", 0 ) == 1;
    level.cleanuplinkent = [];
    level.cleanupfunc = [];
    level.br_pe_event_repetition_buffer = getdvarint( "scr_br_pe_event_repetition_buffer", 2 );
    _initevents();
    scripts\mp\gametypes\br_dev.gsc::_id_11DEA( ::play_stealthy_disguise_vo );

    if ( _id_11C29() )
    {
        if ( rotatetocurrentangles() )
            level thread _id_11C2B();
        else
            level thread _id_11C2A();
    }
}

_initevents()
{
    scripts\mp\gametypes\br_publicevent_bombardment.gsc::init();
    scripts\mp\gametypes\br_publicevent_choppers.gsc::init();
    scripts\mp\gametypes\br_publicevent_firesale.gsc::init();
    scripts\mp\gametypes\br_publicevent_jailbreak.gsc::init();
    scripts\mp\gametypes\br_publicevent_juggernaut.gsc::init();
    scripts\mp\gametypes\br_publicevent_restock.gsc::init();
    scripts\mp\gametypes\br_publicevent_satellite.gsc::init();
    scripts\mp\gametypes\br_publicevent_loadoutdrop.gsc::init();
    scripts\mp\gametypes\br_publicevent_lootcratedrop.gsc::init();
    scripts\mp\gametypes\br_publicevent_resurgence.gsc::init();

    if ( rotatetocurrentangles() )
    {
        var_0 = spawnstruct();
        var_0.weight = 0;
        _id_11DFD( 0, var_0 );
    }
}

getdvarcircleeventweights( var_0, var_1 )
{
    var_2 = getdvar( "scr_br_pe_" + var_0 + "_circle_event_weights", var_1 );
    var_3 = [];

    if ( var_2 != "" )
    {
        var_4 = strtok( var_2, " " );

        foreach ( var_6 in var_4 )
            var_3[var_3.size] = float( var_6 );
    }

    return var_3;
}

_id_11DFD( var_0, var_1 )
{
    if ( !isdefined( var_1.weight ) )
        var_1.active = 0;

    if ( !isdefined( var_1.weight ) )
        var_1.weight = 1.0;

    if ( rotatetocurrentangles() )
    {
        if ( !isdefined( var_1.start_race_countdown ) )
            var_1.start_race_countdown = 1;

        if ( !isdefined( var_1.cansnapcamera ) )
            var_1.cansnapcamera = [];
    }

    level.cleanuplinkent[var_0] = var_1;
    return var_1;
}

display_current_cypher_to_player()
{
    level notify( "cancel_public_event" );
}

_id_11C29()
{
    var_0 = getdvarint( "scr_br_pe_force_type", 0 );

    if ( var_0 != 0 )
        return 1;

    if ( scripts\mp\utility\game::sandbox_safe_area() )
        return 0;

    var_1 = obj_smuggler_killed_early();

    if ( !var_1 )
        return 0;

    var_2 = obj_running_exfil_wave();

    if ( var_2 <= 0.0 )
        return 0;

    return 1;
}

_id_124EB()
{
    var_0 = obj_running_exfil_wave();

    if ( var_0 <= 0.0 )
        return 0;

    return randomfloat( 1.0 ) <= var_0;
}

obj_smuggler_killed_early()
{
    return getdvarint( "scr_br_pe_count", 1 );
}

obj_running_exfil_wave()
{
    return getdvarfloat( "scr_br_pe_chance", 0.0 );
}

tomastrike_watchgameend()
{
    var_0 = obj_smuggler_killed_early();
    return var_0 != 1;
}

_id_11C2A()
{
    level endon( "cancel_public_event" );
    scripts\mp\flags::gameflagwait( "prematch_done" );

    if ( tomastrike_watchgameend() )
    {
        var_0 = getdvarfloat( "scr_br_pe_multi_wait_min", 240 );
        var_1 = getdvarfloat( "scr_br_pe_multi_wait_max", 360 );
        var_2 = obj_smuggler_killed_early();

        while ( var_2 )
        {
            var_3 = randomfloatrange( var_0, var_1 );
            wait( var_3 );

            if ( _id_124EB() )
            {
                entity_movingplatform_update( 1 );
                var_2--;
            }
        }
    }
    else if ( _id_124EB() )
        entity_movingplatform_update( 0 );
}

_id_13150()
{
    var_0 = [];

    foreach ( var_3, var_2 in level.cleanuplinkent )
    {
        if ( var_2.weight <= 0.0 )
        {
            _printdebugmessage( _eventnamefromtype( var_3 ) + " was invalidated due to 0 weight" );
            continue;
        }

        if ( isdefined( var_2._id_13152 ) && ![[ var_2._id_13152 ]]() )
        {
            _printdebugmessage( _eventnamefromtype( var_3 ) + " was invalidated due to failing validate function" );
            continue;
        }

        _printdebugmessage( _eventnamefromtype( var_3 ) + " was validated" );
        var_0[var_0.size] = var_3;
    }

    if ( var_0.size == 0 )
        var_0[var_0.size] = 0;

    return var_0;
}

onweapondropcreated( var_0, var_1 )
{
    var_2 = 0.0;

    foreach ( var_4 in var_0 )
    {
        var_5 = level.cleanuplinkent[var_4];
        var_6 = var_5.weight;

        if ( isdefined( var_1 ) && isdefined( var_5.circleeventweights ) && isdefined( var_5.circleeventweights[var_1] ) )
            var_6 = var_5.circleeventweights[var_1];

        var_2 = var_2 + var_6;
    }

    return var_2;
}

lastcrossbowhadstoppingpower( var_0, var_1, var_2 )
{
    var_3 = 0.0;

    if ( !var_0.size )
        return 0;

    foreach ( var_5 in var_0 )
    {
        var_6 = level.cleanuplinkent[var_5];
        var_7 = var_6.weight;

        if ( isdefined( var_2 ) && isdefined( var_6.circleeventweights ) && isdefined( var_6.circleeventweights[var_2] ) )
            var_7 = var_6.circleeventweights[var_2];

        var_3 = var_3 + var_7;

        if ( var_1 <= var_3 )
            return var_5;
    }

    return 0;
}

entity_movingplatform_update( var_0, var_1 )
{
    var_2 = undefined;

    if ( istrue( level.cleanupmolotovs ) )
    {
        _printdebugmessage( "Selecting event for circle#: " + var_1 );
        var_2 = validateevents_grabbag( var_1 );
    }
    else
        var_2 = _id_13150();

    var_3 = onweapondropcreated( var_2, var_1 );
    var_4 = randomfloat( var_3 );
    var_5 = lastcrossbowhadstoppingpower( var_2, var_4, var_1 );
    _printdebugmessage( "Selected event: " + _eventnamefromtype( var_5 ) );
    var_6 = getdvarint( "scr_br_pe_force_type", 0 );

    if ( var_6 != 0 )
    {
        _printdebugmessage( "Overriding selected event with: " + _eventnamefromtype( var_6 ) );
        var_5 = var_6;
    }

    level _id_120B7( var_5, var_0, var_1 );
}

_id_120B7( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    level endon( "cancel_public_event" );
    var_3 = level.cleanuplinkent[var_0];

    if ( isdefined( var_3._id_133CD ) && !var_1 )
        var_3 [[ var_3._id_133CD ]]();

    var_3.active = 1;
    scripts\mp\gametypes\br_analytics.gsc::cloudanimfx( var_0 );

    if ( rotatetocurrentangles() )
    {
        _printdebugmessage( "Activating Event: " + _eventnamefromtype( var_0 ) );

        if ( isdefined( var_3.allow_br_loot_to_br_marked ) )
            var_3 thread [[ var_3.allow_br_loot_to_br_marked ]]();

        if ( !isdefined( level.br_pe_numtimesthismatch[var_0] ) )
            level.br_pe_numtimesthismatch[var_0] = 0;

        level.br_pe_numtimesthismatch[var_0]++;

        if ( isdefined( var_2 ) )
            level.br_pe_circlelastran[var_0] = var_2;

        var_4 = level.cleanuplinkent[var_0].cansnapcamera;
        _setclientkillstreakindexes( var_4 );
        level waittill( "br_circle_set" );

        if ( isdefined( var_3.getjuggmazespawnpoint ) )
            var_3 [[ var_3.getjuggmazespawnpoint ]]();

        var_3.active = 0;
        scripts\mp\gametypes\br_analytics.gsc::cloud_cover( var_0 );
        level notify( "select_new_event" );
    }
    else
    {
        if ( isdefined( var_3.allow_br_loot_to_br_marked ) )
            var_3 [[ var_3.allow_br_loot_to_br_marked ]]();

        var_3.active = 0;
        scripts\mp\gametypes\br_analytics.gsc::cloud_cover( var_0 );
    }
}

sandbox_safe_area_count( var_0 )
{
    var_1 = level.cleanuplinkent[var_0];

    if ( !isdefined( var_1 ) )
        return 0;

    return istrue( var_1.active );
}

_id_12557( var_0 )
{
    foreach ( var_2 in level.players )
        var_2 scripts\mp\hud_message::showsplash( var_0 );
}

dangercircletick( var_0, var_1 )
{
    scripts\mp\gametypes\br_publicevent_choppers.gsc::dangercircletick( var_0, var_1 );
}

play_stealthy_disguise_vo( var_0, var_1 )
{

}

rotatetocurrentangles()
{
    return istrue( level.cleanupmolotovs );
}

_id_11C2B()
{
    level endon( "cancel_public_event" );
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_done" );
    level.br_pe_numtimesthismatch = [];
    level.br_pe_circlelastran = [];
    var_0 = 0;

    for ( var_1 = getdvarint( "scr_br_pe_max_event_count", level.br_level.br_circleradii.size - 1 ); var_0 < var_1; var_0++ )
    {
        if ( var_0 == 0 )
        {
            level waittill( "br_circle_set" );
            var_2 = 5;
            var_3 = getdvarint( "scr_br_pe_initial_delay", var_2 );
            wait( var_3 );
        }
        else
        {
            level waittill( "select_new_event" );
            var_4 = 5;
            var_5 = getdvarint( "scr_br_pe_subsequent_delay", var_4 );
            wait( var_5 );
        }

        var_6 = 1;
        var_7 = level.br_circle.circleindex;

        if ( _id_124EB() )
            level thread entity_movingplatform_update( var_6, var_7 );
    }
}

validateevents_grabbag( var_0 )
{
    var_1 = [];

    foreach ( var_9, var_3 in level.cleanuplinkent )
    {
        if ( var_3.weight <= 0.0 )
        {
            _printdebugmessage( _eventnamefromtype( var_9 ) + " was invalidated due to 0 weight" );
            continue;
        }

        if ( isdefined( var_3._id_13152 ) && ![[ var_3._id_13152 ]]() )
        {
            _printdebugmessage( _eventnamefromtype( var_9 ) + " was invalidated due to failing validate function" );
            continue;
        }

        if ( isdefined( level.br_pe_numtimesthismatch ) && isdefined( level.br_pe_numtimesthismatch[var_9] ) )
        {
            if ( isdefined( var_3.start_race_countdown ) && level.br_pe_numtimesthismatch[var_9] >= var_3.start_race_countdown )
            {
                _printdebugmessage( _eventnamefromtype( var_9 ) + " was invalidated due to already activating max times" );
                continue;
            }
        }

        if ( isdefined( level.cleanupfunc ) && istrue( level.cleanupfunc[var_9] ) )
        {
            _printdebugmessage( _eventnamefromtype( var_9 ) + " was invalidated due to this event being on the blacklist" );
            continue;
        }

        if ( isdefined( var_3.cansnapcamera ) )
        {
            var_4 = 0;

            foreach ( var_6 in var_3.cansnapcamera )
            {
                if ( isdefined( level.br_pe_numtimesthismatch[var_6] ) )
                {
                    if ( level.br_pe_numtimesthismatch[var_6] > 0 )
                    {
                        var_4 = 1;
                        break;
                    }
                }
            }

            if ( var_4 )
            {
                _printdebugmessage( _eventnamefromtype( var_9 ) + " was invalidated due to a previously run event to being on this event's blacklist" );
                continue;
            }
        }

        if ( isdefined( var_3.circleeventweights ) && isdefined( var_3.circleeventweights[var_0] ) && var_3.circleeventweights[var_0] <= 0 )
        {
            _printdebugmessage( _eventnamefromtype( var_9 ) + " was invalidated due to 0 weight" );
            continue;
        }

        if ( isdefined( level.br_pe_circlelastran ) && isdefined( level.br_pe_circlelastran[var_9] ) )
        {
            var_8 = var_0 - level.br_pe_circlelastran[var_9];

            if ( var_8 >= level.br_pe_event_repetition_buffer + 1 )
                level.br_pe_circlelastran[var_9] = undefined;
            else
            {
                _printdebugmessage( _eventnamefromtype( var_9 ) + " was invalidated due to being a previously ran event within the span of the event repetition buffer." );
                continue;
            }
        }

        _printdebugmessage( _eventnamefromtype( var_9 ) + " was validated" );
        var_1[var_1.size] = var_9;
    }

    if ( var_1.size == 0 )
        var_1[var_1.size] = 0;

    return var_1;
}

_printdebugmessage( var_0 )
{

}

_eventnamefromtype( var_0 )
{
    switch ( var_0 )
    {
        case 0:
            return "CONST_BR_PE_TYPE_NONE";
        case 1:
            return "CONST_BR_PE_TYPE_CHOPPERS";
        case 2:
            return "CONST_BR_PE_TYPE_FIRESALE";
        case 3:
            return "CONST_BR_PE_TYPE_JAILBREAK";
        case 4:
            return "CONST_BR_PE_TYPE_JUGGERNAUT";
        case 5:
            return "CONST_BR_PE_TYPE_BOMBARDMENT";
        case 6:
            return "CONST_BR_PE_TYPE_RESTOCK";
        case 7:
            return "CONST_BR_PE_TYPE_SATELLITE";
        case 8:
            return "CONST_BR_PE_TYPE_LOADOUTDROP";
        case 9:
            return "CONST_BR_PE_TYPE_LOOTCRATE_DROP";
        case 10:
            return "CONST_BR_PE_TYPE_RESURGENCE";
        default:
            scripts\mp\utility\script::handle_train_veh_collision( "No name is defined for eventType: " + var_0 );
            return "UNKNOWN_TYPE";
    }
}

_setclientkillstreakindexes( var_0 )
{
    foreach ( var_2 in var_0 )
    {
        if ( !isdefined( level.cleanupfunc[var_2] ) )
            level.cleanupfunc[var_2] = 1;
    }
}
