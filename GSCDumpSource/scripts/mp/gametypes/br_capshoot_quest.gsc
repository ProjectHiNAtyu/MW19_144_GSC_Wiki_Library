// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = obj_tugofwar_drain_speed( game["attackers"] );

    foreach ( var_2 in var_0 )
        addupperrighthudelem( var_2 );

    var_4 = obj_tugofwar_drain_speed( game["defenders"] );

    foreach ( var_2 in var_4 )
        addupperrighthudelem( var_2 );

    scripts\mp\gametypes\br_quest_util.gsc::registerquestlocale( "cap_locale" );
    scripts\mp\gametypes\br_quest_util.gsc::registercreatequestlocale( "cap_locale", ::do_laser_panel_anim_sequence );
    scripts\mp\gametypes\br_quest_util.gsc::registercheckiflocaleisavailable( "cap_locale", ::do_heli_takeoff_vo );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "cap_locale", ::do_player_rescued_anim );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "cap_locale", ::do_kidnapping_anims );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF5( "cap_locale", ::do_manual_splash_damage_when_frag_explodes );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF8( "cap_locale", ::do_not_unload );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "cap_locale" ).nextid = 0;
    _id_12437();
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "canTakePickupLoot", ::dmztut_endgame );
    game["dialog"]["mission_cap_accept"] = "mission_mission_dom_accept_secure";
    game["dialog"]["mission_cap_success"] = "mission_mission_dom_success";
}

obj_tugofwar_drain_speed( var_0 )
{
    if ( var_0 == game["attackers"] )
        return move_spawnpoints_to_valid_positions();
    else
        return nag_player_remind_lore_vo();
}

move_spawnpoints_to_valid_positions()
{
    return [ "capshoot_killstreak" ];
}

nag_player_remind_lore_vo()
{
    return [ "capshoot_killstreak_d" ];
}

addupperrighthudelem( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( var_0, 1 );

    if ( !var_1 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF2( var_0, "brloot_domination_tablet" );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11E05( var_0, ::doapcdamagevo );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( var_0, ::do_secured_player_vo );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11C73( var_0, 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF9( var_0, ::dmztutdropcash );
    scripts\mp\gametypes\br_quest_util.gsc::_id_123A2( var_0 );
}

do_secured_player_vo()
{
    if ( isdefined( level._id_12BEF[self.team] ) )
        level._id_12BEF[self.team] = scripts\engine\utility::array_remove( level._id_12BEF[self.team], self.squadindex );

    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehidefromteam( self.team );
    self._id_12A93 thread do_hack_sequence();
}

do_player_rescued_anim()
{
    foreach ( var_1 in self.subscribedinstances )
        var_1 thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();

    gwsiege_config();
    self.do_ads_hint = undefined;
}

doapcdamagevo()
{
    self.questcategory = "capshoot";
    return 1;
}

do_laser_panel_anim_sequence( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "cap_locale" ).nextid++;
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createlocaleinstance( "cap_locale", self.questcategory, "CapPoint:" + scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "cap_locale" ).nextid );

    if ( !isdefined( var_0 ) )
    {
        var_1.curorigin = ( 0, 0, 0 );
        var_1.enabled = 0;
        return var_1;
    }

    var_2 = var_0.origin;

    if ( !( var_0.spawnflags & 23 ) )
    {

    }

    var_3 = scripts\mp\gametypes\br_quest_util.gsc::_id_11C68( var_0 );
    var_4 = spawn( "trigger_radius", var_2, 0, int( var_3 ), int( level.circle_defaults ) );
    var_4.script_label = "";
    level._id_12362 = ::do_custom_evade_start;
    var_5 = scripts\mp\gametypes\obj_dom.gsc::setupobjective( var_4 );
    var_5.onuse = ::do_complete_escape_zoom_out;
    var_5.onbeginuse = ::do_cache_2_prep;
    var_5.onuseupdate = ::do_convoy_moving_vo;
    var_5.onenduse = ::do_camera_zoom_out;
    var_5.usecondition = ::do_func;
    var_5.lockupdatingicons = 1;
    var_5.enemy_think = 1;
    var_5.flagmodel setmodel( "lm_domination_point_01" );
    scripts\mp\objidpoolmanager::update_objective_position( var_5.objidnum, var_5.curorigin + ( 0, 0, 60 ) );
    level.flagcapturetime = getdvarfloat( "scr_br_cap_quest_capture_time", 30 );
    var_5 scripts\mp\gameobjects::setusetime( level.flagcapturetime );
    var_1.lastcircletick = -1;
    var_1.do_ads_hint = var_5;
    var_1.curorigin = var_5.curorigin;
    var_1.team = self.team;
    var_5.locale = var_1;
    var_5.squadindex = self.squadindex;
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "cap_locale", var_1 );
    return var_1;
}

do_heli_takeoff_vo( var_0 )
{
    var_1 = getdvarfloat( "scr_br_cap_quest_max_capture_percent", 0.2 );
    var_2 = getdvarfloat( "scr_br_cap_quest_max_teams", 4 );
    var_3 = 0;

    if ( isdefined( self.do_ads_hint.curprogress ) )
        var_3 = self.do_ads_hint.curprogress / self.do_ads_hint.usetime;

    if ( var_3 > var_1 )
        return 0;

    if ( self.subscribedinstances.size >= var_2 )
        return 0;

    return 1;
}

do_kidnapping_anims( var_0, var_1 )
{
    if ( !isdefined( self.do_ads_hint ) )
        return;

    var_2 = gettime();

    if ( self.lastcircletick == var_2 )
        return;

    self.lastcircletick = var_2;

    if ( isdefined( self.do_ads_hint ) && isdefined( self.do_ads_hint.traincar ) )
        self.curorigin = self.do_ads_hint.traincar.origin;

    var_3 = distance2d( self.curorigin, var_0 );

    if ( var_3 > var_1 )
    {
        foreach ( var_5 in self.subscribedinstances )
        {
            if ( isdefined( var_5 ) )
            {
                scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_5.team, "br_capshoot_quest_circle_failure" );
                var_6 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_5.team, var_5.squadindex );
                level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "br_capshoot_quest_circle_failure", 1, var_6 );
            }

            var_5.result = "circle";
        }

        scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
    }
}

do_manual_splash_damage_when_frag_explodes( var_0 )
{
    do_ascender_entrance( var_0 );
}

do_not_unload( var_0 )
{
    foreach ( var_2 in self.teams )
    {
        if ( var_0.team == self.subscribedinstances[0].team )
            do_exfil_vo( var_0 );
    }
}

dmztut_endgame( var_0 )
{
    if ( !scripts\mp\gametypes\br_pickups.gsc::sat_activate( var_0.scriptablename ) )
        return undefined;

    var_1 = var_0.relic_squadlink_toofar_hud_logic;

    if ( isdefined( var_1.questcategory ) && var_1.questcategory == "capshoot" )
    {
        if ( self.team == var_1.team )
        {
            var_2 = obj_tugofwar_drain_speed( self.team );

            foreach ( var_4 in var_2 )
            {
                if ( isdefined( level.questinfo.quests[var_4] ) )
                {
                    foreach ( var_6 in level.questinfo.quests[var_4].instances )
                    {
                        if ( isdefined( var_6 ) && self.squadindex == var_6.squadindex )
                            return 10;
                    }
                }
            }

            return 1;
        }
        else
            return 22;
    }

    return undefined;
}

takequestitem( var_0 )
{
    var_1 = parachuteoverheadwarningheight( var_0._id_12B26, self, 1, var_0 );

    if ( !isdefined( var_1 ) )
        return;

    _id_12553( var_0._id_12B26, [ self ] );
    var_1 _id_128B8( [ self ] );

    if ( istrue( level.completesmokinggunquest.vehicle_incomingremovedcallback ) && isdefined( var_0.updaterotatedebug ) )
    {
        var_2 = [[ var_0.updaterotatedebug ]]( var_0 );

        if ( isdefined( var_2 ) && isdefined( var_0.updatescavengerhud ) )
        {
            parachuteoverheadwarningheight( var_0.updatescavengerhud, var_2, 0, var_0 );
            _id_12553( var_0.updatescavengerhud, [ var_2 ] );
            var_1 _id_128B8( [ var_2 ] );
        }
    }

    if ( isdefined( level.completesmokinggunquest._id_11C70 ) && isdefined( var_1._id_11C6F ) )
        level.completesmokinggunquest._id_11C70 = scripts\engine\utility::array_remove( level.completesmokinggunquest._id_11C70, var_1._id_11C6F );
}

parachuteoverheadwarningheight( var_0, var_1, var_2, var_3 )
{
    var_4 = getdvarint( "scr_br_CAP_questTime", 240 );
    var_5 = activate_punchcard( var_0, var_1, var_4, var_3 );
    var_6 = undefined;
    var_7 = spawnstruct();
    var_7 = var_1 omnvardata( var_0 );

    if ( isdefined( var_3 ) && isdefined( var_3.wait_for_morales_thanks ) )
    {
        var_8 = [[ var_3.wait_for_morales_thanks ]]( var_1, var_3 );

        if ( isdefined( var_8 ) )
        {
            var_7._id_11F03 = var_8;
            var_6 = var_8._id_11C6F;
        }
    }

    var_9 = var_5 scripts\mp\gametypes\br_quest_util.gsc::requestquestlocale( "cap_locale", var_7, var_2 );

    if ( !isdefined( var_9 ) || !istrue( var_9.enabled ) )
    {
        var_5.result = "no_locale";
        var_5 scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( var_1.team );
    }
    else
    {
        if ( isdefined( var_9.do_ads_hint ) )
            var_3.preventleave = var_9.do_ads_hint.flagmodel;

        var_9._id_11C6F = var_6;
        var_9.squadindex = var_1.squadindex;
        var_9 do_ghost_skit();
        scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( var_0, var_5 );
    }
}

omnvardata( var_0 )
{
    var_1 = self;
    var_2 = spawnstruct();
    var_2._id_121E3 = "questPointsArray";
    var_2._id_121DF = ( var_1.origin[0], var_1.origin[1], 0 );
    var_2._id_121E6 = getdvarfloat( "scr_br_cap_search_max_radius", 7500 );
    var_2._id_121E7 = 0;
    var_2._id_121E4 = getdvarfloat( "scr_br_cap_search_ideal_max_radius", 5000 );
    var_2._id_121E5 = getdvarfloat( "scr_br_cap_search_ideal_min_radius", 2500 );
    var_2._id_11C76 = 7;
    var_2.mintime = getdvarfloat( "scr_br_cap_quest_capture_time", 30 );
    var_2._id_121E1 = 1;
    var_2._id_11F03 = var_1._id_11F03;

    if ( lootchopper_setupdamagefunctionality( var_0 ) )
    {
        if ( var_2._id_121E6 < level._id_11C5C )
            var_2._id_121E6 = level._id_11C5C;

        var_2._id_121E4 = level._id_11C5C;
        var_2._id_121E5 = level._id_11C5D;
    }

    if ( istrue( var_1.tv_station_fastrope_one_infil_start_targetname_array_index ) )
    {
        var_2._id_121E3 = "questPointsArrayWZTrain";
        var_2._id_13112 = 1;
    }

    var_3 = getdvarint( "scr_br_questCapDistMin", -1 );
    var_4 = getdvarint( "scr_br_questCapDistMax", -1 );

    if ( var_3 >= 0 )
        var_2._id_121E5 = var_3;

    if ( var_4 >= 0 )
        var_2._id_121E4 = var_4;

    return var_2;
}

sappliedstages()
{
    var_0 = obj_tugofwar_drain_speed( game["attackers"] );

    foreach ( var_2 in var_0 )
    {
        if ( isdefined( level.questinfo.quests[var_2].instances[game["attackers"]] ) )
            return 1;
    }

    var_4 = obj_tugofwar_drain_speed( game["defenders"] );

    foreach ( var_2 in var_4 )
    {
        if ( isdefined( level.questinfo.quests[var_2].instances[game["defenders"]] ) )
            return 1;
    }

    return 0;
}

activate_punchcard( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( var_0, var_1.team, "", var_3, var_1.squadindex );
    var_4.squadindex = var_1.squadindex;
    var_4 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( var_1.team, var_1 );
    var_4 scripts\mp\gametypes\br_quest_util.gsc::_id_11DE0( var_1 );
    var_4.team = var_1.team;
    var_4 scripts\mp\gametypes\br_quest_util.gsc::_id_11C74( var_2, 4 );
    return var_4;
}

_id_12553( var_0, var_1 )
{
    foreach ( var_3 in var_1 )
    {
        var_3 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( var_0, var_3.team );
        var_3 scripts\mp\gametypes\br_quest_util.gsc::_id_129E2( var_0, var_3, var_3.team );
    }

    var_5 = spawnstruct();
    var_5.excludedplayers = [];

    foreach ( var_3 in var_1 )
    {
        var_5.excludedplayers[0] = var_3;
        var_3 scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( var_3, "br_capshoot_quest_start_tablet_finder_noplunder", var_5 );
        var_3 scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_3.team, "br_capshoot_quest_start_team_noplunder", var_5 );
        var_3 scripts\mp\gametypes\br_quest_util.gsc::hint_obj_name( var_3.team, var_3, 6, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( var_0 ) );
        var_7 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_3.team, var_3.squadindex );
        level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "contract_acquired", 1, var_7 );
    }
}

_id_128B8( var_0 )
{
    if ( isdefined( self.do_ads_hint ) )
    {
        foreach ( var_2 in var_0 )
            self.do_ads_hint scripts\mp\gameobjects::squadallowuse( var_2.team, var_2.squadindex );
    }
}

do_ghost_skit()
{
    if ( !isdefined( self.do_ads_hint ) || !isdefined( self.do_ads_hint.objidnum ) )
        return;

    objective_showtoplayersinmask( self.do_ads_hint.objidnum );
    objective_removeallfrommask( self.do_ads_hint.objidnum );

    foreach ( var_1 in self.subscribedinstances )
    {
        foreach ( var_3 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_1.team, var_1.squadindex ) )
        {
            if ( !var_3 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
                objective_addclienttomask( self.do_ads_hint.objidnum, var_3 );
        }
    }
}

do_ascender_entrance( var_0 )
{
    if ( !isdefined( self.do_ads_hint ) || !isdefined( self.do_ads_hint.objidnum ) )
        return;

    objective_removeclientfrommask( self.do_ads_hint.objidnum, var_0 );
}

do_exfil_vo( var_0 )
{
    if ( !isdefined( self.do_ads_hint ) || !isdefined( self.do_ads_hint.objidnum ) )
        return;

    objective_addclienttomask( self.do_ads_hint.objidnum, var_0 );
}

do_hack_sequence()
{
    self endon( "removed" );
    waittillframeend;
    do_ghost_skit();
}

gwsiege_config()
{
    foreach ( var_1 in self.do_ads_hint.visuals )
        var_1 delete();

    if ( isdefined( self.do_ads_hint.flagmodel ) )
        self.do_ads_hint.flagmodel delete();

    if ( isdefined( self.do_ads_hint.scriptable ) )
        self.do_ads_hint.scriptable delete();

    if ( isdefined( self.do_ads_hint.trigger ) )
    {
        self.do_ads_hint.trigger delete();
        self.do_ads_hint.trigger = undefined;
    }

    self.do_ads_hint thread gameobjectreleaseid_delayed();
    self.do_ads_hint notify( "deleted" );
}

gameobjectreleaseid_delayed()
{
    wait 0.1;
    scripts\mp\gameobjects::releaseid();
}

_id_12437()
{
    if ( isdefined( level.circle_defaults ) )
        return;

    level.disableinitplayergameobjects = 0;
    level.circle_defaults = 120;
    level.iconneutral = "waypoint_captureneutral_br";
    level.iconcapture = "waypoint_capture_br";
    level.icondefend = "waypoint_defend_br";
    level.icondefending = "waypoint_defending_br";
    level.iconcontested = "waypoint_contested_br";
    level.icontaking = "waypoint_taking_br";
    level.iconlosing = "waypoint_losing_br";
    level.prematchintiallandingcomplete = "icon_waypoint_ot";
    adjust_heartbeat_sensor_settings( "icon_waypoint_dom_br", "neutral", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    adjust_heartbeat_sensor_settings( "waypoint_taking_br", "friendly", "MP_INGAME_ONLY/OBJ_TAKING_CAPS", 1 );
    adjust_heartbeat_sensor_settings( "waypoint_capture_br", "enemy", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    adjust_heartbeat_sensor_settings( "waypoint_defend_br", "friendly", "MP_INGAME_ONLY/OBJ_DEFEND_CAPS", 0 );
    adjust_heartbeat_sensor_settings( "waypoint_defending_br", "friendly", "MP_INGAME_ONLY/OBJ_DEFENDING_CAPS", 0 );
    adjust_heartbeat_sensor_settings( "waypoint_blocking_br", "friendly", "MP_INGAME_ONLY/OBJ_BLOCKING_CAPS", 0 );
    adjust_heartbeat_sensor_settings( "waypoint_blocked_br", "friendly", "MP_INGAME_ONLY/OBJ_BLOCKED_CAPS", 0 );
    adjust_heartbeat_sensor_settings( "waypoint_losing_br", "enemy", "MP_INGAME_ONLY/OBJ_LOSING_CAPS", 1 );
    adjust_heartbeat_sensor_settings( "waypoint_captureneutral_br", "neutral", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    adjust_heartbeat_sensor_settings( "waypoint_contested_br", "contest", "MP_INGAME_ONLY/OBJ_CONTESTED_CAPS", 1 );
    adjust_heartbeat_sensor_settings( "waypoint_dom_target_br", "neutral", "MP_INGAME_ONLY/OBJ_TARGET_CAPS", 0 );
    adjust_heartbeat_sensor_settings( "icon_waypoint_target_br", "neutral", "MP_INGAME_ONLY/OBJ_TARGET_CAPS", 0 );
    adjust_heartbeat_sensor_settings( "icon_waypoint_ot", "neutral", "MP_INGAME_ONLY/OBJ_OTFLAGLOC_CAPS", 0 );
}

adjust_heartbeat_sensor_settings( var_0, var_1, var_2, var_3 )
{
    level.waypointcolors[var_0] = var_1;
    level.waypointbgtype[var_0] = 1;
    level.waypointstring[var_0] = var_2;
    level.waypointshader[var_0] = "ui_mp_br_mapmenu_icon_dom_objective";
    level.waypointpulses[var_0] = var_3;
}

do_convoy_moving_vo( var_0, var_1, var_2, var_3 )
{
    if ( var_1 < 1.0 && !level.gameended )
        waittill_player_moves( var_1, var_0 );

    if ( var_1 > 0.05 && var_2 && !istrue( self.didstatusnotify ) )
        self.didstatusnotify = 1;
}

do_cache_2_prep( var_0 )
{
    if ( !isdefined( self.tripledefenderkill ) || !self.tripledefenderkill )
    {
        self.tripledefenderkill = 1;

        if ( isdefined( self.traincar ) )
        {
            if ( isdefined( level._id_135FD ) && istrue( level._id_135FD.dmztutendgame ) )
            {
                var_1 = self.traincar.dmztut_luicallback + ( 200, 0, 0 );
                var_2 = self.traincar.origin + rotatevector( var_1, self.traincar.angles );
                level thread scripts\mp\gametypes\br_quest_util.gsc::_id_1313A( var_2, "dom", 3 );
            }
        }
        else
            level thread scripts\mp\gametypes\br_quest_util.gsc::_id_1313A( self.curorigin, "dom" );

        foreach ( var_4 in level.players )
        {
            if ( isdefined( var_4 ) && isalive( var_4 ) && ( var_4.team != var_0.team || var_4.squadindex != var_0.squadindex ) )
                var_4 thread scripts\mp\hud_message::showsplash( "br_capshoot_quest_alert" );
        }

        var_6 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0.team, var_0.squadindex );

        foreach ( var_8 in var_6 )
            var_8 notify( "calloutmarkerping_warzoneKillQuestIcon" );
    }
}

do_complete_escape_zoom_out( var_0 )
{
    foreach ( var_2 in self.locale.subscribedinstances )
    {
        var_3 = var_2.team;

        if ( var_3 == var_0.team )
        {
            var_4 = scripts\mp\gametypes\br_quest_util.gsc::objectiveids( var_0.team );
            var_5 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( var_2.questcategory );
            var_6 = scripts\mp\gametypes\br_quest_util.gsc::objective_origin( scripts\mp\gametypes\br_quest_util.gsc::objective_minimapupdate( var_2.questcategory ) );
            var_7 = spawnstruct();
            var_7.usingobject = scripts\mp\gametypes\br_quest_util.gsc::v_start_pos( var_5, var_4, var_6 );
            self.squadindex = var_2.squadindex;
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_3, "br_capshoot_quest_complete_noplunder", var_7 );
            scripts\mp\gametypes\br_quest_util.gsc::hint_obj_name( var_3, var_0, 8, var_5 );
            var_8 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0.team, var_0.squadindex );
            level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "contract_complete", 1, var_8, 0, 1 );
            var_2._id_11FD6 = self.flagmodel.origin;
            var_2._id_11FD3 = self.flagmodel.angles;
            var_2.result = "success";

            if ( isdefined( self.assisttouchlist ) )
            {
                if ( isdefined( self.assisttouchlist[var_3] ) )
                {
                    var_9 = getarraykeys( self.assisttouchlist[var_3] );

                    foreach ( var_11 in var_9 )
                    {
                        var_12 = self.assisttouchlist[var_3][var_11].player;

                        if ( isdefined( var_12.owner ) )
                            var_12 = var_12.owner;

                        if ( !isplayer( var_12 ) )
                            continue;

                        var_12 scripts\cp\helicopter\chopper_boss::_id_11EFA( "t9_ch_global_complete_recon_objective_for_operator_mission", 1 );
                        var_12 scripts\cp\helicopter\chopper_boss::_id_11EFA( "t9_ch_global_complete_recon_objective_for_operator_mission_op2", 1 );
                        var_2 scripts\mp\gametypes\br_quest_util.gsc::_id_11DE0( var_12 );
                    }
                }
            }

            continue;
        }

        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_3, "br_capshoot_quest_failure" );
        var_8 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0.team, var_0.squadindex );
        level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "contract_fail", 1, var_8 );
        var_2.result = "fail";
    }

    self.locale thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

do_camera_zoom_out( var_0, var_1, var_2 )
{
    scripts\mp\gametypes\obj_dom.gsc::dompoint_onuseend( var_0, var_1, var_2 );
}

waittill_player_moves( var_0, var_1 )
{
    if ( !isdefined( self.lastsfxplayedtime ) )
        self.lastsfxplayedtime = gettime();

    if ( self.lastsfxplayedtime + 995 < gettime() )
    {
        self.lastsfxplayedtime = gettime();
        var_2 = "";
        var_0 = int( floor( var_0 * 10 ) );
        var_2 = "mp_dom_capturing_tick_0" + var_0;
        self.visuals[0] playsoundtoteam( var_2, var_1 );
    }
}

do_custom_evade_start( var_0, var_1, var_2 )
{
    switch ( var_1 )
    {
        case "contested":
        case "idle":
        case "off":
            return 0;
        default:
            var_1 = "using";

            if ( isdefined( var_2 ) )
                var_1 = var_1 + var_2;

            self.scriptable setscriptablepartstate( var_0, var_1 );

            if ( var_0 == "pulse" )
                self.scriptable setscriptablepartstate( "flag", var_1 );

            return 1;
    }
}

do_func( var_0 )
{
    var_1 = var_0.team;

    foreach ( var_3 in self.locale.subscribedinstances )
    {
        if ( isdefined( var_3 ) )
        {
            if ( var_3.team == var_1 )
                return 1;
        }
    }

    return 0;
}

dmztutdropcash()
{
    while ( self._id_12A93.do_ads_hint.numtouching[self.id] )
        waitframe();

    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_capshoot_quest_timer_expired" );
    var_0 = scripts\mp\gametypes\br_public.gsc::ondefuse( self.team, self.squadindex );
    level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "contract_fail", 1, var_0 );
}

lootchopper_setupdamagefunctionality( var_0 )
{
    var_1 = 0;
    var_2 = scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "overrideQuestSearchParams", var_0 );

    if ( isdefined( var_2 ) )
        return var_2;

    var_3 = scripts\mp\utility\game::onfieldupgradeendbuffer();

    switch ( var_3 )
    {
        case "mini":
        case "risk":
        case "dmz":
            var_1 = 1;
            break;
    }

    return var_1;
}
