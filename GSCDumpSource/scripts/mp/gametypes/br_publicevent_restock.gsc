// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = spawnstruct();
    var_0.weight = getdvarfloat( "scr_br_pe_restock_weight", 0 );
    var_0._id_13152 = ::_id_13152;
    var_0._id_133CD = ::_id_133CD;
    var_0.allow_br_loot_to_br_marked = ::allow_br_loot_to_br_marked;
    var_0.getjuggmazespawnpoint = ::getjuggmazespawnpoint;
    var_0.start_race_countdown = getdvarint( "scr_br_pe_restock_max_times", 2 );
    var_0.circleeventweights = scripts\mp\gametypes\br_publicevents.gsc::getdvarcircleeventweights( "restock", "0 0 5 5 10 15 20 23 24" );
    scripts\mp\gametypes\br_publicevents.gsc::_id_11DFD( 6, var_0 );
    level.openlootcaches = [];
}

_id_13152()
{
    return 1;
}

_id_133CD()
{
    level endon( "game_ended" );
    level endon( "cancel_public_event" );
}

allow_br_loot_to_br_marked()
{
    level endon( "game_ended" );
    scripts\mp\gametypes\br_publicevents.gsc::_id_12557( "br_pe_restock_start" );
    var_0 = "set_to_closed";

    foreach ( var_2 in level.openlootcaches )
        var_2 setscriptablepartstate( "body", var_0 );
}

getjuggmazespawnpoint()
{

}

restockcrate()
{
    level endon( "game_ended" );
    self endon( "death" );

    switch ( self.type )
    {
        case "br_loot_cache_reddoor":
        case "br_loot_cache_lege":
        case "br_loot_cache":
            level.openlootcaches[level.openlootcaches.size] = self;
            break;
        default:
            return;
    }
}
