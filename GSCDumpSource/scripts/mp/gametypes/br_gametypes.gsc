// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.completesmokinggunquest = spawnstruct();
    level.completesmokinggunquest.funcs = [];
    level.completesmokinggunquest.helihint_activate_vo = [];
    level.completesmokinggunquest.initlocs_test = [];
    level.completesmokinggunquest.data = [];
    level.completesmokinggunquest.name = getdvar( "scr_br_gametype", "" );

    if ( level.completesmokinggunquest.name == "none" )
        level.completesmokinggunquest.name = "";

    switch ( level.completesmokinggunquest.name )
    {
        case "control":
            scripts\mp\gametypes\br_gametype_control.gsc::init();
            break;
        case "dmz":
            scripts\mp\gametypes\br_gametype_dmz.gsc::init();
            break;
        case "prop":
            scripts\mp\gametypes\br_gametype_prop.gsc::init();
            break;
        case "jugg":
            scripts\mp\gametypes\br_gametype_juggernaut.gsc::init();
            break;
        case "kingslayer":
            scripts\mp\gametypes\br_gametype_kingslayer.gsc::init();
            break;
        case "mini":
            scripts\mp\gametypes\br_gametype_mini.gsc::init();
            break;
        case "truckwar":
            scripts\mp\gametypes\br_gametype_truckwar.gsc::init();
            break;
        case "vov":
            scripts\mp\gametypes\br_gametype_vov.gsc::init();
            break;
        case "gxp":
            scripts\mp\gametypes\br_gametype_gxp.gsc::init();
            break;
        case "zxp":
            scripts\mp\gametypes\br_gametype_zxp.gsc::init();
            break;
        case "rebirth":
            scripts\mp\gametypes\br_gametype_rebirth.gsc::init();
            break;
        case "payload":
            scripts\mp\gametypes\br_gametype_payload.gsc::init();
            break;
        case "dbd":
            scripts\mp\gametypes\br_gametype_dbd.gsc::init();
            break;
        case "x2":
            break;
        case "reveal":
            scripts\mp\gametypes\br_gametype_reveal.gsc::init();
            break;
        case "reveal_2":
            scripts\mp\gametypes\br_gametype_reveal_2.gsc::init();
            break;
        case "bodycount":
            scripts\mp\gametypes\br_gametype_bodycount.gsc::init();
            break;
        case "rumble":
            scripts\mp\gametypes\br_gametype_rumble.gsc::init();
            break;
        case "brz":
            scripts\mp\gametypes\br_gametype_brz.gsc::init();
            break;
        case "brdov":
            scripts\mp\gametypes\br_gametype_brdov.gsc::init();
            break;
        case "ter":
            scripts\mp\gametypes\br_gametype_ter.gsc::init();
            break;
        case "lep":
            scripts\mp\gametypes\br_gametype_lep.gsc::init();
            break;
        case "blitz":
            scripts\mp\gametypes\br_gametype_blitz.gsc::init();
            break;
        case "respect":
            scripts\mp\gametypes\br_gametype_respect.gsc::init();
            break;
        case "":
            break;
        default:
            break;
    }
}

_id_11DDC( var_0, var_1 )
{
    if ( isdefined( level.completesmokinggunquest.funcs[var_0] ) )
        scripts\mp\utility\script::handle_train_veh_collision( "registerBrGametypeFunc already has " + var_0 + " defined." );

    level.completesmokinggunquest.funcs[var_0] = var_1;
}

_id_120A1( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    return [[ level.completesmokinggunquest.funcs[var_0] ]]( var_1, var_2, var_3, var_4, var_5, var_6 );
}

_id_1209E( var_0, var_1, var_2 )
{
    if ( isdefined( level.completesmokinggunquest.funcs[var_0] ) )
    {
        if ( isdefined( var_2 ) )
            return [[ level.completesmokinggunquest.funcs[var_0] ]]( var_1, var_2 );
        else if ( isdefined( var_1 ) )
            return [[ level.completesmokinggunquest.funcs[var_0] ]]( var_1 );
        else
            return [[ level.completesmokinggunquest.funcs[var_0] ]]();
    }
}

_id_1209F( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( level.completesmokinggunquest.funcs[var_0] ) )
        return [[ level.completesmokinggunquest.funcs[var_0] ]]( var_1, var_2, var_3 );
}

_id_120A0( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( level.completesmokinggunquest.funcs[var_0] ) )
        return [[ level.completesmokinggunquest.funcs[var_0] ]]( var_1, var_2, var_3, var_4 );
}

_id_12FDC( var_0 )
{
    level.completesmokinggunquest.funcs[var_0] = undefined;
}

revive_stim( var_0 )
{
    return isdefined( level.completesmokinggunquest.funcs[var_0] );
}

helihint_wait( var_0 )
{
    level.completesmokinggunquest.helihint_activate_vo[var_0] = 1;
}

roof_enemy_groups( var_0 )
{
    return isdefined( level.completesmokinggunquest ) && istrue( level.completesmokinggunquest.helihint_activate_vo[var_0] );
}

initnonbunkerdoors( var_0 )
{
    level.completesmokinggunquest.initlocs_test[var_0] = 1;
}

roof_lander_spawn_func( var_0 )
{
    return isdefined( level.completesmokinggunquest ) && istrue( level.completesmokinggunquest.initlocs_test[var_0] );
}

_id_11DDB( var_0, var_1 )
{
    level.completesmokinggunquest.data[var_0] = var_1;
}

movingplatform_playerlink( var_0 )
{
    return level.completesmokinggunquest.data[var_0];
}

revive_origin( var_0 )
{
    return isdefined( level.completesmokinggunquest.data[var_0] );
}
