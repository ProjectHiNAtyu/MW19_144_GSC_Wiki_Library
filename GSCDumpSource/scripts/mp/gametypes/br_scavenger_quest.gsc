// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\engine\scriptable::_id_1219E( "body", ::_id_1213E );
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "scavenger", 1 );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger" )._id_121E0 = getdvarint( "scr_br_scavenger_searchCircleSize", 1000 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger" ).subscribetoquestlocale = getdvarint( "scr_br_scavenger_missionTimeBase", 300 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger" ).subscriptions = getdvarint( "scr_br_scavenger_missionTimeBonus", 60 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger" )._id_11F38 = getdvarint( "scr_br_scavenger_resetTimerOnPickup", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11E05( "scavenger", ::_id_128A8 );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "scavenger", ::sq_removequestinstance );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF6( "scavenger", ::_id_1289E );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestlocale( "scavenger_locale" );
    scripts\mp\gametypes\br_quest_util.gsc::registercreatequestlocale( "scavenger_locale", ::sq_createquestlocale );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF3( "scavenger_locale", ::_id_12898 );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "scavenger_locale", ::sq_removelocaleinstance );
    scripts\mp\gametypes\br_quest_util.gsc::registercheckiflocaleisavailable( "scavenger_locale", ::sq_checkiflocaleisavailable );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "scavenger_locale", ::sq_circletick );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF5( "scavenger_locale", ::_id_12895 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF8( "scavenger_locale", ::_id_128A5 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11C73( "scavenger", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF9( "scavenger", ::_id_1289B );
    var_1 = [];
    var_1[0] = scripts\mp\gametypes\br_quest_util.gsc::filtercondition_isdead;
    scripts\mp\gametypes\br_quest_util.gsc::registerplayerfilter( "scavenger", var_1 );
    game["dialog"]["mission_scav_accept"] = "mission_mission_scav_accept";
    game["dialog"]["mission_scav_success"] = "mission_mission_scav_success";
}

sq_removequestinstance()
{
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
}

_id_1289E( var_0 )
{
    if ( var_0.team == self.team )
    {
        var_1 = scripts\mp\utility\teams::getteamdata( self.team, "players" );
        scripts\mp\gametypes\br_quest_util.gsc::getquestinstancedata( "scavenger_locale", self.team ).playerlist = var_1;

        if ( isdefined( self._id_12A93 ) && isdefined( self._id_12A93.deletex1finhud ) && var_1.size )
            self._id_12A93.deletex1finhud setotherent( var_1[0] );

        if ( !scripts\mp\gametypes\br_quest_util.gsc::isteamvalid( var_0.team ) )
        {
            self.result = "fail";
            scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        }
    }
}

_id_12895( var_0 )
{
    if ( !enablesplitscreen( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
    scripts\mp\gametypes\br_quest_util.gsc::playertouching( var_0 );
}

_id_128A5( var_0 )
{
    if ( !enablesplitscreen( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "scavenger" );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12552( var_0 );
}

enablesplitscreen( var_0 )
{
    if ( var_0.team == self.subscribedinstances[0].team )
        return 1;
    else
        return 0;
}

sq_createquestlocale( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createlocaleinstance( "scavenger_locale", "scavenger", self.team );

    if ( !isdefined( var_0 ) )
    {
        var_1.curorigin = ( 0, 0, 0 );
        var_1.enabled = 0;
        return var_1;
    }

    var_1 scripts\mp\gametypes\br_quest_util.gsc::get_model_for_color_wire_cut( "ui_mp_br_mapmenu_icon_scavengerhunt_objective", "current" );
    var_1.playerlist = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    var_1.velo_forward_memory = 0;
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "scavenger_locale", var_1 );
    var_1 _id_1245E( var_0 );
    return var_1;
}

_id_12898( var_0 )
{
    self.velo_forward_memory++;
    var_1 = _id_1245E( var_0 );

    if ( var_1 )
    {
        self.subscribedinstances[0].get_trap_room_spawnpoints = var_0.origin;
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.subscribedinstances[0].team, "br_scavenger_quest_next_location" );
        level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_obj_next_nptarget", self.subscribedinstances[0].team, 1 );

        if ( istrue( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger" )._id_11F38 ) )
            self.subscribedinstances[0] scripts\mp\gametypes\br_quest_util.gsc::_id_11C74( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger" ).subscribetoquestlocale, 1 );
        else
            self.subscribedinstances[0] scripts\mp\gametypes\br_quest_util.gsc::_id_11C72( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger" ).subscriptions );
    }
}

_id_1245E( var_0 )
{
    if ( !isdefined( var_0 ) )
    {
        var_1 = self.subscribedinstances[0];

        foreach ( var_3 in scripts\mp\utility\teams::getteamdata( var_1.team, "players" ) )
            var_3 scripts\mp\utility\lower_message::_id_12394( "br_assassination_notargets", undefined, 5 );

        var_1.result = "no_locale";
        var_1 scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        return 0;
    }

    getlootspawnpointcount( var_0.index );
    _id_12818( var_0.origin, var_0.angles, self );
    self.curorigin = var_0.origin + ( 0, 0, 50 );
    scripts\mp\gametypes\br_quest_util.gsc::throwingknife_fire_clear_fx( self.curorigin );
    _id_130B1();
    return 1;
}

sq_removelocaleinstance()
{
    half_size();
    self.playerlist = undefined;
    self.subscribedinstances = undefined;

    if ( isdefined( self.deletex1finhud ) )
    {
        if ( self.deletex1finhud getscriptablepartstate( "body" ) == "scavenger_closed" )
            self.deletex1finhud delete();
    }
}

sq_circletick( var_0, var_1 )
{
    if ( !isdefined( self.lastcircletick ) )
        self.lastcircletick = -1;

    var_2 = gettime();

    if ( self.lastcircletick == var_2 )
        return;

    self.lastcircletick = var_2;
    var_3 = distance2d( self.curorigin, var_0 );

    if ( var_3 > var_1 )
    {
        foreach ( var_5 in self.subscribedinstances )
            var_5 failscavengerquest();
    }
}

sq_checkiflocaleisavailable()
{
    return 0;
}

takequestitem( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( "scavenger", self.team, var_0.index, var_0 );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( self.team, self );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::_id_11DE0( self );
    var_1.team = self.team;
    var_1.startlocation = self.origin;
    var_1.get_trap_room_spawnpoints = self.origin;
    var_1._id_11F03 = var_0._id_11F03;
    var_2 = spawn_maint_wave_1( var_1.startlocation, var_1._id_11F03[0] );
    var_3 = var_1 scripts\mp\gametypes\br_quest_util.gsc::requestquestlocale( "scavenger_locale", var_2, 1 );

    if ( !var_3.enabled )
    {
        scripts\mp\utility\lower_message::_id_12394( "br_assassination_notargets", undefined, 5 );
        var_1.result = "no_locale";
        var_1 scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
        var_4 = spawnstruct();
        var_4.origin = var_0.origin;
        var_4.angles = var_0.angles;
        var_4.itemsdropped = 0;

        if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
        {
            var_5 = "mp/loot_set_cache_contents_dmz.csv";
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 0, 1, "health", var_5 );
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 0, 2, "ammo", var_5 );
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 1, 1, "plunder", var_5 );
        }
        else
        {
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 0, 1, "health" );
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 0, 2, "ammo" );
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 1, 1, "plunder" );
        }

        return;
    }

    scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( "scavenger", self.team );
    var_1.totalscavengeditems = 0;
    var_1 scripts\mp\gametypes\br_quest_util.gsc::_id_11C74( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger" ).subscribetoquestlocale, 4 );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "scavenger", var_1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_129E2( "scavenger", self, self.team );
    var_6 = spawnstruct();
    var_6.excludedplayers = [];
    var_6.excludedplayers[0] = self;
    var_6._id_11AEF = scripts\mp\gametypes\br_quest_util.gsc::objective_hide_for_mlg_spectator( "scavenger", scripts\mp\gametypes\br_quest_util.gsc::objectiveids( self.team ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_scavenger_quest_start_team", var_6 );
    scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( self, "br_scavenger_quest_start_tablet_finder", var_6 );

    if ( !scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
        scripts\mp\gametypes\br_quest_util.gsc::passes_final_capsule_check( self.team, "br_mission_pickup_tablet" );

    scripts\mp\gametypes\br_quest_util.gsc::hint_obj_name( var_1.team, self, 6, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "scavenger" ) );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_scav_accept", var_1.team, 1 );
}

spawn_maint_wave_1( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2._id_121E3 = "getUnusedLootCacheArray";
    var_2._id_121DF = var_0;
    var_2._id_121E6 = 10000;
    var_2._id_121E7 = 0;
    var_2._id_121E4 = 4000;
    var_2._id_121E5 = 2000;
    var_2._id_121E1 = 1;
    var_2._id_11F03 = var_1;
    var_2.mintime = 45;

    if ( lootcontentsadjust_accesscardsred() )
    {
        if ( var_2._id_121E6 < level._id_11C5E )
            var_2._id_121E6 = level._id_11C5E;

        var_2._id_121E4 = level._id_11C5E;
        var_2._id_121E5 = level._id_11C5F;
    }

    var_3 = getdvarint( "scr_br_questScavDistMin", -1 );
    var_4 = getdvarint( "scr_br_questScavDistMax", -1 );

    if ( var_3 >= 0 )
        var_2._id_121E5 = var_3;

    if ( var_4 >= 0 )
        var_2._id_121E4 = var_4;

    return var_2;
}

lootcontentsadjust_accesscardsred()
{
    var_0 = 0;
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "overrideQuestSearchParams", "scavenger" );

    if ( isdefined( var_1 ) )
        return var_1;

    var_2 = scripts\mp\utility\game::onfieldupgradeendbuffer();

    switch ( var_2 )
    {
        case "mini":
        case "risk":
        case "dmz":
            var_0 = 1;
            break;
    }

    return var_0;
}

completescavengerquest( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::objectiveids( self.team );
    var_4 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "scavenger" );
    var_5 = scripts\mp\gametypes\br_quest_util.gsc::objective_origin( scripts\mp\gametypes\br_quest_util.gsc::objective_minimapupdate( "scavenger" ) );
    var_6 = scripts\mp\gametypes\br_alt_mode_bblitz.gsc::calculateeventstarttime( var_1 );
    var_2.usingobject = scripts\mp\gametypes\br_quest_util.gsc::v_start_pos( var_4, var_3, var_5, undefined, var_6 );

    if ( !scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
    {
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_scavenger_quest_complete", var_2 );
        level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_scav_success", self.team, 1, 1 );
    }

    self._id_11FD6 = var_0.origin;
    self._id_11FD3 = var_0.angles;
    self.result = "success";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

failscavengerquest()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_scavenger_quest_circle_failure" );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_obj_circle_fail", self.team, 1 );
    self.result = "fail";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

_id_130B1()
{
    foreach ( var_1 in self.playerlist )
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivesetparameter( self.velo_forward_memory );

    var_3 = scripts\mp\gametypes\br_quest_util.gsc::sortvalidplayersinarray( self.playerlist );

    foreach ( var_1 in var_3["valid"] )
    {
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "scavenger" );
        scripts\mp\gametypes\br_quest_util.gsc::_id_12552( var_1 );
    }

    foreach ( var_1 in var_3["invalid"] )
    {
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
        scripts\mp\gametypes\br_quest_util.gsc::playertouching( var_1 );
    }
}

playerumpedfromplane( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::playertouching( var_0 );
    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
}

half_size()
{
    foreach ( var_1 in self.playerlist )
        playerumpedfromplane( var_1 );

    scripts\mp\gametypes\br_quest_util.gsc::hacks_started();
}

_id_1289B()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_scavenger_quest_timer_expired" );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_gen_fail", self.team, 1 );
}

_id_12818( var_0, var_1, var_2 )
{
    var_3 = spawn( "script_model", var_0 );
    var_4 = var_2.playerlist[0];
    var_3.angles = var_1;
    var_3 setotherent( var_4 );
    var_3 setmodel( "military_loot_crate_01_br_scavenger_01" );
    var_3 setscriptablepartstate( "body", "scavenger_closed" );
    var_3.questlocale = var_2;
    var_2.deletex1finhud = var_3;

    foreach ( var_6 in level.players )
    {
        if ( var_6 != var_4 && ( var_4.team == "none" || var_6.team != var_4.team ) )
            var_3 disablescriptableplayeruse( var_6 );
    }
}

_id_1213E( var_0, var_1, var_2, var_3, var_4 )
{
    if ( istrue( var_3 scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "playerSkipLootPickup", var_0 ) ) )
        return;

    if ( var_2 == "scavenger_closed" && isdefined( var_0.entity ) )
    {
        var_5 = var_0.entity.questlocale.subscribedinstances[0];

        if ( var_3.team != var_5.team )
        {
            var_3 iprintlnbold( "Chest Requires a Scavenger Mission" );
            return;
        }

        var_0 setscriptablepartstate( "body", "scavenger_opening" );
        var_6 = getdvarint( "scr_br_scavenger_cacheDeleteDelay", 30 );
        var_0.entity scripts\engine\utility::delaycallwatchself( var_6, ::delete );
        var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_11DE0( var_3 );

        switch ( var_0.entity.questlocale.velo_forward_memory )
        {
            case 0:
                scripts\mp\gametypes\br_quest_util.gsc::parachuteoverheadwarningradius( "scavenger_1", var_3.team, var_0.origin, var_0.angles, var_5._id_11FD8 );
                break;
            case 1:
                scripts\mp\gametypes\br_quest_util.gsc::parachuteoverheadwarningradius( "scavenger_2", var_3.team, var_0.origin, var_0.angles, var_5._id_11FD8 );
                break;
            case 3:
                break;
        }

        if ( var_0.entity.questlocale.velo_forward_memory == 2 )
        {
            var_5._id_11FD6 = var_0.origin;
            var_5._id_11FD3 = var_0.angles;
            scripts\mp\gametypes\br_quest_util.gsc::hint_obj_name( var_5.team, var_3, 8, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "scavenger" ) );
            var_5 completescavengerquest( var_0.entity, var_3 );
        }
        else
        {
            scripts\mp\gametypes\br_quest_util.gsc::hint_obj_name( var_5.team, var_3, 7, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "scavenger" ) );
            var_7 = spawn_maint_wave_1( var_0.origin, var_5._id_11F03[var_0.entity.questlocale.velo_forward_memory + 1] );
            var_0.entity.questlocale scripts\mp\gametypes\br_quest_util.gsc::throwingknife_fire_begin_fx( "scavenger_locale", var_7 );
        }

        level notify( "lootcache_opened_kill_callout" + var_0.origin );
        var_8 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getFriendlyPlayers" ) ]]( var_3.team, 0 );

        foreach ( var_10 in var_8 )
            var_10 notify( "calloutmarkerping_warzoneKillQuestIcon" );
    }
}

_id_128A8()
{
    self._id_11F03 = [];
    var_0 = self.origin;

    for ( var_1 = 0; var_1 < 3; var_1++ )
    {
        var_2 = spawn_maint_wave_1( var_0 );
        var_3 = scripts\mp\gametypes\br_quest_util.gsc::lastgunkilltime( "scavenger", var_2 );

        if ( !isdefined( var_3 ) )
            return 0;

        getlootspawnpointcount( var_3.index );
        var_0 = var_3.origin;
        self._id_11F03[var_1] = var_3;
    }

    return 1;
}
