// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

play_armor_bink()
{
    wait 5.0;
    scripts\mp\utility\sound::apc_target_enemies( "br_zxp" );
}

ss_entergulag()
{
    return 0;
}

start_safehouse_regroup_objective( var_0, var_1 )
{
    var_2 = var_0 _id_119FC( var_1 );

    if ( scripts\mp\flags::gameflag( "prematch_done" ) && !var_2 )
        scripts\mp\gametypes\br.gsc::ss_circletick( var_0 );

    return !var_2;
}

zombienumhitsatv( var_0, var_1 )
{
    if ( level.completesmokinggunquest.ghostkillcamfix && !scripts\mp\gametypes\br_public.gsc::zombie() && !istrue( self.diedasghost ) )
    {
        thread x1givelaststandoverride( 0 );
        return 1;
    }
}

get_health_stage()
{
    var_0 = [];
    var_0["loadoutArchetype"] = "archetype_assault";
    var_0["loadoutPrimary"] = "iw8_fists";
    var_0["loadoutPrimaryAttachment"] = "none";
    var_0["loadoutPrimaryAttachment2"] = "none";
    var_0["loadoutPrimaryCamo"] = "none";
    var_0["loadoutPrimaryReticle"] = "none";
    var_0["loadoutSecondary"] = "none";
    var_0["loadoutSecondaryAttachment"] = "none";
    var_0["loadoutSecondaryAttachment2"] = "none";
    var_0["loadoutSecondaryCamo"] = "none";
    var_0["loadoutSecondaryReticle"] = "none";
    var_0["loadoutMeleeSlot"] = "none";
    var_0["loadoutEquipmentPrimary"] = "none";
    var_0["loadoutEquipmentSecondary"] = "none";
    var_0["loadoutStreakType"] = "assault";
    var_0["loadoutKillstreak1"] = "none";
    var_0["loadoutKillstreak2"] = "none";
    var_0["loadoutKillstreak3"] = "none";
    var_0["loadoutSuper"] = "super_br_extract";
    var_0["loadoutPerks"] = [];
    var_0["loadoutGesture"] = "playerData";
    return var_0;
}

_id_11E82( var_0 )
{
    if ( !isdefined( level.teamdata[var_0]["aliveCountHuman"] ) )
        return level.teamdata[var_0]["aliveCount"];
    else
        return level.teamdata[var_0]["aliveCountHuman"];
}

weapon_xp_iw8_la_juliet()
{
    self endon( "disconnect" );
    self setscriptablepartstate( "ghost", "off" );
    self setscriptablepartstate( "compassicon", "defaulticon" );
    self setscriptablepartstate( "skydiveVfx", "default", 0 );

    if ( level.completesmokinggunquest.oscope_sign_think )
    {
        x1unittimedivision();

        if ( !level.completesmokinggunquest.oscope_temp )
            self setscriptablepartstate( "headVFX", "neutral" );

        self visionsetnakedforplayer( "", 0 );
    }

    if ( !getdvarint( "scr_br_gxp_disable_ghost_death_loadout_fix", 0 ) )
    {
        scripts\mp\class::loadout_emptycacheofloadout( "gamemode" );
        self.pers["gamemodeLoadout"] = level.br_respawn_loadout;
        self.pers["class"] = "gamemode";
        self.class = "gamemode";
    }

    waittillframeend;
    _id_119AE( 0, 1 );
    _id_11964( 0 );
}

_id_11964( var_0 )
{
    scripts\mp\gametypes\br_public.gsc::x1spawnlocationoverride( var_0 );

    if ( var_0 )
    {
        if ( level.completesmokinggunquest.plunderrepositories )
        {
            self.plunderforextract.alpha = 1;
            self.plunderfxondropthreashold.alpha = 1;
            self.plunderatcapacity.alpha = 1;
        }

        self disableweaponpickup();
    }
    else
    {
        winyoffset();
        self enableweaponpickup();
    }
}

winyoffset()
{
    if ( isdefined( self.plunderforextract ) )
        thread grenade_chances( self.plunderforextract, 1.5 );

    if ( isdefined( self.plunderfxondropthreashold ) )
        thread grenade_chances( self.plunderfxondropthreashold, 1.5 );

    if ( isdefined( self.plunderatcapacity ) )
        self.plunderatcapacity destroy();

    self.plunderforextract = undefined;
    self.plunderfxondropthreashold = undefined;
    self.plunderatcapacity = undefined;
}

grenade_chances( var_0, var_1 )
{
    wait( var_1 );

    if ( isdefined( var_0 ) )
        var_0 destroy();
}

x1unittimedivision()
{
    foreach ( var_1 in level.players )
    {
        if ( !var_1 scripts\mp\gametypes\br_public.gsc::zombie() )
            var_1 hudoutlinedisableforclient( self );
    }
}

_id_1197B()
{
    self notify( "spawnGhost" );
    self _meth_87A8( "ghost" );
    self setclothtype( "cloth" );
    scripts\mp\deathicons::playerstartpowers( self );
}

_id_119C9( var_0 )
{
    return scripts\mp\gametypes\br_public.gsc::zombie();
}

_id_119CA( var_0 )
{
    return scripts\mp\gametypes\br_public.gsc::zombie();
}

_id_119FC( var_0 )
{
    if ( !istrue( var_0 ) )
    {
        if ( scripts\mp\gametypes\br_public.gsc::zombie() )
        {
            thread weapon_xp_iw8_la_juliet();
            return 0;
        }
    }

    if ( !istrue( self.br_infilstarted ) || !scripts\mp\flags::gameflag( "prematch_done" ) || level.gameended || !level.completesmokinggunquest.orderindex )
        return 0;

    if ( !level.completesmokinggunquest.ghostkillcamfix )
        thread x1givelaststandoverride( 0 );

    return 1;
}

x1givelaststandoverride( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "ghost_unset" );

    if ( level.gameended )
        return;

    if ( !isdefined( level.teamdata[self.team]["lastGhostTime"] ) && !isdefined( level._id_11FAF ) )
    {

    }

    _id_123E4( self.team );
    _id_119AC( 1 );
    x1ops2( 1 );
    waittillframeend;

    if ( isdefined( self.body ) )
        self.body delete();

    _id_119AE( 1 );
    scripts\mp\gametypes\br_gxp_phones.gsc::disablephonesforplayer( self );
    self._id_11F59 = 1;

    if ( isdefined( level._id_11FAF ) )
        _id_1197B();
    else if ( var_0 )
        _id_11A14();
    else
        _id_1197B();

    if ( scripts\mp\gametypes\br_gametypes.gsc::revive_stim( "playerGetGhostSpawnLocation" ) )
        [var_2, var_3] = scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "playerGetGhostSpawnLocation" );
    else
        [var_2, var_3] = weaponpickups();

    [var_2, var_6] = x1fin_think( var_2, var_3 );
    scripts\mp\gametypes\br_gulag.gsc::gulagfadetoblack();
    wait 1;
    scripts\mp\class::loadout_emptycacheofloadout( "gamemode" );
    self.pers["gamemodeLoadout"] = level.completesmokinggunquest.openaltbunker;
    self.class = "gamemode";
    self.forcespawnangles = var_3;
    self.forcespawnorigin = var_6;
    scripts\mp\playerlogic::spawnplayer( undefined, 0 );
    thread scripts\mp\music_and_dialog::_id_136A7();
    scripts\mp\gametypes\br_pickups.gsc::initplayer( 1 );
    scripts\mp\gametypes\br_spectate.gsc::weapon_xp_iw8_ar_golf36();
    self notify( "endSuperJumpFov" );
    var_7 = getcompleteweaponname( "iw8_fists_mp" );
    scripts\cp_mp\utility\inventory_utility::_takeweapon( var_7 );
    var_8 = getcompleteweaponname( "iw8_fists_mp_gxp" );
    scripts\cp_mp\utility\inventory_utility::_giveweapon( var_8, undefined, undefined, 1 );
    self detachall();
    self setmodel( "c_s4_rus_redshirt_02" );
    self attach( "c_s4_head_sc_m_sharipov" );
    self setviewmodel( "c_s4_vm_fra_novak_01" );

    if ( level.completesmokinggunquest.ghostenableasm )
        scripts\mp\utility\player::_setsuit( "iw8_gxp_mp" );

    self._id_125A6 = 1;

    if ( level.completesmokinggunquest.ghostenableexecution )
        scripts\cp_mp\execution::_giveexecution( "execution_mp_universal_ref_variant_145" );
    else
        scripts\cp_mp\execution::_clearexecution();

    self _meth_87B1();
    _id_119EB( var_2, var_3, var_6 );
    self skydive_interrupt();
    self.laser_trap_combat = 5;
    self skydive_setbasejumpingstatus( 0 );
    self skydive_setdeploymentstatus( 0 );
    self skydive_beginfreefall();
    thread scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_8 );
    _id_11964( 1 );
    thread wp_watchdisownaction( var_8 );
    thread scripts\mp\gametypes\br.gsc::clampstepbulletdamage();
    thread x1ops3();

    if ( level.completesmokinggunquest.blueprintextract_cleanupwhennoavailablelocales )
        thread x1loadout();

    thread x1opsbink();
    thread wp_isactivewpzone();
    self disableexecutionvictim();
    scripts\mp\utility\perk::giveperk( "specialty_quieter" );
    scripts\mp\utility\perk::giveperk( "specialty_coldblooded" );
    scripts\mp\utility\perk::giveperk( "specialty_heartbreaker" );
    scripts\mp\utility\perk::giveperk( "specialty_noscopeoutline" );
    scripts\mp\utility\perk::giveperk( "specialty_tracker" );
    scripts\mp\utility\perk::giveperk( "specialty_tracker_jammer" );
    scripts\mp\utility\perk::giveperk( "specialty_sprintmelee" );
    scripts\mp\utility\perk::giveperk( "specialty_sprintads" );
    scripts\common\utility::allow_crate_use( 0 );
    scripts\common\utility::allow_vehicle_use( 0 );
    self lerpfovbypreset( "zombiedefault" );

    if ( level.completesmokinggunquest.oscope_temp )
        self setclientomnvar( "ui_deadsilence_overlay", 0 );

    thread winnerviewsetup();
    self setscriptablepartstate( "compassicon", "ghost" );

    if ( getdvarint( "scr_br_gxp_force_netfield_high_lod_zombies", 0 ) )
        self forcenetfieldhighlod( 1 );

    if ( isdefined( level._id_11FAF ) )
        scripts\mp\hud_message::showsplash( "br_reveal_stop_exfil" );
    else
        scripts\mp\hud_message::showsplash( "br_gametype_gxp_change" );

    if ( !scripts\mp\utility\perk::_hasperk( "specialty_pistoldeath" ) )
        scripts\mp\utility\perk::giveperk( "specialty_pistoldeath" );

    self.maxhealth = level.completesmokinggunquest.open_teleport_room_door;
    self.health = self.maxhealth;
    scripts\mp\gametypes\br_armor.gsc::packsplashparambits( 0 );
    self allowprone( 0 );
    self._id_11F59 = undefined;
    wait 3;

    foreach ( var_10 in level.teamdata[self.team]["players"] )
    {
        if ( self == var_10 )
        {
            if ( !isdefined( self.play_bank_intro_vo ) )
            {
                scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "player_into_ghost_first", var_10 );
                self.play_bank_intro_vo = 1;
            }
            else
                scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "player_into_ghost", var_10 );

            continue;
        }

        scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "teammate_into_ghost", var_10 );
    }
}

x1opsbink()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );
    var_0 = 0.5;

    for (;;)
    {
        var_1 = self calloutmarkerping_getgscobjectiveindex( 7 );
        var_2 = sortbydistance( level.completesmokinggunquest._id_11F60, self.origin );
        var_3 = 0;

        foreach ( var_5 in var_2 )
        {
            var_6 = undefined;

            if ( var_3 < level.completesmokinggunquest.start_preserverroom_spawners && level.completesmokinggunquest.start_player_links > 0 )
                var_6 = distance2dsquared( self.origin, var_5.origin );

            if ( var_3 < level.completesmokinggunquest.start_preserverroom_spawners && ( level.completesmokinggunquest.start_player_links == 0 || var_6 < level.completesmokinggunquest.start_player_links ) )
            {
                var_3++;
                scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_5.objidnum, self );
                continue;
            }

            var_3 = level.completesmokinggunquest.start_preserverroom_spawners;
            scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_5.objidnum, self );

            if ( var_1 != -1 && var_1 == var_5.objidnum )
                scripts\cp\equipment\cp_incendiarylauncher::calloutmarkerping_removecallout( 7 );
        }

        wait( var_0 );
    }
}

winnerviewsetup()
{
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );

    if ( level.completesmokinggunquest.oscope_sign_think )
    {
        self hudoutlinedisable();

        if ( !level.completesmokinggunquest.oscope_temp )
            self setscriptablepartstate( "headVFX", "zombieVision" );

        self visionsetnakedforplayer( "mp_don4_wz_ghost", 0 );
        wp_watchforsmokedisowned();
    }

    waitframe();

    if ( getdvarint( "scr_br_gxp_loop_zombie_fx", 0 ) )
        self setscriptablepartstate( "ghost", "on_loop" );
    else
        self setscriptablepartstate( "ghost", "on" );
}

wp_watchforsmokedisowned()
{
    foreach ( var_1 in level.players )
    {
        if ( !var_1 scripts\mp\gametypes\br_public.gsc::zombie() )
            scripts\mp\utility\outline::outlineenableforplayer( var_1, self, "outline_depth_zombievision", "top" );
    }
}

wp_isactivewpzone()
{
    level endon( "game_ended" );
    self endon( "ghost_unset" );
    self endon( "disconnect" );
    self.open_trap_room_door = undefined;

    for (;;)
    {
        if ( wp_watchgameend() )
        {
            if ( !isdefined( self.open_trap_room_door ) || !self.open_trap_room_door )
            {
                self.open_trap_room_door = 1;
                within_points();
            }
        }
        else if ( !isdefined( self.open_trap_room_door ) || self.open_trap_room_door )
        {
            self.open_trap_room_door = 0;
            withinprojectiondistance();
        }

        waitframe();
    }
}

wp_watchgameend()
{
    if ( !isdefined( level.br_circle ) || !isdefined( level.br_circle.dangercircleent ) )
        return 0;

    var_0 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
    var_1 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius();
    return distance2dsquared( var_0, self.origin ) > var_1 * var_1;
}

within_points()
{
    self notify( "ghost_enter_gas" );
    self unsetperk( "specialty_radarblip", 1 );
}

withinprojectiondistance()
{
    self notify( "ghost_exit_gas" );

    if ( level.completesmokinggunquest.openrightblimadoor >= 0 )
    {
        if ( level.completesmokinggunquest.openrightblimadoor == 0 )
            self setperk( "specialty_radarblip", 1 );
        else
            thread x1fin_removequestinstance();
    }
}

x1fin_removequestinstance()
{
    if ( level.completesmokinggunquest.openrightblimadoor <= 0 )
        return;

    self endon( "ghost_unset" );
    self endon( "ghost_enter_gas" );
    self endon( "disconnect" );
    level endon( "game_ended" );

    for (;;)
    {
        self setperk( "specialty_radarblip", 1 );
        wait( level.completesmokinggunquest.openscriptabledoors );
        self unsetperk( "specialty_radarblip", 1 );
        wait( level.completesmokinggunquest.openrightblimadoor );
    }
}

x1loadout()
{
    self endon( "disconnect" );
    self._id_125C0 = 1;
    self.radarmode = "normal_radar";
    self.hasradar = 1;
    self waittill( "ghost_unset" );
    self._id_125C0 = undefined;
    self.hasradar = 0;
}

x1ops3()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );

    for (;;)
    {
        if ( self issupersprinting() )
            self refreshsprinttime();

        waitframe();
    }
}

wp_watchdisownaction( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );
    wait 1;

    while ( !self isonground() )
    {
        x1opsentercalloutarea( var_0 );
        waitframe();
    }

    self setclientomnvar( "ui_br_altimeter_state", 0 );
    self skydive_interrupt();
    playfxontag( level._effect["zombie_splat"], self, "j_mainroot" );
    self playsoundtoplayer( "br_gov_ghost_infil_land", self, self );
    self playsound( "br_gov_ghost_infil_land_npc", self, self );
    self freezecontrols( 1 );
    var_1 = gettime() + 2000;

    while ( self getcurrentprimaryweapon().classname == "none" && gettime() < var_1 )
    {
        x1opsentercalloutarea( var_0 );
        waitframe();
    }

    var_2 = milestonephasepercent_vips( self, 0 );

    if ( !isdefined( var_2 ) )
        var_2 = ( 0, 0, 1 );

    var_3 = anglestoforward( self.angles );
    var_4 = vectortoangles( var_2 );
    var_5 = angleclamp180( var_4[0] + 90 );
    var_4 = ( 0, var_4[1], 0 );
    var_6 = anglestoforward( var_4 );
    var_7 = vectordot( var_6, var_3 );
    var_8 = var_7 * var_5;
    var_9 = getdvarint( "scr_br_gxp_zombie_splat_down_clamp", 20 );
    var_10 = getdvarint( "scr_br_gxp_zombie_splat_up_clamp", -70 );

    if ( var_8 > 0 )
        var_8 = min( var_9, var_8 );
    else
        var_8 = max( var_10, var_8 );

    self setplayerangles( ( var_8, self.angles[1], 0 ) );

    if ( self getcurrentprimaryweapon().classname != "none" )
        self forceplaygestureviewmodel( "ges_gxp_splat" );

    self playfx( level.completesmokinggunquest.oscope_ampl_think, self.origin );
    wait 1.5;
    self freezecontrols( 0 );
    self freezelookcontrols( 1 );
    self allowsprint( 0 );
    self skydive_setbasejumpingstatus( 0 );
    self skydive_setdeploymentstatus( 0 );
    wait 1;
    self freezelookcontrols( 0 );
    wait 1;
    x1opsentercalloutarea( var_0 );
    self allowsprint( 1 );
    thread x1fin_respawn();
}

x1fin_respawn()
{
    if ( !level.completesmokinggunquest.operator_unlock_ids )
        return;

    thread _id_119E2( level.completesmokinggunquest.open_exit_doors );
}

_id_119E2( var_0 )
{
    self notifyonplayercommand( "ghostAttack", "+attack" );
    self notifyonplayercommand( "ghostAttack", "+melee_zoom" );
    thread playerghostgestureinterruptwatcher();
    thread _id_11970( var_0 );
    thread _id_1196D( var_0 );
    thread _id_1196E( var_0 );

    if ( level.completesmokinggunquest.plunderrepositories )
        thread _id_11973( var_0 );

    thread _id_11971( var_0 );
    thread _id_11969( var_0 );

    foreach ( var_3, var_2 in var_0.powers )
    {
        if ( isdefined( var_0.powers[var_3]._id_129F4 ) )
            _id_13082( var_0.powers[var_3]._id_129F4, 2 );
    }
}

_id_13082( var_0, var_1 )
{
    var_2 = 0;
    var_3 = 0;

    switch ( var_0 )
    {
        case "jumpStatus":
            var_2 = 0;
            var_3 = 2;
            break;
        case "jumpProgress":
            var_2 = 2;
            var_3 = 7;
            break;
        case "spectralBlastStatus":
            var_2 = 9;
            var_3 = 2;
            break;
        case "spectralBlastProgress":
            var_2 = 11;
            var_3 = 7;
            break;
        case "teleportStatus":
            var_2 = 18;
            var_3 = 2;
            break;
        case "teleportProgress":
            var_2 = 20;
            var_3 = 7;
            break;
        case "numVaccine":
            var_2 = 27;
            var_3 = 2;
            break;
        case "inSafeZone":
            var_2 = 29;
            var_3 = 1;
            break;
        default:
            break;
    }

    if ( !isdefined( level.operator_reward_id ) )
        level.operator_reward_id = [];

    if ( !isdefined( level.operator_reward_id["ui_br_zombie_powers"] ) )
        level.operator_reward_id["ui_br_zombie_powers"] = 0;

    var_4 = int( pow( 2, var_3 ) ) - 1;
    var_5 = ( int( var_1 ) & var_4 ) << var_2;
    var_6 = ~( var_4 << var_2 );
    var_7 = self getclientomnvar( "ui_br_zombie_powers" );
    var_8 = var_7 & var_6;
    var_9 = var_8 + var_5;
    level.operator_reward_id["ui_br_zombie_powers"] = var_9;
    self setclientomnvar( "ui_br_zombie_powers", level.operator_reward_id["ui_br_zombie_powers"] );
}

_id_11969( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    scripts\engine\utility::_id_133F0( "death", "ghost_unset", "ghost_set" );
    self notifyonplayercommandremove( "ghostAttack", "+attack" );
    self notifyonplayercommandremove( "ghostAttack", "+melee_zoom" );
    thread _id_11966( var_0 );
    thread _id_1196B( var_0 );
    thread _id_1196C( var_0 );
    thread _id_1196A( var_0 );
}

_id_1196A( var_0 )
{
    if ( !isdefined( self._id_11B2F ) )
        return;

    if ( level.completesmokinggunquest.plunderrepositories )
    {
        foreach ( var_2 in self._id_11B2F )
        {
            if ( isdefined( var_2 ) )
            {
                if ( isdefined( var_2.bunker_loot_vaults ) )
                    var_2.bunker_loot_vaults scripts\mp\hud_util::destroyelem();

                var_2 destroy();
            }
        }
    }

    self._id_11B2F = undefined;
}

_id_1196B( var_0 )
{
    if ( isbot( self ) )
        return;

    foreach ( var_6, var_2 in var_0.powers )
    {
        foreach ( var_4 in var_2.calloutmarkerping_squadleaderbeaconkillforplayer )
            self notifyonplayercommandremove( var_6, var_4 );
    }
}

_id_1196C( var_0 )
{
    foreach ( var_3, var_2 in var_0.powers )
    {
        if ( isdefined( var_2.failstringsetup ) )
            self thread [[ var_2.failstringsetup ]]( var_0, var_3 );
    }
}

_id_11966( var_0 )
{
    if ( !isdefined( var_0 ) || !isdefined( self._id_11B2F ) )
        return;

    self notify( "disableCooldown" );

    foreach ( var_3, var_2 in var_0.powers )
    {
        if ( !isdefined( self._id_11B2F[var_3] ) )
            continue;

        self._id_11B2F[var_3].incooldown = 0;

        if ( level.completesmokinggunquest.plunderrepositories )
            self._id_11B2F[var_3].bunker_loot_vaults scripts\mp\hud_util::updatebar( 0, 0 );
        else
            self._id_11B2F[var_3].frac = 0;

        thread _id_11972( var_0, var_3 );
    }

    self.handlecommand_br = undefined;
    self.select_patrol_three_spawners = undefined;
}

_id_11972( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );
    self endon( "ghost_set" );
    self endon( "disableCooldown" );

    if ( !isdefined( self._id_11B2F[var_1] ) || istrue( self._id_11B2F[var_1].incooldown ) )
        return;

    var_2 = self._id_11B2F[var_1];

    if ( level.completesmokinggunquest._id_11B2E && var_2.frac > 0 )
    {
        self._id_11B2F[var_1].incooldown = 1;
        var_3 = var_0.powers[var_1].gamemodeoverriderestockrechargeperupdate;
        var_4 = "scr_br_gxp_power_cooldown_" + var_1;

        if ( getdvarint( var_4, 0 ) != 0 )
            var_3 = getdvarint( var_4, 0 );

        thread _id_11A07( var_0, var_1, var_3, int( var_2.frac * 100 ) );
        var_5 = var_2.frac;
        var_3 = var_3 * var_5;

        if ( level.completesmokinggunquest.plunderrepositories )
        {
            var_2.bunker_loot_vaults.bar.color = ( 1, 0.6, 0 );
            var_2.bunker_loot_vaults.bar scaleovertime( var_3, 0, var_2.bunker_loot_vaults.height );
        }

        wait( var_3 );

        if ( var_1 == "spectralBlast" )
            var_6 = "ui_zxp_restock_emp";
        else if ( var_1 == "teleport" )
            var_6 = "ui_zxp_recharge_tport";
        else
            var_6 = "ui_zxp_restock_" + var_1;

        self playlocalsound( var_6 );
        self._id_11B2F[var_1].incooldown = 0;
    }
    else
    {
        if ( level.completesmokinggunquest.plunderrepositories )
            var_2.bunker_loot_vaults scripts\mp\hud_util::updatebar( 0, 0 );
        else
            var_2.frac = 0;

        thread _id_11A07( var_0, var_1, 0, 0 );
    }

    if ( level.completesmokinggunquest.plunderrepositories )
        var_2.bunker_loot_vaults.bar.color = ( 1, 1, 1 );

    if ( isdefined( var_0.powers[var_1]._id_11B0F ) )
        self [[ var_0.powers[var_1]._id_11B0F ]]( var_0, var_1 );
}

_id_11A07( var_0, var_1, var_2, var_3 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );
    self endon( "ghost_set" );
    self endon( "disableCooldown" );

    if ( !isdefined( var_0.powers[var_1]._id_129F4 ) || !isdefined( var_0.powers[var_1]._id_11BBF ) )
        return;

    _id_13082( var_0.powers[var_1]._id_129F4, 1 );
    var_4 = var_2 * 1000 * var_3 / 100;
    var_5 = gettime();
    var_6 = var_5 + var_4;

    while ( gettime() < var_6 )
    {
        var_7 = gettime();
        var_8 = ( var_6 - gettime() ) / var_4;
        var_9 = var_8 * var_3;
        _id_13082( var_0.powers[var_1]._id_11BBF, int( var_9 ) );
        waitframe();
    }

    _id_13082( var_0.powers[var_1]._id_11BBF, 0 );
    _id_13082( var_0.powers[var_1]._id_129F4, 2 );
}

_id_11971( var_0 )
{
    foreach ( var_3, var_2 in var_0.powers )
    {
        if ( isdefined( var_2._id_129E4 ) )
            self thread [[ var_2._id_129E4 ]]( var_0, var_3 );
    }
}

_id_11973( var_0 )
{
    level endon( "game_ended" );
    self endon( "ghost_unset" );
    self endon( "ghost_set" );
    self endon( "death_or_disconnect" );

    if ( isbot( self ) )
        return;

    waittillframeend;
    var_1 = scripts\engine\utility::is_player_gamepad_enabled();

    for (;;)
    {
        var_2 = scripts\engine\utility::is_player_gamepad_enabled();

        if ( var_2 != var_1 )
        {
            var_1 = var_2;

            if ( var_2 )
            {
                foreach ( var_5, var_4 in var_0.powers )
                {
                    if ( isdefined( var_4.set_spawner_type ) )
                        self._id_11B2F[var_5].label = var_4.label;
                }
            }
            else
            {
                foreach ( var_5, var_4 in var_0.powers )
                {
                    if ( isdefined( var_4.set_spawner_type ) )
                        self._id_11B2F[var_5].label = var_4.set_spawner_type;
                }
            }
        }

        waitframe();
    }
}

_id_1196E( var_0 )
{
    foreach ( var_3, var_2 in var_0.powers )
        thread _id_1196F( var_0, var_3 );
}

_id_1196F( var_0, var_1 )
{
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );
    self endon( "ghost_set" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( var_1 );
        waittillframeend;

        if ( isdefined( self._id_11B2F[var_1] ) && self._id_11B2F[var_1].incooldown )
        {
            zvelscale();
            continue;
        }

        if ( self isinexecutionattack() )
            continue;

        self thread [[ var_0.powers[var_1].func ]]( var_0, var_1 );
    }
}

zvelscale()
{
    if ( !isdefined( self.handlecommand_br ) || gettime() > self.handlecommand_br )
    {
        self playlocalsound( "br_pickup_deny" );
        self.handlecommand_br = gettime() + 1000;
    }
}

_id_1196D( var_0 )
{
    var_1 = 200;
    var_2 = 18;
    var_3 = var_1;
    self._id_11B2F = [];

    foreach ( var_6, var_5 in var_0.powers )
    {
        if ( isdefined( var_5.label ) )
        {
            if ( level.completesmokinggunquest.plunderrepositories )
                self._id_11B2F[var_6] = _id_11968( var_5.label, var_5.set_spawner_type, var_3, var_5._id_12299 );
            else
            {
                self._id_11B2F[var_6] = spawnstruct();
                self._id_11B2F[var_6].frac = 0;
            }

            self._id_11B2F[var_6].incooldown = 0;
            var_3 = var_3 + var_2;
        }
    }
}

_id_11968( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\hud_util::createfontstring( "default", 1.5 );
    var_4.x = 15;
    var_4.y = var_2;
    var_4.alignx = "left";
    var_4.aligny = "top";
    var_4.horzalign = "left_adjustable";
    var_4.vertalign = "top_adjustable";
    var_4.alpha = var_3;
    var_4.glowalpha = 0;
    var_4.hidewheninmenu = 1;
    var_4.archived = 0;

    if ( isdefined( var_1 ) && !scripts\engine\utility::is_player_gamepad_enabled() )
        var_4.label = var_1;
    else if ( isdefined( var_0 ) )
        var_4.label = var_0;

    var_5 = scripts\mp\hud_util::createbar( ( 1, 1, 1 ), 160, 14 );
    var_5.x = 13;
    var_5.y = var_2;
    var_5.alignx = "left";
    var_5.aligny = "top";
    var_5.horzalign = "left_adjustable";
    var_5.vertalign = "top_adjustable";
    var_5.alpha = var_3;
    var_5 _id_124A2();
    var_5.archived = 0;
    var_5.hidewheninmenu = 1;
    var_5.bar.archived = 0;
    var_5.bar.hidewheninmenu = 1;
    var_5.bar.alpha = var_3;
    var_4.bunker_loot_vaults = var_5;
    return var_4;
}

_id_124A2( var_0, var_1, var_2, var_3 )
{
    self.bar.horzalign = self.horzalign;
    self.bar.vertalign = self.vertalign;
    self.bar.alignx = "left";
    self.bar.aligny = self.aligny;
    self.bar.y = self.y + 2;
    self.bar.x = self.x + 2;
    scripts\mp\hud_util::updatebar( self.bar.frac );
}

_id_11970( var_0 )
{
    if ( isbot( self ) )
        return;

    foreach ( var_6, var_2 in var_0.powers )
    {
        foreach ( var_4 in var_2.calloutmarkerping_squadleaderbeaconkillforplayer )
            self notifyonplayercommand( var_6, var_4 );
    }
}

milestonephasepercent_vips( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_2 = self;
    else
        var_2 = var_0;

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    var_3 = [ var_2 ];
    var_4 = [ self.origin ];

    for ( var_5 = -1.0; var_5 <= 1.0; var_5 = var_5 + 2.0 )
    {
        for ( var_6 = -1.0; var_6 <= 1.0; var_6 = var_6 + 2.0 )
        {
            var_7 = var_2 getpointinbounds( var_5, var_6, 0.0 );
            var_7 = ( var_7[0], var_7[1], self.origin[2] );
            var_4[var_4.size] = var_7;
        }
    }

    var_8 = ( 0, 0, 0 );
    var_9 = 0;

    foreach ( var_11 in var_4 )
    {
        var_12 = scripts\engine\trace::_bullet_trace( var_11 + ( 0, 0, 4 ), var_11 + ( 0, 0, -16 ), 0, var_3 );
        var_13 = var_12["fraction"] > 0.0 && var_12["fraction"] < 1;

        if ( var_13 )
        {
            var_8 = var_8 + var_12["normal"];
            var_9++;
        }
    }

    if ( var_9 > 0 )
    {
        var_8 = var_8 / var_9;
        return var_8;
    }
    else
        return undefined;
}

x1opsentercalloutarea( var_0 )
{
    if ( !self hasweapon( var_0 ) )
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_0, undefined, undefined, 1 );

    if ( self getcurrentprimaryweapon().classname == "none" )
        thread scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_0 );
}

_id_119EB( var_0, var_1, var_2 )
{
    scripts\mp\gametypes\br_gulag.gsc::_id_119F1( var_2, var_1 );
    var_3 = spawn( "script_model", var_2 );
    var_3 setmodel( "tag_origin" );
    var_3.angles = var_1;
    var_3 hide();
    var_3 showtoplayer( self );
    self playerlinktoabsolute( var_3, "tag_origin" );
    self playerhide();
    thread scripts\mp\gametypes\br_gulag.gsc::weapon_switch_hint( var_3 );
    waitframe();
    scripts\mp\gametypes\br_public.gsc::_id_11A13();
    scripts\mp\gametypes\br_public.gsc::weapon_xp_iw8_ar_kilo433();
    var_3.origin = var_0;
    waitframe();
    self unlink();
    self clearsoundsubmix( "deaths_door_mp" );
    self clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 2 );
    self clearclienttriggeraudiozone( 1 );
    self playershow();
    var_4 = 0;

    if ( isdefined( level.validtousesticker ) )
        var_4 = level.validtousesticker;

    thread scripts\cp_mp\parachute::startfreefall( var_4, 0, undefined, undefined, 1 );
    self setclientomnvar( "ui_br_transition_type", 0 );
    self setclientomnvar( "ui_show_spectateHud", -1 );
    scripts\mp\gametypes\br_gulag.gsc::_id_11F30();
    wait 0.5;
    scripts\mp\gametypes\br_gulag.gsc::gulagfadefromblack();
    waitframe();
    var_3 delete();
    self notify( "can_show_splashes" );
}

x1fin_think( var_0, var_1 )
{
    var_2 = var_0;

    if ( level.completesmokinggunquest.oscope_ampl )
    {
        var_3 = getdvarint( "scr_br_gxp_respawnGhostHeight", 10000 );
        var_4 = ( 0, 0, var_3 );
        var_0 = scripts\mp\gametypes\br.gsc::getoffsetspawnorigin( var_0, var_4 );
        var_5 = spawnstruct();
        var_5.origin = var_0;
        var_5.angles = var_1;
        var_5.height = var_3;
        var_2 = scripts\mp\gametypes\br_gulag.gsc::_id_11977( var_5 );
    }
    else
    {
        self setpredictedstreamloaddist( 0.0 );
        scripts\mp\gametypes\br_public.gsc::_id_119E7( var_2 );
    }

    return [ var_0, var_2 ];
}

weaponpickups()
{
    var_0 = 50;
    var_1 = 10000;
    [var_3, var_4] = wp_loop();

    if ( isdefined( var_3 ) )
        return [ var_3, var_4 ];

    if ( !isdefined( level.br_circle ) || !isdefined( level.br_circle.dangercircleent ) || istrue( level.completesmokinggunquest.oscar_hack ) )
        return [ self.origin, self getplayerangles() ];

    var_5 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius();
    var_6 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
    var_7 = var_5 + var_0;
    var_8 = ( self.origin[0], self.origin[1], 0 );
    var_9 = vectornormalize( var_8 - var_6 );
    [var_11, var_4] = onprematchstarted2( var_6, var_9, var_7 );

    if ( !isdefined( var_11 ) )
    {
        var_9 = var_9 * -1;
        [var_11, var_4] = onprematchstarted2( var_6, var_9, var_7 );
    }

    if ( !isdefined( var_11 ) )
    {
        var_9 = ( 1, 0, 0 );
        [var_11, var_4] = onprematchstarted2( var_6, var_9, var_7 );
    }

    if ( !isdefined( var_11 ) )
    {
        var_9 = ( -1, 0, 0 );
        [var_11, var_4] = onprematchstarted2( var_6, var_9, var_7 );
    }

    if ( !isdefined( var_11 ) )
    {
        var_9 = ( 0, 1, 0 );
        [var_11, var_4] = onprematchstarted2( var_6, var_9, var_7 );
    }

    if ( !isdefined( var_11 ) )
    {
        var_9 = ( 0, -1, 0 );
        [var_11, var_4] = onprematchstarted2( var_6, var_9, var_7 );
    }

    if ( !isdefined( var_11 ) )
    {
        var_11 = self.origin;
        var_4 = self.angles;
    }

    var_3 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_11, var_1 );
    return [ var_3, var_4 ];
}

onprematchstarted2( var_0, var_1, var_2 )
{
    var_3 = var_0 + var_1 * var_2;

    if ( scripts\mp\gametypes\br_c130.gsc::ispointinbounds( var_3, 1 ) )
    {
        var_4 = vectortoangles( var_1 * -1 );
        return [ var_3, var_4 ];
    }
    else
        return [ undefined, undefined ];
}

wp_loop()
{
    var_0 = undefined;
    var_1 = undefined;
    var_2 = getdvarfloat( "scr_br_gxp_respawnTeamOffset", 10000 );

    if ( var_2 >= 0 )
    {
        var_3 = scripts\mp\gametypes\br_gulag.gsc::weaponpickupflyoutbit( 0 );

        if ( isdefined( var_3 ) )
        {
            var_0 = oldkey( var_3.origin, var_2 );
            var_0 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_0 );
            var_1 = scripts\mp\gametypes\br_gulag.gsc::mousetrapwatcher( var_0, var_3.origin );
        }
    }

    return [ var_0, var_1 ];
}

oldkey( var_0, var_1 )
{
    var_2 = 3.14159;
    var_3 = scripts\mp\gametypes\br_circle.gsc::getsafecircleorigin();
    var_4 = vectornormalize( var_0 - var_3 );
    var_5 = vectortoangles( var_4 );
    var_6 = randomfloatrange( getdvarfloat( "scr_br_respawn_rand_ang_min", 10.0 ), getdvarfloat( "scr_br_respawn_rand_ang_max", 60.0 ) );
    var_7 = var_4;
    var_8 = var_0 + var_7 * var_1;

    if ( scripts\mp\gametypes\br_c130.gsc::ispointinbounds( var_8, 0 ) )
        return var_8;

    var_7 = var_7 * -1;
    var_8 = var_0 + var_7 * var_1;

    if ( scripts\mp\gametypes\br_c130.gsc::ispointinbounds( var_8, 0 ) )
        return var_8;

    var_7 = vectornormalize( var_3 - var_0 );
    var_8 = var_0 + var_7 * var_1;

    if ( scripts\mp\gametypes\br_c130.gsc::ispointinbounds( var_8, 0 ) )
        return var_8;

    var_9 = var_1;
    var_10 = distance2d( var_0, var_3 );
    var_11 = var_9 / var_10;

    if ( var_11 > var_2 )
        var_11 = var_2;

    var_12 = var_11 * 180 / var_2;
    var_8 = rotatepointaroundvector( ( 0, 0, 1 ), var_0 - var_3, var_12 ) + var_3;

    if ( scripts\mp\gametypes\br_c130.gsc::ispointinbounds( var_8, 0 ) )
        return var_8;

    var_8 = scripts\mp\gametypes\br_circle.gsc::getrandompointincircle( var_0, var_1 );

    if ( scripts\mp\gametypes\br_c130.gsc::ispointinbounds( var_8, 0 ) )
        return var_8;

    return undefined;
}

_id_11A14()
{
    if ( scripts\mp\gametypes\br_public.gsc::zombie() )
        self waittill( "spawnGhost" );
}

_id_119AC( var_0 )
{
    self.retry_no_votes = var_0;
}

_id_119AF( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 4096;
    else
        self.game_extrainfo = self.game_extrainfo & ~4096;
}

_id_11A0C( var_0 )
{
    foreach ( var_2 in level.completesmokinggunquest._id_11F60 )
    {
        if ( isdefined( var_2.visuals[0] ) )
            var_2.visuals[0] _id_11F62( self );
    }
}

_id_11F62( var_0 )
{
    if ( var_0 scripts\mp\gametypes\br_public.gsc::zombie() )
    {
        self showtoplayer( var_0 );

        if ( !level.completesmokinggunquest._id_12B5D )
            self enableplayeruse( var_0 );
    }
    else
    {
        self hidefromplayer( var_0 );

        if ( !level.completesmokinggunquest._id_12B5D )
            self disableplayeruse( var_0 );
    }
}

x1questmanager()
{
    foreach ( var_1 in level.completesmokinggunquest._id_11F60 )
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_1.objidnum, self );
}

_id_119AE( var_0, var_1 )
{
    self.rotateeffect = var_0;

    if ( !isdefined( level.completesmokinggunquest.ghostplayers ) )
        level.completesmokinggunquest.ghostplayers = [];

    _id_119AF( var_0 );

    if ( isdefined( level.completesmokinggunquest.start_firing_minigun ) )
        _id_11A0C( var_0 );

    if ( var_0 )
    {
        self notify( "ghost_set" );

        if ( level.completesmokinggunquest.plunderrepositories )
            x1ops();

        self.trial_ui_set_lap = 0;
        self.bcdisabled = 1;
        self.maderecentkill = 1;
        _id_119AC( 0 );
        scripts\cp\equipment\cp_incendiarylauncher::calloutmarkerping_removecallout( 7 );
        scripts\cp\equipment\cp_incendiarylauncher::calloutmarkerping_removecallout( 9 );
        scripts\cp\equipment\cp_incendiarylauncher::calloutmarkerping_removecallout( 10 );
        scripts\cp\equipment\cp_incendiarylauncher::calloutmarkerping_removecallout( 11 );
        level.completesmokinggunquest.ghostplayers[level.completesmokinggunquest.ghostplayers.size] = self;
        _id_13082( "numVaccine", self.trial_ui_set_lap );
    }
    else
    {
        self notify( "ghost_unset" );
        self.trial_ui_set_lap = undefined;
        self.bcdisabled = undefined;
        self.maderecentkill = undefined;
        scripts\cp\equipment\cp_incendiarylauncher::calloutmarkerping_removecallout( 7 );

        if ( isdefined( level.completesmokinggunquest.start_firing_minigun ) )
            x1questmanager();

        level.completesmokinggunquest.ghostplayers = scripts\engine\utility::array_remove( level.completesmokinggunquest.ghostplayers, self );
    }

    level notify( "players_remaining_changed" );
    self notify( "stop_battlechatter" );

    if ( istrue( var_1 ) )
    {
        self lerpfovbypreset( "default" );

        if ( level.completesmokinggunquest.oscope_temp )
            thread scripts\mp\supers\super_deadsilence::superdeadsilence_endhudsequence();
    }
}

x1ops()
{
    var_0 = -60;
    var_1 = 120;
    var_2 = 180;
    self.plunderforextract = weapon_xp_iw8_ar_tango21( var_0, var_1, "right", "middle", "center", "middle", &"MP_ZXP/NUM_CONSUMED", 0 );
    self.plunderfxondropthreashold = weapon_xp_iw8_ar_tango21( var_0, var_1, "left", "middle", "center", "middle", &"MP_ZXP/NUM_TO_CONSUME", level.completesmokinggunquest.openrequested );
    self.plunderatcapacity = weapon_xp_iw8_ar_tango21( 0, var_2, "center", "middle", "center", "middle", &"MP_ZXP/ZOMBIE" );
}

weapon_xp_iw8_ar_tango21( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = scripts\mp\hud_util::createfontstring( "default", 1.5 );
    var_8.x = var_0;
    var_8.y = var_1;
    var_8.alignx = var_2;
    var_8.aligny = var_3;
    var_8.horzalign = var_4;
    var_8.vertalign = var_5;
    var_8.alpha = 0;
    var_8.glowalpha = 0;
    var_8.hidewheninmenu = 1;
    var_8.archived = 0;

    if ( isdefined( var_6 ) )
        var_8.label = var_6;

    if ( isdefined( var_7 ) )
        var_8 setvalue( var_7 );

    return var_8;
}

x1ops2( var_0 )
{
    var_1 = self.team;
    scripts\mp\utility\teams::_id_1314D( "mode", var_1, self );
    _id_11A01();

    if ( istrue( var_0 ) )
        [[ level.updategameevents ]]();
}

postupdategameeventsinternal()
{
    level notify( "post_update_game_events_internal" );
    level endon( "post_update_game_events_internal" );

    if ( istrue( level.br_debugsolotest ) || level.gameended )
        return;

    var_0 = 1000;

    if ( isdefined( level.brgxplastghostexecutetime ) && level.brgxplastghostexecutetime + var_0 > gettime() )
        wait 1;

    var_1 = 0;
    var_2 = [];
    var_3 = [];

    foreach ( var_5 in level.teamnamelist )
    {
        var_6 = level.teamdata[var_5]["teamCount"];

        if ( var_6 > 0 )
        {
            if ( isdefined( level.teamdata[var_5]["aliveCountHuman"] ) && level.teamdata[var_5]["aliveCountHuman"] > 0 )
            {
                if ( ( level.completesmokinggunquest.select_hostage_room_one_spawners || level.completesmokinggunquest.select_equipment_spawners == 0 ) && var_3.size > 0 )
                    return;

                var_3[var_3.size] = var_5;
                var_1 = var_1 + level.teamdata[var_5]["aliveCountHuman"];
                continue;
            }

            if ( level.teamdata[var_5]["aliveCount"] > 0 )
                var_2[var_2.size] = var_5;
        }
    }

    if ( var_3.size > 1 )
        return;

    var_8 = scripts\mp\utility\script::quicksort( var_2, ::_id_1267D );

    for ( var_9 = 0; var_9 < var_8.size; var_9++ )
    {
        var_5 = var_8[var_9];
        var_10 = var_9 + 2;
        thread scripts\mp\gametypes\br.gsc::update_ai_volumes( var_5, var_10, 0, 1 );
        var_11 = scripts\mp\utility\teams::getfriendlyplayers( var_5 );

        foreach ( var_13 in var_11 )
        {
            var_13 scripts\cp_mp\utility\game_utility::_id_1238F( var_10 );

            if ( isalive( var_13 ) )
            {
                var_13 setscriptablepartstate( "ghost", "off" );
                var_13 playerhide();
            }
        }
    }

    var_15 = var_3[0];

    foreach ( var_13 in level.players )
    {
        if ( var_13 scripts\mp\gametypes\br_public.gsc::zombie() )
        {
            if ( var_13.team != var_15 )
            {
                var_13 allowmovement( 0 );
                var_13 allowmelee( 0 );
            }

            if ( var_13 scripts\mp\utility\perk::_hasperk( "specialty_tracker" ) )
                var_13 scripts\mp\utility\perk::removeperk( "specialty_tracker" );
        }

        var_13.play_approach_building_two = 1;
    }

    thread scripts\mp\gamelogic::endgame( var_15, game["end_reason"]["enemies_eliminated"] );
}

_id_11B23()
{
    level thread postupdategameeventsinternal();
}

_id_123E4( var_0 )
{
    level.teamdata[var_0]["lastGhostTime"] = gettime();
}

_id_1267D( var_0, var_1 )
{
    var_2 = level.teamdata[var_0]["lastGhostTime"];
    var_3 = level.teamdata[var_1]["lastGhostTime"];
    return var_2 >= var_3;
}

_id_127E1( var_0 )
{
    if ( istrue( var_0.br_infilstarted ) && scripts\mp\flags::gameflag( "prematch_done" ) && var_0 scripts\mp\gametypes\br_public.gsc::zombie() )
    {
        var_0 _id_1197B();
        return 1;
    }

    return 0;
}

addtoteamlives( var_0, var_1 )
{
    var_0 _id_11A01();
}

removefromteamlives( var_0, var_1 )
{
    var_0 _id_11A01();
}

_id_11A01()
{
    var_0 = self.team;
    level.teamdata[var_0]["aliveCountHuman"] = 0;

    foreach ( var_2 in level.teamdata[var_0]["alivePlayers"] )
    {
        if ( !var_2 scripts\mp\gametypes\br_public.gsc::zombie() && !var_2 z_below_check() )
            level.teamdata[var_0]["aliveCountHuman"]++;
    }
}

z_below_check()
{
    return istrue( self.retry_no_votes );
}

_id_1244E()
{
    if ( !level.completesmokinggunquest.operator_unlock_ids )
        return;

    level.completesmokinggunquest.open_exit_doors = spawnstruct();
    level.completesmokinggunquest.open_exit_doors.powers = [];
    any_player_within_distance2d( level.completesmokinggunquest.open_exit_doors, "jump", [ "+speed_throw", "+toggleads_throw", "+ads_akimbo_accessible" ], ::wrapindex, 0, undefined, ::wz_tease, undefined, &"MP_GXP/CHARGED_JUMP", undefined, 6, "jumpStatus", "jumpProgress" );
    any_player_within_distance2d( level.completesmokinggunquest.open_exit_doors, "jumpStop", [ "-speed_throw", "-toggleads_throw", "-ads_akimbo_accessible" ], ::x1circletime, 0 );
    any_player_within_distance2d( level.completesmokinggunquest.open_exit_doors, "teleport", "+smoke", ::x1ops4, 0, undefined, undefined, undefined, &"MP_GXP/TELEPORT", undefined, 15, "teleportStatus", "teleportProgress" );
    any_player_within_distance2d( level.completesmokinggunquest.open_exit_doors, "spectralBlast", "+frag", ::x1ops1, 0, undefined, undefined, undefined, &"MP_GXP/SCREAM", undefined, 15, "spectralBlastStatus", "spectralBlastProgress" );

    if ( getdvarint( "scr_br_gxp_bumper_ping_support", 1 ) )
        any_player_within_distance2d( level.completesmokinggunquest.open_exit_doors, "gas_or_emp", [ "+equip_toggle_throw" ], ::x1ops5, 0, undefined, ::x1ops6 );
}

any_player_within_distance2d( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    var_13 = "scr_br_gxp_power_" + var_1;

    if ( getdvarint( var_13, 1 ) == 0 )
        return;

    if ( isstring( var_2 ) )
        var_2 = [ var_2 ];

    var_0.powers[var_1] = spawnstruct();
    var_0.powers[var_1].calloutmarkerping_squadleaderbeaconkillforplayer = var_2;
    var_0.powers[var_1].func = var_3;
    var_0.powers[var_1]._id_129E4 = var_5;
    var_0.powers[var_1].failstringsetup = var_6;
    var_0.powers[var_1]._id_11B0F = var_7;
    var_0.powers[var_1].label = var_8;
    var_0.powers[var_1].set_spawner_type = var_9;
    var_0.powers[var_1].gamemodeoverriderestockrechargeperupdate = var_10;
    var_0.powers[var_1]._id_129F4 = var_11;
    var_0.powers[var_1]._id_11BBF = var_12;
    var_0.powers[var_1]._id_12299 = var_4;
}

playerghostgestureinterruptwatcher()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );

    for (;;)
    {
        self waittill( "ghostAttack" );

        if ( self isgestureplaying() && !istrue( self.ghostsuperjump ) )
        {
            self stopgestureviewmodel( "ges_gxp_superjump", 0, 1 );
            self stopgestureviewmodel( "ges_gxp_scream" );
            self stopgestureviewmodel( "ges_gxp_teleport" );
        }
    }
}

wrapindex( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );
    self endon( "playerGhostJumpStop" );
    var_2 = -1;

    if ( write_to_dlog_runtime_struct_data() )
    {
        zvelscale();
        return;
    }

    var_3 = getdvarfloat( "scr_br_gpx_powers_jump_charge_rate", 1.0 );
    var_4 = getdvarfloat( "scr_br_gxp_powers_jump_min_frac", 0.25 );
    var_5 = getdvarint( "scr_br_gxp_powers_jump_max_hold_time", var_2 );
    var_6 = var_3 * level.framedurationseconds;
    self.select_patrol_nine_spawners = 0.0;
    self allowmelee( 0 );
    self disableoffhandweapons();
    self.ghostsuperjump = 1;

    while ( self ismantling() || self isthrowinggrenade() || self ismeleeing() || scripts\mp\utility\weapon::grenadeinpullback() )
        waitframe();

    thread wp_playimpactsound();
    thread _id_12AD4();
    var_7 = undefined;
    var_8 = 0;

    if ( !isdefined( self.select_patrol_three_spawners ) || gettime() > self.select_patrol_three_spawners )
    {
        self playlocalsound( "ui_zxp_charge_jump_start" );
        self.select_patrol_three_spawners = gettime() + 500;
    }

    if ( isdefined( var_0.powers[var_1]._id_129F4 ) )
        _id_13082( var_0.powers[var_1]._id_129F4, 0 );

    while ( !write_to_dlog_runtime_struct_data() )
    {
        if ( level.completesmokinggunquest.plunderrepositories )
            self._id_11B2F[var_1].bunker_loot_vaults scripts\mp\hud_util::updatebar( self.select_patrol_nine_spawners, 0 );
        else
            self._id_11B2F[var_1].frac = self.select_patrol_nine_spawners;

        var_9 = self.select_patrol_nine_spawners;
        self.select_patrol_nine_spawners = self.select_patrol_nine_spawners + var_6;

        if ( self.select_patrol_nine_spawners >= 1 )
        {
            self.select_patrol_nine_spawners = 1.0;

            if ( var_5 >= 0 )
            {
                if ( !isdefined( var_7 ) )
                {
                    var_7 = gettime() + var_5 * 1000;

                    if ( level.completesmokinggunquest.plunderrepositories )
                        thread x1airstrikemanager( var_1, var_5 );
                }

                if ( gettime() >= var_7 )
                    break;
            }
        }

        if ( level.completesmokinggunquest.plunderrepositories && var_9 < var_4 && self.select_patrol_nine_spawners >= var_4 )
            self._id_11B2F[var_1].bunker_loot_vaults.bar.color = ( 0, 1, 0 );

        if ( var_9 < 1 && self.select_patrol_nine_spawners >= 1 )
            self playlocalsound( "ui_zxp_charge_jump_full" );

        if ( isdefined( var_0.powers[var_1]._id_11BBF ) )
        {
            var_8 = max( int( self.select_patrol_nine_spawners * 100 ), 0 );
            _id_13082( var_0.powers[var_1]._id_11BBF, var_8 );
        }

        waitframe();
    }

    thread wztrain_info( var_0, var_1 );
}

_id_12AD4()
{
    var_0 = self;
    var_0 endon( "death_or_disconnect" );
    var_0 notify( "applyFOVPresentation" );
    var_0 endon( "applyFOVPresentation" );
    var_0 lerpfovbypreset( "zombiearcade" );
    var_0 waittill( "endSuperJumpFov" );
    var_0 lerpfovbypreset( "zombiedefault" );
}

write_to_dlog_runtime_struct_data()
{
    return self getstance() == "prone" || istrue( self.usingascender );
}

wp_playimpactsound()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );
    self endon( "playerGhostJumpStop" );

    if ( self isgestureplaying( "ges_gxp_superjumpcharge" ) )
        return;

    while ( self ismantling() || self isthrowinggrenade() || self ismeleeing() || scripts\mp\utility\weapon::grenadeinpullback() )
        waitframe();

    self forceplaygestureviewmodel( "ges_gxp_superjumpcharge" );

    while ( self isgestureplaying( "ges_gxp_superjumpcharge" ) )
    {
        if ( self isonladder() )
        {
            self stopgestureviewmodel( "ges_gxp_superjumpcharge" );
            break;
        }

        waitframe();
    }
}

x1airstrikemanager( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );
    self endon( "playerGhostJumpStop" );
    self endon( "playerGhostJumpChargeEnd" );

    if ( var_1 <= 0 )
        return;

    var_2 = scripts\mp\gametypes\br_circle.gsc::br_isplayerbeforeinitialinfildeploy( var_1, int( var_1 * 5 ), 1 );
    var_3 = 1;

    for ( var_4 = 0; var_4 < var_2.size; var_4++ )
    {
        if ( var_3 )
            self._id_11B2F[var_0].bunker_loot_vaults.bar.color = ( 1, 0, 0 );
        else
            self._id_11B2F[var_0].bunker_loot_vaults.bar.color = ( 0, 1, 0 );

        wait( var_2[var_4] );
        var_3 = !var_3;
    }
}

wztrain_info( var_0, var_1 )
{
    self stopgestureviewmodel( "ges_gxp_superjumpcharge" );
    self notify( "playerGhostJumpChargeEnd" );
    self notify( "playerGhostJumpStop" );
    var_2 = getdvarfloat( "scr_br_gxp_powers_jump_min_frac", 0.25 );
    var_3 = getdvarint( "scr_br_gxp_powers_jump_min_frac_refund", 1 );

    if ( self.select_patrol_nine_spawners >= var_2 && !write_to_dlog_runtime_struct_data() && x1fin_ontimerexpired() && !self ismantling() )
    {
        self playsoundtoplayer( "br_gov_ghost_jump_plr", self, self );
        self playsound( "br_gov_ghost_jump_3p", self, self );
        var_4 = getdvarfloat( "scr_br_gxp_powers_jump_velocity", 1300 );
        var_5 = self getplayerangles();
        thread wp_watchforflaredisowned();
        wavesv_finitemode( var_5, var_4, self.select_patrol_nine_spawners );
        thread _id_11A00();
        thread weapon_xp_iw8_ar_falpha();
        self.handlecommand_br = undefined;
        self.select_patrol_three_spawners = undefined;
    }
    else if ( var_3 )
    {
        if ( level.completesmokinggunquest.plunderrepositories )
            self._id_11B2F[var_1].bunker_loot_vaults.bar.frac = 0;
        else
            self._id_11B2F[var_1].frac = 0;

        _id_13082( var_0.powers[var_1]._id_11BBF, 0 );
        self enableoffhandweapons();
        self allowmelee( 1 );
        self notify( "endSuperJumpFov" );
        zvelscale();
    }
    else
        zvelscale();

    wz_tease( var_0, var_1, 1 );
}

wavesv_finitemode( var_0, var_1, var_2, var_3 )
{
    var_4 = 1;
    var_5 = ( 0, 0, 20 );

    if ( !isdefined( var_3 ) )
        var_3 = var_5;

    var_6 = var_0;
    var_7 = ( 0, 0, 1 );
    var_8 = ( 1, 0, 0 );

    if ( getdvarint( "scr_br_gxp_powers_jump_pitch_correction", var_4 ) )
    {
        var_7 = milestonephasepercent_vips();

        if ( !isdefined( var_7 ) )
            var_7 = ( 0, 0, 1 );

        var_9 = ( 0, var_6[1], 0 );
        var_10 = anglestoright( var_9 );
        var_8 = vectorcross( var_7, var_10 );
        var_11 = vectortoangles( var_8 );
        var_12 = angleclamp180( var_11[0] );
        var_13 = -85;
        var_14 = var_12;
        var_15 = var_6[0];

        if ( var_15 > var_12 )
            var_15 = var_12;

        var_16 = getdvarfloat( "scr_br_gxp_powers_jump_pitch_correction_at_max", -45.0 );
        var_17 = getdvarfloat( "scr_br_gxp_powers_jump_pitch_correction_at_min", 0.0 );
        var_18 = ( var_15 - var_13 ) / ( var_14 - var_13 );
        var_19 = var_17 + var_18 * ( var_16 - var_17 );
        var_6 = ( var_15 + var_19, var_6[1], var_6[2] );
    }

    var_20 = getdvarfloat( "scr_br_gxp_powers_jump_pitch_add", 0.0 );

    if ( var_20 != 0.0 )
        var_6 = ( var_6[0] + var_20, var_6[1], var_6[2] );

    var_21 = anglestoforward( var_6 );
    var_22 = var_21 * var_2 * var_1;
    var_23 = self.origin + var_3;
    self setorigin( var_23 );
    self setvelocity( var_22 );
    glassradiusdamage( self.origin + ( 0, 0, 30 ), 30, 50, 51 );
    var_24 = anglestoforward( self.angles );
    var_25 = self.origin + ( 0, 0, 30 ) + var_24 * 15;
    radiusdamage( var_25, 100, 1, 1 );
}

wp_watchforflaredisowned()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self setscriptablepartstate( "skydiveVfx", "enabled_ghost", 0 );
    self enableoffhandweapons();
    self giveandfireoffhand( "gxp_superjump_mp" );
    wait 0.4;
    self notify( "endSuperJumpFov" );
    self forceplaygestureviewmodel( "ges_gxp_superjump" );

    while ( !wp_watchplanedisowned() )
        waitframe();

    self notify( "ghost_jump_complete" );
    self stopgestureviewmodel( "ges_gxp_superjump" );
    self setscriptablepartstate( "skydiveVfx", "default", 0 );
    self playsoundtoplayer( "zxp_splat_plr", self, self );
    self playsound( "zmb_npc_breath_land_hi", self, self );
    self playsound( "zxp_splat_npc", self, self );
    self enableoffhandweapons();
    self allowmelee( 1 );
    self.ghostsuperjump = undefined;
}

x1fin_ontimerexpired()
{
    if ( level.completesmokinggunquest.select_patrol_one_spawners != 0 )
    {
        var_0 = self.origin + ( 0, 0, level.completesmokinggunquest.select_patrol_one_spawners );
        var_1 = playerphysicstrace( self.origin, var_0 );

        if ( var_1 != var_0 )
            return 0;
    }

    if ( level.completesmokinggunquest.select_patrol_seven_spawners != 0 )
    {
        var_2 = self geteye();
        var_0 = var_2 + ( 0, 0, level.completesmokinggunquest.select_patrol_seven_spawners );
        var_3 = 10;
        var_4 = 20;
        var_5 = scripts\engine\trace::create_contents( 0, 1, 0, 1, 0, 0, 1 );
        var_1 = scripts\engine\trace::capsule_trace( var_2, var_0, var_3, var_4, ( 0, 0, 0 ), self, var_5 );

        if ( var_1["fraction"] != 1 )
            return 0;
    }

    return 1;
}

_id_11A00()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );
    var_0 = getdvarfloat( "scr_br_gxp_air_control", 400.0 );

    if ( var_0 <= 0.0 )
        return;

    var_1 = getdvarfloat( "scr_br_gxp_air_control_max_speed", 1400.0 );
    var_2 = getdvarfloat( "scr_br_gxp_ghost_fall_speed_scale", 0.85 );
    wait 0.2;

    while ( !wp_watchplanedisowned() )
    {
        var_3 = self getnormalizedmovement();

        if ( length( var_3 ) > 0 )
        {
            var_4 = rotatevector( ( var_3[0], -1.0 * var_3[1], 0 ), self.angles );
            var_5 = self getvelocity();
            var_6 = length( var_5 );
            var_7 = var_4 * var_0 * level.framedurationseconds;
            var_8 = var_5 + var_7;
            var_9 = length( var_8 );

            if ( var_9 <= var_1 )
            {
                if ( var_8[2] < 0 )
                    var_8 = ( var_8[0], var_8[1], var_8[2] * var_2 );

                self setvelocity( var_8 );
            }
            else if ( var_6 < var_1 )
            {
                var_8 = vectornormalize( var_8 ) * var_1;

                if ( var_8[2] < 0 )
                    var_8 = ( var_8[0], var_8[1], var_8[2] * var_2 );

                self setvelocity( var_8 );
            }
        }

        waitframe();
    }
}

weapon_xp_iw8_ar_falpha()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "ghost_unset" );
    self endon( "ghost_jump_complete" );
    var_0 = getdvarfloat( "scr_br_gxp_clear_moving_platfrom_time", 0.3 );

    if ( var_0 < 0 )
        return;

    if ( var_0 > 0 )
        wait( var_0 );

    self _meth_87AF();
}

wz_tease( var_0, var_1, var_2 )
{
    if ( istrue( var_2 ) )
        thread _id_11972( var_0, var_1 );

    self.select_patrol_nine_spawners = undefined;
}

wp_watchplanedisowned()
{
    return self isonground() || self isonladder() || self ismantling();
}

x1circletime( var_0, var_1 )
{
    if ( isdefined( self.select_patrol_nine_spawners ) )
        wztrain_info( var_0, "jump" );
    else
        self notify( "playerGhostJumpStop" );
}

x1ops4( var_0, var_1 )
{
    var_2 = self;
    var_3 = getdvarfloat( "scr_br_gxp_ghost_teleport_distance", 400 );
    var_4 = var_2 getplayerangles();
    var_5 = anglestoforward( var_4 );
    var_6 = var_2 geteye();
    var_7 = var_6 + var_5 * var_3;
    var_7 = var_2 brjugg_initpostmain( var_7, var_6, var_5 );

    if ( !isdefined( var_2 ) || !isdefined( var_2._id_11B2F ) )
        return;

    if ( isdefined( var_7 ) )
        var_2 thread _id_11965( var_0, var_1 );
    else
    {
        var_2 zvelscale();

        if ( level.completesmokinggunquest.plunderrepositories )
            var_2._id_11B2F["teleport"].bunker_loot_vaults scripts\mp\hud_util::updatebar( 0.05, 0 );
        else
            var_2._id_11B2F["teleport"].frac = 0.05;

        var_2 thread _id_11972( var_0, var_1 );
    }
}

brjugg_initpostmain( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_3 ) )
        var_3 = 1;

    var_6 = [ self ];

    if ( isdefined( var_4 ) )
        var_6[var_6.size] = var_4;

    var_7 = var_0 + var_2 * 10;
    var_8 = scripts\engine\trace::create_contents( 0, 1, 0, 1, 0, 1, 1 );
    var_9 = scripts\engine\trace::ray_trace( var_1, var_0, var_6, var_8 );
    var_10 = var_9["position"];

    if ( var_10 == var_0 )
        var_11 = var_0;
    else
        var_11 = var_10 - var_2 * 10 + var_9["normal"] * 10;

    var_12 = var_11 + ( 0, 0, 72 );
    var_13 = scripts\engine\trace::ray_trace( var_11, var_12, var_6, var_8 );
    var_14 = var_13["position"];

    if ( abs( var_14[2] - var_12[2] ) > 1 )
    {
        var_15 = var_14 - ( 0, 0, 72 );
        var_16 = scripts\engine\trace::ray_trace( var_14, var_15, var_6, var_8 );
        var_17 = var_16["position"];

        if ( abs( var_17[2] - var_15[2] ) > 1 )
            var_11 = undefined;
        else
            var_11 = var_17;
    }

    if ( isdefined( var_11 ) && positionwouldtelefrag( var_11, self ) )
        var_11 = undefined;

    if ( isdefined( var_11 ) )
    {
        var_18 = self gettagorigin( "j_spineupper" );
        var_19 = self gettagangles( "j_spineupper" );
        playfx( level.completesmokinggunquest._id_12C10, var_18, anglestoforward( var_19 ), anglestoup( var_19 ) );
        self enableoffhandweapons();
        self giveandfireoffhand( "gxp_teleport_mp" );

        if ( var_3 )
        {
            var_20 = getdvarfloat( "scr_br_gxp_ghost_teleport_delay", 0.1 );
            wait( var_20 );
        }

        if ( !isdefined( self ) )
            return undefined;

        self setorigin( var_11 );
        playfxontag( level.completesmokinggunquest._id_12C10, self, "j_spineupper" );
        playfxontagforclients( level.completesmokinggunquest._id_12BFF, self, "tag_eye", self );

        if ( istrue( var_5 ) )
        {
            var_21 = self getvelocity();
            var_22 = length( var_21 );
            var_23 = var_2 * var_22 * 0.5;
            self setvelocity( var_23 );
            self playsoundtoplayer( "br_gov_safespace_repel", self, self );
            self playsound( "br_gov_safespace_repel_3p", self, self );
        }
        else
        {
            self playsoundtoplayer( "br_gov_ghost_teleport_plr", self, self );
            self playsound( "br_gov_ghost_teleport_3p", self, self );
        }
    }

    return var_11;
}

open_gunshop_door( var_0 )
{
    if ( isdefined( var_0 ) )
        wait( var_0 );

    self enableplayerbreathsystem( 1 );
}

x1ops1( var_0, var_1 )
{
    var_2 = 64;
    var_3 = var_2 * var_2;
    var_4 = getdvarfloat( "scr_br_gxp_ghost_blast_radius", 768 );
    var_5 = var_4 * var_4;
    var_6 = "zxp_emp_fire_plr";
    var_7 = self;
    var_7 enableplayerbreathsystem( 0 );
    var_7 playsoundonmovingent( var_6 );
    var_7 playsoundtoplayer( "br_gov_ghost_blast_plr", var_7, var_7 );
    var_7 playsound( "br_gov_ghost_blast_3p", var_7, var_7 );
    var_7 thread open_gunshop_door( 2 );
    playfxontag( level.completesmokinggunquest._id_1285F, var_7, "j_spineupper" );
    playfxontagforclients( level.completesmokinggunquest._id_1285E, var_7, "tag_eye", var_7 );
    self enableoffhandweapons();
    self giveandfireoffhand( "gxp_blast_mp" );
    var_7 playrumbleonentity( "defaultweapon_fire" );
    var_7 earthquakeforplayer( 0.1, 0.3, var_7.origin, 100 );
    var_8 = getcompleteweaponname( "emp_drone_non_player_mp" );
    var_9 = getcompleteweaponname( "emp_drone_non_player_direct_mp" );
    var_10 = scripts\cp_mp\emp_debuff::get_emp_ents();

    foreach ( var_12 in var_10 )
    {
        var_13 = var_12.owner;

        if ( isdefined( var_13 ) )
        {
            if ( var_13 != var_7 && !scripts\cp_mp\utility\player_utility::playersareenemies( var_7, var_13 ) )
                continue;
        }

        var_14 = distancesquared( var_7.origin, var_12.origin );

        if ( var_14 > var_5 )
            continue;

        var_15 = scripts\engine\utility::ter_op( var_14 > var_3, var_8, var_9 );
        var_12 dodamage( 1, var_7.origin, var_7, var_7, "MOD_EXPLOSIVE", var_15 );
        var_12 playsoundonmovingent( "zxp_emp_impact_ent" );
        var_16 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_7, var_12, 1, var_15, "MOD_EXPLOSIVE", var_7, var_7.origin );
        thread winfontscale( var_16 );
    }

    var_18 = getcompleteweaponname( "emp_drone_player_mp" );
    var_19 = undefined;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "player", "getPlayersInRadius" ) )
        var_19 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "getPlayersInRadius" ) ]]( var_7.origin, var_4 );

    var_20 = var_7 geteye();
    var_21 = scripts\engine\trace::create_contents( 0, 1, 0, 1, 0, 0, 1 );

    foreach ( var_23 in var_19 )
    {
        if ( var_23 == var_7 )
            continue;

        if ( var_23 scripts\mp\gametypes\br_public.gsc::zombie() )
            continue;

        if ( var_23 != var_7 && !scripts\cp_mp\utility\player_utility::playersareenemies( var_7, var_23 ) )
            continue;

        if ( scripts\mp\gametypes\br_gxp_safe_zones.gsc::reset_recharge_after_respawn( var_23 ) )
            continue;

        var_24 = scripts\engine\trace::ray_trace_passed( var_20, var_23 gettagorigin( "j_head" ), self, var_21 );

        if ( !var_24 )
            continue;

        var_23 dodamage( 1, var_7.origin, var_7, var_7, "MOD_EXPLOSIVE", var_18 );
        var_16 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_7, var_23, 1, var_18, "MOD_EXPLOSIVE", var_7, var_7.origin );
        thread winfontscale( var_16 );
    }

    thread _id_11965( var_0, var_1 );
}

_id_11965( var_0, var_1 )
{
    if ( level.completesmokinggunquest.plunderrepositories )
        self._id_11B2F[var_1].bunker_loot_vaults scripts\mp\hud_util::updatebar( 1.0, 0 );
    else
        self._id_11B2F[var_1].frac = 1.0;

    thread _id_11972( var_0, var_1 );
}

winfontscale( var_0 )
{
    var_1 = getdvarfloat( "scr_br_gxp_ghost_blast_emp_duration", 5 );
    var_2 = getdvarfloat( "scr_br_gxp_ghost_blast_shellshock_duration", 5 );
    var_3 = var_0.victim;

    if ( isplayer( var_3 ) )
    {
        var_3 playsound( "zxp_emp_impact_plr" );
        var_4 = scripts\engine\utility::ter_op( getdvarint( "scr_br_gxp_ghost_blast_shellshock_nerf", 0 ), "gxp_scream_mp_nerfed", "gxp_scream_mp" );
        var_3 scripts\cp_mp\utility\shellshock_utility::_shellshock( var_4, "gas", var_2, 1 );
        playfxontagforclients( level.completesmokinggunquest._id_12860, var_3, "tag_eye", var_3 );
    }
    else
    {
        scripts\cp_mp\emp_debuff::apply_emp_struct( var_0 );
        initial_forward( var_0, var_1 );

        if ( isdefined( var_3 ) )
            var_3 scripts\cp_mp\emp_debuff::remove_emp();
    }
}

initial_forward( var_0, var_1 )
{
    var_0.victim endon( "death_or_disconnect" );
    level endon( "game_ended" );
    var_2 = scripts\engine\utility::waittill_notify_or_timeout_return( "emp_cleared", var_1 );

    if ( var_2 != "emp_cleared" )
        var_0.empremoved = 1;
}

x1ops5( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self notify( "playerGhostTeleportOrSpectralBlast" );
    self endon( "playerGhostTeleportOrSpectralBlast" );
    var_2 = gettime() + getdvarint( "scr_br_gxp_teleport_or_spectral_blast_timeout_ms", 500 );

    while ( var_2 > gettime() )
    {
        if ( self secondaryoffhandbuttonpressed() )
        {
            self notify( "teleport" );
            break;
        }
        else if ( self fragbuttonpressed() )
        {
            self notify( "spectralBlast" );
            break;
        }

        waitframe();
    }
}

x1ops6( var_0, var_1 )
{
    self notify( "playerGhostTeleportOrSpectralBlast" );
}

isballisticspecial()
{
    return scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "script_vehicle";
}

modifyplayerdamage( var_0 )
{
    var_1 = 250.0;
    var_2 = 100;
    var_3 = var_0.damage;
    var_4 = isplayer( var_0.attacker ) && var_0.attacker scripts\mp\gametypes\br_public.gsc::zombie();
    var_5 = isdefined( var_0.attacker ) && var_0.attacker isballisticspecial();
    var_6 = isplayer( var_0.victim ) && var_0.victim scripts\mp\gametypes\br_public.gsc::zombie();
    var_7 = scripts\mp\utility\weapon::getweaponbasenamescript( var_0.objweapon );

    if ( var_4 && var_6 && var_0.meansofdeath == "MOD_MELEE" )
    {
        if ( !level.completesmokinggunquest.originalangle )
            var_3 = 0;
        else
            var_3 = level.completesmokinggunquest.originalloc;
    }
    else if ( var_4 && !var_6 && !var_0.attacker isinexecutionattack() && var_0.victim isinexecutionvictim() )
        var_3 = 0;
    else if ( isdefined( var_0.attacker ) && istrue( var_0.attacker.isjuggernaut ) && var_6 && var_0.meansofdeath == "MOD_MELEE" )
        var_3 = var_0.victim.maxhealth / 3;
    else if ( var_6 && var_0.meansofdeath == "MOD_FALLING" )
        var_3 = 0;
    else if ( var_6 && isdefined( var_0.inflictor ) && isdefined( var_0.inflictor.streakinfo ) && ( var_0.inflictor.streakinfo.streakname == "toma_strike" || var_0.inflictor.streakinfo.streakname == "precision_airstrike" || var_0.inflictor.streakinfo.streakname == "manual_turret" ) )
    {
        var_8 = var_0.victim.maxhealth;
        var_9 = var_0.attacker.maxhealth;
        var_3 = var_0.damage * int( floor( var_8 / var_9 ) );
    }
    else if ( level.completesmokinggunquest.originalsubtype && var_6 && isexplosivedamagemod( var_0.meansofdeath ) && isdefined( var_0.inflictor ) && var_0.inflictor scripts\cp_mp\vehicles\vehicle::isvehicle() )
        var_3 = 0;
    else if ( var_6 && ( var_0.meansofdeath == "MOD_GRENADE_SPLASH" || var_0.meansofdeath == "MOD_EXPLOSIVE" || var_0.meansofdeath == "MOD_FIRE" ) && ( var_7 == "molotov_mp" || var_7 == "thermite_av_mp" ) )
        var_3 = var_0.damage * level.completesmokinggunquest.originalownerteam;
    else if ( var_4 && !var_6 && var_0.meansofdeath == "MOD_MELEE" )
    {
        var_10 = var_0.victim.maxhealth;
        var_11 = level.completesmokinggunquest.openelevatordoors;

        if ( istrue( var_0.victim.isjuggernaut ) )
            var_11 = level.completesmokinggunquest.opennukecrate;

        if ( !level.completesmokinggunquest.open_this_door )
            var_10 = var_10 + var_0.victim.br_maxarmorhealth;

        if ( istrue( var_0.victim.inlaststand ) )
        {
            var_10 = level.laststandhealth;
            var_11 = level.completesmokinggunquest.ghostnumhitslaststand;
        }

        var_3 = int( ceil( var_10 / var_11 ) );
    }
    else if ( var_6 && var_5 && istrue( var_0.victim._id_132A7 ) )
        var_3 = 0;
    else if ( var_6 && var_5 && level.completesmokinggunquest.oscope_freq_think )
    {
        var_3 = 0;
        _id_132B4( var_0 );
    }
    else if ( var_4 && !var_6 && var_0.meansofdeath == "MOD_IMPACT" && var_7 == "rock_mp" )
    {
        var_12 = spawnstruct();
        var_12.origin = var_0.point;
        var_0.victim thread scripts\mp\equipment\concussion_grenade::applyconcussion( var_12, var_0.attacker );
    }
    else if ( var_6 )
    {
        var_13 = 0.7;
        var_14 = scripts\mp\utility\weapon::getweaponrootname( var_0.objweapon );
        var_15 = weaponclass( var_7 );
        var_16 = scripts\mp\gametypes\br.gsc::revive_wounded_out_handler( var_0.idflags );

        if ( !var_16 )
        {
            switch ( var_15 )
            {
                case "sniper":
                    if ( var_0.shitloc == "head" || var_0.shitloc == "helmet" )
                    {
                        if ( scripts\mp\gametypes\br.gsc::saw_2_angles( var_14 ) )
                            var_3 = int( ceil( level.completesmokinggunquest.open_teleport_room_door * var_13 ) );
                        else
                            var_3 = level.completesmokinggunquest.open_teleport_room_door;
                    }

                    break;
                default:
                    if ( var_0.shitloc == "head" || var_0.shitloc == "helmet" )
                    {
                        var_17 = var_2;

                        if ( level.completesmokinggunquest._id_130F8 )
                            var_17 = var_1;

                        var_3 = int( ceil( var_3 / var_17 * level.completesmokinggunquest.open_teleport_room_door * level.completesmokinggunquest.open_starting_safehouse_door ) );
                    }

                    break;
            }
        }

        var_18 = "scr_br_gxp_scale_" + var_15;
        var_19 = 0;

        if ( var_15 == "spread" )
            var_19 = 0.7;

        var_20 = getdvarfloat( var_18, var_19 );

        if ( var_20 != 0 )
            var_3 = int( ceil( var_3 * var_20 ) );

        var_21 = "scr_br_gxp_scale_" + var_14;
        var_19 = 0;

        if ( var_14 == "iw8_sh_charlie725" )
            var_19 = 1.43;

        var_22 = getdvarfloat( var_21, var_19 );

        if ( var_22 != 0 )
            var_3 = int( ceil( var_3 * var_22 ) );

        if ( var_0.meansofdeath == "MOD_RIFLE_BULLET" || var_0.meansofdeath == "MOD_PISTOL_BULLET" )
            var_3 = int( ceil( var_3 * level.completesmokinggunquest.original_meleechargedistvsplayer ) );
        else if ( var_0.meansofdeath == "MOD_MELEE" )
            var_3 = int( ceil( var_3 * level.completesmokinggunquest.ghostsmeleedamagescale ) );
    }

    if ( var_3 > 0 && var_4 && !var_6 && var_0.attacker isinexecutionattack() && var_0.victim isinexecutionvictim() )
        level.brgxplastghostexecutetime = gettime();

    return var_3;
}

zombieregenratescaleingas()
{
    if ( scripts\mp\gametypes\br_public.gsc::zombie() )
        return;
    else
        scripts\mp\gametypes\br.gsc::touchedmovingplatform();
}

droponplayerdeath( var_0 )
{
    if ( scripts\mp\gametypes\br_public.gsc::zombie() )
        return 1;

    if ( level.completesmokinggunquest.plundersilentcountdownendtime )
        zombienumtoconsume();

    return 0;
}

onplayerkilled( var_0 )
{
    if ( !istrue( level.br_prematchstarted ) )
        return;

    if ( isdefined( self ) && level.completesmokinggunquest.ghostenableasm )
        thread setplayerrigonspawn();

    if ( level.gameended )
        return;

    var_1 = var_0.victim;
    var_2 = var_0.attacker;

    if ( !isdefined( var_2 ) || !isplayer( var_2 ) || !isdefined( var_1 ) )
        return;

    if ( var_1 _id_124F5( var_2, var_0.meansofdeath ) )
        var_1 thread _id_127E6( var_1, var_2 );

    if ( istrue( level.completesmokinggunquest.open_spots_and_spawn_truck ) && var_1 _id_124F4( var_2 ) )
        var_1 thread _id_127DE( var_1, var_2 );

    if ( var_1 _id_12515( var_2 ) )
        var_1 thread wire_think();

    if ( var_2 _id_124F9( var_0 ) )
        var_2 thread winindex();

    var_3 = var_0.hitloc;

    if ( isdefined( var_3 ) && var_1 scripts\mp\gametypes\br_public.gsc::zombie() && ( var_3 == "head" || var_3 == "helmet" ) )
    {
        var_4 = 0;
        var_2 thread scripts\mp\damagefeedback::updatedamagefeedback( "hitzombieheadshot", var_4, 1 );
    }

    if ( var_1 scripts\mp\gametypes\br_public.gsc::zombie() || istrue( level.completesmokinggunquest.ghostdisableplayercorpses ) )
    {
        var_5 = var_1 gettagorigin( "j_spineupper" );
        var_6 = var_1 gettagangles( "j_spineupper" );
        playfx( level.completesmokinggunquest.open_selected_doors, var_5, anglestoforward( var_6 ), anglestoup( var_6 ) );
    }

    var_1 setscriptablepartstate( "skydiveVfx", "default", 0 );
}

setplayerrigonspawn()
{
    self endon( "disconnect" );

    if ( !scripts\mp\gametypes\br_public.gsc::zombie() )
        return;

    self waittill( "spawned" );
    scripts\mp\utility\player::_setsuit( "iw8_defaultsuit_mp" );
}

_id_124F5( var_0, var_1 )
{
    if ( !_id_12514( var_0 ) )
        return 0;

    if ( scripts\mp\gametypes\br_public.gsc::zombie() )
        return 0;

    if ( var_1 == "MOD_EXECUTION" )
    {
        if ( !level.completesmokinggunquest.origin_delta && !istrue( self.inlaststand ) )
            return 0;
    }

    if ( scripts\mp\gametypes\br_gxp_safe_zones.gsc::reset_recharge_after_respawn( self ) )
        return 0;

    return 1;
}

_id_124F9( var_0 )
{
    if ( !level.completesmokinggunquest.organizeproplist )
        return 0;

    if ( var_0.meansofdeath != "MOD_EXECUTION" )
        return 0;

    if ( var_0.victim scripts\mp\gametypes\br_public.gsc::zombie() )
        return 0;

    if ( !level.completesmokinggunquest.origin_delta && istrue( var_0.victim.inlaststand ) )
        return 0;

    if ( !var_0.attacker scripts\mp\gametypes\br_public.gsc::zombie() )
        return 0;

    return 1;
}

_id_127E6( var_0, var_1 )
{
    var_2 = spawndogtags();
    _id_12441( var_2, var_0.origin );

    if ( istrue( var_0.isjuggernaut ) )
    {
        var_3 = 2;
        var_4 = getdvarint( "scr_br_gxp_numDropJugg", var_3 );
        var_5 = scripts\mp\gametypes\br_pickups.gsc::register_respawn_functions();

        for ( var_6 = 1; var_6 < var_4; var_6++ )
        {
            var_7 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_5, var_0.origin, var_0.angles, var_0, undefined, undefined, 0 );

            if ( !isdefined( var_7 ) || var_7.origin == ( 0, 0, 0 ) )
                var_7.origin = var_0.origin;

            var_2 = spawndogtags();
            _id_12441( var_2, var_7.origin );
        }
    }
}

_id_124F4( var_0 )
{
    if ( !_id_12514( var_0 ) )
        return 0;

    if ( scripts\mp\gametypes\br_public.gsc::zombie() )
    {
        if ( randomintrange( 1, 101 ) <= level.completesmokinggunquest.ghostdropstagschance )
            return 1;
    }

    return 0;
}

_id_127DE( var_0, var_1 )
{
    var_2 = spawndogtags();
    _id_12441( var_2, var_0.origin );
}

_id_12515( var_0 )
{
    if ( !_id_12514( var_0 ) )
        return 0;

    if ( !scripts\mp\gametypes\br_public.gsc::zombie() )
        return 0;

    return 1;
}

wire_think()
{
    if ( !isdefined( level.completesmokinggunquest.ghostkilledlootitems ) || level.completesmokinggunquest.ghostkilledlootitems.size <= 0 )
        return;

    self.itemsdropped = 0;
    var_0 = [];

    for ( var_1 = 0; var_1 < level.completesmokinggunquest.ghostkilledlootitemdropmaxcount; var_1++ )
    {
        if ( randomintrange( 1, 101 ) > level.completesmokinggunquest.ghostkilledlootitemdropchance )
            continue;

        var_2 = randomintrange( 0, level.completesmokinggunquest.ghostkilledlootitems.size );
        var_3 = level.completesmokinggunquest.ghostkilledlootitems[var_2];
        var_0[var_0.size] = var_3;
    }

    var_4 = scripts\mp\gametypes\br_lootcache.gsc::spawn_single_cargo( var_0, 0 );
}

_id_12514( var_0 )
{
    if ( isdefined( var_0 ) && var_0 == self )
        return 0;

    if ( level.teambased && isdefined( var_0 ) && isdefined( var_0.team ) && var_0.team == self.team )
        return 0;

    if ( isdefined( var_0 ) && !isdefined( var_0.team ) && ( var_0.classname == "trigger_hurt" || var_0.classname == "worldspawn" ) )
        return 0;

    if ( isagent( self ) || isagent( var_0 ) )
        return 0;

    return 1;
}

spawndogtags()
{
    var_0 = 16;
    var_1 = undefined;
    var_2 = 0;
    var_3 = undefined;

    if ( level.completesmokinggunquest._id_11F61.size > 0 )
    {
        var_4 = level.completesmokinggunquest._id_11F61.size - 1;
        var_1 = level.completesmokinggunquest._id_11F61[var_4];
        level.completesmokinggunquest._id_11F61[var_4] = undefined;
        helisetteamextractionhud( var_1 );
        var_2 = 1;
        var_3 = var_1.trigger;
        var_5 = var_1.visuals;
    }
    else if ( level.completesmokinggunquest._id_11F60.size >= level.completesmokinggunquest.start_firing_minigun )
    {
        var_1 = numnonrallyvehicles();
        helisetteamextractionhud( var_1 );
        var_2 = 1;
        var_3 = var_1.trigger;
        var_5 = var_1.visuals;
    }
    else
    {
        var_6 = "gxp_soul_pickup";
        var_5[0] = spawn( "script_model", ( 0, 0, 0 ) );
        var_5[0].angles = ( 45, 0, 0 );
        var_5[0] setmodel( var_6 );
        var_5[0] hudoutlineenable( "outline_depth_purple" );
        var_5[0] setasgametypeobjective();
        var_5[0].usetype = 1;
        var_5[0].score_event_civilian_hit = 1;
        var_3 = var_5[0];

        if ( level.completesmokinggunquest._id_12B5D )
        {
            var_3 = spawn( "trigger_radius", ( 0, 0, 0 ), 0, 32, 32 );
            var_3.score_event_civilian_hit = 1;
            var_5[0].score_event_civilian_hit = undefined;
        }
    }

    var_7 = "any";
    var_8 = 0;
    var_1 = scripts\mp\gameobjects::createuseobject( var_7, var_3, var_5, ( 0, 0, var_0 ), undefined, var_2 );
    var_1._id_125BC = 1;
    var_1.onuse = ::onuse;
    var_1 scripts\mp\gameobjects::setusetime( var_8 );
    var_1 scripts\mp\gametypes\br_public.gsc::registerpublicevent();
    var_1.inuse = 1;
    var_1.lastusedtime = gettime();
    var_9 = "" + var_1 getentitynumber();
    level.completesmokinggunquest._id_11F60[var_9] = var_1;
    return var_1;
}

_id_12441( var_0, var_1 )
{
    var_2 = 36;
    var_3 = ( 0, 0, 36 );
    var_4 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_1, 30 );
    var_5 = var_4 + ( 0, 0, var_2 );
    var_0.curorigin = var_5;

    if ( level.completesmokinggunquest._id_12B5D )
        var_0.trigger.origin = var_5;

    var_0.visuals[0].origin = var_5;
    var_0 scripts\mp\gameobjects::initializetagpathvariables();
    var_0.interactteam = "any";
    var_0.visuals[0] _id_1255C();
    var_0.ownerteam = "neutral";
    var_0.trigger triggerenable();

    if ( isdefined( var_0.objidnum ) )
    {
        if ( var_0.objidnum != -1 )
        {
            var_6 = var_0.objidnum;
            scripts\mp\objidpoolmanager::update_objective_state( var_6, "active" );
            scripts\mp\objidpoolmanager::update_objective_position( var_6, var_4 + var_3 );
            scripts\mp\objidpoolmanager::update_objective_setbackground( var_6, 1 );
            scripts\mp\objidpoolmanager::objective_set_play_intro( var_0.objidnum, 0 );
            scripts\mp\objidpoolmanager::objective_set_play_outro( var_0.objidnum, 0 );
            var_0 scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_dogtags_friendly", "waypoint_dogtags" );
            var_0 scripts\mp\gameobjects::setvisibleteam( "any" );
            objective_icon( var_0.objidnum, "icon_minimap_soul" );
            scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_0.objidnum );
        }
    }

    playsoundatpos( var_5, "mp_killconfirm_tags_drop" );
    var_0.visuals[0] scriptmodelplayanim( "mp_dogtag_spin" );
}

helisetteamextractionhud( var_0 )
{
    var_0.visuals[0] dontinterpolate();
    var_0.visuals[0] hide();
    var_0.trigger triggerdisable();
    var_0.trigger notify( "deleted" );
    var_0 scripts\mp\gameobjects::allowuse( "none" );
    var_0.inuse = 0;
    var_0.visuals[0].origin = ( 0, 0, 0 );
    var_0.trigger.origin = ( 0, 0, 0 );
    findminmaxangleovertime( var_0 );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_0.objidnum );
}

numnonrallyvehicles()
{
    var_0 = undefined;

    foreach ( var_2 in level.completesmokinggunquest._id_11F60 )
    {
        if ( !isdefined( var_0 ) || var_2.lastusedtime < var_0.lastusedtime )
            var_0 = var_2;
    }

    return var_0;
}

onuse( var_0 )
{
    thread update_gamebattles_char_loc( var_0 );
}

update_gamebattles_char_loc( var_0 )
{
    if ( !isdefined( var_0 ) )
    {
        thread removetags( self );
        return;
    }

    if ( !playercanusetags( var_0 ) )
        return;

    thread removetags( self );
    var_0.trial_ui_set_lap++;

    if ( level.completesmokinggunquest.plunderrepositories )
        var_0 x1stash_playerdisconnect();

    var_0 _id_13082( "numVaccine", var_0.trial_ui_set_lap );

    if ( isdefined( level.completesmokinggunquest.start_firing_minigun ) && var_0.trial_ui_set_lap >= level.completesmokinggunquest.openrequested )
        var_0 thread winindex();
}

_id_1255C()
{
    self hide();

    if ( !level.completesmokinggunquest._id_12B5D )
    {
        self makeusable();
        self setcursorhint( "HINT_NOICON" );
        self sethintstring( &"MP_ZXP/PICKUP" );
        self setuseprioritymax();
    }

    foreach ( var_1 in level.players )
        _id_11F62( var_1 );
}

findminmaxangleovertime( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( !var_2 scripts\mp\gametypes\br_public.gsc::zombie() )
            continue;

        var_3 = var_2 calloutmarkerping_getgscobjectiveindex( 7 );

        if ( var_3 != -1 && var_3 == var_0.objidnum )
            var_2 scripts\cp\equipment\cp_incendiarylauncher::calloutmarkerping_removecallout( 7 );
    }
}

removetags( var_0 )
{
    helisetteamextractionhud( var_0 );
    var_1 = "" + var_0 getentitynumber();
    level.completesmokinggunquest._id_11F60[var_1] = undefined;
    level.completesmokinggunquest._id_11F61[level.completesmokinggunquest._id_11F61.size] = var_0;
    playfx( level._effect["ghost_soul_pickup"], var_0.curorigin );
    playsoundatpos( var_0.curorigin, "br_gov_soul_pickup" );
}

playercanusetags( var_0 )
{
    return var_0 scripts\mp\gametypes\br_public.gsc::zombie();
}

x1stash_playerdisconnect()
{
    var_0 = ( 0, 1, 0 );
    self.plunderforextract setvalue( self.trial_ui_set_lap );
    self.plunderforextract thread plunder_seventyfivepercent_music( var_0 );
    self.plunderfxondropthreashold thread plunder_seventyfivepercent_music( var_0 );
}

winindex( var_0 )
{
    if ( !istrue( var_0 ) && !scripts\mp\gametypes\br_public.gsc::zombie() )
        return;

    var_1 = scripts\mp\gametypes\br_public.gsc::zombie() || istrue( self._id_1347F );

    if ( var_1 )
    {
        scripts\mp\gametypes\br_gametype_gxp_challenges.gsc::on_player_ghost_became_human( self );
        self.ghostturninghuman = 1;
    }

    _id_119AE( 0 );
    x1ops2( 0 );
    scripts\mp\gametypes\br_gxp_phones.gsc::enablephonesforplayer( self );

    if ( isdefined( self.operatorcustomization.gender ) && self.operatorcustomization.gender == "female" )
        self _meth_87A8( "female" );
    else
        self _meth_87A8( "" );

    if ( isdefined( self.operatorcustomization.clothtype ) && self.operatorcustomization.clothtype != "" )
        self setclothtype( self.operatorcustomization.clothtype );
    else
        self setclothtype( "vestlight" );

    self.operatorcustomization = undefined;
    scripts\cp_mp\execution::_clearexecution();
    self._id_11F59 = 1;
    var_2 = self.origin;
    var_3 = self.origin;
    var_4 = self getplayerangles();
    var_5 = 0;

    if ( level.completesmokinggunquest.plunderstructreplenish )
        [var_3, var_4, var_2] = xmike109projectiles();
    else
    {
        [var_3, var_4, var_5] = xpperplayerpershare();
        var_2 = var_3;
    }

    self.plotarmor = 1;
    self setscriptablepartstate( "ghost", "off" );
    self setscriptablepartstate( "compassicon", "defaulticon" );
    self setscriptablepartstate( "skydiveVfx", "default", 0 );
    x1infilarmorwatch();

    if ( !var_5 )
    {
        scripts\mp\gametypes\br_gulag.gsc::gulagfadetoblack();
        wait 1;
    }
    else
        waitframe();

    scripts\mp\class::loadout_emptycacheofloadout( "gamemode" );
    self.pers["gamemodeLoadout"] = level.br_respawn_loadout;
    self.pers["class"] = "gamemode";
    self.class = "gamemode";
    self.forcespawnangles = var_4;
    self.forcespawnorigin = var_2;

    if ( level.completesmokinggunquest.ghostenableasm )
        scripts\mp\utility\player::_setsuit( "iw8_defaultsuit_mp" );

    scripts\mp\playerlogic::spawnplayer( undefined, 0 );
    self skydive_deployparachute();
    thread scripts\mp\gametypes\br.gsc::clampstepbulletdamage();
    x1ops7( 1 );
    self enableexecutionvictim();
    self _meth_87B0();
    self lerpfovbypreset( "default_2seconds" );

    if ( level.completesmokinggunquest.oscope_temp )
        thread scripts\mp\supers\super_deadsilence::superdeadsilence_endhudsequence();

    if ( level.completesmokinggunquest.oscope_sign_think )
    {
        x1unittimedivision();

        if ( !level.completesmokinggunquest.oscope_temp )
            self setscriptablepartstate( "headVFX", "neutral" );

        self visionsetnakedforplayer( "", 0 );
    }

    if ( level.completesmokinggunquest.plunderstructreplenish )
    {
        self.plotarmor = undefined;
        _id_119EB( var_3, var_4, var_2 );
    }
    else
    {
        if ( !var_5 )
        {
            scripts\mp\gametypes\br_public.gsc::_id_11A13();
            scripts\mp\gametypes\br_public.gsc::weapon_xp_iw8_ar_kilo433();
            playfx( scripts\engine\utility::getfx( "ghost_trans" ), self.origin );
            playfxontagforclients( level.completesmokinggunquest.oscope_freq, self, "tag_eye", self );
        }

        if ( !var_5 )
            scripts\mp\gametypes\br_gulag.gsc::gulagfadefromblack();

        thread weapon_xp_iw8_ar_mcharlie();
    }

    if ( istrue( level.completesmokinggunquest.plundersilentcountdownendtime ) && zombienumhitshuman() )
        zombienumhitstruck();
    else
    {
        var_8 = scripts\mp\gametypes\br.gsc::computer_animation_off();
        scripts\mp\gametypes\br.gsc::partenum( var_8, 0 );
    }

    scripts\mp\gametypes\br_armor.gsc::participantplunder();
    thread scripts\mp\gametypes\br.gsc::clampstepbulletdamage();

    if ( level.completesmokinggunquest.oscope_sign_think )
        enablehudoutlineonrevivedhuman();

    _id_11964( 0 );

    if ( var_1 )
        scripts\mp\hud_message::showsplash( "br_gametype_gxp_change_human" );

    self.plotarmor = undefined;
    thread x1timehandler();
    self._id_11F59 = undefined;

    if ( var_1 )
    {
        foreach ( var_10 in level.teamdata[self.team]["players"] )
        {
            if ( self == var_10 )
            {
                scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "player_into_human", var_10 );
                continue;
            }

            scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "teammate_back_human", var_10 );
        }
    }

    self.ghostturninghuman = undefined;
}

enablehudoutlineonrevivedhuman()
{
    if ( !isdefined( level.completesmokinggunquest.ghostplayers ) )
        return;

    level.completesmokinggunquest.ghostplayers = scripts\engine\utility::array_removeundefined( level.completesmokinggunquest.ghostplayers );

    foreach ( var_1 in level.completesmokinggunquest.ghostplayers )
        scripts\mp\utility\outline::outlineenableforplayer( self, var_1, "outline_depth_zombievision", "top" );
}

plunder_seventyfivepercent_music( var_0 )
{
    self endon( "death" );

    if ( istrue( self._id_11C32 ) )
        return;

    var_1 = 0.5;
    var_2 = 4;
    self._id_11C32 = 1;
    var_3 = self.fontscale;
    var_4 = self.color;

    if ( isdefined( var_0 ) )
        self.color = var_0;

    self changefontscaleovertime( var_1 );
    self.fontscale = var_2;
    wait( var_1 );
    self changefontscaleovertime( var_1 );
    self.fontscale = var_3;
    wait( var_1 );
    self.color = var_4;
    self._id_11C32 = undefined;
}

xmike109projectiles()
{
    var_0 = getdvarint( "scr_br_gxp_spawnheightoffset", 3000 );
    var_1 = scripts\mp\gametypes\br_public.gsc::musictriggerthink() / 1000;
    var_2 = scripts\mp\gametypes\br_gulag.gsc::x1opsnpcweaponbarrelmodel( 0, var_1, var_0 );
    var_3 = scripts\mp\gametypes\br_gulag.gsc::_id_11977( var_2 );
    return [ var_2.origin, var_2.angles, var_3 ];
}

xpperplayerpershare()
{
    [var_1, var_2, var_3] = x1timedivision();

    if ( !var_3 )
        scripts\mp\gametypes\br_public.gsc::_id_119E7( var_1 );

    return [ var_1, var_2, var_3 ];
}

x1infilarmorwatch()
{
    x1ops7( 0 );
    var_0 = gettime() + 3000;

    while ( self isgestureplaying() && var_0 > gettime() )
    {
        self stopgestureviewmodel();
        waitframe();
    }

    while ( var_0 > gettime() && ( self isinexecutionattack() || self isswitchingweapon() || self isreloading() || self ismantling() || self isthrowinggrenade() || self israisingweapon() || self ismeleeing() || self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "isPlayerADS" ) ]]() ) )
        waitframe();

    playfx( scripts\engine\utility::getfx( "ghost_trans" ), self.origin );
    playfxontagforclients( level.completesmokinggunquest.oscope_freq, self, "tag_eye", self );
    self notify( "endSuperJumpFov" );
    self enableoffhandweapons();
    self giveandfireoffhand( "gxp_revive_mp" );
    wait 1.25;
}

x1ops7( var_0 )
{
    self allowfire( var_0 );
    self allowmovement( var_0 );
    self allowmelee( var_0 );

    if ( var_0 )
    {
        self playershow();
        self enableoffhandweapons();
    }
    else
    {
        self playerhide();
        self disableoffhandweapons();
    }
}

weapon_xp_iw8_ar_mcharlie()
{
    if ( !getdvarint( "scr_br_gxp_human_spawn_concuss", 0 ) )
        return;

    var_0 = 650;
    var_1 = getdvarint( "scr_br_gxp_push_radius", var_0 );
    var_2 = incrementpersistentstat( level.players, self.origin, var_1 );

    foreach ( var_4 in var_2 )
    {
        if ( var_4 scripts\mp\gametypes\br_public.gsc::zombiejumping() && var_4.team != self.team && isalive( var_4 ) )
            x1stashlootcacheused( var_4, var_1 );
    }

    var_6 = anglestoforward( self.angles );
    playfx( level.completesmokinggunquest.process_players_inside_subway_car, self.origin, var_6 );
    playsoundatpos( self.origin, "sentry_explode_smoke" );
    playrumbleonposition( "grenade_rumble", self.origin );
    earthquake( 0.5, 1.5, self.origin, var_1 );
}

zombienumtoconsume()
{
    var_0 = spawnstruct();
    var_0._id_11B8E = [];
    var_0.bonus_target_hit = [];
    var_0.bonus_target_score = [];
    var_0.bonuskillstreakcharge = [];
    var_0.offhands = [];
    var_0.isdmztutorial = [];
    var_1 = [];
    var_2 = self getweaponslistprimaries();

    foreach ( var_4 in var_2 )
    {
        if ( !scripts\mp\utility\weapon::run_and_stop_group_after( var_4 ) && !issubstr( var_4.basename, "iw8_fists_mp" ) && !scripts\mp\utility\weapon::round_at_max( var_4.basename ) )
            var_1[var_1.size] = var_4;
    }

    foreach ( var_7 in var_1 )
    {
        var_8 = createheadicon( var_7 );
        var_0.bonus_target_hit[var_8] = weaponclipsize( var_7 );
        var_0.bonuskillstreakcharge[var_8] = self getweaponammostock( var_7 );

        if ( scripts\mp\utility\weapon::respawnplayers( var_7 ) )
            var_0.bonus_target_score[var_8] = self getweaponammoclip( var_7, "left" );

        if ( getsubstr( var_8, 0, 4 ) == "alt_" )
            continue;

        var_0._id_11B8E[var_0._id_11B8E.size] = var_7;
    }

    if ( self.lastcacweaponobj != getcompleteweaponname( "none" ) )
    {
        foreach ( var_4 in var_0._id_11B8E )
        {
            if ( self.lastcacweaponobj == var_4 )
            {
                var_0.current = self.lastcacweaponobj;
                break;
            }
        }
    }

    var_12 = self getweaponslistoffhands();

    foreach ( var_14 in var_12 )
    {
        if ( var_14.basename == "bandage_br" )
            continue;

        var_15 = self getweaponammoclip( var_14 );

        if ( var_15 <= 0 )
            continue;

        var_0.offhands[var_0.offhands.size] = var_14;
        var_16 = createheadicon( var_14 );
        var_0.bonus_target_hit[var_16] = var_15;
    }

    foreach ( var_20, var_19 in self.equipment )
        var_0.isdmztutorial[var_19] = var_20;

    var_0.super = undefined;

    if ( isdefined( self.super ) && !self.super.usepercent )
        var_0.super = self.equipment["super"];

    self.play_battle_chatter_vo = var_0;
}

zombienumhitstruck()
{
    self takeallweapons( 0, 1 );
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
    self.equipment["primary"] = undefined;
    self.equipment["secondary"] = undefined;
    self.equipment["health"] = undefined;
    self.equipment["super"] = undefined;
    var_0 = getcompleteweaponname( "iw8_fists_mp" );

    if ( self.play_battle_chatter_vo._id_11B8E.size < 2 )
        self giveweapon( var_0 );

    var_1 = 0;

    foreach ( var_3 in self.play_battle_chatter_vo._id_11B8E )
    {
        var_4 = createheadicon( var_3 );
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_3 );

        if ( !var_1 )
        {
            self assignweaponprimaryslot( var_4 );
            scripts\cp_mp\utility\inventory_utility::_switchtoweapon( var_3 );
            var_1 = 1;
        }

        scripts\mp\weapons::fixupplayerweapons( self, var_4 );
    }

    foreach ( var_7 in self.play_battle_chatter_vo.offhands )
    {
        var_8 = scripts\mp\equipment::getequipmentreffromweapon( var_7 );

        if ( !isdefined( var_8 ) )
            continue;

        var_9 = self.play_battle_chatter_vo.isdmztutorial[var_8];

        if ( !isdefined( var_9 ) )
            continue;

        scripts\mp\equipment::giveequipment( var_8, var_9 );
    }

    foreach ( var_4, var_12 in self.play_battle_chatter_vo.bonuskillstreakcharge )
    {
        self setweaponammostock( var_4, var_12 );
        var_3 = getcompleteweaponname( getweaponbasename( var_4 ) );
        var_13 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_3 );

        if ( isdefined( var_13 ) )
        {
            self.br_ammo[var_13] = var_12;
            scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_hud_update_ammotype( var_13 );
        }
    }

    foreach ( var_4, var_12 in self.play_battle_chatter_vo.bonus_target_hit )
        self setweaponammoclip( var_4, var_12 );

    foreach ( var_4, var_12 in self.play_battle_chatter_vo.bonus_target_score )
        self setweaponammoclip( var_4, var_12, "left" );

    waitframe();
    var_16 = var_0;

    if ( isdefined( self.play_battle_chatter_vo.current ) )
        var_16 = self.play_battle_chatter_vo.current;
    else if ( isdefined( self.play_battle_chatter_vo._id_11B8E[0] ) )
        var_16 = self.play_battle_chatter_vo._id_11B8E[0];

    self switchtoweaponimmediate( var_16 );

    if ( isdefined( self.play_battle_chatter_vo.super ) )
    {
        var_17 = level.br_pickups.br_superreference[level.br_pickups.br_equipnametoscriptable[self.play_battle_chatter_vo.super]];
        scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( var_17, 0 );
    }

    thread scripts\cp_mp\gestures::_id_12EE5();
    self.play_battle_chatter_vo = undefined;
}

x1timehandler()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_set" );

    while ( !self isonground() )
        waitframe();

    thread xanimlength();
}

x1timedivision()
{
    var_0 = 500;
    var_1 = 10000;
    var_2 = 5;

    if ( !isdefined( level.br_circle ) || !isdefined( level.br_circle.dangercircleent ) )
        return [ self.origin, self getplayerangles(), 1 ];

    var_3 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius();
    var_4 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
    var_5 = distance2dsquared( self.origin, var_4 );

    if ( var_5 <= var_3 * var_3 )
        return [ self.origin, self getplayerangles(), 1 ];

    var_6 = undefined;
    var_7 = undefined;
    var_8 = ( self.origin[0], self.origin[1], 0 );
    var_9 = vectornormalize( var_8 - var_4 );

    for ( var_10 = 1; var_10 <= var_2; var_10++ )
    {
        var_11 = var_3 - var_0 * var_10;

        if ( var_11 < 0 )
            break;

        [var_6, var_7] = node_get_children( var_4, var_9, var_11 );

        if ( isdefined( var_6 ) )
            break;
    }

    if ( !isdefined( var_6 ) )
    {
        var_6 = var_4;
        var_7 = self getplayerangles();
    }

    var_13 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_6, var_1 );
    return [ var_13, var_7, 0 ];
}

xanimlength()
{
    if ( !istrue( level.completesmokinggunquest.plundersoundamount ) )
        return;

    thread _id_119E2( level.completesmokinggunquest.human );
}

node_get_children( var_0, var_1, var_2 )
{
    var_3 = var_0 + var_1 * var_2;
    var_4 = scripts\mp\gametypes\br_public.gsc::musictriggerthink() / 1000;

    if ( scripts\mp\gametypes\br_gulag.gsc::pickup_sound_playervm_handler( var_3, var_4 ) )
    {
        var_5 = vectortoangles( var_1 * -1 );
        return [ var_3, var_5 ];
    }
    else
        return [ undefined, undefined ];
}

zombienumhitshuman()
{
    return isdefined( self.play_battle_chatter_vo );
}

x1stashlootcacheused( var_0, var_1 )
{
    var_2 = 1800;
    var_3 = spawnstruct();
    var_3.origin = self.origin;
    var_0 thread scripts\mp\equipment\concussion_grenade::applyconcussion( var_3, self );
    var_0 thread _id_11967( level.completesmokinggunquest.open_exit_doors );
    var_4 = var_0.origin - self.origin;
    var_5 = vectortoangles( var_4 );
    var_6 = distance( var_0.origin, self.origin );
    var_7 = 1.0 - var_6 / var_1;
    var_0 wavesv_finitemode( var_5, var_2, var_7 );
}

_id_11967( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    self notify( "disableCooldown" );

    foreach ( var_3, var_2 in var_0.powers )
    {
        if ( !isdefined( self._id_11B2F[var_3] ) )
            continue;

        self._id_11B2F[var_3].incooldown = 0;
        thread _id_11965( var_0, var_3 );
    }
}

setquestrewardtier( var_0 )
{
    if ( scripts\mp\gametypes\br_public.gsc::zombie() )
    {
        var_1 = isdefined( var_0.attacker ) && var_0.attacker isballisticspecial();

        if ( !var_1 || !level.completesmokinggunquest.oscope_sign || level.completesmokinggunquest.oscope_freq_think )
            return 0;

        thread _id_11967( level.completesmokinggunquest.open_exit_doors );
        thread x1fin_playerdisconnect();
        thread x1opsdeletenpcs( var_0 );
        thread wipeweapon();
    }

    return 1;
}

x1fin_playerdisconnect()
{
    level endon( "game_ended" );
    self endon( "last_stand_finished" );
    self endon( "death_or_disconnect" );
    self waittill( "last_stand_transition_done" );
    waittillframeend;
    self setlaststandselfreviving( 1 );
    self.sat_wait_for_piece_added = 1;
    self.laststandreviveent makeunusable();
    var_0 = self.laststandreviveent;
    var_0.usetime = getdvarfloat( "scr_br_gxp_vehicle_getup", 3.0 ) * 1000;

    if ( !isdefined( var_0.curprogress ) )
        var_0.curprogress = 0;

    while ( scripts\mp\utility\player::isreallyalive( self ) && var_0.curprogress < var_0.usetime )
    {
        if ( self isinexecutionvictim() )
        {
            waitframe();
            continue;
        }

        if ( !isdefined( var_0.userate ) )
            var_0.userate = 0;

        var_0.curprogress = var_0.curprogress + level.frameduration * var_0.userate;
        var_0.userate = 1;
        scripts\mp\gameobjects::updateuiprogress( var_0, 1 );

        if ( var_0.curprogress >= var_0.usetime )
            break;

        waitframe();
    }

    var_0.usetime = undefined;
    var_0.curprogress = undefined;
    var_0.userate = undefined;
    scripts\mp\laststand::lastplundereventtype( "self_revive_success", self );
    self playsoundtoplayer( "zmb_breath_land_dropin", self, self );
    self playsound( "zmb_npc_breath_land_dropin" );
    self setlaststandselfreviving( 0 );
}

x1opsdeletenpcs( var_0 )
{
    var_1 = 500;
    var_2 = 90;
    var_3 = 60;
    var_4 = 30;
    var_5 = var_0.direction_vec;
    var_6 = vectortoyaw( var_5 );
    var_7 = var_2;
    var_8 = var_3;

    if ( scripts\engine\utility::cointoss() )
        var_8 = var_8 * -1;

    var_8 = var_8 + var_6;
    var_9 = ( var_7, var_8, 0 );
    var_10 = vectornormalize( ( var_5[0], var_5[1], 0 ) );
    var_11 = var_10 * var_4 + ( 0, 0, var_4 );
    wavesv_finitemode( var_9, var_1, 1.0, var_11 );
}

wipeweapon()
{
    self endon( "disconnect" );
    self._id_132A7 = 1;
    var_0 = getdvarfloat( "scr_br_gxp_vehicle_immunity", 1.5 );
    wait( var_0 );
    self._id_132A7 = undefined;
}

_id_132B4( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.victim;
    var_3 = var_0.direction_vec;
    var_3 = -1 * vectornormalize( ( var_3[0], var_3[1], min( var_3[2], 0 ) ) );
    var_4 = var_2 geteye();
    var_5 = var_4 + var_3 * 400;
    var_5 = var_2 brjugg_initpostmain( var_5, var_4, var_3, 0, var_1 );
}

dangercircletick( var_0, var_1 )
{
    if ( level.completesmokinggunquest.ghostsoulcircledestroy != 1 )
        return;

    if ( !isdefined( level.completesmokinggunquest._id_11F60 ) )
        return;

    var_2 = var_1 + level.completesmokinggunquest.ghostsoulcircledestroypadding;
    var_3 = var_2 * var_2;

    foreach ( var_5 in level.completesmokinggunquest._id_11F60 )
    {
        if ( isdefined( var_5.visuals ) && distance2dsquared( var_5.origin, var_0 ) >= var_3 )
            thread removetags( var_5 );
    }
}
