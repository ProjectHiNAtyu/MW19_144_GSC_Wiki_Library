// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_quest_util()
{
    if ( !getdvarint( "scr_br_quests_enabled", 1 ) )
        return;

    level.questinfo = spawnstruct();
    level.questinfo.quests = [];
    level.questinfo.thinkers = [];
    level.questinfo.tabletinfo = [];
    level.questinfo._id_128BB = [];
    level.questinfo.teamsonquests = [];
    level.questinfo.thinkindex = 0;
    level.questinfo._id_12B27 = [];
    level.questinfo._id_11FD7 = spawnstruct();
    level.questinfo._id_11FD7.dropcount = [];
    level.questinfo._id_11FD7.physicssettled = [];
    level.questinfo._id_11FD7._id_1212E = [];
    level.questinfo._id_11FD7._id_11FD9 = [];
    level.questinfo._id_11FD7._id_11FDA = [];
    level.questinfo._id_12C6A = [];
    level.questinfo._id_12FD0 = [];
    level.questinfo._id_124DD = scripts\mp\menus::_id_128AB() && getdvarint( "scr_contracts_for_squad_only", 0 );
    level.questinfo.defaultfilter = [];
    level.questinfo.defaultfilter[0] = ::filtercondition_isdead;
    level.questinfo.defaultfilter[1] = ::filtercondition_ingulag;
    level.questinfo.mortars_get_available_players = ::mountain_two_death_func;
    soldier_agent_lwfn3();
    scripts\mp\utility\disconnect_event_aggregator::registerondisconnecteventcallback( ::onplayerdisconnect );
    _id_11ECB();
    scripts\mp\gametypes\br_assassination_quest.gsc::init();
    scripts\mp\gametypes\br_dom_quest.gsc::init();
    scripts\mp\gametypes\br_scavenger_quest.gsc::init();
    scripts\mp\gametypes\br_vip_quest.gsc::init();
    scripts\mp\gametypes\br_timedrun_quest.gsc::init();
    scripts\mp\gametypes\br_extract_quest.gsc::init();
    scripts\mp\gametypes\br_lep_quest.gsc::init();
    scripts\mp\gametypes\br_blueprint_extract_spawn.gsc::init();

    if ( istrue( level.resettimeronkill ) )
        scripts\mp\gametypes\br_scavenger_quest_soa_tower.gsc::init();

    if ( getdvarint( "scr_br_disableLootBunkerCaches", 1 ) == 1 )
        scripts\mp\gametypes\br_bunker_utility.gsc::helilifetime();

    if ( getdvarint( "scr_br_disableBunker11Caches", 0 ) == 1 )
        scripts\mp\gametypes\br_bunker_utility.gsc::helidrivabledeathall();

    thread inittablets();
    thread _id_1243E();
    game["dialog"]["mission_gen_accept"] = "mission_mission_gen_accept";
    game["dialog"]["mission_misc_success"] = "contract_misc_success";
    game["dialog"]["mission_obj_change"] = "mission_mission_obj_change";
    game["dialog"]["mission_obj_moved"] = "mission_mission_obj_moved";
    game["dialog"]["mission_obj_next_ptarget"] = "mission_mission_obj_next_ptarget";
    game["dialog"]["mission_obj_next_nptarget"] = "mission_mission_obj_next_nptarget";
    game["dialog"]["mission_obj_warning_time"] = "mission_mission_obj_warning_time";
    game["dialog"]["mission_obj_warning_capture"] = "mission_mission_obj_warning_capture";
    game["dialog"]["mission_obj_circle_fail"] = "mission_mission_obj_circle_fail";
    game["dialog"]["mission_gen_fail"] = "mission_mission_gen_fail";
    game["dialog"]["mission_teammate_down"] = "mission_teammate_down";
    game["dialog"]["mission_enemy_down"] = "mission_enemy_down";
    level._effect["vfx_dom_flare"] = loadfx( "vfx/iw8_br/gameplay/vfx_br_flare_dom" );
    level._effect["vfx_revive_flare"] = loadfx( "vfx/iw8_br/gameplay/vfx_br_flare_revive" );
    level._effect["vfx_smktrail_mortar"] = loadfx( "vfx/iw8_br/gameplay/vfx_br_flare_smktrail" );
    level._effect["vfx_marker_base_orange_pulse"] = loadfx( "vfx/iw8_br/gameplay/vfx_br_tr_marker.vfx" );
    level.create_vehicle_occupancy_data = undefined;
    level.questinfo.fulton_hostage_vo = 1;
    level.usealtrewardtable = getdvarint( "scr_br_usealtrewardtable", 0 );
}

soldier_agent_lwfn3()
{
    var_0 = 0;

    for (;;)
    {
        var_1 = tablelookupbyrow( "mp/brmission_unlockables.csv", var_0, 0 );

        if ( !isdefined( var_1 ) || var_1 == "" )
            break;

        var_2 = spawnstruct();
        var_2._id_12FCF = int( var_1 );
        var_2.spawn_paratrooper_ac130 = int( tablelookup( "mp/brmission_unlockables.csv", 0, var_1, 1 ) );
        var_2._id_12FCE = [];
        var_3 = 0;

        for (;;)
        {
            var_4 = tablelookup( "mp/brmission_unlockables.csv", 0, var_1, 3 + var_3 );

            if ( !isdefined( var_4 ) || var_4 == "" )
                break;

            var_2._id_12FCE[var_3] = int( var_4 );
            var_3++;
        }

        level.questinfo._id_12FD0[scripts\engine\utility::string( var_2.spawn_paratrooper_ac130 )] = var_2;
        var_0++;
    }
}

inittablets()
{
    level.questinfo.activetablets = [];
    var_3 = getdvarfloat( "scr_br_quest_tablet_hide_percent", 0.667 );
    var_4 = [];

    foreach ( var_2, var_1 in level.questinfo.tabletinfo )
    {
        var_6 = nuke_mercyending_think( var_2 );
        var_7 = getlootscriptablearrayinradius( var_6 );

        if ( !var_1.enabled )
            continue;

        var_8 = getdvarfloat( "scr_br_quest_tablet_kiosk_dist", 1200.0 );

        if ( var_8 > 0 )
        {
            var_9 = 0;

            foreach ( var_11 in level.br_armory_kiosk.scriptables )
            {
                var_12 = canceljoins( var_6, undefined, var_11.origin, var_8 );

                foreach ( var_14 in var_12 )
                {
                    if ( istrue( var_14._id_129B2 ) )
                        continue;

                    var_14._id_129B2 = 1;
                    var_9++;
                }
            }

            for ( var_17 = var_7.size - 1; var_17 >= 0 && var_9; var_17-- )
            {
                if ( istrue( var_7[var_17]._id_129B2 ) )
                {
                    var_7[var_17] = var_7[var_7.size - 1];
                    var_7[var_7.size - 1] = undefined;
                    var_9--;
                }
            }
        }

        if ( istrue( level.spawn_tut_loot ) && scripts\mp\gametypes\br.gsc::spawn_trucks() )
        {
            var_18 = getdvarfloat( "scr_br_quest_tablet_lowpop_percent", 0.8 );
            var_19 = int( min( var_7.size, var_7.size * ( 1.0 - var_18 ) + 0.5 ) );

            for ( var_17 = 0; var_17 < var_19; var_17++ )
            {
                var_20 = randomintrange( 0, var_7.size );
                var_7[var_20]._id_129B2 = 1;
                var_7[var_20] = var_7[var_7.size - 1];
                var_7[var_7.size - 1] = undefined;
            }
        }

        for ( var_17 = var_7.size - 1; var_17 >= 0; var_17-- )
        {
            var_21 = var_7[var_17];
            var_21 tabletinit( var_2 );

            if ( !var_21.init )
            {
                var_7[var_17]._id_129B2 = 1;
                var_7[var_17] = var_7[var_7.size - 1];
                var_7[var_7.size - 1] = undefined;
            }
        }

        if ( var_7.size )
            _id_123A2( var_2 );

        var_22 = var_7.size * var_3;
        var_23 = int( var_22 );
        var_24 = var_22 - var_23;

        if ( randomfloat( 1.0 ) < var_24 )
            var_23++;

        for ( var_17 = 0; var_17 < var_23; var_17++ )
        {
            var_20 = randomintrange( 0, var_7.size );
            var_21 = var_7[var_20];
            var_7[var_20]._id_129B2 = 1;
            var_4[var_4.size] = var_7[var_20];
            var_7[var_20] = var_7[var_7.size - 1];
            var_7[var_7.size - 1] = undefined;
        }
    }

    var_25 = getarraykeys( level.calloutglobals.tr_entergulag );
    var_26 = [];
    var_27 = getdvarint( "scr_br_quest_tablet_location_min", 1 );

    if ( var_27 > 0 )
    {
        foreach ( var_29 in var_25 )
            var_26[var_29] = var_27;
    }

    var_31 = 0;

    foreach ( var_2, var_1 in level.questinfo.tabletinfo )
    {
        var_7 = getlootscriptablearrayinradius( nuke_mercyending_think( var_2 ) );
        var_31 = var_31 + var_7.size;

        if ( var_1.enabled )
        {
            foreach ( var_21 in var_7 )
            {
                if ( istrue( var_21._id_129B2 ) )
                {
                    var_21 tablethide();
                    continue;
                }

                var_21 tabletshow();

                if ( var_26.size > 0 )
                {
                    var_34 = scripts\mp\gametypes\br_callouts.gsc::nuke_mercyending_init( var_21.origin );

                    if ( isdefined( var_26[var_34] ) )
                    {
                        var_26[var_34]--;

                        if ( !var_26[var_34] )
                            var_26[var_34] = undefined;
                    }
                }
            }

            continue;
        }

        foreach ( var_21 in var_7 )
            var_21 tablethide();
    }

    if ( var_26.size )
    {
        var_4 = scripts\engine\utility::array_randomize( var_4 );

        for ( var_17 = 0; var_17 < var_4.size; var_17++ )
        {
            var_21 = var_4[var_17];
            var_34 = scripts\mp\gametypes\br_callouts.gsc::nuke_mercyending_init( var_21.origin );

            if ( isdefined( var_26[var_34] ) )
            {
                var_21 tabletshow();
                var_26[var_34]--;

                if ( !var_26[var_34] )
                {
                    var_26[var_34] = undefined;

                    if ( !var_26.size )
                        break;
                }
            }
        }
    }

    var_39 = level.questinfo.activetablets.size;
    var_40 = var_4.size;
    scripts\mp\gametypes\br_analytics.gsc::close_exit_doors( var_31, var_39, var_40, var_3 );

    if ( scripts\mp\gametypes\br_gametypes.gsc::roof_lander_spawn_func( "tabletReplace" ) )
        thread _id_12B24( var_4 );
    else
        thread grenadehealthatdeathframeupdatecallback( var_4 );
}

_id_123A2( var_0 )
{
    var_1 = getquestindex( var_0 );
    setomnvarbit( "ui_br_objective_types", var_1, 1 );
}

_id_12B24( var_0 )
{
    if ( !isdefined( level.br_level ) )
        return;

    scripts\mp\flags::gameflagwait( "prematch_done" );
    var_0 = scripts\engine\utility::array_randomize( var_0 );
    var_1 = 0;
    var_2 = level._id_12B25;
    var_3 = 0;

    while ( var_3 < var_0.size )
    {
        var_4 = var_0[var_3];
        level waittill( "quest_started" );

        if ( isdefined( level._id_12B25 ) && level._id_12B25 != -1 )
        {
            var_1++;

            if ( var_1 >= var_2 )
            {
                var_4 tabletshow();
                var_2 = var_2 + level._id_12B25;
                var_3++;
            }

            continue;
        }

        var_4 tabletshow();
        var_3++;
    }
}

grenadehealthatdeathframeupdatecallback( var_0 )
{
    if ( !isdefined( level.br_level ) )
        return;

    if ( scripts\mp\gametypes\br_gametypes.gsc::revive_stim( "delayedShowTablets" ) )
    {
        level thread scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "delayedShowTablets", var_0 );
        return;
    }

    var_1 = level.br_level.br_circledelaytimes.size - 1 - getdvarint( "scr_br_quest_tablet_show_circle_disable", 4 );
    var_2 = getdvarfloat( "scr_br_quest_tablet_show_percent", 0.3 );
    scripts\mp\flags::gameflagwait( "prematch_done" );
    var_3 = [];

    for ( var_4 = 0; var_4 < var_0.size; var_4++ )
    {
        var_5 = var_0[var_4];
        var_5.circleindex = scripts\mp\gametypes\br_circle.gsc::mp_m_king_patch( var_5.origin );

        if ( var_5.circleindex >= 0 )
            var_3[var_3.size] = var_5;
    }

    var_0 = scripts\engine\utility::array_randomize( var_3 );

    for (;;)
    {
        level waittill( "br_circle_set" );

        if ( !level.br_circle.circleindex )
        {
            scripts\mp\gametypes\br_analytics.gsc::clone( 0, var_2, var_3.size, 0 );
            continue;
        }

        var_3 = [];

        for ( var_4 = 0; var_4 < var_0.size; var_4++ )
        {
            var_5 = var_0[var_4];

            if ( var_5.circleindex >= level.br_circle.circleindex )
                var_3[var_3.size] = var_5;
        }

        var_6 = int( ceil( var_3.size * var_2 ) );
        var_7 = int( max( 0, getdvarint( "scr_br_quest_tablet_show_max", 100 ) - level.questinfo.activetablets.size ) );
        var_6 = int( min( var_6, var_7 ) );

        for ( var_4 = 0; var_4 < var_6; var_4++ )
        {
            var_5 = var_3[var_4];
            var_5 tabletshow();
        }

        var_0 = [];

        for ( var_4 = var_6; var_4 < var_3.size; var_4++ )
            var_0[var_0.size] = var_3[var_4];

        scripts\mp\gametypes\br_analytics.gsc::clone( level.br_circle.circleindex, var_2, var_3.size, var_6 );

        if ( level.br_circle.circleindex >= var_1 )
            break;
    }
}

helidestroyvehiclestouchnotify()
{
    foreach ( var_6, var_1 in level.questinfo.tabletinfo )
    {
        var_2 = getlootscriptablearrayinradius( nuke_mercyending_think( var_6 ) );

        if ( var_1.enabled )
        {
            foreach ( var_4 in var_2 )
                var_4 tablethide();
        }
    }
}

tablethide()
{
    thread agentsnear();
}

agentsnear()
{
    self endon( "show" );
    scripts\mp\flags::gameflagwait( "prematch_done" );
    scripts\mp\gametypes\br_pickups.gsc::spawn_overwatch_soldiers_01( self );
}

tabletshow()
{
    self notify( "show" );
    var_0 = self.type;
    self setscriptablepartstate( var_0, "visible" );
    level.questinfo.activetablets["" + self.index] = self;
    scripts\mp\gametypes\br_analytics.gsc::code( self );
}

tabletinit( var_0 )
{
    if ( isdefined( self.init ) )
        return;

    self.init = 1;
    self._id_12B26 = var_0;
    var_1 = level.questinfo.quests[var_0].funcs["tabletInit"];

    if ( isdefined( var_1 ) )
    {
        self.init = self [[ var_1 ]]();

        if ( !self.init )
            scripts\mp\gametypes\br_analytics.gsc::close_gunshop_door( self );
    }
}

unset_relic_noregen( var_0 )
{
    if ( isdefined( level.questinfo.activetablets["" + var_0.index] ) )
        level.questinfo.activetablets["" + var_0.index] = undefined;
}

nuke_mercyending_think( var_0 )
{
    var_1 = undefined;

    if ( isdefined( level.questinfo.tabletinfo[var_0] ) )
        var_1 = level.questinfo.tabletinfo[var_0].spawn_script_model_driver_and_passengers;

    if ( !isdefined( var_1 ) )
        var_1 = "brloot_" + var_0 + "_tablet";

    return var_1;
}

registerteamonquest( var_0, var_1 )
{
    scripts\mp\gametypes\br_analytics.gsc::closed_position( self, var_1 );

    if ( istrue( level.questinfo._id_124DD ) )
    {
        var_2 = var_0 + var_1.squadindex;
        level.questinfo._id_128BB = scripts\engine\utility::array_add( level.questinfo._id_128BB, var_2 );
    }
    else
        level.questinfo.teamsonquests = scripts\engine\utility::array_add( level.questinfo.teamsonquests, var_0 );

    if ( !isdefined( level.questinfo.start_link_logic_on_players ) )
        level.questinfo.start_link_logic_on_players = [];

    level.questinfo.start_link_logic_on_players[var_0] = object_is_valid( var_0, 1 );
    level notify( "quest_started", var_0, var_1.squadindex );
}

releaseteamonquest( var_0 )
{
    if ( !scripts\mp\menus::_id_128AB() )
    {

    }

    if ( isdefined( level.questinfo.start_link_logic_on_players ) )
    {
        level.questinfo.start_link_logic_on_players[var_0] = undefined;
        scripts\mp\perks\perkfunctions::_id_130BD( var_0 );
    }

    if ( istrue( level.questinfo._id_124DD ) )
    {
        var_1 = var_0 + self.squadindex;
        level.questinfo._id_128BB = scripts\engine\utility::array_remove( level.questinfo._id_128BB, var_1 );
    }
    else
        level.questinfo.teamsonquests = scripts\engine\utility::array_remove( level.questinfo.teamsonquests, var_0 );

    var_2 = objectiveids( var_0 );
    var_3 = [];

    if ( isdefined( self.result ) && self.result == "success" )
    {
        foreach ( var_5 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, self.squadindex ) )
        {
            if ( isbot( var_5 ) && scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
                continue;

            var_5.create_trophy_station = scripts\mp\gametypes\br.gsc::get_int_or_0( var_5.create_trophy_station ) + 1;
            var_5 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "missionsCompleted", var_5.create_trophy_station );
            var_5 scripts\mp\utility\stats::incpersstat( "contracts", 1 );

            if ( !isdefined( var_5.create_tut_loot_struct ) )
                var_5.create_tut_loot_struct = [];

            var_5.create_tut_loot_struct[self.questcategory] = scripts\mp\gametypes\br.gsc::get_int_or_0( var_5.create_tut_loot_struct[self.questcategory] ) + 1;
            var_5 scripts\mp\gametypes\br_challenges.gsc::droppoint( "br_mastery_fiveContracts" );
        }

        if ( !isdefined( self.trap_toggle_logic ) || self.trap_toggle_logic == 0 )
            var_3 = parachuteprelaststandfunction( var_0, self._id_11FD6, self._id_11FD3, self._id_11FD8, self.fulton_interactions_disabled );
    }

    if ( isdefined( self.result ) )
    {
        var_7 = scripts\engine\utility::ter_op( self.result == "success", 1, 2 );
        var_8 = self.category;

        foreach ( var_5 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, self.squadindex ) )
        {
            if ( isbot( var_5 ) && scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
                continue;

            var_5 scripts\cp\helicopter\chopper_boss::tvstation_fastrope_init( self.category, var_7, 1 );
            var_5 scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "onContractEnd", var_7 );
            var_5 notify( "calloutmarkerping_warzoneKillQuestIcon" );
        }

        if ( isdefined( self.targetteam ) )
        {
            var_11 = scripts\engine\utility::ter_op( self.result == "success", 2, 1 );

            foreach ( var_5 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, self.squadindex ) )
            {
                if ( isbot( var_5 ) && scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
                    continue;

                var_5 scripts\cp\helicopter\chopper_boss::tvstation_fastrope_init( self.category, var_11, 2 );
            }
        }
    }

    var_14 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, self.squadindex );
    var_15 = var_14.size;
    scripts\mp\gametypes\br_analytics.gsc::close_tut_gate( self, var_2, var_3, var_15 );
    self notify( "questEnded" );

    if ( isdefined( self._id_11FD8 ) )
        self._id_11FD8 notify( "questEnded" );
}

_id_129E2( var_0, var_1, var_2 )
{
    foreach ( var_4 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_2, self.squadindex ) )
    {
        if ( isbot( var_4 ) && scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
            continue;

        var_4 scripts\cp\helicopter\chopper_boss::txt_nag( var_0, var_1 );
    }
}

_id_12B6D( var_0 )
{
    switch ( var_0.type )
    {
        case "brloot_assassination_tablet":
            scripts\mp\gametypes\br_assassination_quest.gsc::takequestitem( var_0 );
            break;
        case "brloot_domination_tablet":
            if ( scripts\mp\utility\game::onfieldupgradeendbuffer() == "payload" )
                scripts\mp\gametypes\br_capshoot_quest.gsc::takequestitem( var_0 );
            else
                scripts\mp\gametypes\br_dom_quest.gsc::takequestitem( var_0 );

            break;
        case "brloot_scavenger_tablet":
            scripts\mp\gametypes\br_scavenger_quest.gsc::takequestitem( var_0 );
            break;
        case "brloot_vip_tablet":
            scripts\mp\gametypes\br_vip_quest.gsc::takequestitem( var_0 );
            break;
        case "brloot_timedrun_tablet":
            scripts\mp\gametypes\br_timedrun_quest.gsc::takequestitem( var_0 );
            break;
        case "brloot_geigerstash_tablet":
            scripts\mp\gametypes\br_geigerstash_quest.gsc::takequestitem( var_0 );
            break;
        case "brloot_blueprintextract_tablet":
            scripts\mp\gametypes\br_extract_quest.gsc::takequestitem( var_0 );
            break;
        case "brloot_scavenger_tablet_adler":
            scripts\mp\gametypes\br_scavenger_quest_adler.gsc::takequestitem( var_0 );
            break;
        case "brloot_scavenger_tablet_soa_tower":
            scripts\mp\gametypes\br_scavenger_quest_soa_tower.gsc::takequestitem( var_0 );
            break;
        case "brloot_lep_tablet":
            scripts\mp\gametypes\br_lep_quest.gsc::brlep_takequestitem( var_0 );
            break;
    }

    scripts\mp\gametypes\br_plunder.gsc::survivorstreakoverride( "brloot_mission_tablet", -1 );
}

dangercircletick( var_0, var_1, var_2 )
{
    if ( !isdefined( level.questinfo ) )
        return;

    foreach ( var_4 in level.questinfo.activetablets )
    {
        if ( distance2dsquared( var_0, var_4.origin ) > var_1 * var_1 )
        {
            scripts\mp\gametypes\br_pickups.gsc::spawn_overwatch_soldiers_01( var_4 );
            scripts\mp\gametypes\br_plunder.gsc::survivorstreakoverride( "brloot_mission_tablet", -1 );
        }
    }

    foreach ( var_7 in level.questinfo.quests )
    {
        if ( isdefined( var_7.funcs["circleTick"] ) )
        {
            foreach ( var_9 in var_7.instances )
                var_9 [[ var_7.funcs["circleTick"] ]]( var_0, var_2 );
        }
    }
}

createquestinstance( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = spawnstruct();
    var_5.questcategory = var_0;
    var_5.enabled = 1;
    var_5.category = var_0;
    var_5.id = var_1;
    var_5.subtract_from_spawn_count_from_group = "" + var_2;
    var_5._id_11FD8 = var_3;
    var_5 _assignthinkoffset();
    var_5.squadindex = var_4;
    return var_5;
}

addquestinstance( var_0, var_1 )
{
    if ( !istrue( level.questinfo.ismanagerthreadthinking ) )
    {
        _initmanagerquestthread();
        level.questinfo thread _questmanagerthread();
    }

    if ( !_isquestthreaded( var_0 ) && isdefined( level.questinfo.quests[var_0].numthinkfuncs ) )
    {
        if ( _checkforregister( var_0, "initQuestVars" ) )
            level.questinfo.quests[var_0] _runinitquestvars( var_0 );

        _runaddquestinstance( var_0, var_1 );
        _runaddquestthread( var_0 );
    }
    else
        _runaddquestinstance( var_0, var_1 );
}

removequestinstance()
{
    if ( istrue( self.removed ) )
        return;

    self.removed = 1;
    self notify( "marked_to_remove" );
    var_0 = self.questcategory;
    _runremovequestinstance( var_0 );

    if ( isdefined( self._id_12A93 ) )
        leavequestlocale();

    if ( _questinstancesactive( var_0 ) <= 0 )
    {
        if ( _checkforregister( var_0, "clearQuestVars" ) )
            level.questinfo.quests[var_0] _runclearquestvars( var_0 );

        if ( _questthreadsactive() <= 0 )
            _removemanagerquestthread();
    }
}

sandboxprintlinebold( var_0 )
{
    return isdefined( var_0.subscribedinstances );
}

_initmanagerquestthread()
{
    level.questinfo.ismanagerthreadthinking = 1;
}

_removemanagerquestthread()
{
    level notify( "end_quest_manager_thread" );
    level.questinfo.ismanagerthreadthinking = 0;
}

_questmanagerthread()
{
    level endon( "game_ended" );
    level endon( "end_quest_manager_thread" );

    for (;;)
    {
        wait 0.05;
        level.questinfo.thinkindex++;

        foreach ( var_1 in level.questinfo.thinkers )
        {
            if ( !level.questinfo.quests[var_1].enabled )
                continue;

            foreach ( var_3 in level.questinfo.quests[var_1].instances )
            {
                if ( var_3.enabled )
                    var_3 _runquestthinkfunctions( var_1 );
            }
        }
    }
}

_runquestthinkfunctions( var_0 )
{
    for ( var_1 = 0; var_1 < level.questinfo.quests[var_0].numthinkfuncs; var_1++ )
    {
        if ( ( level.questinfo.thinkindex - ( self.thinkoffset + self.firstthink ) ) % level.questinfo.quests[var_0].thinkrates[var_1] == 0 )
        {
            var_2 = "questThink" + var_1;
            [[ level.questinfo.quests[var_0].funcs[var_2] ]]();
        }
    }
}

_assignthinkoffset()
{
    if ( !isdefined( level.questinfo.thinkoffset ) )
        level.questinfo.thinkoffset = 0;

    self.thinkoffset = level.questinfo.thinkoffset;
    self.firstthink = level.questinfo.thinkindex;
    level.questinfo.thinkoffset++;
}

_registerquestfunc( var_0, var_1, var_2 )
{
    level.questinfo.quests[var_0].funcs[var_2] = var_1;
}

_checkforregister( var_0, var_1 )
{
    return isdefined( level.questinfo.quests[var_0].funcs[var_1] );
}

registerquestcategory( var_0, var_1 )
{
    var_2 = getdvarint( "scr_br_" + var_0 + "_quest", var_1 );

    if ( scripts\mp\gametypes\br_gametypes.gsc::roof_enemy_groups( "missions" ) )
        var_2 = 0;

    var_3 = spawnstruct();
    var_3.enabled = var_2;
    level.questinfo.tabletinfo[var_0] = var_3;

    if ( !var_2 )
        return 0;

    _registerquestcategory( var_0 );
    return 1;
}

registerquestlocale( var_0 )
{
    _registerquestcategory( var_0 );
}

_registerquestcategory( var_0 )
{
    if ( !isdefined( level.questinfo.quests[var_0] ) )
    {
        level.questinfo.quests[var_0] = spawnstruct();
        level.questinfo.quests[var_0].initflag = 0;
        level.questinfo.quests[var_0].hasinitfunc = 0;
        level.questinfo.quests[var_0].funcs = [];
        level.questinfo.quests[var_0].instances = [];
        level.questinfo.quests[var_0].enabled = 1;
        _id_11E00( var_0 );
    }
}

_id_11E00( var_0 )
{
    level.questinfo._id_12B27[var_0] = spawnstruct();
    level.questinfo._id_12B27[var_0].index = getquesttableindex( var_0 );
}

registerinitquestvars( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "initQuestVars" );
    level.questinfo.quests[var_0].hasinitfunc = 1;
}

registerquestthink( var_0, var_1, var_2 )
{
    if ( !isdefined( level.questinfo.quests[var_0].numthinkfuncs ) )
        level.questinfo.quests[var_0].numthinkfuncs = 0;

    var_3 = int( var_2 * 20 );
    level.questinfo.quests[var_0].thinkrates[level.questinfo.quests[var_0].numthinkfuncs] = var_3;
    var_4 = "questThink" + level.questinfo.quests[var_0].numthinkfuncs;
    _registerquestfunc( var_0, var_1, var_4 );
    level.questinfo.quests[var_0].numthinkfuncs = level.questinfo.quests[var_0].numthinkfuncs + 1;
}

registerquestcircletick( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "circleTick" );
}

registerremovequestinstance( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "removeInstance" );
}

registerclearquestvars( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "clearQuestVars" );
}

registerplayerfilter( var_0, var_1, var_2 )
{
    if ( !isdefined( level.questinfo.quests[var_0].filters ) )
        level.questinfo.quests[var_0].filters = [];

    if ( isdefined( var_2 ) )
        level.questinfo.quests[var_0].filters[var_2] = var_1;
    else
    {
        var_3 = level.questinfo.quests[var_0].filters.size;
        level.questinfo.quests[var_0].filters[var_3] = var_1;
    }
}

registeronplayerkilled( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "onPlayerKilled" );
}

_id_11DF6( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "onPlayerDisconnect" );
}

_id_11DF5( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "onEnterGulag" );
}

_id_11DF8( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "onRespawn" );
}

_id_11DFA( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "onTimerUpdate" );
}

_id_11DF9( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "onTimerExpired" );
}

_id_11E05( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "tabletInit" );
}

_id_11DF2( var_0, var_1 )
{
    level.questinfo.tabletinfo[var_0].spawn_script_model_driver_and_passengers = var_1;
}

_clearregisters( var_0 )
{
    var_1 = [];
}

onplayerkilled( var_0, var_1 )
{
    if ( !isdefined( level.questinfo ) )
        return;

    foreach ( var_3 in level.questinfo.quests )
    {
        if ( isdefined( var_3.funcs["onPlayerKilled"] ) )
        {
            foreach ( var_5 in var_3.instances )
                var_5 [[ var_3.funcs["onPlayerKilled"] ]]( var_0, var_1 );
        }
    }
}

onplayerconnect( var_0 )
{
    if ( !isdefined( var_0.team ) )
        return;

    _id_123CC( var_0.team, objectiveids( var_0.team ), var_0.squadindex );
}

onplayerdisconnect( var_0 )
{
    if ( !isdefined( level.questinfo ) )
        return;

    foreach ( var_2 in level.questinfo.quests )
    {
        if ( isdefined( var_2.funcs["onPlayerDisconnect"] ) )
        {
            foreach ( var_4 in var_2.instances )
                var_4 [[ var_2.funcs["onPlayerDisconnect"] ]]( var_0 );
        }
    }
}

unset_relic_healthpacks()
{
    if ( !isdefined( level.questinfo ) )
        return;

    foreach ( var_1 in level.questinfo.quests )
    {
        if ( isdefined( var_1.funcs["onEnterGulag"] ) )
        {
            foreach ( var_3 in var_1.instances )
                var_3 [[ var_1.funcs["onEnterGulag"] ]]( self );
        }
    }
}

unset_relic_martyrdom()
{
    if ( !isdefined( level.questinfo ) )
        return;

    self setclientomnvar( "ui_player_spawned_notify", gettime() );

    foreach ( var_1 in level.questinfo.quests )
    {
        if ( isdefined( var_1.funcs["onRespawn"] ) )
        {
            foreach ( var_3 in var_1.instances )
                var_3 [[ var_1.funcs["onRespawn"] ]]( self );
        }
    }
}

_runinitquestvars( var_0 )
{
    [[ level.questinfo.quests[var_0].funcs["initQuestVars"] ]]();
}

_runaddquestthread( var_0 )
{
    if ( !_isquestthreaded( var_0 ) )
    {
        var_2 = level.questinfo.thinkers.size;
        level.questinfo.thinkers[var_2] = var_0;
        level.questinfo.quests[var_0].enabled = 1;
    }
    else
    {

    }
}

_runaddquestinstance( var_0, var_1 )
{
    level.questinfo.quests[var_0].instances[var_1.id] = var_1;
}

_runremovequestinstance( var_0 )
{
    self [[ level.questinfo.quests[var_0].funcs["removeInstance"] ]]();
    self notify( "removed" );
    level.questinfo.quests[var_0].instances[self.id] = undefined;
}

_runclearquestvars( var_0 )
{
    [[ level.questinfo.quests[var_0].funcs["clearQuestVars"] ]]();
    level.questinfo.thinkers = scripts\engine\utility::array_remove( level.questinfo.thinkers, var_0 );
    level.questinfo.quests[var_0].enabled = 0;
}

_isquestthreaded( var_0 )
{
    if ( scripts\engine\utility::array_contains( level.questinfo.thinkers, var_0 ) )
        return 1;

    return 0;
}

_questinstancesactive( var_0 )
{
    if ( isdefined( level.questinfo.quests[var_0].instances ) )
        return level.questinfo.quests[var_0].instances.size;

    return 0;
}

_questthreadsactive()
{
    if ( isdefined( level.questinfo.thinkers ) )
        return level.questinfo.thinkers.size;

    return 0;
}

createlocaleinstance( var_0, var_1, var_2 )
{
    var_3 = createquestinstance( var_0, var_2, "invalid", undefined, self.squadindex );
    var_3.subscriber_type = var_1;
    getquestdata( var_1 ).locale_type = var_0;
    var_3.subscribedinstances = [];
    return var_3;
}

registercreatequestlocale( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "create_locale" );
}

_id_11DF3( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "move_locale" );
}

registercheckiflocaleisavailable( var_0, var_1 )
{
    _registerquestfunc( var_0, var_1, "check_available" );
}

activate_target( var_0 )
{
    switch ( var_0._id_121E3 )
    {
        case "GetEntitylessScriptableArray":
            return getentitylessscriptablearrayinradius( var_0.scriptable_addautousecallback, "classname", var_0._id_121DF, var_0._id_121E6 );
        case "getUnusedLootCacheArray":
            var_1 = getlootspawnpoint( var_0._id_121DF, var_0._id_121E6, 0, 1 );
            return var_1;
        case "questPointsArray":
            return disablelootspawnpoint( var_0._id_11C76, var_0._id_121DF, var_0._id_121E6, 0, 1 );
        case "questPointsArrayWZTrain":
            var_2 = lastdropedtime( var_0 );

            if ( isdefined( var_2 ) )
                return var_2;

            var_0._id_13112 = undefined;
            return disablelootspawnpoint( var_0._id_11C76, var_0._id_121DF, var_0._id_121E6, 0, 1 );
        case "getKiosks":
            var_3 = scripts\mp\gametypes\br_armory_kiosk.gsc::mounttrig();
            var_4 = [];

            foreach ( var_6 in level.br_armory_kiosk.scriptables )
            {
                if ( !istrue( var_6.disabled ) )
                    var_4[var_4.size] = var_6;
            }

            return var_4;
        case "getInactiveHelipads":
            if ( isdefined( level.br_plunder_sites ) )
            {
                var_8 = scripts\mp\gametypes\br_plunder.gsc::obj_room_fire_01();
                var_9 = [];

                foreach ( var_11 in var_8 )
                {
                    if ( istrue( var_11 getscriptablepartstate( var_11.type ) == "hidden" ) )
                        var_9[var_9.size] = var_11;
                }

                if ( var_9.size == 0 )
                    return var_8;

                return var_9;
            }
        default:
    }
}

lastdropedtime( var_0 )
{
    var_1 = undefined;

    if ( isdefined( level._id_135FD ) && isdefined( level._id_135FD._id_12D76 ) )
    {
        if ( [[ level._id_135FD.funcs.bot_gametype_defender_limit_for_team ]]() )
            return undefined;

        if ( [[ level._id_135FD.funcs.bot_gametype_get_allied_defenders_for_team ]]( 100, 20 ) )
            return undefined;

        var_2 = [];

        foreach ( var_4 in level._id_135FD._id_12D76 )
        {
            if ( isdefined( var_4.idflags_hyper_burst_round ) && level._id_135FD.fulton_init >= var_4.idle_sfx )
                var_2[var_2.size] = var_4;
        }

        var_6 = 0;
        var_7 = undefined;

        foreach ( var_4 in var_2 )
        {
            if ( isdefined( var_4.idflags_source_left_hand ) && var_6 < var_4.idflags_source_left_hand )
            {
                var_6 = var_4.idflags_source_left_hand;
                var_7 = var_4;
            }
        }

        if ( var_2.size > 1 )
        {
            if ( isdefined( var_7 ) )
                var_2 = scripts\engine\utility::array_remove( var_2, var_7 );
        }

        var_4 = scripts\engine\utility::random( var_2 );
        var_4.idflags_source_left_hand = gettime();
        level._id_135FD.fulton_handlefataldamage = var_4;
        var_10 = spawnstruct();
        var_10.origin = var_4.origin;
        var_10.angles = var_4.angles;
        var_10.spawnflags = 4;
        var_10.traincar = var_4;
        var_10.offset = var_4.idflags_hyper_burst_round;
        var_1 = [];
        var_1[var_1.size] = var_10;
    }

    return var_1;
}

add_object_to_trap_room_ents( var_0, var_1 )
{
    var_0 = scripts\engine\utility::array_randomize( var_0 );

    if ( !isdefined( var_1.mintime ) )
        var_1.mintime = 0;

    if ( !isdefined( var_1._id_12DE6 ) )
        var_1._id_12DE6 = 190;

    var_2 = isdefined( var_1._id_121E4 ) && isdefined( var_1._id_121E5 );

    if ( istrue( var_1._id_121E1 ) )
        var_3 = scripts\mp\gametypes\br_circle.gsc::getmintimetillpointindangercircle( var_1._id_121DF );
    else
        var_3 = 0;

    var_4 = spawnstruct();
    var_5 = undefined;
    var_6 = var_1._id_121E6;

    foreach ( var_13, var_8 in var_0 )
    {
        var_9 = distance2d( var_8.origin, var_1._id_121DF );

        if ( var_9 < var_1._id_121E7 )
            continue;

        if ( !level.br_circle_disabled )
        {
            var_10 = scripts\mp\gametypes\br_circle.gsc::getmintimetillpointindangercircle( var_8.origin );

            if ( var_10 <= var_3 )
                continue;

            if ( var_1._id_12DE6 > 0 )
            {
                var_11 = var_9 / var_1._id_12DE6;
                var_10 = var_10 - var_11;
            }

            if ( var_10 < var_1.mintime )
                continue;
        }

        if ( var_2 )
        {
            if ( var_9 < var_1._id_121E4 )
            {
                if ( var_9 >= var_1._id_121E5 )
                    var_12 = 0;
                else
                    var_12 = var_1._id_121E5 - var_9;
            }
            else
                var_12 = var_9 - var_1._id_121E4;

            if ( var_12 < var_6 )
            {
                var_6 = var_12;
                var_5 = var_13;

                if ( var_12 <= 0 )
                    break;
            }

            continue;
        }

        var_5 = var_13;
    }

    var_14 = undefined;

    if ( isdefined( var_5 ) )
        var_14 = var_0[var_5];
    else
    {

    }

    return var_14;
}

_runcreatequestlocale( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
        var_2 = self [[ level.questinfo.quests[var_0].funcs["create_locale"] ]]( var_1 );
    else
        var_2 = self [[ level.questinfo.quests[var_0].funcs["create_locale"] ]]();

    return var_2;
}

addzombiepowerbutton( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
        self [[ level.questinfo.quests[var_0].funcs["move_locale"] ]]( var_1 );
    else
        self [[ level.questinfo.quests[var_0].funcs["move_locale"] ]]();
}

_runcheckiflocaleisavailable( var_0 )
{
    return self [[ level.questinfo.quests[var_0].funcs["check_available"] ]]();
}

_findexisitingquestlocale( var_0, var_1 )
{
    var_2 = getquestdata( var_0 );

    if ( !isdefined( var_2 ) || !isdefined( var_2.instances ) )
        return undefined;

    foreach ( var_4 in var_2.instances )
    {
        var_5 = distance2d( var_1._id_121DF, var_4.curorigin );

        if ( var_5 > var_1._id_121E6 )
            continue;

        if ( !var_4 _runcheckiflocaleisavailable( var_0 ) )
            continue;

        return var_4;
    }

    return undefined;
}

lastgunkilltime( var_0, var_1 )
{
    if ( isdefined( var_1._id_11F03 ) )
        var_2 = var_1._id_11F03;
    else
    {
        var_3 = activate_target( var_1 );

        if ( istrue( var_1._id_13112 ) )
            var_2 = var_3[0];
        else
            var_2 = add_object_to_trap_room_ents( var_3, var_1 );
    }

    return var_2;
}

requestquestlocale( var_0, var_1, var_2 )
{
    var_3 = undefined;

    if ( !isdefined( var_2 ) || !var_2 )
        var_3 = _findexisitingquestlocale( var_0, var_1 );

    if ( !isdefined( var_3 ) )
    {
        var_4 = lastgunkilltime( var_0, var_1 );
        var_3 = _runcreatequestlocale( var_0, var_4 );
    }

    _id_12A94( var_3 );
    return var_3;
}

_id_12A94( var_0 )
{
    self._id_12A93 = var_0;
    var_0.subscribedinstances = scripts\engine\utility::array_add( var_0.subscribedinstances, self );
}

throwingknife_fire_begin_fx( var_0, var_1 )
{
    var_2 = lastgunkilltime( var_0, var_1 );
    addzombiepowerbutton( var_0, var_2 );
}

leavequestlocale()
{
    var_0 = getquestdata( self.questcategory ).locale_type;
    var_1 = self._id_12A93;
    var_1.subscribedinstances = scripts\engine\utility::array_remove( var_1.subscribedinstances, self );

    if ( var_1.subscribedinstances.size <= 0 )
        var_1 removequestinstance();
}

getquestdata( var_0 )
{
    return level.questinfo.quests[var_0];
}

getquestinstancedata( var_0, var_1 )
{
    return level.questinfo.quests[var_0].instances[var_1];
}

obj_vindia( var_0, var_1 )
{
    var_2 = undefined;

    if ( isdefined( level.questinfo ) && isdefined( level.questinfo.quests[var_0] ) )
        var_2 = level.questinfo.quests[var_0].instances[var_1];

    return var_2;
}

checkforinstance( var_0, var_1 )
{
    if ( isdefined( level.questinfo.quests[var_0].instances[var_1] ) )
        return 1;

    return 0;
}

_validateplayerfilter( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        if ( isint( var_0 ) )
            return level.questinfo.quests[self.questcategory].filters[var_0];

        if ( isarray( var_0 ) )
            return var_0;
    }
    else if ( isdefined( level.questinfo.quests[self.questcategory].filters ) )
        return level.questinfo.quests[self.questcategory].filters[0];
    else
        return level.questinfo.defaultfilter;
}

_validateplayer( var_0, var_1 )
{
    foreach ( var_3 in var_1 )
    {
        if ( ![[ var_3 ]]( var_0 ) )
            return 0;
    }

    return 1;
}

isplayervalid( var_0, var_1 )
{
    var_2 = _validateplayerfilter( var_1 );
    return _validateplayer( var_0, var_2 );
}

isteamvalid( var_0, var_1 )
{
    var_2 = _validateplayerfilter( var_1 );

    foreach ( var_4 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, self.squadindex ) )
    {
        if ( _validateplayer( var_4, var_2 ) )
            return 1;
    }

    return 0;
}

isentireteamvalid( var_0, var_1 )
{
    var_2 = _validateplayerfilter( var_1 );

    foreach ( var_4 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, self.squadindex ) )
    {
        if ( !_validateplayer( var_4, var_2 ) )
            return 0;
    }

    return 1;
}

getvalidplayersinteam( var_0, var_1 )
{
    var_2 = _validateplayerfilter( var_1 );
    var_3 = [];

    foreach ( var_5 in level.teamdata[var_0]["players"] )
    {
        if ( _validateplayer( var_5, var_2 ) )
            var_3[var_3.size] = var_5;
    }

    return var_3;
}

onquesttablethide( var_0, var_1, var_2 )
{
    if ( !isdefined( var_2 ) )
        var_2 = self.squadindex;

    var_3 = _validateplayerfilter( var_1 );
    var_4 = [];

    foreach ( var_6 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, var_2 ) )
    {
        if ( _validateplayer( var_6, var_3 ) )
            var_4[var_4.size] = var_6;
    }

    return var_4;
}

getvalidplayersinarray( var_0, var_1 )
{
    var_2 = _validateplayerfilter( var_1 );
    var_3 = [];

    foreach ( var_5 in var_0 )
    {
        if ( _validateplayer( var_5, var_2 ) )
            var_3[var_3.size] = var_5;
    }

    return var_3;
}

sortvalidplayersinarray( var_0, var_1 )
{
    var_2 = _validateplayerfilter( var_1 );
    var_3 = [];
    var_3["valid"] = [];
    var_3["invalid"] = [];

    foreach ( var_5 in var_0 )
    {
        if ( _validateplayer( var_5, var_2 ) )
        {
            var_3["valid"][var_3["valid"].size] = var_5;
            continue;
        }

        var_3["invalid"][var_3["invalid"].size] = var_5;
    }

    return var_3;
}

ondamagereliclfo( var_0, var_1, var_2 )
{
    var_3 = ( 0, 0, 0 );
    var_4 = onquesttablethide( var_0, var_1, var_2 );

    if ( var_4.size <= 0 )
        return var_3;

    foreach ( var_6 in var_4 )
        var_3 = var_3 + var_6.origin;

    var_3 = var_3 / var_4.size;
    return var_3;
}

getteamcenter( var_0, var_1 )
{
    var_2 = ( 0, 0, 0 );
    var_3 = getvalidplayersinteam( var_0, var_1 );

    if ( var_3.size <= 0 )
        return var_2;

    foreach ( var_5 in var_3 )
        var_2 = var_2 + var_5.origin;

    var_2 = var_2 / var_3.size;
    return var_2;
}

filtercondition_isdead( var_0 )
{
    if ( !isalive( var_0 ) )
        return 0;

    return 1;
}

filtercondition_isdowned( var_0 )
{
    if ( istrue( var_0.inlaststand ) )
        return 0;

    return 1;
}

filtercondition_ingulag( var_0 )
{
    if ( var_0 scripts\mp\gametypes\br_public.gsc::rungwperif_flak() )
        return 0;

    return 1;
}

filtercondition_hasbeeningulag( var_0 )
{
    if ( isdefined( var_0.gulag ) )
        return 0;

    return 1;
}

laser_vfx_start_pos( var_0 )
{
    if ( istrue( var_0 scripts\mp\gametypes\br_public.gsc::zombiejumping() ) )
        return 0;

    return 1;
}

filtercondition_isghost( var_0 )
{
    if ( istrue( var_0 scripts\mp\gametypes\br_public.gsc::zombie() ) )
        return 0;

    return 1;
}

v_start_pos( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_2 ) )
        var_2 = 0;

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    if ( !isdefined( var_4 ) )
        var_4 = 0;

    var_5 = var_4;
    var_5 = var_5 << 5 | var_3;
    var_5 = var_5 << 6 | var_2;
    var_5 = var_5 << 5 | var_1;
    var_5 = var_5 << 5 | var_0;
    return var_5;
}

displayteamsplash( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_3 ) )
        var_3 = self.squadindex;

    var_4 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, var_3 );
    hint_escape_maze( var_4, var_1, var_2 );
}

hint_escape_maze( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) )
        return;

    foreach ( var_4 in var_0 )
    {
        if ( var_4 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
            continue;

        if ( isbot( var_4 ) && scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
            continue;

        if ( isdefined( var_2 ) )
        {
            if ( isdefined( var_2.excludedplayers ) )
            {
                if ( scripts\engine\utility::array_contains( var_2.excludedplayers, var_4 ) )
                    continue;
            }
        }

        displayplayersplash( var_4, var_1, var_2 );
    }
}

displayplayersplash( var_0, var_1, var_2 )
{
    if ( isdefined( var_2 ) && isdefined( var_2.usingobject ) )
        var_0 thread scripts\mp\hud_message::showsplash( var_1, var_2.usingobject );
    else if ( isdefined( var_2 ) && isdefined( var_2.intvar ) )
        var_0 thread scripts\mp\hud_message::showsplash( var_1, var_2.intvar );
    else
        var_0 thread scripts\mp\hud_message::showsplash( var_1 );
}

hint_gasmask( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = var_2 * var_2;
    var_6 = [];

    foreach ( var_8 in level.players )
    {
        var_9 = distancesquared( var_1, var_8.origin );

        if ( var_9 > var_5 )
            continue;

        if ( isdefined( var_4.isparachutespawning ) && scripts\engine\utility::array_contains( var_4.isparachutespawning, var_8.team ) )
            continue;

        if ( isdefined( var_4.excludedplayers ) && scripts\engine\utility::array_contains( var_4.excludedplayers, var_8 ) )
            continue;

        if ( !isplayervalid( var_8, var_3 ) )
            continue;

        var_6[var_6.size] = var_8;
    }

    if ( var_6.size > 0 )
    {
        foreach ( var_8 in var_6 )
            displayplayersplash( var_8, var_0, var_4 );
    }
}

hint_obj_id( var_0, var_1, var_2 )
{
    var_3 = var_0 getentitynumber();

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    if ( !isdefined( var_2 ) )
        var_2 = 0;

    var_4 = 0;
    var_4 = var_2 << 12 | var_3 << 4 | var_1;
    self setclientomnvar( "ui_br_expanded_obit_message", var_4 );
}

hint_obj_name( var_0, var_1, var_2, var_3 )
{
    foreach ( var_5 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, var_1.squadindex ) )
        var_5 hint_obj_id( var_1, var_2, var_3 );
}

parachutecleanup( var_0, var_1 )
{
    var_0 thread scripts\mp\utility\points::giveunifiedpoints( var_1 );
}

passes_final_capsule_check( var_0, var_1 )
{
    foreach ( var_3 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, self.squadindex ) )
        var_3 thread scripts\mp\utility\points::giveunifiedpoints( var_1 );
}

detonatefx( var_0, var_1 )
{
    var_2 = scripts\mp\gametypes\br_rewards.gsc::nearby_ai_investigate_grenade( 0, 0, 1, 0, 0 );
    var_0 scripts\mp\gametypes\br_rewards.gsc::_id_127C5( var_2 );
    level thread scripts\mp\gametypes\br_rewards.gsc::spawnpoint_clearspawnpoint();
}

giveteamplunderflat( var_0, var_1, var_2 )
{
    var_3 = getdvarfloat( "scr_br_plunder_while_spectating", 0.4 );
    var_4 = 0;
    var_5 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, var_2 );

    foreach ( var_7 in var_5 )
    {
        if ( isbot( var_7 ) && scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
            continue;

        var_8 = var_1;

        if ( !scripts\mp\utility\player::isreallyalive( var_7 ) )
            var_8 = int( var_1 * var_3 );

        var_7 scripts\mp\gametypes\br_plunder.gsc::_id_11960( var_8 );
        level.br_plunder._id_11A9E = level.br_plunder._id_11A9E + var_8;
    }
}

giveteamplunderdistributive( var_0, var_1 )
{
    var_2 = int( var_1 / var_0.size );

    foreach ( var_4 in var_0 )
    {
        if ( isbot( var_4 ) && scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
            continue;

        var_4 scripts\mp\gametypes\br_plunder.gsc::_id_11960( var_2 );
        level.br_plunder._id_11A9E = level.br_plunder._id_11A9E + var_2;
        scripts\mp\gametypes\br_analytics.gsc::_id_12D37( var_4, "mission", var_2 );
    }
}

dropplunder( var_0, var_1, var_2, var_3 )
{
    if ( !istrue( level.br_plunder_enabled ) )
        return;

    var_4 = 0;
    var_5 = 1;
    var_6 = 2;
    var_7[0] = [ "brloot_plunder_cash_uncommon_3", level.br_plunder.quantityepic, getdvarfloat( "scr_br_quest_reward_epic", 0.2 ) ];
    var_7[1] = [ "brloot_plunder_cash_uncommon_2", level.br_plunder.quantityrare, getdvarfloat( "scr_br_quest_reward_rare", 0.3 ) ];
    var_7[2] = [ "brloot_plunder_cash_uncommon_1", level.br_plunder.quantitycommon, getdvarfloat( "scr_br_quest_reward_common", 0.5 ) ];
    var_8 = 0;

    for ( var_9 = 0; var_9 < var_7.size; var_9++ )
    {
        var_10 = var_7[var_9];
        var_8 = var_8 + var_10[var_6];
    }

    var_11 = 0;

    for ( var_9 = 0; var_9 < var_7.size; var_9++ )
    {
        var_10 = var_7[var_9];
        var_10[var_6] = var_10[var_6] / var_8;
        var_11 = var_11 + var_10[var_5] * var_10[var_6];
    }

    var_12 = var_0 / var_11;
    var_13 = var_0;
    var_14 = [];

    for ( var_9 = 0; var_9 < var_7.size; var_9++ )
    {
        var_10 = var_7[var_9];
        var_14[var_9] = int( var_12 * var_10[var_6] );
        var_13 = var_13 - var_14[var_9] * var_10[var_5];
    }

    if ( var_13 > 0 )
    {
        for ( var_9 = 0; var_9 < var_7.size; var_9++ )
        {
            var_10 = var_7[var_9];
            var_15 = int( var_13 / var_10[var_5] );
            var_14[var_9] = var_14[var_9] + var_15;
            var_13 = var_13 - var_15 * var_10[var_5];
        }
    }

    var_16 = [];

    for ( var_9 = 0; var_9 < var_14.size; var_9++ )
    {
        for ( var_17 = 0; var_17 < var_14[var_9]; var_17++ )
            var_16[var_16.size] = var_9;
    }

    var_16 = scripts\engine\utility::array_randomize( var_16 );
    var_18 = scripts\mp\gametypes\br_pickups.gsc::register_respawn_functions();

    for ( var_9 = 0; var_9 < var_16.size; var_9++ )
    {
        var_19 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_18, var_1, var_2, var_3 );
        scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_7[var_16[var_9]][var_4], var_19, var_7[var_16[var_9]][var_5], 1 );
    }

    level.br_plunder._id_11A9E = level.br_plunder._id_11A9E + var_0;
    level thread scripts\mp\gametypes\br_plunder.gsc::dropplundersounds( var_1, var_16.size );
}

getquestindex( var_0 )
{
    return level.questinfo._id_12B27[var_0].index;
}

getquesttableindex( var_0 )
{
    var_1 = int( tablelookup( "mp/brmissions.csv", 1, var_0, 0 ) );
    return var_1;
}

uiobjectiveshow( var_0 )
{
    var_1 = getquestindex( var_0 );
    _id_123CA( var_1 );
}

uiobjectiveshowtoteam( var_0, var_1 )
{
    foreach ( var_3 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_1, self.squadindex ) )
        var_3 uiobjectiveshow( var_0 );
}

uiobjectivehide()
{
    _id_123CA( 0 );
}

uiobjectivehidefromteam( var_0 )
{
    foreach ( var_2 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, self.squadindex ) )
        var_2 uiobjectivehide();
}

uiobjectivesetparameter( var_0 )
{
    self setclientomnvar( "ui_br_objective_param", var_0 );
}

_id_12FB7( var_0 )
{
    self setclientomnvar( "ui_br_objective_loot_id", var_0 );
}

get_minigun_path( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_3 ) )
    {
        self.mapcircle = getmaxobjectivecount( var_3[0], var_3[1], var_3[2] );
        self.extract_ontimerexpired = var_3;
    }
    else
    {
        self.mapcircle = getmaxobjectivecount( 0, 0, 0 );
        self.extract_ontimerexpired = ( 0, 0, 0 );
    }

    if ( !isdefined( var_2 ) )
        var_2 = 0;

    self.mapcircle setmapcirclecolorindex( var_0 );
    self.mapcircle setmapcircleiconindex( var_1 );
    self.mapcircle setmapcirclestyleindex( var_2 );
    self.mapcircle hide();
}

throwing_knife_cp_trytopickup( var_0 )
{
    self.mapcircle.origin = var_0;
    self.extract_ontimerexpired = var_0;
}

_id_1254F()
{
    self.mapcircle show();
}

playertospectate()
{
    self.mapcircle hide();
}

_id_12550( var_0 )
{
    self.mapcircle showtoplayer( var_0 );
}

playertimestart( var_0 )
{
    self.mapcircle hidefromplayer( var_0 );
}

hacks_needed()
{
    self.mapcircle delete();
}

_id_12395( var_0 )
{
    self.mapcircle.origin = ( self.mapcircle.origin[0], self.mapcircle.origin[1], var_0 );
}

get_model_for_color_wire_cut( var_0, var_1, var_2 )
{
    self.objectiveiconid = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );

    if ( self.objectiveiconid != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( self.objectiveiconid, var_1, ( 0, 0, 0 ), var_0 );
        scripts\mp\objidpoolmanager::update_objective_setbackground( self.objectiveiconid, 1 );
        objective_showtoplayersinmask( self.objectiveiconid );
        scripts\mp\objidpoolmanager::objective_set_play_intro( self.objectiveiconid, 1 );

        if ( isdefined( var_2 ) )
            throwingknife_fire_clear_fx( var_2 );
    }
    else
    {

    }
}

throwingknife_fire_clear_fx( var_0 )
{
    scripts\mp\objidpoolmanager::update_objective_position( self.objectiveiconid, var_0 );
}

_id_12552( var_0 )
{
    objective_addclienttomask( self.objectiveiconid, var_0 );
}

_id_12551( var_0 )
{
    objective_addalltomask( var_0 );
}

playertouching( var_0 )
{
    objective_removeclientfrommask( self.objectiveiconid, var_0 );
}

enabledskiplaststand()
{
    return isdefined( self.objectiveiconid );
}

hacks_started()
{
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( self.objectiveiconid );
    scripts\mp\objidpoolmanager::returnobjectiveid( self.objectiveiconid );
}

_id_1313A( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_3 = scripts\engine\trace::create_contents( 0, 1, 0, 1, 0, 0, 0 );
    var_4 = scripts\engine\trace::ray_trace( var_0 + ( 0, 0, 4000 ), var_0, undefined, var_3, undefined, 1 )["position"];
    var_5 = spawn( "script_model", var_4 );

    if ( !isdefined( var_5 ) )
        return;

    var_5.angles = vectortoangles( ( 0, 0, 1 ) );
    var_5 setmodel( "equip_flare_br" );
    wait 0.5;
    var_5 setscriptablepartstate( "launch", "start", 0 );
    var_6 = "start";

    if ( var_1 == "revive" )
        var_6 = "start_revive";

    var_5 setscriptablepartstate( "travel", var_6, 0 );
    var_5 thread ai_give_flashlight( var_1, var_2 );
}

ai_give_flashlight( var_0, var_1 )
{
    self endon( "death" );
    level endon( "game_ended" );
    var_2 = 3.125;
    self moveto( self.origin + ( 0, 0, 2500 ), var_2 );
    wait( var_2 );
    ai_flash_swap( var_0, var_1 );
}

ai_flash_swap( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = "<undefined>";

    self setscriptablepartstate( "travel", "off", 0 );

    if ( !ai_force_damage_hit( var_0 ) )
        return;

    var_2 = "start_" + var_0;
    self setscriptablepartstate( "explode", var_2, 0 );
    thread _id_12490( var_1 );
}

ai_force_damage_hit( var_0 )
{
    var_1 = 0;

    if ( isdefined( var_0 ) )
    {
        switch ( var_0 )
        {
            case "revive":
            case "dom":
                var_1 = 1;
                break;
            case "attack":
                var_1 = 1;
                break;
            case "exfil":
                var_1 = 1;
                break;
        }
    }

    return var_1;
}

_id_12490( var_0 )
{
    self endon( "death" );
    level endon( "game_ended" );
    var_1 = 12;

    if ( isdefined( var_0 ) && var_0 > 1 )
        var_1 = var_0;

    self setscriptablepartstate( "phosphorus", "start", 0 );
    wait 0.3;
    self setscriptablepartstate( "phosphorus_loop", "start", 0 );
    wait( var_1 );
    self setscriptablepartstate( "phosphorus", "end", 0 );
    wait 0.3;
    self setscriptablepartstate( "phosphorus_loop", "off", 0 );
    wait 5;
    self delete();
}

_id_11C68( var_0 )
{
    var_1 = 0;

    if ( var_0.spawnflags & 4 )
        var_1 = 256;
    else if ( var_0.spawnflags & 2 )
        var_1 = 128;
    else if ( var_0.spawnflags & 1 )
        var_1 = 168;
    else if ( var_0.spawnflags & 16 )
        var_1 = 256;

    return var_1;
}

_id_11C73( var_0, var_1 )
{
    var_2 = getquestdata( var_0 );
    var_2._id_13121 = getdvarint( "scr_br_" + var_0 + "_enableQuestTime", var_1 );
}

_id_11C74( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = 0;

    var_2 = var_0 + var_1;
    var_3 = getquestdata( self.category );

    if ( !var_3._id_13121 )
        return;

    self.subway_black_screen_fade_in = gettime() + var_2 * 1000;
    _id_11C75();
}

_id_11C72( var_0 )
{
    var_1 = getquestdata( self.category );

    if ( !var_1._id_13121 )
        return;

    self.subway_black_screen_fade_in = self.subway_black_screen_fade_in + var_0 * 1000;
    _id_11C75();
}

_id_11C75()
{
    var_0 = undefined;

    if ( istrue( level.questinfo._id_124DD ) && isdefined( self.team ) )
        var_0 = scripts\mp\gametypes\br_public.gsc::ondefuse( self.team, self.squadindex );
    else
        var_0 = scripts\mp\gametypes\br_public.gsc::ondefuse( self.id, self.squadindex );

    foreach ( var_2 in var_0 )
        var_2 setclientomnvar( "ui_br_objective_countdown_timer", self.subway_black_screen_fade_in );

    var_4 = getquestdata( self.category );
    var_5 = var_4.funcs["onTimerUpdate"];

    if ( isdefined( var_5 ) )
        [[ var_5 ]]();

    thread addthrowingknifecharge();
}

addthrowingknifecharge()
{
    self notify( "updateQuestTimer" );
    level endon( "game_ended" );
    self endon( "updateQuestTimer" );
    self endon( "questEnded" );
    var_0 = ( self.subway_black_screen_fade_in - gettime() ) / 1000;
    wait( var_0 );
    var_1 = getquestdata( self.category );
    var_2 = var_1.funcs["onTimerExpired"];

    if ( isdefined( var_2 ) )
        [[ var_2 ]]();

    self.result = "timeout";
    thread removequestinstance();
}

_id_11DE0( var_0 )
{
    if ( !isdefined( self.fulton_interactions_disabled ) )
        self.fulton_interactions_disabled = [];

    if ( !scripts\engine\utility::array_contains( self.fulton_interactions_disabled, var_0 ) )
        self.fulton_interactions_disabled[self.fulton_interactions_disabled.size] = var_0;
}

parachuteprelaststandfunction( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_4 ) )
        var_4 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, self.squadindex );

    foreach ( var_7 in var_4 )
    {
        if ( !isdefined( var_7 ) )
            continue;

        if ( !isdefined( var_7.subwave_progression ) )
            var_7.subwave_progression = 1;
        else
            var_7.subwave_progression++;

        var_7 scripts\mp\gametypes\br_gametype_dmz.gsc::usingtacmap();

        if ( getdvarint( "OMSQPMNQLS", 0 ) && var_7 scripts\mp\utility\game::onlinestatsenabled() )
            var_7 setplayerdata( "mp", "use_quest_complete_history", 0, 1 );
    }

    return parachuteprelaststandfunc( self.questcategory, self._id_11FD5, self.modifier, var_0, var_1, var_2, var_3, var_4, var_5 );
}

parachuteprelaststandfunc( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    var_9 = objective_minimapupdate( var_0, var_1, var_2 );
    return parachuteoverheadwarningradius( var_9, var_3, var_4, var_5, var_6, var_7, var_8 );
}

parachuteoverheadwarningradius( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = [];
    level.get_track_end_struct = 0;
    level.little_bird_mg_cp_onexitvehicle = 0;
    var_8 = objective_set_hot( var_0 );

    foreach ( var_14, var_10 in var_8 )
    {
        [var_12, var_13] = parachuteoverheadwarningtimeoutms( var_14, var_10, var_1, var_2, var_3, var_4, var_5, var_6 );

        if ( isdefined( var_7[var_12] ) )
        {
            if ( isstring( var_7[var_12] ) )
                var_7[var_12] = var_7[var_12] + "," + var_13;
            else
                var_7[var_12] = var_7[var_12] + var_13;

            continue;
        }

        var_7[var_12] = var_13;
    }

    level.get_track_end_struct = undefined;
    level.little_bird_mg_cp_onexitvehicle = undefined;
    return var_7;
}

parachuteoverheadwarningtimeoutms( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = objectiveids( var_2 );
    var_9 = objectiveachievementkillcount( var_0 );
    var_10 = objectivedescription( var_0 );

    if ( !isstring( var_10 ) )
    {
        var_11 = objectivelocations( var_1, var_8 );

        if ( var_11 != 1.0 )
        {
            var_10 = var_10 * var_11;
            var_10 = dropcondensedplunder( var_9, var_10 );
        }
    }

    var_10 = parachuteoverheadwarningprematchtimeoutms( var_9, var_10, var_2, var_3, var_4, var_5, var_6, var_7 );
    return [ var_9, var_10 ];
}

parachuteoverheadwarningprematchtimeoutms( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = self.squadindex;

    if ( isdefined( var_7 ) )
        var_8 = var_7;

    switch ( var_0 )
    {
        case "plunder":
            if ( istrue( level.br_plunder_enabled ) )
            {
                var_9 = isdefined( var_5 ) && istrue( var_5.vars_print );

                if ( getdvar( "scr_br_gametype", "" ) != "dmz" && getdvar( "scr_br_gametype", "" ) != "risk" && !var_9 )
                    giveteamplunderflat( var_2, var_1, var_8 );
                else if ( var_6.size > 0 )
                    giveteamplunderdistributive( var_6, var_1 );
                else
                    var_1 = 0;
            }
            else
                var_1 = 0;

            break;
        case "xp":
            if ( isdefined( var_5 ) && istrue( var_5.vault_assault_infil ) )
                var_10 = var_6;
            else
                var_10 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_2, var_8 );

            foreach ( var_12 in var_10 )
            {
                var_12 thread scripts\mp\events::killeventtextpopup( "br_missionComplete", 0 );
                var_12 scripts\mp\rank::giverankxp( "br_missionComplete", var_1 );
                var_12.circletimernext = scripts\mp\gametypes\br.gsc::get_int_or_0( var_12.circletimernext ) + var_1;
            }

            break;
        case "weapon_xp":
            if ( isdefined( var_5 ) && istrue( var_5.vars_update ) )
                var_10 = var_6;
            else
                var_10 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_2, var_8 );

            foreach ( var_12 in var_10 )
            {
                var_15 = var_12.lastnormalweaponobj;
                var_12 scripts\mp\gametypes\br.gsc::padding_damage( "", var_1, var_15, 0, 0 );
            }

            break;
        case "loot_table":
            if ( getdvar( "scr_br_gametype", "" ) != "dmz" && getdvar( "scr_br_gametype", "" ) != "risk" )
            {
                var_17 = pickscriptablelootitem( var_5, var_1 );
                _id_11C6A( var_2, var_17, var_3, var_4, istrue( level.little_bird_mg_cp_onexitvehicle ), var_8 );
            }

            break;
        case "loot_cache":
            var_17 = pickscriptablelootitem( var_5, var_1 );
            _id_11C6A( var_2, var_17, var_3, var_4, 1, var_8 );
            level.little_bird_mg_cp_onexitvehicle = 1;
            break;
        case "loot_items":
            var_17 = strtok( var_1, " " );
            _id_11C6A( var_2, var_17, var_3, var_4, istrue( level.little_bird_mg_cp_onexitvehicle ), var_8 );
            break;
        case "loot_items_drop":
            var_17 = strtok( var_1, " " );
            var_18 = undefined;

            if ( isdefined( var_5 ) )
                var_18 = var_5.preventleave;

            _id_11C6A( var_2, var_17, var_3, var_4, 1, var_8, 0, var_18 );
            break;
        case "drop_bag":
            var_19 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_2, var_8 )[0];
            detonatefx( var_19, var_3 );
            break;
        case "circle_peek":
            _id_11C69( var_2, var_8 );
            break;
        case "reward_tier":
            thread anyoneisinmarkingrange( var_2, var_1, var_8 );
            break;
        case "blueprint_chance":
            if ( !getdvarint( "scr_br_alt_mode_bblitz", 0 ) )
            {
                var_20 = scripts\mp\gametypes\br_blueprint_extract_spawn.gsc::cargo_truck_mg_enterend( var_3 );

                if ( isdefined( var_20 ) )
                {
                    scripts\mp\gametypes\br_blueprint_extract_spawn.gsc::cargo_truck_mg_cp_init( var_2, self.tablet );
                    var_17 = [ var_20 ];
                    _id_11C6A( var_2, var_17, var_3, var_4, istrue( level.little_bird_mg_cp_onexitvehicle ) );
                    displayteamsplash( var_2, "br_blueprint_extract_quest_spawned", undefined, var_8 );
                }
            }

            break;
        case "uav":
            var_21 = mp_runner_patch( var_2, var_6, var_3, var_8 );

            if ( isdefined( var_21 ) )
                var_21 thread _id_11C6E( var_1 );

            break;
        case "juggernaut":
            var_22 = spawnstruct();
            var_22.origin = var_3;
            var_22.init_relic_rocket_kill_ammo = 300;
            var_22.transitionplayersoutofac130cinematic = 1;
            level thread scripts\mp\gametypes\br_jugg_common.gsc::init_relic_amped( var_22, "quest_reward" );
            break;
        case "killstreak":
            var_23 = mp_runner_patch( var_2, var_6, var_3, var_8 );

            if ( isdefined( var_23 ) )
                var_23 thread _id_11C6C( var_1 );

            break;
        case "quest":
            var_12 = mp_runner_patch( var_2, var_6, var_3, var_8 );

            if ( isdefined( var_12 ) )
                var_12 thread _id_11C6D( var_1 );

            break;
        case "none":
            break;
        default:
            break;
    }

    return var_1;
}

mp_runner_patch( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_1 ) && var_1.size > 0 )
        var_4 = var_1;
    else
        var_4 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, var_3 );

    var_5 = undefined;
    var_6 = undefined;

    foreach ( var_8 in var_4 )
    {
        var_9 = distance2d( var_8.origin, var_2 );

        if ( !isdefined( var_6 ) || var_9 < var_6 )
        {
            var_6 = var_9;
            var_5 = var_8;
        }
    }

    return var_5;
}

_id_1243E()
{
    if ( istrue( level.br_circle_disabled ) )
        return;

    level.extractcountdown = [];
    level._id_12BF1 = [];

    for ( var_0 = 1; var_0 < level.br_level.br_circleradii.size; var_0++ )
    {
        var_1 = level.br_level.br_circleradii[var_0];
        var_2 = level.br_level.circleradius[var_0];
        level.extractcountdown[var_0] = getmaxobjectivecount( var_2[0], var_2[1], var_1 );
        level.extractcountdown[var_0] setmapcirclecolorindex( 4 );
        level.extractcountdown[var_0] setmapcirclestyleindex( 1 );
        level.extractcountdown[var_0] hide();
    }

    level thread extractcallback();
}

extractcallback()
{
    level endon( "game_ended" );
    level endon( "CirclePeekCleanup" );

    for (;;)
    {
        level waittill( "br_circle_set" );
        level.extractcountdown[level.br_circle.circleindex + 1] delete();

        foreach ( var_1 in getarraykeys( level._id_12BF1 ) )
        {
            level._id_12BF1[var_1]--;

            if ( level._id_12BF1[var_1] < 0 )
                level._id_12BF1[var_1] = 0;
        }
    }
}

_id_11C69( var_0, var_1 )
{
    if ( istrue( level.br_circle_disabled ) )
        return;

    if ( !isdefined( level._id_12BF1[var_0] ) )
        level._id_12BF1[var_0] = 0;

    level._id_12BF1[var_0]++;
    var_2 = level._id_12BF1[var_0] + level.br_circle.circleindex + 1;

    if ( !isdefined( level.extractcountdown[var_2] ) )
    {
        foreach ( var_4 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, var_1 ) )
            var_4 scripts\mp\utility\lower_message::_id_12394( "circle_peek_limit", undefined, 5 );

        return;
    }

    foreach ( var_4 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, var_1 ) )
        level.extractcountdown[var_2] showtoplayer( var_4 );
}

objectives_amount( var_0 )
{
    var_1 = level.questinfo._id_11FD7.dropcount[var_0];

    if ( !isdefined( var_1 ) )
    {
        var_1 = tablelookup( "mp/brmissions.csv", 1, var_0, 7 );
        level.questinfo._id_11FD7.dropcount[var_0] = var_1;
    }

    return var_1;
}

objective_set_hot( var_0 )
{
    var_1 = objective_timers_reset_both();
    var_2 = level.questinfo._id_11FD7.physicssettled[var_0];

    if ( !isdefined( var_2 ) )
    {
        var_2 = [];
        var_3 = 2;
        var_4 = 3;

        for (;;)
        {
            var_5 = tablelookup( var_1, 0, var_0, var_3 );

            if ( var_5 == "" )
                break;

            var_6 = tablelookup( var_1, 0, var_0, var_4 );
            var_2[var_5] = var_6;
            var_3 = var_3 + 2;
            var_4 = var_4 + 2;
        }

        if ( isdefined( level.create_vehicle_occupancy_data ) )
            var_2 = [[ level.create_vehicle_occupancy_data ]]( var_2 );

        level.questinfo._id_11FD7.physicssettled[var_0] = var_2;
    }

    return var_2;
}

objectiveachievementkillcount( var_0 )
{
    var_1 = "mp/brmission_rewards.csv";
    var_2 = scripts\mp\utility\game::onfieldupgradeendbuffer();

    if ( var_2 == "dmz" || var_2 == "risk" )
        var_1 = "mp/brmission_rewards_dmz.csv";
    else if ( level.usealtrewardtable == 1 )
        var_1 = "mp/brmission_rewards_" + var_2 + ".csv";

    var_3 = level.questinfo._id_11FD7._id_11FD9[var_0];

    if ( !isdefined( var_3 ) )
    {
        var_3 = tablelookup( var_1, 0, var_0, 1 );
        level.questinfo._id_11FD7._id_11FD9[var_0] = var_3;
    }

    return var_3;
}

objectivedescription( var_0 )
{
    var_1 = "mp/brmission_rewards.csv";
    var_2 = scripts\mp\utility\game::onfieldupgradeendbuffer();

    if ( var_2 == "dmz" || var_2 == "risk" )
        var_1 = "mp/brmission_rewards_dmz.csv";
    else if ( level.usealtrewardtable == 1 )
        var_1 = "mp/brmission_rewards_" + var_2 + ".csv";

    var_3 = level.questinfo._id_11FD7._id_11FDA[var_0];

    if ( !isdefined( var_3 ) )
    {
        var_4 = objective_locations_logic( var_0 );

        if ( isdefined( var_4 ) )
            var_3 = var_4;
        else
        {
            var_5 = objectiveicon();
            var_3 = tablelookup( var_1, 0, var_0, var_5 );
        }

        var_6 = objectiveachievementkillcount( var_0 );
        var_3 = dropcondensedplunder( var_6, var_3 );
        level.questinfo._id_11FD7._id_11FDA[var_0] = var_3;
    }

    if ( istrue( level.cargo_truck_mg_gunnerdamagemodignorefunc ) && !isstring( var_3 ) )
        var_3 = int( var_3 * level.useagents );

    return var_3;
}

objectiveicon()
{
    var_0 = level.maxteamsize;

    if ( scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
        var_0 = 1;

    switch ( var_0 )
    {
        case 4:
            return 10;
        case 3:
            return 9;
        case 2:
            return 8;
        case 1:
            return 7;
        default:
            return 9;
    }
}

objective_locations_logic( var_0 )
{
    var_1 = getdvarint( "scr_questReward_" + var_0, -1 );

    if ( var_1 > -1 )
        return var_1;

    return undefined;
}

objective_show_for_mlg_spectator( var_0 )
{
    var_1 = level.questinfo._id_11FD7._id_1212E[var_0];

    if ( !isdefined( var_1 ) )
    {
        var_1 = [];
        var_2 = 1;
        var_3 = 2;

        for (;;)
        {
            var_4 = tablelookup( "mp/brmission_reward_scalers.csv", 0, var_0, var_2 );

            if ( var_4 == "" )
                break;

            var_4 = int( var_4 );
            var_5 = float( tablelookup( "mp/brmission_reward_scalers.csv", 0, var_0, var_3 ) );
            var_1[var_4] = var_5;
            var_2 = var_2 + 2;
            var_3 = var_3 + 2;
        }

        level.questinfo._id_11FD7._id_1212E[var_0] = var_1;
    }

    return var_1;
}

objective_locations( var_0 )
{
    return objective_hide_for_mlg_spectator( self.questcategory, var_0, self.modifier, self._id_11FD5 );
}

off_max( var_0 )
{
    return oceanrock( self.questcategory, var_0, self.modifier, self._id_11FD5 );
}

occupied_rpg_trig( var_0 )
{
    return objloc( self.questcategory, var_0, self.modifier, self._id_11FD5 );
}

objective_hide_for_mlg_spectator( var_0, var_1, var_2, var_3 )
{
    if ( !level.br_plunder_enabled )
        return 0;

    return objectiveloc( var_0, var_1, "plunder", var_2, var_3 );
}

oceanrock( var_0, var_1, var_2, var_3 )
{
    return objectiveloc( var_0, var_1, "xp", var_2, var_3 );
}

objloc( var_0, var_1, var_2, var_3 )
{
    return objectiveloc( var_0, var_1, "weapon_xp", var_2, var_3 );
}

objectiveloc( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = objectives_amount( var_0 );
    objective_minimapupdate( var_0, var_4, var_3 );
    var_6 = objective_set_hot( var_5 );
    var_7 = 0;

    foreach ( var_13, var_9 in var_6 )
    {
        var_10 = objectiveachievementkillcount( var_13 );

        if ( var_10 == var_2 )
        {
            var_11 = objectivedescription( var_13 );
            var_12 = objectivelocations( var_9, var_1 );
            var_7 = var_7 + var_11 * var_12;
        }
    }

    var_7 = dropcondensedplunder( var_2, var_7 );
    return var_7;
}

objectivelocations( var_0, var_1 )
{
    var_2 = 1.0;
    var_3 = objective_show_for_mlg_spectator( var_0 );
    var_4 = 0.0;

    for ( var_5 = 1; var_5 <= var_1; var_5++ )
    {
        if ( isdefined( var_3[var_5] ) )
            var_4 = var_3[var_5];

        var_2 = var_2 + var_4;
    }

    return var_2;
}

object_is_valid( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = 0;

    var_2 = 0;

    foreach ( var_4 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, self.squadindex ) )
    {
        if ( istrue( var_4.player_has_ammo_crate ) )
            var_2++;
    }

    if ( !var_1 && isdefined( level.questinfo.start_link_logic_on_players ) && isdefined( level.questinfo.start_link_logic_on_players[var_0] ) )
        var_2 = int( min( var_2, level.questinfo.start_link_logic_on_players[var_0] ) );

    return var_2;
}

_id_11C6A( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( !isdefined( var_1 ) )
        return;

    var_8 = spawnstruct();
    var_8.origin = var_2;
    var_8.angles = var_3;
    var_8.itemsdropped = 0;

    if ( isdefined( level.get_track_end_struct ) )
        var_8.itemsdropped = level.get_track_end_struct;

    var_9 = var_8 scripts\mp\gametypes\br_lootcache.gsc::spawn_single_cargo( var_1, var_4, var_6, var_7 );

    foreach ( var_11 in var_9 )
    {
        var_11.team = var_0;
        var_11.squadindex = var_5;
    }

    if ( isdefined( level.get_track_end_struct ) )
        level.get_track_end_struct = var_8.itemsdropped;
}

_id_11C6E( var_0 )
{
    var_1 = scripts\cp_mp\utility\killstreak_utility::createstreakinfo( var_0, self );
    var_1._id_125AA = 1;
    scripts\cp_mp\killstreaks\uav::tryuseuavfromstruct( var_1 );
}

_id_11C6C( var_0 )
{
    var_1 = isdefined( self.streakdata.streaks[1] );
    scripts\mp\gametypes\br_pickups.gsc::little_bird_mg_enterendinternal( var_0, var_1, 0 );
    thread scripts\mp\hud_message::showsplash( "br_killstreak_purchased" );
}

_id_11C6D( var_0 )
{
    var_1 = _id_12772( var_0, self.origin, 1 );
    _id_12B6D( var_1 );
}

_id_12772( var_0, var_1, var_2 )
{
    var_3 = easepower( nuke_mercyending_think( var_0 ), var_1 );
    var_3 tabletinit( var_0 );
    var_3.keepinmap = 1;
    var_3 thread fade_cover();

    if ( istrue( var_2 ) )
        var_3 setscriptablepartstate( var_3.type, "hidden" );

    return var_3;
}

fade_cover()
{
    self endon( "death" );
    self waittill( "questEnded" );
    self freescriptable();
}

objective_minimapupdate( var_0, var_1, var_2 )
{
    var_3 = objectives_amount( var_0 );
    var_4 = var_3;

    if ( isdefined( var_2 ) )
        var_4 = var_4 + var_2;

    if ( isdefined( var_1 ) )
        var_4 = var_4 + var_1;

    if ( _id_11C6B( var_4 ) )
        return var_4;

    var_4 = var_3;

    if ( isdefined( var_1 ) )
        var_4 = var_4 + var_1;

    if ( _id_11C6B( var_4 ) )
        return var_4;

    return var_3;
}

_id_11C6B( var_0 )
{
    var_1 = objective_timers_reset_both();
    var_2 = tablelookup( var_1, 0, var_0, 0 );
    return var_2 != "";
}

oldbranchents( var_0 )
{
    switch ( var_0 )
    {
        case "blueprint_chance":
        case "drop_bag":
        case "loot_cache":
        case "loot_table":
        case "reward_tier":
        case "circle_peek":
        case "weapon_xp":
        case "plunder":
        case "xp":
        case "juggernaut":
        case "none":
            return "int";
        case "loot_items_drop":
        case "loot_items":
        case "quest":
        case "uav":
        case "killstreak":
            return "string";
        default:
            break;
    }
}

dropcondensedplunder( var_0, var_1 )
{
    var_2 = oldbranchents( var_0 );

    switch ( var_2 )
    {
        case "int":
            var_1 = int( var_1 );
            break;
        case "float":
            var_1 = float( var_1 );
            break;
        case "string":
            var_1 = "" + var_1;
            break;
        default:
            break;
    }

    return var_1;
}

objective_timers_reset_both()
{
    var_0 = getdvar( "br_mission_reward_groups_filename", "mp/brmission_reward_groups.csv" );

    if ( var_0 == "" )
        var_0 = "mp/brmission_reward_groups.csv";

    return var_0;
}

objective_origin( var_0 )
{
    var_1 = objective_timers_reset_both();
    return int( tablelookup( var_1, 0, var_0, 1 ) );
}

objectiveids( var_0 )
{
    var_1 = level.questinfo._id_12C6A[var_0];

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    return var_1;
}

_id_123CC( var_0, var_1, var_2 )
{
    level.questinfo._id_12C6A[var_0] = var_1;
    _id_123CE( var_0, var_1, var_2 );
}

anyone_can_see_spawner( var_0, var_1 )
{
    _id_123CC( var_0, objectiveids( var_0 ) + var_1 );
}

anyoneisinmarkingrange( var_0, var_1, var_2, var_3 )
{
    waittillframeend;
    _id_123CC( var_0, objectiveids( var_0 ) + var_1, var_2 );
}

_id_123CB( var_0, var_1 )
{
    foreach ( var_3 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, self.squadindex ) )
        var_3 _id_123CA( var_1 );
}

_id_123CA( var_0 )
{
    self setclientomnvar( "ui_br_objective_index", var_0 );
}

_id_123CE( var_0, var_1, var_2 )
{
    foreach ( var_4 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, var_2 ) )
        var_4 _id_123CD( var_1 );
}

_id_123CD( var_0 )
{
    self setclientomnvar( "ui_br_objective_reward_tier", var_0 );
}

disallow_player_mantles()
{
    foreach ( var_5, var_1 in level.questinfo.quests )
    {
        foreach ( var_3 in var_1.instances )
        {
            var_3.result = "cancel";
            var_3 removequestinstance();
        }
    }
}

mountain_two_death_func( var_0 )
{
    var_1 = [];

    foreach ( var_8, var_3 in level.questinfo.quests )
    {
        foreach ( var_7, var_5 in var_3.instances )
        {
            if ( var_7 != var_0 )
                continue;

            if ( sandboxprintlinebold( var_5 ) )
                continue;

            var_6 = spawnstruct();
            var_6.relic_squadlink_toofar_hud_logic = var_5;

            switch ( var_5.category )
            {
                case "assassination":
                    if ( isdefined( var_5.targetplayer ) )
                        var_6.origin = var_5.targetplayer.origin;

                    break;
                case "domination":
                    if ( isdefined( var_5._id_12A93 ) && isdefined( var_5._id_12A93.domflag ) && isdefined( var_5._id_12A93.domflag.curorigin ) )
                        var_6.origin = var_5._id_12A93.domflag.curorigin + ( 0, 0, 60 );

                    break;
                case "lep":
                case "scavenger":
                    if ( isdefined( var_5._id_12A93.deletex1finhud.origin ) && isdefined( var_5._id_12A93.deletex1finhud ) )
                        var_6.origin = var_5._id_12A93.deletex1finhud.origin + ( 0, 0, 50 );

                    break;
                case "timedrun":
                    break;
                case "launch_code":
                case "geigerstash":
                case "secretstash":
                    if ( isdefined( var_5.deletex1finhud ) && isdefined( var_5.deletex1finhud.origin ) )
                        var_6.origin = var_5.deletex1finhud.origin + ( 0, 0, 50 );

                    break;
                case "x2_amb_signal":
                case "x2_stash":
                case "x2_map":
                case "x2_signal":
                case "x2_amb1":
                case "x2_bomb":
                case "collection":
                case "x1fin":
                case "x1stash":
                case "history":
                case "smokinggun":
                case "blueprintextract":
                case "vip":
                    break;
                case "capshoot":
                    if ( isdefined( var_5._id_12A93 ) && isdefined( var_5._id_12A93.do_ads_hint ) && isdefined( var_5._id_12A93.do_ads_hint.curorigin ) )
                        var_6.origin = var_5._id_12A93.do_ads_hint.curorigin + ( 0, 0, 60 );

                    break;
                default:
                    break;
            }

            var_1[var_1.size] = var_6;
        }
    }

    return var_1;
}

objectivespawner( var_0 )
{
    var_1 = level.questinfo._id_12FD0[scripts\engine\utility::string( var_0 )];

    if ( !isdefined( var_1 ) )
        return 0;

    return var_1._id_12FCF;
}

oic_firstspawn( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    var_1 = 0;

    foreach ( var_3 in level.questinfo._id_12FD0 )
        var_1 = var_1 + var_3._id_12FCE[var_0];

    var_5 = randomfloatrange( 0, var_1 );
    var_6 = 0;

    foreach ( var_3 in level.questinfo._id_12FD0 )
    {
        var_8 = var_3._id_12FCE[var_0];

        if ( var_8 <= 0 )
            continue;

        var_6 = var_6 + var_8;

        if ( var_5 <= var_6 )
            return var_3.spawn_paratrooper_ac130;
    }

    return level.questinfo._id_12FD0[0].spawn_paratrooper_ac130;
}

_id_11ECB()
{
    if ( level.mapname == "mp_don4" )
    {
        var_0 = ( -31160, 57824, 4536 );
        var_1 = 1000;
        var_2 = getlootspawnpoint( var_0, var_1, 0, 1 );

        foreach ( var_4 in var_2 )
            getlootspawnpointcount( var_4.index );
    }
}
