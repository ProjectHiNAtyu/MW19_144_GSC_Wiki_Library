// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

iswaitingtoentergulag( var_0 )
{
    return istrue( var_0.entergulagwait );
}

rpg_guys_construction_spawners( var_0 )
{
    return istrue( var_0.pickup_truck_initomnvars );
}

sat_setup_access_card_pickup( var_0 )
{
    return istrue( var_0.respawningfromtoken );
}

isplayeringulag()
{
    var_0 = self;
    return isdefined( var_0 ) && ( istrue( var_0.jailed ) || istrue( var_0.gulagarena ) );
}

rungwperif_flak()
{
    var_0 = self;
    return isdefined( var_0 ) && ( istrue( var_0.jailed ) || istrue( var_0.gulagarena ) || istrue( var_0.gulag ) );
}

_id_13482()
{
    var_0 = self;
    return isdefined( var_0 ) && istrue( var_0._id_13480 );
}

risktokens()
{
    var_0 = self;
    return ( istrue( var_0.clean_up_search ) && !isalive( var_0 ) || var_0 zombiejumping() ) && !istrue( var_0.gulag );
}

zombiejumping()
{
    return istrue( self.iszombie );
}

zombie()
{
    return istrue( self.rotateeffect ) || istrue( self.ghostturninghuman );
}

watchhealend()
{
    self endon( "heal_end" );
    self endon( "death_or_disconnect" );
    self endon( "br_armor_plate_done" );
    level endon( "game_ended" );
    childthread heal_removeonplayernotifies();
    childthread heal_removeondamage();
}

heal_removeonplayernotifies()
{
    self notifyonplayercommand( "try_heal_cancel", "+weapnext" );
    self notifyonplayercommand( "try_heal_cancel", "+attack" );
    self notifyonplayercommand( "try_heal_cancel", "+breath_sprint" );
    scripts\engine\utility::_id_133EF( "death", "try_heal_cancel" );
    healend();
}

heal_removeondamage()
{
    for (;;)
    {
        self waittill( "damage", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

        if ( level.gametype == "br" && ( var_4 == "MOD_TRIGGER_HURT" || var_4 == "MOD_UNKNOWN" ) )
            continue;

        healend();
    }
}

healend()
{
    self notifyonplayercommandremove( "try_heal_cancel", "+weapnext" );
    self notifyonplayercommandremove( "try_heal_cancel", "+attack" );
    self notifyonplayercommandremove( "try_heal_cancel", "+breath_sprint" );
    self notify( "heal_end" );
}

removeitemfrominventory( var_0 )
{
    self.br_inventory_slots[var_0] = undefined;
}

ishelmet( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "armor" && issubstr( var_0, "helmet" );
}

isarmor( var_0 )
{
    return ishelmet( var_0 );
}

isarmorplate( var_0 )
{
    return var_0 == "brloot_armor_plate";
}

ishealitem( var_0 )
{
    return var_0 == "brloot_health_bandages" || var_0 == "brloot_health_firstaid" || var_0 == "brloot_health_adrenaline";
}

isequipment( var_0 )
{
    return isarmorplate( var_0 ) || ishealitem( var_0 ) || isdefined( level.br_pickups.br_itemtype[var_0] ) && ( level.br_pickups.br_itemtype[var_0] == "lethal" || level.br_pickups.br_itemtype[var_0] == "tactical" );
}

isammo( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "ammo";
}

waypointid()
{
    if ( self isswitchingweapon() || self isreloading() || self ismantling() || self isthrowinggrenade() || self israisingweapon() || self ismeleeing() || self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "isPlayerADS" ) ]]() || istrue( self.relic_squadlink_onsteppedfar ) )
        return 0;

    var_0 = self getcurrentweapon();

    if ( nullweapon( var_0 ) )
        return 0;

    return 1;
}

_id_1194F( var_0, var_1 )
{
    self endon( "death_or_disconnect" );
    var_2 = getcompleteweaponname( var_0 );
    self giveandfireoffhand( var_2 );
    wait( var_1 );

    if ( self hasweapon( var_2 ) )
        self takeweapon( var_2 );
}

hasrespawntoken()
{
    var_0 = self;
    return istrue( var_0.hasrespawntoken );
}

player_move()
{
    var_0 = self;
    return istrue( var_0.player_move );
}

player_is_faux_dead()
{
    var_0 = self;
    return istrue( var_0.player_is_faux_dead );
}

player_name_who_broke_stealth()
{
    var_0 = self;
    return istrue( var_0.player_has_grenade_crate );
}

player_give_intel_3_ks( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_0 ) || !isdefined( var_1.aigroundturret_shouldcompletedismount ) )
        return isdefined( var_1.aigroundturret_shouldcompletedismount );
    else
        return var_0 == var_1.aigroundturret_shouldcompletedismount;
}

isusinginfilselection()
{
    if ( istrue( level.infilcanusemap ) )
    {
        switch ( level.infilselectionmethod )
        {
            case "exclusion":
                return 1;
            default:
                return 0;
        }
    }

    return 0;
}

handleinfilspawnselectstart()
{
    var_0 = level.infilselectionmethod;
    var_1 = getinfilspawnselectstartfunc( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    return level [[ var_1 ]]();
}

handleinfilspawnselectend()
{
    var_0 = level.infilselectionmethod;
    var_1 = getinfilspawnselectendfunc( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    return level [[ var_1 ]]();
}

getinfilspawnselectstartfunc( var_0 )
{
    if ( !isdefined( level.br_infillocationselectionhandlers ) )
        return undefined;

    var_1 = level.br_infillocationselectionhandlers[var_0];

    if ( !isdefined( var_1 ) )
        return undefined;

    return var_1.spawnselectstartfunc;
}

getinfilspawnselectendfunc( var_0 )
{
    if ( !isdefined( level.br_infillocationselectionhandlers ) )
        return undefined;

    var_1 = level.br_infillocationselectionhandlers[var_0];

    if ( !isdefined( var_1 ) )
        return undefined;

    return var_1.spawnselectendfunc;
}

cleanac130struct( var_0 )
{
    if ( isdefined( var_0.playerslot1 ) )
    {
        if ( isdefined( var_0.playerslot1.head ) )
            var_0.playerslot1.head delete();

        if ( isdefined( var_0.playerslot1.helmet ) )
            var_0.playerslot1.helmet delete();

        var_0.playerslot1 delete();
    }

    if ( isdefined( var_0.playerslot2 ) )
    {
        if ( isdefined( var_0.playerslot2.head ) )
            var_0.playerslot2.head delete();

        var_0.playerslot2 delete();
    }

    if ( isdefined( var_0.playerslot3 ) )
        var_0.playerslot3 delete();

    if ( isdefined( var_0.playerslot4 ) )
        var_0.playerslot4 delete();

    if ( isdefined( var_0.aidoorchief ) )
        var_0.aidoorchief delete();

    if ( isdefined( var_0.cameraent ) )
        var_0.cameraent delete();

    if ( isdefined( var_0.disabled_seats_for_vehicle ) )
        var_0.disabled_seats_for_vehicle delete();

    if ( isdefined( var_0.playerpositionents ) )
    {
        foreach ( var_2 in var_0.playerpositionents )
            var_2 delete();
    }

    if ( isdefined( var_0.flash_crate_use ) )
        var_0.flash_crate_use delete();

    if ( isdefined( var_0.staticc130 ) && istrue( var_0.staticc130.cleanme ) )
        var_0.staticc130 delete();

    if ( isdefined( var_0.movingc130 ) && istrue( var_0.movingc130.cleanme ) )
    {
        if ( isdefined( var_0.movingc130.innards ) && istrue( var_0.movingc130.innards.cleanme ) )
            var_0.movingc130.innards delete();

        var_0.movingc130 delete();
    }
}

_id_11982()
{
    var_0 = self;
    var_0 _meth_87A7();
}

updatebrscoreboardstat( var_0, var_1 )
{
    var_2 = self;
    var_3 = 0;
    var_4 = 0;
    var_5 = 0;

    switch ( var_0 )
    {
        case "reviveCount":
            [var_3, var_4, var_5] = [ 0, 8, 0 ];
            break;
        case "objTime":
            [var_3, var_4, var_5] = [ 0, 12, 0 ];
            break;
        case "respawnInSeconds":
            [var_3, var_4, var_5] = [ 0, 7, 1 ];
            break;
        case "armorHealthRatio":
            [var_3, var_4, var_5] = [ 0, 8, 2 ];
            break;
        case "missionsCompleted":
            [var_3, var_4, var_5] = [ 8, 4, 2 ];
            break;
        case "bunkerKeycardType":
            [var_3, var_4, var_5] = [ 12, 3, 2 ];
            break;
        case "isInInfilPlane":
            [var_3, var_4, var_5] = [ 15, 1, 2 ];
            break;
        case "damageDealt":
            [var_3, var_4, var_5] = [ 0, 16, 3 ];
            break;
        case "isBeingRevived":
        case "isDowned":
        case "activeSpectators":
        case "jumpMasterState":
        case "isRespawning":
        case "cleanups":
        case "playersDowned":
            return;
        default:
            return;
    }

    var_2 packstatintoextrainfo( var_1, var_3, var_4, var_5 );
}

packstatintoextrainfo( var_0, var_1, var_2, var_3 )
{
    var_4 = self;
    var_5 = [ var_4.extrascore0, var_4.extrascore1, var_4.extrascore2, var_4.extrascore3 ];
    var_6 = int( pow( 2, var_2 ) ) - 1;
    var_7 = ( var_0 & var_6 ) << var_1;
    var_8 = ~( var_6 << var_1 );
    var_9 = var_5[var_3];
    var_10 = var_9 & var_8;
    var_11 = var_10 + var_7;

    switch ( var_3 )
    {
        case 0:
            var_4.extrascore0 = var_11;
            break;
        case 1:
            var_4.extrascore1 = var_11;
            break;
        case 2:
            var_4.extrascore2 = var_11;
            break;
        case 3:
            var_4.extrascore3 = var_11;
            break;
        default:
            break;
    }
}

_id_123BB( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 512;
    else
        self.game_extrainfo = self.game_extrainfo & ~512;
}

_id_123B9( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 1024;
    else
        self.game_extrainfo = self.game_extrainfo & ~1024;
}

_id_123C2( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 2048;
    else
        self.game_extrainfo = self.game_extrainfo & ~2048;
}

_id_123C1( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 8192;
    else
        self.game_extrainfo = self.game_extrainfo & ~8192;
}

runjoininprogresstimeout( var_0 )
{
    return isdefined( var_0.game_extrainfo ) && var_0.game_extrainfo & 8192;
}

_id_12383( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 16384;
    else
        self.game_extrainfo = self.game_extrainfo & ~16384;
}

_id_12382( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 32768;
    else
        self.game_extrainfo = self.game_extrainfo & ~32768;
}

incrementplayersdownedstat()
{
    var_0 = self;

    if ( !isdefined( var_0.br_playersdowned ) )
        var_0.br_playersdowned = 0;

    var_0.br_playersdowned++;
    var_0 updatebrscoreboardstat( "playersDowned", var_0.br_playersdowned );
    var_0 scripts\mp\utility\stats::incpersstat( "downs", 1 );
}

runbrgametypefunc6()
{
    var_0 = self;
    return istrue( var_0.revive_vo_time ) && var_0.game_extrainfo & 64;
}

brbroadcastplayercardsplash( var_0, var_1 )
{
    foreach ( var_3 in level.players )
    {
        if ( !isplayer( var_3 ) )
            continue;

        if ( var_3 isplayeringulag() )
            continue;

        var_3 thread scripts\mp\hud_message::showsplash( var_0, var_1, var_3 );
    }
}

cpoperationcratecapturecallback( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    foreach ( var_7 in level.teamdata[var_1]["players"] )
    {
        if ( !isdefined( var_7 ) )
            continue;

        if ( var_7 != var_2 )
            cpcpammoarmorcratecapturecallback( var_0, var_7, var_3, var_4, var_5 );
    }
}

cpoperationcrateactivatecallback( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    brleaderdialog( var_0, var_2, level.teamdata[var_1]["players"], var_5, var_3, var_4 );
}

brleaderdialog( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( game["dialog"][var_0] ) )
        return;

    var_6 = level.players;

    if ( isdefined( var_2 ) )
        var_6 = var_2;

    for ( var_7 = 0; var_7 < var_6.size; var_7++ )
    {
        var_8 = var_6[var_7];
        thread cpcpammoarmorcratecapturecallback( var_0, var_8, var_1, var_3, var_4, var_5 );
    }
}

support_box_get_close_anim_length( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = 1;

    if ( istrue( var_1 ) && isplayeringulag() )
        return 1;

    if ( istrue( self._id_11A65 ) )
        return 1;

    if ( revive_or_disconnect_monitor() )
    {
        if ( istrue( self._id_11A6B ) )
            return 1;

        if ( var_0 == "deploy_squad_leader" || var_0 == "prematch_enter" )
            return 1;

        if ( ( var_0 == "circle_closing" || var_0 == "first_circle" ) && !istrue( level._id_119FE ) )
            return 1;
    }

    var_2 = level.maxteamsize == 1;

    if ( var_2 )
    {
        switch ( var_0 )
        {
            case "deploy_squad_leader":
                return 1;
        }
    }

    return 0;
}

computer_debugtestloop( var_0 )
{
    var_1 = var_0.defaultoperatorteam;

    if ( isai( var_0 ) )
        var_1 = var_0.botoperatorteam;

    if ( scn_infil_tango_npc_4_sfx() || revive_or_disconnect_monitor() )
        var_1 = "allies";

    if ( !isplayer( var_0 ) )
        var_1 = "axis";

    return var_1;
}

cpcpammoarmorcratecapturecallback( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_1 endon( "disconnect" );
    level endon( "game_ended" );

    if ( !isdefined( var_1 ) )
        return;

    if ( !isalive( var_1 ) && !istrue( var_3 ) )
        return;

    if ( var_1 issplitscreenplayer() && !var_1 issplitscreenplayerprimary() )
        return;

    if ( var_1 support_box_get_close_anim_length( var_0, var_2 ) )
        return;

    if ( scn_infil_tango_npc_4_sfx() || revive_or_disconnect_monitor() )
    {
        if ( var_0 == "mission_scav_accept" || var_0 == "mission_obj_next_nptarget" )
            return;
    }

    var_6 = computer_debugtestloop( var_1 );
    var_7 = "dx_bra_" + game["voice"][var_6] + "_" + game["dialog"][var_0];

    if ( istrue( level.script_deplay_post ) )
    {
        var_8 = "dx_brm_" + game["voice"][var_6] + "_" + game["dialog"][var_0];

        if ( soundexists( var_8 ) )
            var_7 = var_8;
    }

    if ( isdefined( game["dialogForAllTeams"] ) && istrue( game["dialogForAllTeams"][var_0] ) )
        var_7 = game["dialog"][var_0];

    var_7 = tolower( var_7 );
    var_9 = lookupsoundlength( var_7, 1 ) / 1000.0;

    if ( isdefined( var_4 ) )
        wait( var_4 );

    var_1 queuedialogforplayer( var_7, var_0, var_9 );
}

current_respawn_point( var_0, var_1 )
{
    game["dialog"][var_0] = var_1;

    if ( !isdefined( game["dialogForAllTeams"] ) )
        game["dialogForAllTeams"] = [];

    game["dialogForAllTeams"][var_0] = 1;
}

risk_flagspawnshiftingcenter()
{
    return isdefined( level.script ) && level.script == "mp_bm_tut";
}

scn_infil_tango_npc_4_sfx()
{
    return isdefined( level.script ) && ( level.script == "mp_br_tut" || level.script == "mp_lc_br_tut" );
}

revive_or_disconnect_monitor()
{
    return isdefined( level.script ) && level.script == "mp_br_quarry";
}

risk_flagspawnradiuschange()
{
    return isdefined( level.script ) && level.script == "mp_br_money";
}

respawntokenenabled()
{
    return scn_infil_tango_npc_4_sfx() || risk_flagspawnshiftingcenter() || revive_or_disconnect_monitor() || risk_flagspawnradiuschange();
}

weight_spawners_closest_to_forward()
{
    var_0 = self getweaponslistprimaries();

    foreach ( var_2 in var_0 )
    {
        var_3 = var_2.basename;

        if ( weaponclass( var_2 ) == "pistol" && var_3 != "iw8_fists_mp" && var_3 != "iw8_me_riotshield_mp" && var_3 != "iw8_knifestab_mp" && var_3 != "iw8_throwingknife_fire_melee_mp" && var_3 != "iw8_throwingknife_electric_melee_mp" && var_3 != "iw8_throwingknife_drill_melee_mp" )
            return var_2;
    }
}

_id_11A13()
{
    if ( istrue( self._id_11B7D ) )
        self waittill( "playerPrestreamComplete" );
}

_id_119E6( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = scripts\mp\gametypes\br_infils.gsc::getinfilspawnoffset();

    var_2 = getdvarint( "scr_br_streamDistFromGround", 4500 );

    if ( var_2 >= 0 )
    {
        var_3 = var_1 - var_2;
        var_4 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 0, 1 );
        var_0 = scripts\engine\utility::drop_to_ground( var_0, 0, -1 * var_3, undefined, var_4 );
    }

    return var_0;
}

_id_119E7( var_0, var_1, var_2, var_3, var_4 )
{
    thread _id_119E8( var_0, var_1, var_2, var_3, var_4 );
}

_id_119E8( var_0, var_1, var_2, var_3, var_4 )
{
    self notify( "playerPrestreamLocationWait" );
    self endon( "playerPrestreamLocationWait" );
    self endon( "disconnect" );
    var_5 = !self isplayerheadless();

    if ( !isdefined( var_1 ) )
        var_1 = musictriggerthink();

    var_6 = gettime() + var_1;
    self._id_11B7D = 1;

    if ( !self ispredictedstreamposready() )
        self clearpredictedstreampos();

    var_7 = gettime();

    if ( var_5 )
    {
        while ( !istrue( self.pers["streamSyncComplete"] ) && gettime() < var_6 )
            waitframe();
    }

    self predictstreampos( var_0, 1 );

    if ( istrue( var_2 ) )
        self loadcustomizationplayerview( self );

    if ( var_5 )
    {
        waitframe();

        while ( ( !self ispredictedstreamposready() || istrue( var_2 ) && !self hasloadedcustomizationplayerview( self ) ) && gettime() < var_6 )
            waitframe();

        if ( istrue( var_3 ) )
        {
            var_9 = gettime() + getdvarint( "scr_br_stream_hint_extra_time", 5000 );

            while ( gettime() < var_9 )
                waitframe();
        }

        if ( isdefined( var_4 ) )
        {
            var_10 = getdvarint( "keep_alive_update_time", 2000 );
            var_6 = gettime() + var_4;
            var_11 = 0;

            while ( gettime() < var_6 )
            {
                if ( gettime() > var_11 )
                {
                    self predictstreampos( var_0, 1 );
                    var_11 = gettime() + var_10;
                }

                waitframe();
            }
        }
    }

    self._id_11B7D = undefined;
    self notify( "playerPrestreamComplete" );
}

musictriggerthink()
{
    return getdvarint( "scr_br_stream_hint_timeout", 9000 );
}

weapon_xp_iw8_ar_kilo433()
{
    self notify( "playerPrestreamLocationWait" );
    self clearpredictedstreampos();
}

_id_11981()
{
    self cancelmantle();

    if ( self isskydiving() )
        self skydive_interrupt();

    if ( istrue( self.inlaststand ) )
        scripts\mp\laststand::lastplundereventtype( "self_revive_success", self );

    if ( isdefined( self.burninginfo ) )
        scripts\mp\equipment\molotov::molotov_clear_burning();

    if ( istrue( self.usingascender ) )
        scripts\cp_mp\auto_ascender::br_pickupdenyweaponpickupap();

    if ( scripts\cp_mp\utility\player_utility::isinvehicle( 1 ) )
    {
        var_0 = spawnstruct();
        var_0.allowairexit = 1;
        var_0.isvalidattachmentunlock = "INVOLUNTARY";
        thread scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_exit( self.vehicle, undefined, self, var_0, 1 );
    }

    if ( isdefined( self.remoteuav ) )
        self.remoteuav scripts\mp\killstreaks\remoteuav::remoteuav_leave();

    if ( isdefined( self.currentturret ) )
        scripts\cp_mp\killstreaks\manual_turret::manualturret_endplayeruse( self.currentturret );

    if ( isdefined( self.usingremote ) )
    {
        var_1 = vehicle_getarray();

        foreach ( var_3 in var_1 )
        {
            if ( isdefined( var_3.owner ) && var_3.owner == self )
            {
                if ( isdefined( var_3.helperdronetype ) )
                    var_3 scripts\cp_mp\killstreaks\helper_drone::helperdroneexplode( 1 );
            }
        }
    }

    scripts\mp\javelin::scriptable_setups();
}

deploy_subway_car_at_station()
{
    var_0 = self.origin - anglestoforward( self.angles ) * 150;
    return var_0;
}

hasarmor()
{
    return isdefined( self.br_armorhealth ) && self.br_armorhealth > 0;
}

hashelmet()
{
    return isdefined( self.br_helmetlevel );
}

damagearmor( var_0, var_1 )
{
    if ( !hasarmor() )
        return var_0;

    var_2 = int( min( self.br_armorhealth, var_0 ) );
    var_3 = var_0 - var_2;
    var_4 = self.br_armorhealth / self.br_maxarmorhealth;
    self.br_armorhealth = self.br_armorhealth - var_2;
    scripts\cp\helicopter\chopper_boss::tv_station_infil_enemies_attack_logic( var_2 );
    self.br_armorhealth = max( 0, self.br_armorhealth );
    var_5 = self.br_armorhealth / self.br_maxarmorhealth;

    if ( isplayer( self ) )
    {
        if ( !istrue( var_1 ) )
        {
            if ( self.br_armorhealth == 0 && var_2 > 0 )
            {
                self playsoundtoplayer( "hit_marker_3d_armor_break", self );

                if ( scripts\mp\utility\perk::_hasperk( "specialty_br_reinforced" ) )
                    self setscriptablepartstate( "armor_break", "reinforced_armor_break", 0 );
                else
                    self setscriptablepartstate( "armor_break", "armor_break", 0 );
            }
        }

        self setclientomnvar( "ui_br_armor_damage", var_5 );
        scripts\mp\equipment\armor_plate::choppersupport_watchtargetrange( self.br_armorhealth );
        var_6 = spawnstruct();
        var_6.getcircleindexforpoint = var_2;
        var_6.getcpcratedropcaststart = var_3;
        var_6.prev_weapon_taccover = var_1;
        scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "onPlayerArmorDamaged", var_6 );
    }

    return var_3;
}

ishelmetpopenabled()
{
    if ( getdvarint( "scr_br_helmet_pop", 1 ) )
        return 1;

    return 0;
}

breakhelmet()
{
    self.br_helmetlevel = undefined;
}

damagehelmet( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) || !ishelmetpopenabled() )
        var_1 = 0;

    var_3 = 1;

    switch ( self.br_helmetlevel )
    {
        case 1:
            var_3 = 0.85;
            break;
        case 2:
            var_3 = 0.7;
            break;
        case 3:
            var_3 = 0.7;
            break;
        default:
    }

    if ( var_1 )
    {
        breakhelmet();

        if ( isdefined( level.unlocked_escape_door ) )
            [[ level.unlocked_escape_door ]]( self, var_2 );
    }

    return var_3;
}

_id_11B68( var_0 )
{
    setglobalsoundcontext( "lobby_fade", "on", 3 );

    if ( !isdefined( level._id_12593 ) )
        level._id_12593 = 1;

    level thread scripts\mp\gametypes\br_infils.gsc::prophidetime();

    if ( level.matchcountdowntime > 13 )
    {
        var_1 = level.matchcountdowntime - 13;
        wait( var_1 );
        var_2 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

        if ( istrue( level.script_deplay_post ) )
            setmusicstate( "event01_lobby_outro" );
        else
        {
            foreach ( var_4 in var_2 )
            {
                var_5 = game["music"]["br_lobby_outro"].size;
                var_6 = randomint( var_5 );
                var_4 setplayermusicstate( game["music"]["br_lobby_outro"][var_6] );
                var_4 setsoundsubmix( "mp_br_lobby_fade", 8 );
            }
        }

        wait( level.matchcountdowntime );
    }
    else
    {

    }
}

_id_11B5F( var_0 )
{
    if ( scn_infil_tango_npc_4_sfx() )
        return;

    if ( level.matchcountdowntime > 3 )
    {
        var_1 = level.matchcountdowntime - 3;
        wait( var_1 );
        cpoperationcrateactivatecallback( "prematch_end", var_0 );
    }
}

bot_known_flag_carrier_loc()
{
    if ( getdvarint( "scr_bmo_use_spawn_fix", 1 ) == 0 )
        return;

    var_0 = level.matchcountdowntime - 5;

    if ( var_0 > 0 )
        wait( var_0 );

    foreach ( var_2 in level.players )
        var_2.plotarmor = 1;
}

cleanupexplosionleftovers()
{
    var_0 = self;
    var_0 damagearmor( 150, 1 );
}

civilians_killed_stat_row()
{
    if ( !scripts\mp\gametypes\br_gametypes.gsc::roof_lander_spawn_func( "allowLateJoiners" ) )
    {
        level endon( "game_ended" );
        var_0 = getdvarint( "scr_br_nojip_delay", 30 );
        wait( var_0 );
        setnojipscore( 1, 1 );
        setnojiptime( 1, 1 );
        level.nojip = 1;
    }
}

_id_11D04( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = scripts\engine\trace::ray_trace( var_0 + ( var_1, var_2, var_3 ), var_0 + ( var_1, var_2, var_4 ), var_6, var_5 );
    return var_7;
}

nukefridgewatcher( var_0, var_1 )
{
    if ( !isdefined( level.cratedata ) || !isdefined( level.cratedata.crates ) )
        return;

    var_2 = var_1 * var_1;
    var_3 = [];

    foreach ( var_5 in level.cratedata.crates )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_6 = distance2dsquared( var_5.origin, var_0 );

        if ( var_6 < var_2 )
            var_3[var_3.size] = var_5;
    }

    return var_3;
}

init_rpg_spawns( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = init_safehouse_gunshop( var_0, var_1, var_2, var_3, var_4 );
    return var_5["position"];
}

init_season3_intel_challenges( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = init_safehouse_gunshop( var_0, var_1, var_2, var_3, var_4 );
    return var_5;
}

init_safehouse_gunshop( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = -1200;

    if ( isdefined( level.br_level ) && isdefined( level.br_level.spawn_truck_techo ) )
        var_5 = level.br_level.spawn_truck_techo;

    var_6 = 3500;
    var_7 = 2500;
    var_8 = -19000 + var_5;
    var_9 = 15;

    if ( !isdefined( var_1 ) )
        var_1 = getdvarint( "scr_br_trace_up", var_7 );

    if ( !isdefined( var_2 ) )
        var_2 = getdvarint( "scr_br_trace_down", var_8 );

    var_10 = getdvarint( "scr_br_trace_low", var_5 );
    var_11 = getdvarint( "scr_br_trace_high", var_6 );
    var_12 = undefined;

    if ( isdefined( var_3 ) )
        var_12 = var_3;
    else
        var_12 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 0, 1 );

    if ( !isdefined( var_4 ) )
        var_4 = [];

    var_13 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_getleveldata();

    if ( isdefined( var_13.instancesbyref["little_bird"] ) )
        var_4 = scripts\engine\utility::array_combine( var_4, var_13.instancesbyref["little_bird"] );

    if ( isdefined( var_13.instancesbyref["little_bird_mg"] ) )
        var_4 = scripts\engine\utility::array_combine( var_4, var_13.instancesbyref["little_bird_mg"] );

    var_14 = nukefridgewatcher( var_0, 100 );

    if ( isdefined( var_14 ) && var_14.size > 0 )
        var_4 = scripts\engine\utility::array_combine( var_4, var_14 );

    var_15 = _id_11D04( var_0, 0, 0, var_1, var_2, var_12, var_4 );

    if ( _id_12D26( var_15, var_10 ) )
        return var_15;

    var_15 = _id_11D04( var_0, var_9, 0, var_1, var_2, var_12, var_4 );

    if ( _id_12D26( var_15, var_10 ) )
        return var_15;

    var_15 = _id_11D04( var_0, 0, var_9, var_1, var_2, var_12, var_4 );

    if ( _id_12D26( var_15, var_10 ) )
        return var_15;

    var_15 = _id_11D04( var_0, -1 * var_9, 0, var_1, var_2, var_12, var_4 );

    if ( _id_12D26( var_15, var_10 ) )
        return var_15;

    var_15 = _id_11D04( var_0, 0, -1 * var_9, var_1, var_2, var_12, var_4 );

    if ( _id_12D26( var_15, var_10 ) )
        return var_15;

    var_15 = [];
    var_15["position"] = ( var_0[0], var_0[1], var_11 );
    var_15["fraction"] = 0;
    return var_15;
}

_id_12D26( var_0, var_1 )
{
    return var_0["fraction"] != 1 && var_0["position"][2] > var_1;
}

registerpublicevent()
{
    if ( !getdvarint( "scr_br_lightweightGameObject", 1 ) )
        return;

    if ( self.triggertype == "proximity" && !self.usetime )
    {
        self.touchlist = [];
        self.touchlist["neutral"] = [];
        self.touchlist["none"] = [];
        self.assisttouchlist = undefined;
    }
}

_id_1199C( var_0, var_1 )
{
    var_2 = self getclientomnvar( "br_archived_flags" );

    if ( istrue( var_1 ) )
        var_2 = var_2 | var_0;
    else
        var_2 = var_2 & ~var_0;

    self setclientomnvar( "br_archived_flags", var_2 );
}

x1spawnlocationoverride( var_0 )
{
    _id_1199C( 1, var_0 );
}

ondefuse( var_0, var_1 )
{
    if ( scripts\mp\menus::_id_128AB() )
    {
        if ( !isdefined( var_1 ) && scripts\mp\menus::boltunlinkonnote() )
            return [];
        else
            return level.squaddata[var_0][var_1].players;
    }
    else
        return level.teamdata[var_0]["players"];
}

ondamagerelicfromabove( var_0, var_1 )
{
    if ( scripts\mp\menus::_id_128AB() )
    {
        var_2 = [];

        foreach ( var_4 in level.squaddata[var_0][var_1].players )
        {
            if ( isalive( var_4 ) )
                var_2[var_2.size] = var_4;
        }

        return var_2;
    }
    else
        return level.teamdata[var_0]["alivePlayers"];
}

ondamagerelicfocusfire( var_0, var_1 )
{
    if ( scripts\mp\menus::_id_128AB() )
    {
        var_2 = 0;

        foreach ( var_4 in level.squaddata[var_0][var_1].players )
        {
            if ( isalive( var_4 ) )
                var_2++;
        }

        return var_2;
    }
    else
        return level.teamdata[var_0]["aliveCount"];
}

ondamagerelicsteelballs( var_0 )
{
    if ( scripts\mp\menus::_id_128AB() )
        return getarraykeys( level.squaddata[var_0] );
    else
        return [ 0 ];
}

nuke_vault_jugg_internal()
{
    if ( scripts\mp\menus::_id_128AB() )
        return level.maxsquadsize;
    else
        return level.maxteamsize;
}

_id_123DB( var_0, var_1, var_2, var_3 )
{
    if ( scripts\mp\menus::_id_128AB() )
    {
        if ( !isdefined( level.squaddata[var_0][var_1].colmaps ) )
            level.squaddata[var_0][var_1].colmaps = [];

        level.squaddata[var_0][var_1].colmaps[var_2] = var_3;
    }
    else
        level.teamdata[var_0][var_2] = var_3;
}

ondamagerelicsquadlink( var_0, var_1, var_2 )
{
    if ( scripts\mp\menus::_id_128AB() )
    {
        if ( !isdefined( level.squaddata[var_0][var_1].colmaps ) || !isdefined( level.squaddata[var_0][var_1].colmaps[var_2] ) )
            return;

        return level.squaddata[var_0][var_1].colmaps[var_2];
    }
    else
        return level.teamdata[var_0][var_2];
}

_id_11A87( var_0, var_1, var_2, var_3, var_4 )
{
    if ( scripts\mp\menus::_id_128AB() )
    {
        var_5 = ondefuse( var_2.team, var_2.squadindex );

        foreach ( var_7 in var_5 )
        {
            if ( !isdefined( var_3 ) || var_7 != var_3 )
                self playsoundtoplayer( var_0, var_7, var_4 );
        }
    }
    else
        self playsoundtoteam( var_0, var_1, var_3, var_4 );
}
