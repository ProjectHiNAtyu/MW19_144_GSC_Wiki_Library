// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "domination", 1 );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::_id_11E05( "domination", ::impact_vfx );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "domination", ::domquest_removequestinstance );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestlocale( "dom_locale" );
    scripts\mp\gametypes\br_quest_util.gsc::registercreatequestlocale( "dom_locale", ::domlocale_createquestlocale );
    scripts\mp\gametypes\br_quest_util.gsc::registercheckiflocaleisavailable( "dom_locale", ::domlocale_checkiflocaleisavailable );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "dom_locale", ::domlocale_removelocaleinstance );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "dom_locale", ::domlocale_circletick );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF5( "dom_locale", ::ignorevehicleexplosivedamage );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF8( "dom_locale", ::illumination_flare_init );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "dom_locale" ).nextid = 0;
    scripts\mp\gametypes\br_quest_util.gsc::_id_11C73( "domination", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF9( "domination", ::idflags_no_dismemberment );
    _id_12442();
    game["dialog"]["mission_dom_accept"] = "mission_mission_dom_accept_secure";
    game["dialog"]["mission_dom_success"] = "mission_mission_dom_success";
}

domquest_removequestinstance()
{
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehidefromteam( self.team );

    if ( isdefined( self.tablet.relic_squadlink_turn_team_headobjectives ) )
        [[ self.tablet.relic_squadlink_turn_team_headobjectives ]]( self );

    self._id_12A93 thread ignorefallback();
}

domlocale_removelocaleinstance()
{
    foreach ( var_1 in self.subscribedinstances )
        var_1 thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();

    deletedomflaggameobject();
    self.domflag = undefined;
}

impact_vfx()
{
    var_0 = omvar_code( self );
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::lastgunkilltime( "domination", var_0 );

    if ( !isdefined( var_1 ) )
        return 0;

    getlootspawnpointcount( var_1.index );
    self._id_11F03 = var_1;
    return 1;
}

domlocale_createquestlocale( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "dom_locale" ).nextid++;
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createlocaleinstance( "dom_locale", "domination", "DomPoint:" + scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "dom_locale" ).nextid );

    if ( !isdefined( var_0 ) )
    {
        var_1.curorigin = ( 0, 0, 0 );
        var_1.enabled = 0;
        return var_1;
    }

    var_2 = var_0.origin;

    if ( !( var_0.spawnflags & 7 ) )
    {

    }

    var_3 = scripts\mp\gametypes\br_quest_util.gsc::_id_11C68( var_0 );
    var_4 = spawn( "trigger_radius", var_2, 0, int( var_3 ), int( level.classify_players_based_on_laststand ) );
    level.setdomscriptablepartstatefunc = ::domflag_setdomscriptablepartstate;
    var_5 = scripts\mp\gametypes\obj_dom.gsc::setupobjective( var_4, undefined, undefined, undefined, undefined, 0 );
    var_5.squadindex = self.squadindex;
    var_5.onuse = ::domflag_onuse;
    var_5.onbeginuse = ::ignoreafkcheck;
    var_5.onuseupdate = ::domflag_onuseupdate;
    var_5.onenduse = ::domflag_onenduse;
    var_5.usecondition = ::ignoredeathsdoor;
    var_5.lockupdatingicons = 1;
    var_5.enemy_think = 1;

    if ( istrue( self.tablet.tv_station_fastrope_one_infil_start_targetname_array_index ) && isdefined( var_0.traincar ) )
    {
        if ( istrue( level._id_135FD.idflags_br_armor_hit ) )
            var_5.flagmodel setmodel( "lm_domination_point_01_mover_nocol" );
        else
            var_5.flagmodel setmodel( "lm_domination_point_01_mover" );

        var_6 = var_0.traincar.idflags_hyper_burst_round;
        var_7 = var_0.traincar.angles;

        if ( isdefined( var_0.traincar.icon_trigger_exit ) )
            var_7 = var_0.traincar.icon_trigger_exit;

        var_5.flagmodel linkto( var_0.traincar.showtutsplash, "tag_origin", var_6, var_7 );
        var_4 enablelinkto();
        var_4 linkto( var_5.flagmodel );

        if ( isdefined( var_5.visuals ) && isarray( var_5.visuals ) )
        {
            foreach ( var_9 in var_5.visuals )
                var_9 linkto( var_5.flagmodel );
        }

        var_5.scriptable linkto( var_0.traincar.showtutsplash );
        var_5.traincar = var_0.traincar;
        scripts\mp\objidpoolmanager::update_objective_onentity( var_5.objidnum, var_5.flagmodel );
    }
    else
    {
        var_5.flagmodel setmodel( "lm_domination_point_01" );
        scripts\mp\objidpoolmanager::update_objective_position( var_5.objidnum, var_5.curorigin + ( 0, 0, 60 ) );
    }

    level.flagcapturetime = getdvarfloat( "scr_br_dom_quest_capture_time", 30 );
    var_5 scripts\mp\gameobjects::setusetime( level.flagcapturetime );
    var_1.lastcircletick = -1;
    var_1.domflag = var_5;
    var_1.curorigin = var_5.curorigin;
    var_5.locale = var_1;
    var_5.flagmodel.unresolved_collision_func = ::_id_12FDE;
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "dom_locale", var_1 );
    return var_1;
}

domlocale_checkiflocaleisavailable( var_0 )
{
    var_1 = getdvarfloat( "scr_br_dom_quest_max_capture_percent", 0.2 );
    var_2 = getdvarfloat( "scr_br_dom_quest_max_teams", 4 );
    var_3 = 0;

    if ( isdefined( self.domflag.curprogress ) )
        var_3 = self.domflag.curprogress / self.domflag.usetime;

    if ( var_3 > var_1 )
        return 0;

    if ( self.subscribedinstances.size >= var_2 )
        return 0;

    return 1;
}

domlocale_circletick( var_0, var_1 )
{
    if ( !isdefined( self.domflag ) )
        return;

    var_2 = gettime();

    if ( self.lastcircletick == var_2 )
        return;

    self.lastcircletick = var_2;

    if ( isdefined( self.domflag ) && isdefined( self.domflag.traincar ) )
        self.curorigin = self.domflag.traincar.origin;

    var_3 = distance2d( self.curorigin, var_0 );

    if ( var_3 > var_1 )
    {
        foreach ( var_5 in self.subscribedinstances )
        {
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_5.team, "br_domination_quest_circle_failure" );
            level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_obj_circle_fail", var_5.team, 1 );
            var_5.result = "circle";

            if ( isdefined( var_5.tablet.relic_squadlink_turn_team_headobjectives ) )
                [[ var_5.tablet.relic_squadlink_turn_team_headobjectives ]]( var_5 );
        }

        scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
    }
}

ignorevehicleexplosivedamage( var_0 )
{
    ignore_spawn_scoring_pois( var_0 );
}

illumination_flare_init( var_0 )
{
    if ( var_0.team == self.subscribedinstances[0].team )
        ignoreattractions( var_0 );
}

takequestitem( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( "domination", self.team, var_0.index, var_0, self.squadindex );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( self.team, self );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::_id_11DE0( self );
    var_1.team = self.team;
    var_1.tablet = var_0;
    var_2 = getdvarint( "scr_br_DOM_questTime", 240 );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::_id_11C74( var_2, 4 );
    var_3 = omvar_code( var_0 );
    var_4 = var_1 scripts\mp\gametypes\br_quest_util.gsc::requestquestlocale( "dom_locale", var_3, 1 );

    if ( !var_4.enabled )
    {
        var_1.result = "no_locale";

        if ( isdefined( var_1.tablet.relic_squadlink_turn_team_headobjectives ) )
            [[ var_1.tablet.relic_squadlink_turn_team_headobjectives ]]( var_1 );

        var_1 scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
    }
    else
    {
        var_4 domflagupdateicons();
        scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( "domination", self.team );
        scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "domination", var_1 );
        scripts\mp\gametypes\br_quest_util.gsc::_id_129E2( "domination", self, self.team );
        var_5 = spawnstruct();
        var_5.excludedplayers = [];
        var_5.excludedplayers[0] = self;
        var_5._id_11AEF = scripts\mp\gametypes\br_quest_util.gsc::objective_hide_for_mlg_spectator( "domination", scripts\mp\gametypes\br_quest_util.gsc::objectiveids( self.team ) );
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_domination_quest_start_team", var_5 );
        scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( self, "br_domination_quest_start_tablet_finder", var_5 );
        scripts\mp\gametypes\br_quest_util.gsc::passes_final_capsule_check( self.team, "br_mission_pickup_tablet" );
        scripts\mp\gametypes\br_quest_util.gsc::hint_obj_name( var_1.team, self, 6, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "domination" ) );
        level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_dom_accept", var_1.team, 1 );
    }
}

domflagupdateicons()
{
    objective_showtoplayersinmask( self.domflag.objidnum );
    objective_removeallfrommask( self.domflag.objidnum );

    foreach ( var_1 in self.subscribedinstances )
    {
        foreach ( var_3 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_1.team, self.squadindex ) )
        {
            if ( !var_3 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
                objective_addclienttomask( self.domflag.objidnum, var_3 );
        }
    }
}

ignore_spawn_scoring_pois( var_0 )
{
    objective_removeclientfrommask( self.domflag.objidnum, var_0 );
}

ignoreattractions( var_0 )
{
    objective_addclienttomask( self.domflag.objidnum, var_0 );
}

ignorefallback()
{
    self endon( "removed" );
    waittillframeend;
    domflagupdateicons();
}

deletedomflaggameobject()
{
    foreach ( var_1 in self.domflag.visuals )
        var_1 delete();

    if ( isdefined( self.domflag.flagmodel ) )
        self.domflag.flagmodel delete();

    if ( isdefined( self.domflag.scriptable ) )
        self.domflag.scriptable delete();

    if ( isdefined( self.domflag.trigger ) )
    {
        self.domflag.trigger delete();
        self.domflag.trigger = undefined;
    }

    self.domflag thread gameobjectreleaseid_delayed();
    self.domflag notify( "deleted" );
}

gameobjectreleaseid_delayed()
{
    wait 0.1;
    scripts\mp\gameobjects::releaseid();
}

_id_12442()
{
    if ( isdefined( level.classify_players_based_on_laststand ) )
        return;

    level.disableinitplayergameobjects = 0;
    level.classify_players_based_on_laststand = 120;
    level.iconneutral = "waypoint_captureneutral_br";
    level.iconcapture = "waypoint_capture_br";
    level.icondefend = "waypoint_defend_br";
    level.icondefending = "waypoint_defending_br";
    level.iconcontested = "waypoint_contested_br";
    level.icontaking = "waypoint_taking_br";
    level.iconlosing = "waypoint_losing_br";
    level.prematchintiallandingcomplete = "icon_waypoint_ot";
    _setdomflagiconinfo( "icon_waypoint_dom_br", "neutral", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    _setdomflagiconinfo( "waypoint_taking_br", "friendly", "MP_INGAME_ONLY/OBJ_TAKING_CAPS", 1 );
    _setdomflagiconinfo( "waypoint_capture_br", "enemy", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    _setdomflagiconinfo( "waypoint_defend_br", "friendly", "MP_INGAME_ONLY/OBJ_DEFEND_CAPS", 0 );
    _setdomflagiconinfo( "waypoint_defending_br", "friendly", "MP_INGAME_ONLY/OBJ_DEFENDING_CAPS", 0 );
    _setdomflagiconinfo( "waypoint_blocking_br", "friendly", "MP_INGAME_ONLY/OBJ_BLOCKING_CAPS", 0 );
    _setdomflagiconinfo( "waypoint_blocked_br", "friendly", "MP_INGAME_ONLY/OBJ_BLOCKED_CAPS", 0 );
    _setdomflagiconinfo( "waypoint_losing_br", "enemy", "MP_INGAME_ONLY/OBJ_LOSING_CAPS", 1 );
    _setdomflagiconinfo( "waypoint_captureneutral_br", "neutral", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    _setdomflagiconinfo( "waypoint_contested_br", "contest", "MP_INGAME_ONLY/OBJ_CONTESTED_CAPS", 1 );
    _setdomflagiconinfo( "waypoint_dom_target_br", "neutral", "MP_INGAME_ONLY/OBJ_TARGET_CAPS", 0 );
    _setdomflagiconinfo( "icon_waypoint_target_br", "neutral", "MP_INGAME_ONLY/OBJ_TARGET_CAPS", 0 );
    _setdomflagiconinfo( "icon_waypoint_ot", "neutral", "MP_INGAME_ONLY/OBJ_OTFLAGLOC_CAPS", 0 );
}

_setdomflagiconinfo( var_0, var_1, var_2, var_3 )
{
    level.waypointcolors[var_0] = var_1;
    level.waypointbgtype[var_0] = 1;
    level.waypointstring[var_0] = var_2;
    level.waypointshader[var_0] = "ui_mp_br_mapmenu_icon_dom_objective";
    level.waypointpulses[var_0] = var_3;
}

domflag_onuseupdate( var_0, var_1, var_2, var_3 )
{
    if ( var_1 < 1.0 && !level.gameended )
        waittill_player_moves( var_1, var_0 );

    if ( var_1 > 0.05 && var_2 && !istrue( self.didstatusnotify ) )
        self.didstatusnotify = 1;
}

ignoreafkcheck( var_0 )
{
    if ( !isdefined( self.tripledefenderkill ) || !self.tripledefenderkill )
    {
        self.tripledefenderkill = 1;

        if ( isdefined( self.traincar ) )
        {
            if ( isdefined( level._id_135FD ) && istrue( level._id_135FD.idmask ) )
            {
                var_1 = self.traincar.idflags_hyper_burst_round + ( 200, 0, 0 );
                var_2 = self.traincar.origin + rotatevector( var_1, self.traincar.angles );
                level thread scripts\mp\gametypes\br_quest_util.gsc::_id_1313A( var_2, "dom", 3 );
            }
        }
        else
            level thread scripts\mp\gametypes\br_quest_util.gsc::_id_1313A( self.curorigin, "dom" );

        var_3 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0.team, self.squadindex );
        var_4 = scripts\mp\utility\player::getplayersinradius( self.curorigin, 7800, undefined, var_3 );

        foreach ( var_6 in var_4 )
        {
            if ( isdefined( var_6 ) && isalive( var_6 ) )
                var_6 thread scripts\mp\hud_message::showsplash( "br_domination_quest_alert" );
        }

        var_8 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0.team, self.squadindex );

        foreach ( var_10 in var_8 )
            var_10 notify( "calloutmarkerping_warzoneKillQuestIcon" );
    }
}

domflag_onuse( var_0 )
{
    foreach ( var_2 in self.locale.subscribedinstances )
    {
        if ( var_2.team == var_0.team )
        {
            var_3 = spawnstruct();
            var_4 = scripts\mp\gametypes\br_quest_util.gsc::objectiveids( var_0.team );
            var_5 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "domination" );
            var_6 = scripts\mp\gametypes\br_quest_util.gsc::objective_origin( scripts\mp\gametypes\br_quest_util.gsc::objective_minimapupdate( "domination" ) );
            var_7 = scripts\mp\gametypes\br_alt_mode_bblitz.gsc::calculateeventstarttime( var_0 );
            var_3.usingobject = scripts\mp\gametypes\br_quest_util.gsc::v_start_pos( var_5, var_4, var_6, undefined, var_7 );
            self.squadindex = var_2.squadindex;
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_2.team, "br_domination_quest_complete", var_3 );
            scripts\mp\gametypes\br_quest_util.gsc::hint_obj_name( var_2.team, var_0, 8, var_5 );
            level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_dom_success", var_2.team, 1, 1 );
            var_2._id_11FD6 = self.flagmodel.origin;
            var_2._id_11FD3 = self.flagmodel.angles;
            var_2.result = "success";

            if ( isdefined( var_2.tablet.relic_squadlink_turn_team_headobjectives ) )
                [[ var_2.tablet.relic_squadlink_turn_team_headobjectives ]]( var_2 );

            if ( isdefined( self.assisttouchlist[var_2.team] ) )
            {
                var_8 = getarraykeys( self.assisttouchlist[var_2.team] );

                foreach ( var_10 in var_8 )
                {
                    var_11 = self.assisttouchlist[var_2.team][var_10].player;

                    if ( isdefined( var_11.owner ) )
                        var_11 = var_11.owner;

                    if ( !isplayer( var_11 ) )
                        continue;

                    var_11 scripts\cp\helicopter\chopper_boss::_id_11EFA( "t9_ch_global_complete_recon_objective_for_operator_mission", 1 );
                    var_11 scripts\cp\helicopter\chopper_boss::_id_11EFA( "t9_ch_global_complete_recon_objective_for_operator_mission_op2", 1 );
                    var_2 scripts\mp\gametypes\br_quest_util.gsc::_id_11DE0( var_11 );
                }
            }

            continue;
        }

        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_2.team, "br_domination_quest_failure" );
        level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_gen_fail", var_2.team, 1 );
        var_2.result = "fail";

        if ( isdefined( var_2.tablet.relic_squadlink_turn_team_headobjectives ) )
            [[ var_2.tablet.relic_squadlink_turn_team_headobjectives ]]( var_2 );
    }

    self.locale thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

domflag_onenduse( var_0, var_1, var_2 )
{
    scripts\mp\gametypes\obj_dom.gsc::dompoint_onuseend( var_0, var_1, var_2 );
}

waittill_player_moves( var_0, var_1 )
{
    if ( !isdefined( self.lastsfxplayedtime ) )
        self.lastsfxplayedtime = gettime();

    if ( self.lastsfxplayedtime + 995 < gettime() )
    {
        self.lastsfxplayedtime = gettime();
        var_2 = "";
        var_0 = int( floor( var_0 * 10 ) );
        var_2 = "mp_dom_capturing_tick_0" + var_0;
        self.visuals[0] playsoundtoteam( var_2, var_1 );
    }
}

domflag_setdomscriptablepartstate( var_0, var_1, var_2 )
{
    switch ( var_1 )
    {
        case "contested":
        case "idle":
        case "off":
            return 0;
        default:
            var_1 = "using";

            if ( isdefined( var_2 ) )
                var_1 = var_1 + var_2;

            self.scriptable setscriptablepartstate( var_0, var_1 );

            if ( var_0 == "pulse" )
                self.scriptable setscriptablepartstate( "flag", var_1 );

            return 1;
    }
}

ignoredeathsdoor( var_0 )
{
    if ( getdvarint( "scr_br_alt_mode_gxp", 0 ) )
    {
        if ( var_0 scripts\mp\gametypes\br_public.gsc::zombie() )
            return 0;
    }

    var_1 = var_0.team;

    foreach ( var_3 in self.locale.subscribedinstances )
    {
        if ( var_3.team == var_1 )
            return 1;
    }

    return 0;
}

idflags_no_dismemberment()
{
    while ( self._id_12A93.domflag.numtouching[self.id] )
        waitframe();

    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.id, "br_domination_quest_timer_expired" );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_gen_fail", self.team, 1 );
}

omvar_code( var_0 )
{
    var_1 = spawnstruct();
    var_1._id_121E3 = "questPointsArray";
    var_1._id_121DF = ( var_0.origin[0], var_0.origin[1], 0 );
    var_1._id_121E6 = 12000;
    var_1._id_121E7 = 0;
    var_1._id_121E4 = 8000;
    var_1._id_121E5 = 6000;
    var_1._id_11C76 = 7;
    var_1.mintime = getdvarfloat( "scr_br_dom_quest_capture_time", 30 );
    var_1._id_121E1 = 1;
    var_1._id_11F03 = var_0._id_11F03;

    if ( lootchopper_spawn() )
    {
        if ( var_1._id_121E6 < level._id_11C5C )
            var_1._id_121E6 = level._id_11C5C;

        var_1._id_121E4 = level._id_11C5C;
        var_1._id_121E5 = level._id_11C5D;
    }

    if ( istrue( var_0.tv_station_fastrope_one_infil_start_targetname_array_index ) )
    {
        var_1._id_121E3 = "questPointsArrayWZTrain";
        var_1._id_13112 = 1;
    }

    var_2 = getdvarint( "scr_br_questDomDistMin", -1 );
    var_3 = getdvarint( "scr_br_questDomDistMax", -1 );

    if ( var_2 >= 0 )
        var_1._id_121E5 = var_2;

    if ( var_3 >= 0 )
        var_1._id_121E4 = var_3;

    return var_1;
}

lootchopper_spawn()
{
    var_0 = 0;
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "overrideQuestSearchParams", "domination" );

    if ( isdefined( var_1 ) )
        return var_1;

    var_2 = scripts\mp\utility\game::onfieldupgradeendbuffer();

    switch ( var_2 )
    {
        case "mini":
        case "risk":
        case "dmz":
            var_0 = 1;
            break;
    }

    return var_0;
}

_id_12FDE( var_0, var_1 )
{
    var_0 setorigin( var_0.origin + ( 0, 0, 34 ) );
    var_0 setstance( "crouch" );
}
