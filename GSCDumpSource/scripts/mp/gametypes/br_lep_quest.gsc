// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "lep", 0 );

    if ( !var_0 )
        return;

    scripts\engine\scriptable::_id_1219E( "body", ::brlep_lootcacheused );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF2( "lep", "brloot_lep_tablet" );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "lep" )._id_121E0 = getdvarint( "scr_br_lep_searchCircleSize", 1000 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "lep" ).subscribetoquestlocale = getdvarint( "scr_br_lep_missionTimeBase", 300 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "lep" ).subscriptions = getdvarint( "scr_br_lep_missionTimeBonus", 60 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "lep" )._id_11F38 = getdvarint( "scr_br_lep_resetTimerOnPickup", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11E05( "lep", ::brlep_tabletinit );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "lep", ::brlep_removequestinstance );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF6( "lep", ::brlep_playerdisconnect );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestlocale( "lep_locale" );
    scripts\mp\gametypes\br_quest_util.gsc::registercreatequestlocale( "lep_locale", ::brlep_createquestlocale );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF3( "lep_locale", ::brlep_movequestlocale );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "lep_locale", ::brlep_removelocaleinstance );
    scripts\mp\gametypes\br_quest_util.gsc::registercheckiflocaleisavailable( "lep_locale", ::brlep_checkiflocaleisavailable );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "lep_locale", ::brlep_circletick );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF5( "lep_locale", ::brlep_entergulag );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF8( "lep_locale", ::brlep_respawn );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11C73( "lep", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF9( "lep", ::brlep_ontimerexpired );
    var_1 = [];
    var_1[0] = scripts\mp\gametypes\br_quest_util.gsc::filtercondition_isdead;
    scripts\mp\gametypes\br_quest_util.gsc::registerplayerfilter( "lep", var_1 );
    game["dialog"]["mission_scav_accept"] = "mission_mission_scav_accept";
    game["dialog"]["mission_scav_success"] = "mission_mission_scav_success";
    game["dialog"]["lep_quest_start"] = "contract_start";
    game["dialog"]["lep_quest_first"] = "contract_first";
    game["dialog"]["lep_quest_finished"] = "contract_finished";
    thread brlep_initlepcachelocations();
}

brlep_initlepcachelocations()
{
    level.bunkerlepcachelocations = [];
    var_0 = "mp/br_lep_bun_locations.csv";
    var_1 = 0;

    for (;;)
    {
        var_2 = tablelookupbyrow( var_0, var_1, 0 );

        if ( var_2 == "" )
            break;

        var_2 = int( var_2 );
        var_3 = spawnstruct();
        var_3.origin = ( float( tablelookupbyrow( var_0, var_1, 1 ) ), float( tablelookupbyrow( var_0, var_1, 2 ) ), float( tablelookupbyrow( var_0, var_1, 3 ) ) );
        var_3.angles = ( float( tablelookupbyrow( var_0, var_1, 4 ) ), float( tablelookupbyrow( var_0, var_1, 5 ) ), float( tablelookupbyrow( var_0, var_1, 6 ) ) );
        var_3.row = var_1;

        if ( !isdefined( level.bunkerlepcachelocations[var_2] ) )
            level.bunkerlepcachelocations[var_2] = [];

        level.bunkerlepcachelocations[var_2][level.bunkerlepcachelocations[var_2].size] = var_3;
        var_1++;
    }

    for ( var_4 = 0; var_4 < level.bunkerlepcachelocations.size; var_4++ )
        level.bunkerlepcachelocations[var_4] = scripts\engine\utility::array_randomize( level.bunkerlepcachelocations[var_4] );
}

brlep_removequestinstance()
{
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
}

brlep_playerdisconnect( var_0 )
{
    if ( var_0.team == self.team )
    {
        var_1 = scripts\mp\utility\teams::getteamdata( self.team, "players" );
        scripts\mp\gametypes\br_quest_util.gsc::getquestinstancedata( "lep_locale", self.team ).playerlist = var_1;

        if ( isdefined( self._id_12A93 ) && isdefined( self._id_12A93.deletex1finhud ) && var_1.size )
            self._id_12A93.deletex1finhud setotherent( var_1[0] );

        if ( !scripts\mp\gametypes\br_quest_util.gsc::isteamvalid( var_0.team ) )
        {
            self.result = "fail";
            scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        }
    }
}

brlep_entergulag( var_0 )
{
    if ( !brlep_checkforcorrectinstance( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
    scripts\mp\gametypes\br_quest_util.gsc::playertouching( var_0 );
}

brlep_respawn( var_0 )
{
    if ( !brlep_checkforcorrectinstance( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "lep" );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12552( var_0 );
}

brlep_checkforcorrectinstance( var_0 )
{
    if ( var_0.team == self.subscribedinstances[0].team )
        return 1;
    else
        return 0;
}

brlep_createquestlocale( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createlocaleinstance( "lep_locale", "lep", self.team );

    if ( !isdefined( var_0 ) )
    {
        var_1.curorigin = ( 0, 0, 0 );
        var_1.enabled = 0;
        return var_1;
    }

    var_1 scripts\mp\gametypes\br_quest_util.gsc::get_model_for_color_wire_cut( "ui_mp_br_mapmenu_icon_lep_objective", "current" );
    var_1.playerlist = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    var_1.velo_forward_memory = 0;
    var_1.chosenbunker = self.chosenbunker;
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "lep_locale", var_1 );
    var_1 brlep_setuplocalelocation( var_0 );
    return var_1;
}

brlep_movequestlocale( var_0 )
{
    self.velo_forward_memory++;
    var_1 = brlep_setuplocalelocation( var_0 );

    if ( var_1 )
    {
        self.subscribedinstances[0].get_trap_room_spawnpoints = var_0.origin;
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.subscribedinstances[0].team, "br_lep_quest_next_location" );
        level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "lep_quest_first", self.subscribedinstances[0].team, 1 );

        if ( istrue( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "lep" )._id_11F38 ) )
            self.subscribedinstances[0] scripts\mp\gametypes\br_quest_util.gsc::_id_11C74( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "lep" ).subscribetoquestlocale, 1 );
        else
            self.subscribedinstances[0] scripts\mp\gametypes\br_quest_util.gsc::_id_11C72( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "lep" ).subscriptions );
    }
}

brlep_setuplocalelocation( var_0 )
{
    if ( !isdefined( var_0 ) )
    {
        var_1 = self.subscribedinstances[0];

        foreach ( var_3 in scripts\mp\utility\teams::getteamdata( var_1.team, "players" ) )
            var_3 scripts\mp\utility\lower_message::_id_12394( "br_assassination_notargets", undefined, 5 );

        var_1.result = "no_locale";
        var_1 scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        return 0;
    }

    getlootspawnpointcount( var_0.index );

    if ( self.velo_forward_memory == 2 )
    {
        var_5 = level.bunkerlepcachelocations[self.chosenbunker.index][0];
        var_0.origin = scripts\engine\utility::drop_to_ground( var_5.origin, 0 );
        var_0.angles = var_5.angles;
        level.bunkerlepcachelocations[self.chosenbunker.index] = scripts\engine\utility::array_remove( level.bunkerlepcachelocations[self.chosenbunker.index], var_5 );
        level.bunkerlepcachelocations[self.chosenbunker.index][level.bunkerlepcachelocations[self.chosenbunker.index].size] = var_5;
    }

    brlep_spawnlootcache( var_0.origin, var_0.angles, self );
    self.curorigin = var_0.origin + ( 0, 0, 50 );
    scripts\mp\gametypes\br_quest_util.gsc::throwingknife_fire_clear_fx( self.curorigin );
    brlep_updatehud();
    return 1;
}

brlep_removelocaleinstance()
{
    brlep_deletehud();
    self.playerlist = undefined;
    self.subscribedinstances = undefined;

    if ( isdefined( self.deletex1finhud ) )
    {
        if ( self.deletex1finhud getscriptablepartstate( "body" ) == "scavenger_closed" )
            self.deletex1finhud delete();
    }
}

brlep_circletick( var_0, var_1 )
{
    if ( !isdefined( self.lastcircletick ) )
        self.lastcircletick = -1;

    var_2 = gettime();

    if ( self.lastcircletick == var_2 )
        return;

    self.lastcircletick = var_2;
    var_3 = distance2d( self.curorigin, var_0 );

    if ( var_3 > var_1 )
    {
        foreach ( var_5 in self.subscribedinstances )
            var_5 brlep_failquest();
    }
}

brlep_checkiflocaleisavailable()
{
    return 0;
}

brlep_takequestitem( var_0 )
{
    if ( !istrue( var_0.init ) )
        var_0 scripts\mp\gametypes\br_quest_util.gsc::tabletinit( "lep" );

    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( "lep", self.team, var_0.index, var_0 );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( self.team, self );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::_id_11DE0( self );
    var_1.team = self.team;
    var_1.startlocation = self.origin;
    var_1.get_trap_room_spawnpoints = self.origin;
    var_1._id_11F03 = var_0._id_11F03;
    var_1.chosenbunker = var_0.chosenbunker;
    var_2 = brlep_lootcachesearchparams( var_1.startlocation, var_1._id_11F03[0] );
    var_3 = var_1 scripts\mp\gametypes\br_quest_util.gsc::requestquestlocale( "lep_locale", var_2, 1 );

    if ( !var_3.enabled )
    {
        scripts\mp\utility\lower_message::_id_12394( "br_assassination_notargets", undefined, 5 );
        var_1.result = "no_locale";
        var_1 scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
        var_4 = spawnstruct();
        var_4.origin = var_0.origin;
        var_4.angles = var_0.angles;
        var_4.itemsdropped = 0;

        if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
        {
            var_5 = "mp/loot_set_cache_contents_dmz.csv";
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 0, 1, "health", var_5 );
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 0, 2, "ammo", var_5 );
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 1, 1, "plunder", var_5 );
        }
        else
        {
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 0, 1, "health" );
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 0, 2, "ammo" );
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 1, 1, "plunder" );
        }

        return;
    }

    scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( "lep", self.team );
    var_1.totalscavengeditems = 0;
    var_1 scripts\mp\gametypes\br_quest_util.gsc::_id_11C74( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "lep" ).subscribetoquestlocale, 4 );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "lep", var_1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_129E2( "lep", self, self.team );
    var_6 = spawnstruct();
    var_6.excludedplayers = [];
    var_6.excludedplayers[0] = self;
    var_6._id_11AEF = scripts\mp\gametypes\br_quest_util.gsc::objective_hide_for_mlg_spectator( "lep", scripts\mp\gametypes\br_quest_util.gsc::objectiveids( self.team ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_lep_quest_start_team", var_6 );
    scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( self, "br_lep_quest_start_tablet_finder", var_6 );

    if ( !scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
        scripts\mp\gametypes\br_quest_util.gsc::passes_final_capsule_check( self.team, "br_mission_pickup_tablet" );

    scripts\mp\gametypes\br_quest_util.gsc::hint_obj_name( var_1.team, self, 6, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "lep" ) );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "lep_quest_start", var_1.team, 1 );
}

brlep_lootcachesearchparams( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2._id_121E3 = "getUnusedLootCacheArray";
    var_2._id_121DF = var_0;
    var_2._id_121E6 = 10000;
    var_2._id_121E7 = 0;
    var_2._id_121E4 = 4000;
    var_2._id_121E5 = 2000;
    var_2._id_121E1 = 0;
    var_2._id_11F03 = var_1;
    var_2.mintime = 100;
    return var_2;
}

brlep_completequest( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::objectiveids( self.team );
    var_4 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "lep" );
    var_5 = scripts\mp\gametypes\br_quest_util.gsc::objective_origin( scripts\mp\gametypes\br_quest_util.gsc::objective_minimapupdate( "lep" ) );
    var_2.usingobject = scripts\mp\gametypes\br_quest_util.gsc::v_start_pos( var_4, var_3, var_5 );

    if ( !scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
    {
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_lep_quest_complete", var_2 );
        level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "lep_quest_finished", self.team, 1, 1 );
        level thread crates_delete_early( self.team );
    }

    self._id_11FD6 = var_0.origin;
    self._id_11FD3 = var_0.angles;
    self.result = "success";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

brlep_failquest()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_lep_quest_circle_failure" );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_obj_circle_fail", self.team, 1 );
    self.result = "fail";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

brlep_updatehud()
{
    foreach ( var_1 in self.playerlist )
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivesetparameter( self.velo_forward_memory );

    var_3 = scripts\mp\gametypes\br_quest_util.gsc::sortvalidplayersinarray( self.playerlist );

    foreach ( var_1 in var_3["valid"] )
    {
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "lep" );
        scripts\mp\gametypes\br_quest_util.gsc::_id_12552( var_1 );
    }

    foreach ( var_1 in var_3["invalid"] )
    {
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
        scripts\mp\gametypes\br_quest_util.gsc::playertouching( var_1 );
    }
}

brlep_hidehudfromplayer( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::playertouching( var_0 );
    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
}

brlep_deletehud()
{
    foreach ( var_1 in self.playerlist )
        brlep_hidehudfromplayer( var_1 );

    scripts\mp\gametypes\br_quest_util.gsc::hacks_started();
}

brlep_ontimerexpired()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_lep_quest_timer_expired" );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_gen_fail", self.team, 1 );
}

brlep_spawnlootcache( var_0, var_1, var_2 )
{
    var_3 = spawn( "script_model", var_0 );
    var_4 = var_2.playerlist[0];
    var_3.angles = var_1;
    var_3 setotherent( var_4 );
    var_3 setmodel( "military_loot_crate_lep_quest" );
    var_3 setscriptablepartstate( "body", "scavenger_lep_closed" );
    var_3.questlocale = var_2;
    var_2.deletex1finhud = var_3;

    foreach ( var_6 in level.players )
    {
        if ( var_6 != var_4 && ( var_4.team == "none" || var_6.team != var_4.team ) )
            var_3 disablescriptableplayeruse( var_6 );
    }
}

brlep_lootcacheused( var_0, var_1, var_2, var_3, var_4 )
{
    if ( istrue( var_3 scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "playerSkipLootPickup", var_0 ) ) )
        return;

    if ( var_2 == "scavenger_lep_closed" && isdefined( var_0.entity ) )
    {
        if ( !isdefined( var_0.entity.questlocale.subscribedinstances ) )
        {
            var_3 iprintlnbold( "Chest Requires a Lep Mission" );
            return;
        }

        var_5 = var_0.entity.questlocale.subscribedinstances[0];

        if ( var_3.team != var_5.team )
        {
            var_3 iprintlnbold( "Chest Requires a Lep Mission" );
            return;
        }

        var_0 setscriptablepartstate( "body", "scavenger_lep_opening" );
        var_6 = getdvarint( "scr_br_scavenger_cacheDeleteDelay", 30 );
        var_0.entity scripts\engine\utility::delaycallwatchself( var_6, ::delete );
        var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_11DE0( var_3 );
        var_5._id_11FD8 = var_0;

        switch ( var_0.entity.questlocale.velo_forward_memory )
        {
            case 0:
                scripts\mp\gametypes\br_quest_util.gsc::parachuteoverheadwarningradius( "scavenger_1", var_3.team, var_0.origin, var_0.angles, var_5._id_11FD8 );
                break;
            case 1:
                scripts\mp\gametypes\br_quest_util.gsc::parachuteoverheadwarningradius( "scavenger_2", var_3.team, var_0.origin, var_0.angles, var_5._id_11FD8 );
                break;
            case 2:
                break;
        }

        if ( var_0.entity.questlocale.velo_forward_memory == 3 )
        {
            var_5._id_11FD6 = var_0.origin;
            var_5._id_11FD3 = var_0.angles;
            scripts\mp\gametypes\br_quest_util.gsc::hint_obj_name( var_5.team, var_3, 8, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "lep" ) );
            var_5 brlep_completequest( var_0.entity, var_3 );
        }
        else
        {
            scripts\mp\gametypes\br_quest_util.gsc::hint_obj_name( var_5.team, var_3, 7, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "lep" ) );
            var_7 = brlep_lootcachesearchparams( var_0.origin, var_5._id_11F03[var_0.entity.questlocale.velo_forward_memory + 1] );
            var_0.entity.questlocale scripts\mp\gametypes\br_quest_util.gsc::throwingknife_fire_begin_fx( "lep_locale", var_7 );
        }

        level notify( "lootcache_opened_kill_callout" + var_0.origin );
        var_8 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getFriendlyPlayers" ) ]]( var_3.team, 0 );

        foreach ( var_10 in var_8 )
            var_10 notify( "calloutmarkerping_warzoneKillQuestIcon" );
    }
}

brlep_tabletinit()
{
    self._id_11F03 = [];
    self.chosenbunker = getclosestsafebunker( self.origin );
    var_0 = self.chosenbunker.origin - self.origin;

    for ( var_1 = 0; var_1 < 4; var_1++ )
    {
        if ( var_1 == 2 )
            continue;
        else if ( var_1 < 2 )
        {
            var_2 = 0.333333;
            var_3 = self.origin + var_0 * ( ( var_1 + 1 ) * var_2 );
        }
        else
            var_3 = self.chosenbunker.origin;

        var_4 = brlep_lootcachesearchparams( var_3 );
        var_5 = scripts\mp\gametypes\br_quest_util.gsc::lastgunkilltime( "lep", var_4 );

        if ( !isdefined( var_5 ) )
            return 0;

        getlootspawnpointcount( var_5.index );
        var_3 = var_5.origin;
        self._id_11F03[var_1] = var_5;
    }

    return 1;
}

getclosestsafebunker( var_0 )
{
    var_1 = spawnstruct();
    var_1.origin = undefined;
    var_1.index = undefined;
    var_2 = undefined;

    foreach ( var_7, var_4 in level.should_do_vo_call )
    {
        var_5 = 0;

        if ( istrue( level.extract_dialogue_played ) )
            var_5 = scripts\mp\gametypes\br_circle.gsc::safedivide( var_4 );
        else
            var_5 = scripts\mp\gametypes\br_circle.gsc::ispointincurrentsafecircle( var_4 );

        if ( !var_5 )
            continue;

        var_6 = distance2d( var_0, var_4 );

        if ( !isdefined( var_2 ) || var_6 < var_2 )
        {
            var_1.origin = var_4;
            var_1.index = var_7;
            var_2 = var_6;
        }
    }

    return var_1;
}

crates_delete_early( var_0 )
{
    foreach ( var_2 in level.teamdata[var_0]["players"] )
        var_2 scripts\cp\helicopter\chopper_boss::update_focus_fire_objective( "lep_dis_2" );
}
