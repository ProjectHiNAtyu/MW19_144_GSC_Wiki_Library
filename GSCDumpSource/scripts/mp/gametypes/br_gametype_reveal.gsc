// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level._id_11FAF = getdvarint( "scr_br_reveal_event_type", 1 );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "gulag" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "teamSpectate" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "oneLife" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "match_start_VO" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "kiosk" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "movingCircle" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "drogBagLoadout" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "randomizeCircleCenter" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "plunderSites" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "planeSnapToOOB" );
    scripts\mp\gametypes\br_gametypes.gsc::initnonbunkerdoors( "prematchBlueprints" );
    scripts\mp\gametypes\br_gametypes.gsc::initnonbunkerdoors( "allowLateJoiners" );
    scripts\mp\gametypes\br_gametypes.gsc::initnonbunkerdoors( "circleEarlyStart" );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "onPlayerKilled", ::onplayerkilled );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "playerDropPlunderOnDeath", ::playerdropplunderondeath );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "restartCircleElimination", ::_id_11F6A );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "lootUsedIgnore", ::spawn_smoke_bombers );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "getFinalCircleCenter", ::_id_11F9E );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "mapCenterFinalCircle", ::_id_11F9E );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "markPlayerAsEliminatedOnKilled", ::ss_entergulag );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "playerNakedDropLoadout", ::_id_11F94 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "createC130PathStruct", ::_id_11F98 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "addToC130Infil", ::_id_11F96 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "mayConsiderPlayerDead", ::start_safehouse_regroup_objective );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "modifyPlayerDamage", ::modifyplayerdamage );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "modifyVehicleDamage", ::switcharray );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "allowMeleeVehicleDamage", ::blueprintextract_shouldgivereward );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "playerGetZombieSpawnLocation", ::wind_trigger_loop );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "spawnHandled", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_127E1 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "regenHealthAdd", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_11980 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "regenDelaySpeed", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_1197F );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "postUpdateGameEvents", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_11B23 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "lastStandAllowed", scripts\mp\gametypes\br_alt_mode_zxp.gsc::setquestrewardtier );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "kioskRevivePlayer", scripts\mp\gametypes\br_alt_mode_zxp.gsc::set_relic_explodedmg );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "onPlayerDamaged", scripts\mp\gametypes\br_alt_mode_zxp.gsc::onplayerdamaged );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "shouldLastStandDamageScale", scripts\mp\gametypes\br_gametype_zxp.gsc::_id_124FB );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "ignoreVehicleExplosiveDamage", scripts\mp\gametypes\br_alt_mode_zxp.gsc::primesneeded );
    level._id_125B8 = 0;
    level.parachute_set_spawn_values = 1;
    level.completesmokinggunquest._id_11F52 = getdvarint( "scr_br_reveal_respawnDelay", 0 );
    level.completesmokinggunquest.timelimit = getdvarint( "scr_br_timelimit", 900 );
    level.completesmokinggunquest.lastunrulyscore = new_angles();
    level.parachuterestoreweaponscb = ::blankfunc;
    level.disableforfeit = 1;
    level.choppergunner_waitintroanimtime = 1;
    level.skipprematchdropspawn = 0;
    level._id_12C7D = getdvarint( "scr_br_timedSection1Duration", 420 );
    level._id_12C7F = getdvarint( "scr_br_timedSection2Duration", 70 );
    level._id_12C81 = getdvarint( "scr_br_timedSection3Duration", 19 );
    level._id_11FA4 = [ "shipwreck", "prison", "hospital", "stadium", "tvstation", "superstore", "dam", "trainstation", "storagetown", "quarry", "promwest", "promeast", "downtown", "farms", "lumber", "port", "park", "hills", "boneyard", "airport", "milbase" ];
    level._id_11FB2 = undefined;
    level._id_11FA0 = [];
    level._id_11FAC = undefined;
    level.traincolignorelist = 1;
    level._effect["smoke_exfil"] = loadfx( "vfx/iw8_br/gameplay/vfx_br_crate_smoke_signal.vfx" );

    if ( level.script == "mp_br_mechanics" )
        level.extract_ismissionweapon = ( 475, -1956, 0 );
    else
        level.extract_ismissionweapon = ( -20830, 46010, -654 );

    game["dialog"]["plague_intro"] = "plague_intro";
    game["dialog"]["op2_dov1_infil_3"] = "op2_dov1_infil_3_10";
    game["dialog"]["plague_overrun"] = "plague_overrun";
    game["dialog"]["ebr_alert_phase4_80"] = "ebr_alert_phase4_80";
    game["dialog"]["ebr_alert_missile_20"] = "ebr_alert_missile_20";
    game["dialog"]["dx_bra_cp1_plague_zone_chopper_inbound"] = "dx_bra_cp1_plague_zone_chopper_inbound";
    game["dialog"]["plague_exfil"] = "plague_exfil";
    game["dialog"]["op1_dov1_infil_1_10"] = "op1_dov1_infil_1_10";
    game["dialog"]["plague_no_exfil"] = "plague_no_exfil";
    game["dialog"]["op1_dov1_infil_2"] = "op1_dov1_infil_2_10";
    game["dialog"]["ebr_alert_phase4_70"] = "ebr_alert_phase4_70";
    game["dialog"]["op2_dov1_infil_10"] = "op2_dov1_infil_1_10";
    game["dialog"]["op2_dov1_infil_2_10"] = "op2_dov1_infil_2_10";
    game["dialog"]["ebr_alert_phase4_90"] = "ebr_alert_phase4_90";
    level.lootchopper_droploot = [ "apc_russian", "atv", "big_bird", "cargo_truck", "cargo_truck_mg", "cop_car", "hoopty", "hoopty_truck", "jeep", "large_transport", "light_tank", "little_bird", "little_bird_mg", "medium_transport", "pickup_truck", "tac_rover", "technical", "van" ];
    thread relic_amped_reset_deathshield_on_revived();
}

relic_amped_reset_deathshield_on_revived()
{
    waittillframeend;
    _id_11FB1();
    scripts\mp\flags::gameflaginit( "reveal_timed_section_1", 0 );
    scripts\mp\flags::gameflaginit( "reveal_timed_section_2", 0 );
    level.colorise_warnings = 1;
    level._id_11B8D = ::createhudtimer;
    level thread _id_11FB3();
    level thread little_bird_mg_deletenextframe();

    if ( getdvarint( "scr_br_reveal_give_xp_to_humans", 0 ) )
        level thread patch_ent_fixes();

    level thread clearsixthsense();
    level thread _id_11FA6();
}

blankfunc()
{

}

_id_11FB3()
{
    level endon( "game_ended" );
    level endon( "forceFinalRunToExfil" );
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    setomnvar( "ui_br_zm_marked_area", 255 );
    level waittill( "infils_ready" );
    wait 5;
    setomnvar( "ui_br_circle_state", 0 );
    _id_11FA5();
    thread _id_12C7C();
    _id_11FB4( level._id_12C7D );
    thread _id_12C7E();
    _id_11FB4( level._id_12C7F );
    thread _id_12C80();
    level notify( "watchFinalRunToExfil" );
    _id_11FB4( level._id_12C81 );
    _id_11F9D( 1 );
    thread _id_11F9A();
}

_id_12C7C()
{
    level endon( "endRevealTimeHandler" );
    scripts\mp\flags::gameflagset( "reveal_timed_section_1" );
    thread _id_11F97( 660 );
    thread _id_11FB9( 6, 4, 0, 1 );
    thread relic_amped_on_ai_kill();

    foreach ( var_1 in level.players )
    {
        var_1 scripts\mp\hud_message::showsplash( "br_dov_survive" );

        if ( scripts\mp\utility\player::isreallyalive( var_1 ) && !var_1 scripts\mp\gametypes\br_public.gsc::zombiejumping() )
            var_1 setclientomnvar( "ui_br_reveal_state", 1 );
    }

    level thread _id_11F9C();

    if ( level._id_12C7D <= 45 )
        var_3 = 5;
    else
        var_3 = 45;

    wait( var_3 - 6 );

    foreach ( var_1 in level.players )
        var_1 _id_11FB7( "op2_dov1_infil_3" );

    scripts\mp\gametypes\br_containmentprotocol.gsc::createallhistorydestinations( 5 );
    wait 6;
    thread _id_1209B();
    scripts\mp\gametypes\br_publicevent_juggernaut.gsc::allow_br_loot_to_br_marked();
    wait 10;
    level notify( "dov_1_broadcast" );
    wait 33;
    level notify( "zombie_outbreak_1_start" );
    wait 50;
    level notify( "zombie_outbreak_2_start" );
    wait( level._id_12C7D - var_3 - 93 - 70 );
    level notify( "zombie_outbreak_3_start" );
    wait 60;
    level notify( "zombie_outbreak_4_start" );
    wait 10;
}

_id_12C7E()
{
    level endon( "endRevealTimeHandler" );
    level notify( "end_containment_fx" );
    scripts\mp\flags::gameflagset( "reveal_timed_section_2" );
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "plague_overrun", 0, level.players );

    foreach ( var_1 in level.players )
        var_1 _id_11FB7( "ebr_alert_phase4_80" );

    setomnvar( "scriptable_loot_hide", 1 );
    var_3 = getarraykeys( level.teamdata );

    foreach ( var_5 in var_3 )
    {
        setteamradar( var_5, 0 );
        setteamradarstrength( var_5, 0 );
    }

    foreach ( var_1 in level.players )
    {
        if ( scripts\mp\utility\player::isreallyalive( var_1 ) && !var_1 scripts\mp\gametypes\br_public.gsc::zombiejumping() )
            var_1 setclientomnvar( "ui_br_reveal_state", 2 );
    }

    setmusicstate( "dovp1_exfil_gameplay" );
    _id_11F9B();
    wait 6;

    foreach ( var_1 in level.players )
        var_1 _id_11FB7( "op2_dov1_infil_2_10" );

    scripts\mp\gametypes\br_containmentprotocol.gsc::createallhistorydestinations( 4 );
    wait 6;

    if ( getdvarint( "scr_br_reveal_bombardement_enabled", 1 ) )
    {
        level _calloutmarkerping_handleluinotify_added::brjugg_initexternalfeatures( level.extract_ismissionweapon, undefined, 8, 7000 );
        wait 4;

        foreach ( var_1 in level.players )
            var_1 _id_11FB7( "ebr_alert_missile_20" );

        wait 11;
    }
    else
        wait 15;

    if ( getdvarint( "scr_br_reveal_exfil_helicopter", 1 ) )
    {
        level notify( "reveal_exfil_heli_incoming" );

        foreach ( var_1 in level.players )
            var_1 _id_11FB7( "dx_bra_cp1_plague_zone_chopper_inbound", 1 );
    }

    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "plague_exfil", 0, level.players );
    wait 15;

    foreach ( var_1 in level.players )
        var_1 thread _id_11FB7( "op1_dov1_infil_1_10" );

    scripts\mp\gametypes\br_containmentprotocol.gsc::createallhistorydestinations( 3.5 );
}

_id_12C80()
{
    level endon( "endRevealTimeHandler" );
    level notify( "revealTimedSection3" );
    level notify( "end_containment_fx" );
    level._id_11FB2 = scripts\engine\utility::play_loopsound_in_space( "iw8_nuke_alarm_lp", level.extract_ismissionweapon + ( 0, 0, 500 ) );
    setmusicstate( "dovp1_nuke_countdown" );

    foreach ( var_1 in level.players )
        var_1 setsoundsubmix( "mp_br_event_dovp1_nuke", 6 );

    _id_1254B( level._id_12C81 );
    level.trial_rpg_settings = 1;
    wait 1;

    foreach ( var_1 in level.players )
    {
        if ( !var_1 scripts\mp\gametypes\br_public.gsc::zombiejumping() )
            scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "plague_no_exfil", var_1, 0 );
    }

    setomnvarforallclients( "ui_br_reveal_state", 3 );
    setomnvarforallclients( "ui_hide_minimap", 1 );
    wait 1;
    level notify( "revealTimedSection3_after_initial_VO" );

    foreach ( var_1 in level.players )
        var_1 _id_11FB7( "op1_dov1_infil_2" );

    scripts\mp\gametypes\br_containmentprotocol.gsc::createallhistorydestinations( 14 );
    wait 6;

    foreach ( var_1 in level.players )
        var_1 _id_11FB7( "ebr_alert_phase4_70" );

    wait 1;
    gate_flares_think();

    foreach ( var_1 in level.players )
        var_1 _id_11FB7( "op2_dov1_infil_10" );

    wait 4;

    foreach ( var_1 in level.players )
    {
        var_1 _id_11FB7( "ebr_alert_phase4_90" );
        var_1 setsoundsubmix( "mp_br_event_dovp1_outro", 5 );
    }

    wait 3;

    foreach ( var_1 in level.players )
        var_1.plotarmor = 1;

    scripts\mp\gametypes\br_containmentprotocol.gsc::createalldestinationvfx();
}

patch_ent_fixes()
{
    level endon( "watchFinalRunToExfil" );
    level endon( "forceFinalRunToExfil" );
    level waittill( "infils_ready" );

    for (;;)
    {
        wait 20;

        foreach ( var_1 in level.players )
        {
            if ( !var_1 scripts\mp\gametypes\br_public.gsc::zombiejumping() )
            {
                var_1 thread scripts\mp\rank::giverankxp( "br_reveal_surviving", 50 );
                var_1 thread scripts\mp\rank::scoreeventpopup( "br_reveal_surviving" );
            }
        }
    }
}

little_bird_mg_deletenextframe()
{
    level endon( "watchFinalRunToExfil" );

    if ( getdvarint( "scr_br_reveal_force_final_run_disabled", 0 ) )
        return;

    level waittill( "infils_ready" );
    var_0 = 1;

    while ( var_0 )
    {
        wait 3;
        var_0 = 0;
        var_1 = getarraykeys( level.teamdata );

        foreach ( var_3 in var_1 )
        {
            if ( scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_11E82( var_3 ) > 0 )
            {
                var_0 = 1;
                break;
            }
        }

        if ( !var_0 )
        {
            level notify( "forceFinalRunToExfil" );
            thread _id_12C80();
            _id_11FB4( level._id_12C81 );
            _id_11F9D( 1 );
            _id_11F9A();
        }
    }
}

_id_11F9E()
{
    var_0 = getdvarvector( "br_final_circle_override", level.extract_ismissionweapon );
    return var_0;
}

_id_11F9F()
{
    level endon( "game_ended" );

    foreach ( var_1 in level.players )
        scripts\mp\gametypes\br.gsc::parachute_get_path( var_1 );
}

_id_11FB4( var_0 )
{
    level endon( "endRevealTimeHandler" );
    wait( var_0 );
}

_id_11FA1()
{
    if ( !isdefined( level._id_11FAF ) )
        return;

    level endon( "game_ended" );
    self endon( "disconnect" );
    scripts\mp\gametypes\br_armor.gsc::participantplunder();
    level waittill( "infils_ready" );
    scripts\mp\gametypes\br_armor.gsc::participantplunder();
}

_id_11F95()
{
    foreach ( var_1 in level.players )
    {
        var_1 scripts\cp\helicopter\chopper_boss::update_focus_fire_objective( "event_dov_completed" );
        waitframe();
        scripts\mp\gametypes\br.gsc::_id_13073( var_1 );
        waitframe();
    }
}

_id_11FB9( var_0, var_1, var_2, var_3 )
{
    level endon( "endRevealTimeHandler" );
    level endon( "forceFinalRunToExfil" );

    for ( var_4 = 1; var_4 <= 4; var_4++ )
    {
        switch ( var_4 )
        {
            case 1:
                level waittill( "zombie_outbreak_1_start" );
                break;
            case 2:
                level waittill( "zombie_outbreak_2_start" );
                break;
            case 3:
                level waittill( "zombie_outbreak_3_start" );
                break;
            case 4:
                level waittill( "zombie_outbreak_4_start" );
                break;
        }

        _id_11FAA( "mp_run_" + var_4, var_3, 4 );
        _id_11FA8( "mp_run_" + var_4, var_3, "zombie_outbreak" );
        _id_11FB8( var_0 );
    }
}

_id_11F9D( var_0 )
{
    var_1 = "mp_final_run";
    var_2 = 45;

    if ( isdefined( level._id_11FB2 ) )
        level._id_11FB2 delete();

    thread scripts\mp\gametypes\br_vehicles.gsc::emptyallvehicles();

    if ( isdefined( level._id_11FA0 ) )
    {
        foreach ( var_4 in level._id_11FA0 )
            var_4 destroy();

        level._id_11FA0 = [];
    }

    foreach ( var_7 in level.players )
    {
        if ( var_7 scripts\mp\gametypes\br_public.gsc::zombiejumping() )
            var_7 notify( "zombie_unset" );

        var_7 scripts\mp\utility\player::_freezecontrols( 1 );
        var_7 scripts\mp\gametypes\br_gulag.gsc::gulagfadetoblack();
    }

    wait 2;
    thread scripts\mp\gametypes\br_vehicles.gsc::deleteextantvehicles();
    level thread _id_11F95();
    _id_11FAA( var_1, var_0, 9 );
    level notify( "end_containment_fx" );
    _id_11FA8( var_1, var_0, "final_nuke" );
    wait( var_2 - 2 );
}

_id_11FAA( var_0, var_1, var_2 )
{
    foreach ( var_4 in level.players )
    {
        if ( !isalive( var_4 ) )
            continue;

        var_4 preloadcinematicforplayer( var_0, 0, var_1 );
        var_4 setclientomnvar( "ui_br_bink_overlay_state", var_2 );
    }
}

_id_11FA8( var_0, var_1, var_2 )
{
    if ( !isdefined( var_2 ) )
        var_2 = "";

    switch ( var_2 )
    {
        case "zombie_outbreak":
            break;
        case "final_nuke":
            setmusicstate( "" );

            foreach ( var_4 in level.players )
            {
                if ( !isalive( var_4 ) )
                    continue;

                var_4 clearsoundsubmix( "fade_to_black_all_except_music", 0.5 );
                var_4 setsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 0.5 );
            }

            break;
    }

    foreach ( var_4 in level.players )
    {
        if ( !isalive( var_4 ) )
            continue;

        var_4 playcinematicforplayer( var_0, 1, var_1 );
    }
}

_id_11FB8( var_0 )
{
    wait( var_0 );

    foreach ( var_2 in level.players )
    {
        var_2 setclientomnvar( "ui_br_bink_overlay_state", 0 );
        var_2 clearsoundsubmix( "mp_br_event_dovp1_nuke", 0.5 );
        var_2 clearsoundsubmix( "mp_br_event_dovp1_outro", 0.5 );
    }
}

_id_11F94()
{
    var_0 = self;

    if ( var_0 scripts\mp\gametypes\br_public.gsc::zombiejumping() )
        return;

    level.clear_trap_console_activation = _id_11F93();
    var_0 scripts\mp\class::loadout_emptycacheofloadout( "gamemode" );
    var_0 scripts\mp\gametypes\br.gsc::partenum( 0, 1, 0 );
    scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustompickupitem( var_0, "brloot_equip_gasmask", 1 );
    var_0 scripts\mp\gametypes\br_weapons.gsc::choppersupport_modifydamage_trial();
    var_0 scripts\mp\gametypes\br_pickups.gsc::_id_11F36();
    var_0 scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( "super_ammo_drop", 0 );
    var_0 scripts\mp\gametypes\br.gsc::parachute_get_path( var_0 );
    var_0 scripts\mp\gametypes\br_armor.gsc::participantplunder();
}

_id_1246C()
{
    level endon( "game_ended" );
    var_0 = 20;
    scripts\mp\flags::gameflagwait( "prematch_done" );

    foreach ( var_2 in level.players )
    {
        var_2 setclientomnvar( "ui_br_bink_overlay_state", 4 );
        var_2 playcinematicforplayer( "mp_connor", 1, 1 );
    }
}

_id_11FA6()
{
    wait 1;
    level.select_back_door_spawners = [];
    var_0 = spawnstruct();
    var_0.id = 1;
    var_0.occupied = 0;
    var_0.origin = ( -4903, 25796, -394 );
    level.select_back_door_spawners[level.select_back_door_spawners.size] = var_0;
    var_1 = spawnstruct();
    var_1.id = 1;
    var_1.occupied = 0;
    var_1.origin = ( -28977, 23076, -390 );
    level.select_back_door_spawners[level.select_back_door_spawners.size] = var_1;
    var_2 = spawnstruct();
    var_2.id = 1;
    var_2.occupied = 0;
    var_2.origin = ( 2693, 41717, 1607 );
    level.select_back_door_spawners[level.select_back_door_spawners.size] = var_2;
}

_id_11F97( var_0 )
{
    level endon( "game_ended" );
    setomnvar( "ui_br_circle_state", 6 );
    setomnvar( "ui_hardpoint_timer", gettime() + int( var_0 * 1000 ) );
}

_id_11F99( var_0 )
{
    level endon( "game_ended" );
    wait( var_0 );
    level._id_11B8D = scripts\mp\gametypes\br.gsc::createhudtimer;
    level.superslotcleanup = scripts\mp\gametypes\br.gsc::create_script_wait_for_flags;
    level.modeonspawnplayer = scripts\mp\gametypes\br.gsc::onspawnplayer;
    level.completesmokinggunquest.funcs["spawnHandled"] = undefined;
    level.completesmokinggunquest.funcs["playerKilledSpawn"] = undefined;
}

_id_11F9A()
{
    level thread scripts\mp\gamelogic::forceend();
    level waittill( "game_cleanup" );
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::plundercountdownupdatetime();
}

_id_11FA5()
{
    thread _id_11F9F();
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "plague_intro", 0, level.players );
    scripts\mp\gametypes\br_circle.gsc::add_veh_spawners_to_passive_wave_spawning();
    setomnvar( "ui_br_circle0_start_entity", undefined );
}

spawn_smoke_bombers( var_0 )
{
    return 0;
}

_id_11F93()
{
    var_0 = [];
    var_0["loadoutArchetype"] = "archetype_assault";
    var_0["loadoutPrimary"] = "iw8_sh_aalpha12";
    var_0["loadoutPrimaryAttachment"] = "none";
    var_0["loadoutPrimaryAttachment2"] = "none";
    var_0["loadoutPrimaryCamo"] = "none";
    var_0["loadoutPrimaryReticle"] = "none";
    var_0["loadoutSecondary"] = "iw8_fists";
    var_0["loadoutSecondaryAttachment"] = "none";
    var_0["loadoutSecondaryAttachment2"] = "none";
    var_0["loadoutSecondaryCamo"] = "none";
    var_0["loadoutSecondaryReticle"] = "none";
    var_0["loadoutMeleeSlot"] = "none";
    var_0["loadoutEquipmentPrimary"] = "none";
    var_0["loadoutEquipmentSecondary"] = "none";
    var_0["loadoutStreakType"] = "assault";
    var_0["loadoutKillstreak1"] = "none";
    var_0["loadoutKillstreak2"] = "none";
    var_0["loadoutKillstreak3"] = "none";
    var_0["loadoutSuper"] = "none";
    var_0["loadoutPerks"] = [ "specialty_null" ];
    var_0["loadoutGesture"] = "playerData";
    var_0["loadoutExecution"] = "none";
    return var_0;
}

new_angles()
{
    var_0 = [];
    var_0["loadoutArchetype"] = "archetype_assault";
    var_0["loadoutPrimary"] = "iw8_fists";
    var_0["loadoutPrimaryAttachment"] = "none";
    var_0["loadoutPrimaryAttachment2"] = "none";
    var_0["loadoutPrimaryCamo"] = "none";
    var_0["loadoutPrimaryReticle"] = "none";
    var_0["loadoutSecondary"] = "none";
    var_0["loadoutSecondaryAttachment"] = "none";
    var_0["loadoutSecondaryAttachment2"] = "none";
    var_0["loadoutSecondaryCamo"] = "none";
    var_0["loadoutSecondaryReticle"] = "none";
    var_0["loadoutMeleeSlot"] = "iw8_fists_mp";
    var_0["loadoutEquipmentPrimary"] = "none";
    var_0["loadoutEquipmentSecondary"] = "none";
    var_0["loadoutStreakType"] = "assault";
    var_0["loadoutKillstreak1"] = "none";
    var_0["loadoutKillstreak2"] = "none";
    var_0["loadoutKillstreak3"] = "none";
    var_0["loadoutSuper"] = "none";
    var_0["loadoutPerks"] = [ "specialty_null" ];
    var_0["loadoutGesture"] = "playerData";
    var_0["loadoutExecution"] = "none";
    return var_0;
}

para_groups()
{
    var_0 = self;
    var_0 scripts\mp\class::loadout_emptycacheofloadout( "gamemode" );
    var_0 scripts\mp\gametypes\br_pickups.gsc::_id_11F36();
    var_0.pers["gamemodeLoadout"] = level.completesmokinggunquest.lastunrulyscore;
    var_0.class = "gamemode";
}

_id_1254B( var_0 )
{
    var_1 = gettime();
    var_2 = var_0 * 1000 + var_1;
    scripts\mp\trials\trial_utility::_id_123B0( "ui_nuke_data", 9, 2, 3 );
    scripts\mp\trials\trial_utility::_id_123B0( "ui_nuke_data", 0, 9, var_0 );
    scripts\mp\trials\trial_utility::_id_123B0( "ui_nuke_data", 11, 1, 1 );
    setomnvar( "ui_nuke_end_milliseconds", var_2 );
}

playerthrowsmokesignal()
{
    scripts\mp\trials\trial_utility::_id_123B0( "ui_nuke_data", 11, 1, 0 );
}

_id_11F9B()
{
    var_0 = spawn( "script_model", level.extract_ismissionweapon - ( 0, 0, 200 ) );
    var_0 setmodel( "risk_dom_plate" );
    var_0 setscriptablepartstate( "risk_dom_beacon", "on", 0 );

    foreach ( var_2 in level.players )
    {
        if ( var_2 scripts\mp\gametypes\br_public.gsc::zombiejumping() )
        {
            var_2 scripts\mp\hud_message::showsplash( "br_dov_stop_exfil" );
            continue;
        }

        var_2 scripts\mp\hud_message::showsplash( "br_dov_exfil" );
    }

    _id_11FAC();
    var_4 = spawnfx( level._effect["smoke_exfil"], level.extract_ismissionweapon );
    triggerfx( var_4 );
}

_id_11FAC()
{
    var_0 = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );

    if ( var_0 != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( var_0, "current", level.extract_ismissionweapon + ( 0, 0, 600 ), "ui_mp_br_mapmenu_icon_dov_1_objective" );
        scripts\mp\objidpoolmanager::update_objective_setbackground( var_0, 1 );
        objective_removeallfrommask( var_0 );

        foreach ( var_2 in level.players )
        {
            if ( var_2 scripts\mp\gametypes\br_public.gsc::zombiejumping() )
                continue;

            objective_addclienttomask( var_0, var_2 );
        }

        objective_showtoplayersinmask( var_0 );
        level._id_11FAC = var_0;
    }
    else
    {

    }
}

_id_11FAD()
{
    level endon( "game_ended" );

    if ( !isdefined( level._id_11FAC ) )
        return;

    scripts\mp\objidpoolmanager::objective_playermask_hidefrom( level._id_11FAC, self );
}

_id_11FB7( var_0, var_1 )
{
    var_2 = self;

    if ( istrue( var_1 ) )
        var_3 = var_0;
    else
    {
        var_3 = "dx_brm_" + game["dialog"][var_0];
        var_3 = tolower( var_3 );
    }

    if ( soundexists( var_3 ) )
        var_4 = lookupsoundlength( var_3, 1 ) / 1000;
    else
        var_4 = 3;

    var_4 = var_4 + 0.5;
    var_2 queuedialogforplayer( var_3, var_0, var_4 );
}

onspawnplayer()
{
    self notify( "br_spawned" );

    if ( isagent( self ) )
        return;

    var_0 = istrue( self.gulag );
    scripts\mp\gametypes\br_pickups.gsc::initplayer( var_0 );
    scripts\mp\gametypes\br_functional_poi.gsc::initplayer();
    scripts\mp\gametypes\br_armor.gsc::redbutton_init();
    self.oldprimarygun = undefined;
    self.newprimarygun = undefined;
    self.healthregendisabled = 0;
    self.br_lastscenecheck = gettime();
    self.needtoplayintro = undefined;
    self.gunnlessweapon = undefined;
    level.superdelay = 0;
    level.superpointsmod = 1;
    self.br_perks = [ 0, 0, 0, 0, 0 ];
    self.br_perkpoints = 0;

    if ( level.validateprojectileent )
        self skydive_cutautodeployon();
    else
        self skydive_cutautodeployoff();

    if ( level.validautoassignquests )
        self skydive_cutparachuteon();
    else
        self skydive_cutparachuteoff();

    thread _id_11FA1();
}

start_safehouse_regroup_objective( var_0 )
{
    var_1 = 1;

    if ( !scripts\mp\gametypes\br_public.gsc::zombiejumping() )
        _id_11FAD();

    return scripts\mp\gametypes\br_alt_mode_zxp.gsc::start_safehouse_regroup_objective( var_0, var_1 );
}

ss_entergulag()
{
    return scripts\mp\gametypes\br_alt_mode_zxp.gsc::ss_entergulag();
}

createhudtimer( var_0 )
{
    var_1 = 0.5;

    if ( !isdefined( self._id_11B77 ) || self isplayerheadless() )
    {
        self setclientomnvar( "ui_br_extended_load_screen", 0 );
        return;
    }

    thread scripts\mp\gametypes\br.gsc::createinvalidcirclearea();

    if ( !isdefined( self.registerhint ) && !( isdefined( level._id_11FAF ) && level._id_11FAF == 2 ) )
    {
        var_2 = level.completesmokinggunquest._id_11F52 > 0;
        var_3 = undefined;

        if ( var_2 )
        {
            var_3 = level.completesmokinggunquest._id_11F52 * 1000;
            scripts\mp\gametypes\br.gsc::spawnintermission( self.origin + ( 0, 0, 100 ), self.angles );
            scripts\mp\spectating::setdisabled();
        }

        var_4 = scripts\mp\gametypes\br_public.gsc::_id_119E6( self._id_11B77.origin, self._id_11B77.height );
        var_5 = getdvarint( "scr_br_drop_prespawn_timeout_ms", 9000 );
        scripts\mp\gametypes\br_public.gsc::_id_119E7( var_4, var_5, 1, 0, var_3 );

        if ( var_2 )
        {
            var_6 = 4.0;
            var_7 = 1.0;
            var_8 = 0.25;
            var_9 = var_7 - var_8;
            self setclientomnvar( "ui_show_spectateHud", self getentitynumber() );
            scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_3 ) );
            var_10 = max( level.completesmokinggunquest._id_11F52 - var_6, 0 );
            wait( var_10 );
            thread scripts\mp\gametypes\br_gulag.gsc::fadeoutin( var_7 );
            wait( var_9 );
            scripts\mp\gametypes\br.gsc::spawnintermission( var_4, self._id_11B77.angles );
            scripts\mp\gametypes\br.gsc::current_respawn_point_override();
            self setclientomnvar( "ui_br_transition_type", 2 );
            wait( var_8 );
            var_11 = max( level.completesmokinggunquest._id_11F52 - var_10 - var_7, 0 );
            wait( var_11 );
            scripts\mp\gametypes\br_public.gsc::weapon_xp_iw8_ar_kilo433();
            self setclientomnvar( "ui_show_spectateHud", -1 );
        }
        else
        {
            if ( !istrue( level._id_1362F ) )
            {
                scripts\mp\gametypes\br.gsc::current_respawn_point_override();
                self setclientomnvar( "ui_br_transition_type", 4 );
            }

            wait( var_1 );
            scripts\mp\gametypes\br.gsc::spawnintermission( var_4, self._id_11B77.angles );
            scripts\mp\spectating::setdisabled();
            scripts\mp\gametypes\br_public.gsc::_id_11A13();
        }
    }
    else
    {
        self.registerhint = undefined;
        scripts\mp\gametypes\br_public.gsc::_id_11A13();
    }

    self freezecontrols( 0 );
}

wind_trigger_loop()
{
    [var_1, var_2] = wind_trigger_toggle();

    if ( !isdefined( var_1 ) )
        [var_1, var_2] = wind_triggers();

    if ( isdefined( var_1 ) )
        return [ var_1, var_2 ];
    else
        return scripts\mp\gametypes\br_alt_mode_zxp.gsc::wind_trigger_loop();
}

wind_trigger_toggle()
{
    var_0 = undefined;
    var_1 = undefined;

    if ( !getdvarint( "scr_br_reveal_override_zombie_spawns_near_team", 1 ) )
        return [ var_0, var_1 ];

    var_2 = getdvarfloat( "scr_br_reveal_override_zombie_spawns_near_team_disable_time", -1 );

    if ( var_2 > 0 && isdefined( level.starttime ) )
    {
        var_3 = ( gettime() - level.starttime ) / 1000;

        if ( var_3 > var_2 )
            return [ var_0, var_1 ];
    }

    [var_0, var_1] = scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_11A32();
    return [ var_0, var_1 ];
}

wind_triggers()
{
    var_0 = undefined;
    var_1 = undefined;
    var_2 = 50;
    var_3 = 10000;

    if ( !getdvarint( "scr_br_reveal_override_zombie_spawns_random", 1 ) )
        return [ var_0, var_1 ];

    if ( !isdefined( level.br_circle ) || !isdefined( level.br_circle.dangercircleent ) || istrue( level.completesmokinggunquest._id_13707 ) )
        return [ var_0, var_1 ];

    var_4 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius();
    var_5 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
    var_6 = var_4 + var_2;
    var_7 = getdvarfloat( "scr_br_reveal_override_zombie_spawns_min_angle", 210.0 );
    var_8 = getdvarfloat( "scr_br_reveal_override_zombie_spawns_max_angle", 390.0 );
    var_9 = getdvarint( "scr_br_reveal_override_zombie_spawns_attempts", 5 );
    var_10 = var_8 - var_7;
    var_11 = var_10 / var_9;
    var_12 = randomfloat( var_11 );
    var_13 = [];

    for ( var_14 = 0; var_14 < var_9; var_14++ )
        var_13[var_14] = var_7 + var_14 * var_11 + var_12;

    var_13 = scripts\engine\utility::array_randomize( var_13 );

    for ( var_14 = 0; var_14 < var_13.size; var_14++ )
    {
        var_15 = anglestoforward( ( 0, var_13[var_14], 0 ) );
        [var_0, var_1] = scripts\mp\gametypes\br_alt_mode_zxp.gsc::onprematchstarted2( var_5, var_15, var_6 );

        if ( isdefined( var_0 ) )
        {
            var_0 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_0, var_3 );
            break;
        }
    }

    return [ var_0, var_1 ];
}

_id_1247C()
{
    level endon( "game_ended" );
    var_0 = getdvarint( "scr_br_sandbox_time_warning", 120 );
    scripts\mp\flags::gameflagwait( "prematch_done" );
    setomnvar( "ui_br_circle_state", 5 );

    if ( level.completesmokinggunquest.timelimit <= 0 )
        return;

    setomnvar( "ui_hardpoint_timer", gettime() + int( level.completesmokinggunquest.timelimit * 1000 ) );
    var_1 = max( level.completesmokinggunquest.timelimit - var_0, 0 );
    wait( var_1 );
    setomnvar( "ui_br_circle_state", 6 );
}

ontimelimit()
{
    if ( istrue( level.gameended ) )
        return;

    player_ammo_crate_hint_watcher();
    thread scripts\mp\gametypes\br.gsc::brendgame( level.completesmokinggunquest.lasttuttxt, game["end_reason"]["objective_completed"] );
}

onplayerkilled( var_0 )
{
    if ( !istrue( level.br_prematchstarted ) )
        return;

    if ( level.gameended )
        return;

    if ( isdefined( var_0.victim ) && isplayer( var_0.victim ) && !istrue( level.trial_rpg_settings ) )
    {
        var_0.victim setclientomnvar( "ui_br_reveal_state", 4 );
        var_0.victim scripts\mp\gametypes\br_containmentprotocol.gsc::createandstartlights();
    }

    if ( !isdefined( var_0.attacker ) || !isplayer( var_0.attacker ) || !isdefined( var_0.victim ) || var_0.attacker == var_0.victim )
        return;

    var_1 = var_0.attacker.team;

    if ( !isdefined( level.teamdata[var_1]["kills"] ) )
        level.teamdata[var_1]["kills"] = 0;

    level.teamdata[var_1]["kills"]++;

    if ( isdefined( level._id_11FAF ) )
    {
        if ( !istrue( level.br_prematchstarted ) )
            return;

        if ( level.gameended )
            return;

        var_2 = var_0.victim;
        var_3 = var_0.attacker;

        if ( !isdefined( var_3 ) || !isplayer( var_3 ) || !isdefined( var_2 ) )
            return;

        return;
    }
}

playerdropplunderondeath( var_0, var_1 )
{
    var_2 = int( self.plundercount * 0.5 );
    var_3 = self.plundercount - var_2;

    if ( var_3 <= 0 )
        var_3 = 1;

    self.plundercountondeath = var_2;
    scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_2 );
    scripts\mp\gametypes\br_plunder.gsc::dropplunderbyrarity( var_3, var_0 );
    return 1;
}

player_ammo_crate_hint_watcher()
{

}

_id_11F6A( var_0, var_1 )
{
    level endon( "game_ended" );
    level.ontimelimit = scripts\mp\gametypes\br.gsc::ontimelimit;
    var_2 = "scr_" + scripts\mp\utility\game::getgametype() + "_timelimit";
    level.watchdvars[var_2].value = 0;
    level.overridewatchdvars[var_2] = 0;
    wait( var_1 );
    level._id_11B8D = scripts\mp\gametypes\br.gsc::createhudtimer;
    level.superslotcleanup = scripts\mp\gametypes\br.gsc::create_script_wait_for_flags;
    level.modeonspawnplayer = scripts\mp\gametypes\br.gsc::onspawnplayer;
    level.completesmokinggunquest.extracthelipadusecallback = 1;
    level notify( "closeSandboxMenu" );

    foreach ( var_4 in level.players )
    {
        if ( isdefined( var_4.plunderrankupdate ) )
            var_4.plunderrankupdate destroy();
    }

    level.completesmokinggunquest.funcs["spawnHandled"] = undefined;
    level.completesmokinggunquest.funcs["playerKilledSpawn"] = undefined;
}

_id_11F98()
{
    var_0 = ( 10895, -10916, 292 );
    var_1 = level.br_level.br_circleradii[1] - 42000;
    var_2 = scripts\mp\gametypes\br_c130.gsc::createtestc130path( var_0, var_1 );
    return var_2;
}

_id_11F96()
{
    thread _id_11FA3();
}

_id_11FA3()
{
    level endon( "game_ended" );
    self endon( "death" );
    var_0 = distance( self.vehicle_collision_update.startpt, self.vehicle_collision_update.invuln_to_veh_crush );
    var_1 = var_0 / scripts\mp\gametypes\br_c130.gsc::getc130speed() - 5;
    wait( var_1 );

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3 ) && isdefined( var_3.br_infil_type ) && var_3.br_infil_type == "c130" && !isdefined( var_3.jumptype ) )
        {
            var_3.jumptype = "outOfBounds";
            var_3 notify( "halo_kick_c130" );
        }
    }
}

_id_11FB1()
{
    level.br_level.br_circledelaytimes[1] = level.br_level.br_circledelaytimes[0];
    level.br_level.br_circledelaytimes[0] = 1;
    level.br_level.br_circleclosetimes[0] = 1;
    level.br_level.circlesettingsassert[0] = 1;
}

clearsixthsense()
{
    wait 5.0;
    scripts\mp\utility\sound::apc_target_enemies( "br_zmb_dov_sfx" );
}

relic_amped_on_ai_kill()
{
    if ( level.script == "mp_br_mechanics" )
    {
        scripts\mp\gametypes\br_zones.gsc::quickdropaddtocache( "a", ( 0, 0, 0 ), 500, 20, 0, 2 );
        scripts\mp\gametypes\br_zones.gsc::quickdropaddtocache( "b", ( 1000, 1000, 0 ), 500, 20, 0, 2 );
        scripts\mp\gametypes\br_zones.gsc::quickdropaddtocache( "c", ( 1000, -1000, 0 ), 500, 20, 0, 2 );
        var_0 = "a,b,c";
    }
    else
        var_0 = "dam,stadium,hospital,super,tv,quarry,bank";

    scripts\mp\gametypes\br_zones.gsc::quickdropaddtoexisting( "scr_br_reveal_plague_zone_locations", var_0 );
    thread wait_unload_chopper_flood_players();
}

wait_unload_chopper_flood_players()
{
    scripts\mp\flags::gameflagwait( "reveal_timed_section_2" );
    var_0 = getdvarfloat( "scr_br_reveal_plague_zone_delete_time", 10.0 );

    foreach ( var_2 in level.clients_hacked.zones )
    {
        if ( var_2.type == "plague" )
            var_2 thread scripts\mp\gametypes\br_zones.gsc::_id_13725( undefined, 50.0, var_0 );
    }

    wait( var_0 );

    foreach ( var_2 in level.clients_hacked.zones )
    {
        if ( var_2.type == "plague" )
            var_2 scripts\mp\gametypes\br_zones.gsc::_id_1371E();
    }
}

_id_11F9C()
{
    level endon( "game_ended" );

    if ( !getdvarint( "scr_br_reveal_exfil_helicopter", 1 ) )
        return;

    level waittill( "reveal_exfil_heli_incoming" );
    var_0 = [ level.extract_ismissionweapon + ( 500, 0, 0 ), level.extract_ismissionweapon - ( 500, 0, 0 ), level.extract_ismissionweapon + ( 350, 0, 500 ) - ( 0, 650, 0 ) ];

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
        level thread add_module_ai_spawn_func_to_module( var_0[var_1] );
}

add_module_ai_spawn_func_to_module( var_0 )
{
    while ( istrue( level.castrewardvalue ) )
        wait 1;

    var_1 = level.players[randomint( level.players.size )];
    var_2 = var_1 _id_119D5( var_0 );

    if ( isdefined( var_2 ) )
    {
        var_3 = spawnstruct();
        var_3.origin = var_0;
        var_3.angles = var_2.angles;
        var_3.spawntype = "GAME_MODE";
        var_4 = spawnstruct();
        var_5 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "little_bird", var_3, var_4 );

        if ( isdefined( var_5 ) )
        {
            var_2.playerplunderlosedeposit = var_5;
            var_5 hide();
            var_2 helicreateextractvfx( var_0 );
            thread isstandardsandbox( var_2 );
            return;
        }
    }
}

isstandardsandbox( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "leaving" );
    var_0 setvehgoalpos( var_0.pathgoal, 1 );
    var_0 settargetyaw( var_0.pavelow_boss_damage_func );
    var_1 = var_0 tracegroundheight( var_0.pathgoal + ( 0, 0, 400 ) );
    var_1 = var_1 + getdvarfloat( "scr_br_reveal_exfil_heli_z_offset", 300 );
    var_1 = var_1 + randomfloat( getdvarfloat( "scr_br_reveal_exfil_heli_z_offset_random", 300 ) );
    var_2 = var_0.pathgoal[2] - var_1;
    var_0.level_light = deregisterscriptableinstance( var_2 );
    var_0 waittill( "goal" );
    var_0 thread playersetattractionstateindex();
    var_0 thread playerplunderlose();
    var_0 helidescend( var_0.endpoint, var_1 );
    var_0 helicleanupextract( 0 );
}

tracegroundheight( var_0 )
{
    var_1 = 125;
    var_2 = tracegroundpoint( var_0, 100, [ self ] );
    var_3 = var_2[2];
    var_4 = var_3 + var_1;
    return var_4;
}

tracegroundpoint( var_0, var_1, var_2 )
{
    var_3 = -99999;
    var_4 = ( var_0[0], var_0[1], var_3 );
    var_5 = scripts\engine\trace::create_world_contents();
    var_6 = undefined;

    if ( isdefined( var_1 ) )
        var_6 = scripts\engine\trace::sphere_trace( var_0, var_4, var_1, var_2, var_5 );
    else
        var_6 = scripts\engine\trace::ray_trace( var_0, var_4, var_2, var_5 );

    return var_6["position"];
}

playersetattractionstateindex()
{
    self endon( "death" );
    level waittill( "revealTimedSection3_after_initial_VO" );
    wait 3;
    playerpulloutofgulagwin();
}

deregisterscriptableinstance( var_0 )
{
    var_1 = descendpos( 30000, 150, 100 );
    var_2 = descendpos( var_0, 37.5, 25.0 );
    var_3 = var_1 + var_2;
    return var_3;
}

descendpos( var_0, var_1, var_2 )
{
    var_3 = var_0 * 0.0000157828;
    var_4 = 0.5 * var_2;
    var_5 = var_1;
    var_6 = -1 * var_3;
    var_7 = ( -1 * var_5 + sqrt( var_5 * var_5 - 4 * var_4 * var_6 ) ) / ( 2 * var_4 );
    var_7 = var_7 * 3600;
    var_7 = var_7 + 1.5;
    return var_7;
}

playerpulloutofgulagwin()
{
    self endon( "death" );
    self show();
    self notify( "leaving" );
    self.leaving = 1;
    self setvehgoalpos( self.pathgoal, 1 );
    self settargetyaw( self.pavelow_boss_damage_func );
    playersetattractionbesttime( 3, self.level_light );
    self waittill( "goal" );
    self vehicle_setspeed( self.speed, self.accel );
    self setvehgoalpos( self.vehicle_collision_init, 1 );
    self settargetyaw( self.pavelow_boss_damage_func );
    self waittill( "goal" );
    self stoploopsound();
    playersetattractionbesttime( 0, 0 );
    self notify( "heli_gone" );
    scripts\cp_mp\vehicles\vehicle_tracking::_deletevehicle( self );
}

playersetattractionbesttime( var_0, var_1 )
{
    var_2 = gettime() + int( var_1 * 1000 );
    var_3 = level.teamdata[self.team]["alivePlayers"];

    foreach ( var_5 in var_3 )
    {
        var_5 setclientomnvar( "ui_br_plunder_extract_state", var_0 );
        var_5 setclientomnvar( "ui_br_plunder_extract_end_time", var_2 );
    }
}

helidescend( var_0, var_1 )
{
    self endon( "death" );
    var_2 = var_0[0];
    var_3 = var_0[1];
    var_4 = ( var_2, var_3, var_1 );
    self setvehgoalpos( var_4, 1 );
    self settargetyaw( self.pavelow_boss_damage_func );
    self vehicle_setspeed( 37.5, 25.0 );
    thread playerplundereventcallbacks();
    thread playerplundereventomnvars();
    self waittill( "goal" );
    self sethoverparams( 1, 1 );
    wait 1;
    self sethoverparams( 25, 20, 10 );
}

playerplunderlose()
{
    self endon( "death" );

    if ( !isdefined( self.vfxent ) )
        return;

    wait 5;
    self.vfxent endon( "death" );
    self.vfxent setscriptablepartstate( "smoke", "dissipate" );
    self.vfxent playsound( "smoke_canister_tail_dissipate" );
    wait 1;
    self.vfxent stoploopsound();
    wait 4.5;
    self.vfxent delete();
}

_id_119D5( var_0 )
{
    var_1 = self;
    var_2 = var_0;
    var_3 = getent( "airstrikeheight", "targetname" );
    var_4 = var_3.origin[2] - 300;
    var_5 = ( var_2[0], var_2[1], var_4 );
    var_6 = ( 0, randomfloat( 360 ), 0 );
    var_7 = var_5 + -1 * anglestoforward( var_6 ) * 30000;
    var_8 = var_5 + anglestoforward( var_6 ) * 30000;
    var_9 = var_1 spawnheli( var_1, var_7, var_5, var_8 );
    return var_9;
}

helicleanupextract( var_0 )
{
    if ( isdefined( self.vfxent ) )
    {
        self.vfxent stoploopsound();
        self.vfxent delete();
    }

    if ( istrue( var_0 ) && isdefined( self.site ) )
        self.site setscriptablepartstate( self.site.type, self.site.allowobjectiveuseaftermatchstart );
}

playerplundereventcallbacks()
{
    self endon( "leaving" );
    self endon( "death" );

    for (;;)
    {
        self waittill( "touch", var_0 );

        if ( isdefined( var_0 ) && var_0 isattachmentvariantlocked() )
            var_0 dodamage( var_0.health, self.origin, var_0, var_0, "MOD_CRUSH" );
    }
}

spawnheli( var_0, var_1, var_2, var_3 )
{
    var_4 = vectortoangles( var_2 - var_1 );
    var_5 = 1;
    var_6 = scripts\cp_mp\vehicles\vehicle_tracking::_spawnhelicopter( var_0, var_1, var_4, "veh_apache_plunder_mp", "veh8_mil_air_lbravo_personnel_mp_flyable" );

    if ( !isdefined( var_6 ) )
        return;

    var_7 = var_2 * ( 1, 1, 0 );
    var_6.damagecallback = ::callback_vehicledamage;
    var_6.speed = 150;
    var_6.accel = 100;
    var_6.health = 1000;
    var_6.maxhealth = var_6.health;
    var_6.team = var_0.team;
    var_6.owner = var_0;
    var_6.defendloc = var_2;
    var_6.lifeid = 0;
    var_6.flaresreservecount = var_5;
    var_6.pathgoal = var_2;
    var_6.vehicle_collision_init = var_3;
    var_6.endpoint = var_7;
    var_6.pavelow_boss_damage_func = var_4[1];
    var_6.vehiclename = "magma_plunder_chopper";
    var_6 setcandamage( 1 );
    var_6 setmaxpitchroll( 10, 25 );
    var_6 vehicle_setspeed( var_6.speed, var_6.accel );
    var_6 sethoverparams( 50, 100, 50 );
    var_6 setturningability( 0.05 );
    var_6 setyawspeed( 45, 25, 25, 0.5 );
    var_6 setotherent( var_0 );
    var_6 thread scripts\mp\killstreaks\flares::flares_handleincomingstinger( undefined, undefined );
    var_6 thread handledestroydamage();
    var_6 thread playerplunderevent();
    return var_6;
}

playerplunderevent()
{
    self endon( "heli_gone" );
    self endon( "swapped" );
    var_0 = self.owner;
    var_1 = self.team;
    self waittill( "death", var_2, var_3, var_4, var_5 );
    playerplaydepositanim();

    if ( !isdefined( self ) )
        return;

    if ( !isdefined( self.largeprojectiledamage ) && !istrue( self.isdepot ) )
    {
        self vehicle_setspeed( 25, 5 );
        thread playerplunderbankdepositcallback( 75 );
        scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 2.7 );
    }

    playerpowersaddhudelem( var_2 );
}

playerpowersaddhudelem( var_0 )
{
    var_1 = self gettagorigin( "tag_origin" ) + ( 0, 0, 40 );
    self radiusdamage( var_1, 256, 140, 70, var_0, "MOD_EXPLOSIVE" );
    playfx( scripts\engine\utility::getfx( "little_bird_explode" ), var_1, anglestoforward( self.angles ), anglestoup( self.angles ) );
    playsoundatpos( var_1, "veh_chopper_support_crash" );
    earthquake( 0.4, 800, var_1, 0.7 );
    playrumbleonposition( "grenade_rumble", var_1 );
    physicsexplosionsphere( var_1, 500, 200, 1 );
    self notify( "explode" );
    wait 0.35;
    playerplayintrocinematic( 1 );
    scripts\cp_mp\vehicles\vehicle_tracking::_deletevehicle( self );
}

playerplundereventomnvars()
{
    self endon( "leaving" );
    self endon( "death" );
    var_0 = 70;
    var_1 = -80;
    var_2 = 150;
    var_3 = 25;
    var_4 = -100;

    for (;;)
    {
        var_5 = getentarrayinradius( "script_vehicle", "classname", self.origin, getdvarfloat( "test_radius", 400 ) );

        if ( var_5.size <= 1 )
        {
            wait 0.5;
            continue;
        }

        var_6 = scripts\engine\trace::create_vehicle_contents();
        var_7 = anglestoforward( self.angles );
        var_8 = self.origin + var_7 * getdvarfloat( "test_f", var_2 ) + ( 0, 0, getdvarfloat( "test_d", var_1 ) );
        var_9 = scripts\engine\trace::sphere_trace( var_8, var_8 + ( 0, 0, 1 ), var_0, self, var_6 );
        var_10 = var_9["entity"];

        if ( isdefined( var_10 ) && var_10 isattachmentvariantlocked() )
        {
            var_10 dodamage( var_10.health, self.origin, var_10, var_10, "MOD_CRUSH" );
            waitframe();
            continue;
        }

        var_8 = self.origin + var_7 * getdvarfloat( "test_m", var_3 ) + ( 0, 0, getdvarfloat( "test_d", var_1 ) );
        var_9 = scripts\engine\trace::sphere_trace( var_8, var_8 + ( 0, 0, 1 ), var_0, self, var_6 );
        var_10 = var_9["entity"];

        if ( isdefined( var_10 ) && var_10 isattachmentvariantlocked() )
        {
            var_10 dodamage( var_10.health, self.origin, var_10, var_10, "MOD_CRUSH" );
            waitframe();
            continue;
        }

        var_8 = self.origin + var_7 * getdvarfloat( "test_b", var_4 ) + ( 0, 0, getdvarfloat( "test_d", var_1 ) );
        var_9 = scripts\engine\trace::sphere_trace( var_8, var_8 + ( 0, 0, 1 ), var_0, self, var_6 );
        var_10 = var_9["entity"];

        if ( isdefined( var_10 ) && var_10 isattachmentvariantlocked() )
        {
            var_10 dodamage( var_10.health, self.origin, var_10, var_10, "MOD_CRUSH" );
            waitframe();
            continue;
        }

        waitframe();
    }
}

isattachmentvariantlocked()
{
    return isalive( self ) && ( scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "script_vehicle" );
}

playerplayintrocinematic( var_0 )
{
    if ( isdefined( self.vfxent ) )
    {
        self.vfxent stoploopsound();
        self.vfxent delete();
    }
}

playerplunderbankdepositcallback( var_0 )
{
    self endon( "explode" );
    self notify( "heli_crashing" );
    self setvehgoalpos( self.origin + ( 0, 0, 100 ), 1 );
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 1.5 );
    self setyawspeed( var_0, var_0, var_0 );
    self settargetyaw( self.angles[1] + var_0 * 2.5 );
}

playerplaydepositanim()
{
    if ( isdefined( self.rope ) )
        self.rope delete();

    if ( isdefined( self.crate ) )
        self.crate delete();
}

handledestroydamage()
{
    self endon( "death" );
    self endon( "leaving" );
    self endon( "swapped" );

    for (;;)
    {
        self waittill( "damage", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 );
        var_9 = scripts\mp\utility\weapon::mapweapon( var_9, var_13 );

        if ( ( var_9.basename == "aamissile_projectile_mp" || var_9.basename == "nuke_mp" ) && var_4 == "MOD_EXPLOSIVE" && var_0 >= self.health )
        {
            callback_vehicledamage( var_1, var_1, 9001, 0, var_4, var_9, var_3, var_2, var_3, 0, 0, var_7 );
            playerplayintrocinematic( 1 );
        }
    }
}

callback_vehicledamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    scripts\mp\killstreaks\killstreaks::killstreakhit( var_1, var_5, self, var_4, var_2 );
    var_1 scripts\mp\damagefeedback::updatedamagefeedback( "" );
    var_2 = 0;
    self.smoking = 1;
}

helicreateextractvfx( var_0 )
{
    self.vfxent = spawn( "script_model", var_0 );
    self.vfxent setmodel( "scr_smoke_grenade" );
    self.vfxent.angles = ( 0, 90, 90 );
    self.vfxent playloopsound( "smoke_carepackage_smoke_lp" );
    self.vfxent setscriptablepartstate( "smoke", "on" );
}

modifyplayerdamage( var_0 )
{
    if ( isplayer( var_0.victim ) )
    {
        var_1 = var_0.victim scripts\mp\gametypes\br_public.gsc::zombiejumping();
        var_2 = riotshieldswitchawaytimer( var_0 );

        if ( !var_1 && var_2 )
            var_0.damage = 0;
    }

    return scripts\mp\gametypes\br_alt_mode_zxp.gsc::modifyplayerdamage( var_0 );
}

switcharray( var_0 )
{
    if ( riotshieldswitchawaytimer( var_0 ) && isdefined( self.occupants ) && self.occupants.size )
        var_0.damage = 0;

    return scripts\mp\gametypes\br_alt_mode_zxp.gsc::switcharray( var_0 );
}

blueprintextract_shouldgivereward( var_0 )
{
    var_1 = isplayer( var_0.attacker ) && var_0.attacker scripts\mp\gametypes\br_public.gsc::zombiejumping();
    return var_1;
}

riotshieldswitchawaytimer( var_0 )
{
    return isdefined( var_0.objweapon ) && var_0.objweapon.basename == "chopper_support_turret_mp";
}

_id_1209B()
{
    if ( !getdvarint( "scr_br_reveal_attack_helis_enabled", 1 ) )
        return;

    var_0 = [ level.extract_ismissionweapon, ( -4903, 25796, -394 ), ( -28977, 23076, -390 ), ( 2693, 41717, 1607 ) ];
    var_1 = ( 0, 0, 0 );
    var_2 = 0;

    for (;;)
    {
        var_3 = var_1;

        if ( var_2 < var_0.size )
            var_3 = var_0[var_2];

        var_4 = getdvarvector( "scr_br_reveal_attack_heli_" + ( var_2 + 1 ) + "_origin", var_3 );

        if ( var_4 == var_1 )
            break;

        var_5 = getdvarfloat( "scr_br_reveal_attack_heli_" + ( var_2 + 1 ) + "_delay", 20.0 );
        thread anim_pause_fracs( var_4, var_5 );
        wait 0.1;
        var_2++;
    }
}

gate_flares_think()
{
    if ( !isdefined( level.spawn_infil_lbravo ) )
        return;

    foreach ( var_1 in level.spawn_infil_lbravo )
        var_1 bridge_tank_move_sfx( undefined );
}

anim_pause_fracs( var_0, var_1 )
{
    if ( isdefined( var_1 ) && var_1 > 0.0 )
        wait( var_1 );

    if ( !isdefined( level.spawn_infil_lbravo ) )
        scripts\mp\gametypes\br_lootchopper.gsc::init();

    var_2 = _id_1279B( var_0 );
}

_id_1279B( var_0 )
{
    var_1 = getdvarfloat( "scr_br_reveal_attack_heli_patrol_radius", 4000 );
    var_0 = scripts\mp\gametypes\br.gsc::numkilled( var_0, ( 0, 0, 10000 ) );
    var_2 = scripts\cp_mp\killstreaks\chopper_support::getpathstart( var_0 );
    var_3 = vectortoangles( var_0 - var_2 );
    var_4 = "veh_chopper_support_pe_mp";
    var_5 = scripts\cp_mp\vehicles\vehicle_tracking::_spawnhelicopter( level.players[randomint( level.players.size )], var_2, var_3, var_4, "veh8_mil_air_palfa_east" );

    if ( !isdefined( var_5 ) )
        return;

    var_5.speed = getdvarint( "scr_br_reveal_attack_heli_speed", 100 );
    var_5.accel = getdvarint( "scr_br_reveal_attack_heli_accel", 50 );
    var_5.lifetime = getdvarint( "scr_br_reveal_attack_heli_lifetime", 9999 );
    var_5.team = "neutral";
    var_5.angles = var_3;
    var_5.flaresreservecount = 0;
    var_5.currentdamagestate = 0;
    var_5.pathstart = var_2;
    var_5.pathgoal = var_0;
    var_5.currentaction = "patrol";
    var_5.currenttarget = undefined;
    var_5.heightoffset = ( 0, 0, getdvarint( "scr_br_reveal_attack_heli_height_offset", 1500 ) );
    var_5.vehicle_compass_getleveldata = var_0;
    var_5.vehicle_compass_infect_shouldbevisibletoplayer = var_1;
    var_5._id_128DC = getdvarint( "scr_br_reveal_attack_heli_stage_1_acc", 60 );
    var_5.stringtovec3 = getdvarint( "scr_br_reveal_attack_heli_stage_2_shots", 10 );
    var_5._id_128DD = getdvarint( "scr_br_reveal_attack_heli_stage_2_acc", 40 );
    var_5.strip_node_flag_wait = getdvarint( "scr_br_reveal_attack_heli_stage_3_shots", 20 );
    var_5._id_128DE = getdvarint( "scr_br_reveal_attack_heli_stage_3_acc", 20 );

    if ( var_5._id_128DE <= 0 )
        var_5._id_128DE = undefined;

    var_5.gates_combat = var_5.heightoffset[2] - 250;
    var_5 setmaxpitchroll( 15, 15 );
    var_5 vehicle_setspeed( var_5.speed, var_5.accel );
    var_5 sethoverparams( 50, 5, 2.5 );
    var_5 setturningability( 0.5 );
    var_5 setyawspeed( 100, 25, 25, 0.1 );
    var_5 setcandamage( 0 );
    var_5 setneargoalnotifydist( 768 );
    var_5 setvehicleteam( var_5.team );
    var_5.health = 5000;
    var_5.maxhealth = 9999;
    var_5 scripts\mp\sentientpoolmanager::registersentient( "Level_Vehicle", var_5.team );
    var_5 break_window_glass();
    var_5 setscriptablepartstate( "blinking_lights", "on", 0 );
    var_5 setscriptablepartstate( "engine", "on", 0 );
    var_5.frontturret = spawnturret( "misc_turret", var_5 gettagorigin( "tag_turret_front" ), "chopper_support_turret_mp" );
    var_5.frontturret setmodel( "veh8_mil_air_ahotel64_turret_wm_east" );
    var_5.frontturret.team = var_5.team;
    var_5.frontturret.angles = var_5.angles;
    var_5.frontturret.turreton = 1;
    var_5.frontturret.name = "front_turret";
    var_5.frontturret.attackingtarget = undefined;
    var_5.frontturret._id_132C1 = "loot_chopper";
    var_5.frontturret linkto( var_5 );
    var_5.frontturret setturretteam( var_5.team );
    var_5.frontturret setturretmodechangewait( 0 );
    var_5.frontturret setmode( "manual" );
    var_5.frontturret setdefaultdroppitch( 45 );
    var_5.frontturret.groundtargetent = spawn( "script_model", var_5.origin );
    var_5.frontturret.groundtargetent setmodel( "tag_origin" );
    var_5.frontturret.groundtargetent dontinterpolate();
    var_5.rearturret = spawnturret( "misc_turret", var_5 gettagorigin( "tag_turret_rear" ), "chopper_support_turret_mp" );
    var_5.rearturret setmodel( "veh8_mil_air_ahotel64_turret_wm_east" );
    var_5.rearturret.team = var_5.team;
    var_5.rearturret.angles = var_5.angles;
    var_5.rearturret.turreton = 1;
    var_5.rearturret.name = "rear_turret";
    var_5.rearturret.attackingtarget = undefined;
    var_5.rearturret._id_132C1 = "loot_chopper";
    var_5.rearturret linkto( var_5 );
    var_5.rearturret setturretteam( var_5.team );
    var_5.rearturret setturretmodechangewait( 0 );
    var_5.rearturret setmode( "manual" );
    var_5.rearturret setdefaultdroppitch( 45 );
    var_5.rearturret.groundtargetent = spawn( "script_model", var_5.origin );
    var_5.rearturret.groundtargetent setmodel( "tag_origin" );
    var_5.rearturret.groundtargetent dontinterpolate();
    level.spawn_infil_lbravo[level.spawn_infil_lbravo.size] = var_5;
    var_5.vehicle_compass_friendlystatuschangedcallback = scripts\mp\gametypes\br_lootchopper.gsc::spawn_module_p3_form_b;
    var_5.failstringsetup = scripts\mp\gametypes\br_lootchopper.gsc::spawn_mindia_juggs;
    var_5.school_guards_behavior_internal = ::school_guards_behavior_internal;

    if ( getdvarint( "scr_br_reveal_attack_objective", 0 ) )
        var_5 scripts\mp\gametypes\br_lootchopper.gsc::spawn_ml_p1_sentries();

    var_5 thread scripts\cp_mp\killstreaks\chopper_support::choppersupport_neargoalsettings();
    var_5 thread scripts\cp_mp\killstreaks\chopper_support::circleorigin( var_5.pathgoal, 1 );
    return var_5;
}

school_guards_behavior_internal( var_0 )
{
    return var_0 scripts\mp\gametypes\br_public.gsc::zombiejumping();
}

break_window_glass()
{
    self.vehiclename = "loot_chopper";
    scripts\mp\vehicles\damage::set_pre_mod_damage_callback( self.vehiclename, ::bridge_two_death_func );
    scripts\mp\vehicles\damage::set_post_mod_damage_callback( self.vehiclename, ::bridge_three_death_func );
    scripts\mp\vehicles\damage::set_death_callback( self.vehiclename, ::bridge_tank_move_sfx );
    scripts\cp_mp\vehicles\vehicle_tracking::vehicle_tracking_registerinstance( self );
}

bridge_two_death_func( var_0 )
{
    return 0;
}

bridge_three_death_func( var_0 )
{
    scripts\cp_mp\killstreaks\chopper_support::choppersupport_modifydamage( var_0 );
    return 1;
}

bridge_tank_move_sfx( var_0 )
{
    if ( isdefined( var_0 ) )
        scripts\cp_mp\killstreaks\chopper_support::choppersupport_handledeathdamage( var_0 );
    else
        self.killedbyweapon = "none";

    self notify( "death" );
    return 1;
}
