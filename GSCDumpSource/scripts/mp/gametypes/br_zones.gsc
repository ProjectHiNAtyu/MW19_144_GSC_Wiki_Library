// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.clients_hacked = spawnstruct();
    level.clients_hacked.types = [];
    recharge_equipment_think_init( "plague", 1, ::_id_13724, ::_id_13727, ::_id_1371F, ::_id_13720, ::wait_for_player_to_getup, ::_id_13726 );
    recharge_equipment_update_slot( "plague", 1, 9, 0 );
    level.clients_hacked.zones = [];
    level.clients_hacked.tracktimealive = 0;
    thread quickdropaddtoexisting( "scr_br_plague_zone_locations", "", "prematch_done" );
}

recharge_equipment_think_init( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = spawnstruct();
    var_8.name = var_0;
    var_8.phwhistletimer = var_1;
    var_8.register_valid_objectives_for_create_script = var_2;
    var_8._id_12567 = var_3;
    var_8.isanyplayertouching = var_4;
    var_8.isvalidanimsuiteentity = var_5;
    var_8.laser_vfx_think = var_6;
    var_8.thermitestuckto = var_7;
    var_8._id_12CFB = [];
    level.clients_hacked.types[var_0] = var_8;
}

recharge_equipment_update_slot( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4.color = var_1;
    var_4.icon = var_2;
    var_4.style = var_3;
    level.clients_hacked.types[var_0].mapcircle = var_4;
}

mortar_smoke_occlusions( var_0 )
{
    return level.clients_hacked.zones[var_0];
}

_id_1278E( var_0, var_1, var_2 )
{
    if ( !isdefined( level.clients_hacked.types[var_0] ) )
        return;

    var_3 = level.clients_hacked.types[var_0];
    var_4 = spawnstruct();
    var_4.type = var_0;
    var_4._id_12CFB = [];
    var_4.moving = 0;
    var_5 = ( var_1[0], var_1[1], var_2 );

    if ( isdefined( var_3.mapcircle ) )
    {
        var_6 = var_3.mapcircle.color;
        var_7 = var_3.mapcircle.icon;
        var_8 = var_3.mapcircle.style;
        var_4 scripts\mp\gametypes\br_quest_util.gsc::get_minigun_path( var_6, var_7, var_8, var_5 );
        var_4.mapcircle show();
    }
    else
        var_4 scripts\mp\gametypes\br_quest_util.gsc::get_minigun_path( 0, 0, 0, var_5 );

    var_4.id = "zone_" + level.clients_hacked.tracktimealive;
    level.clients_hacked.tracktimealive++;
    var_4 thread [[ var_3.register_valid_objectives_for_create_script ]]();
    level.clients_hacked.zones[var_4.id] = var_4;
    var_4 _id_1278F( var_1, var_2 );
    return var_4.id;
}

_id_1278F( var_0, var_1 )
{
    if ( isdefined( self.trigger ) )
        self.trigger delete();

    self.trigger = spawn( "trigger_radius", ( var_0[0], var_0[1], -2000 ), 0, int( var_1 ), 12000 );
    thread _id_13729();
}

_id_1371E()
{
    var_0 = level.clients_hacked.types[self.type];
    self thread [[ var_0._id_12567 ]]();
    self.trigger delete();
    self.mapcircle delete();
    self notify( "delete" );
    level.clients_hacked.zones[self.id] = undefined;
}

_id_13729()
{
    self.trigger endon( "death" );
    var_0 = level.clients_hacked.types[self.type];

    for (;;)
    {
        self.trigger waittill( "trigger", var_1 );

        if ( !isplayer( var_1 ) )
            continue;

        if ( self.moving )
        {
            var_2 = _id_13722();
            var_3 = _id_13723();
            var_3 = var_3 * var_3;

            if ( distance2dsquared( var_1.origin, var_2 ) > var_3 )
                continue;
        }

        if ( isdefined( var_0.laser_vfx_think ) && [[ var_0.laser_vfx_think ]]( var_1 ) )
            continue;

        var_4 = var_1.guid;

        if ( !isdefined( self._id_12CFB[var_4] ) )
        {
            var_5 = spawnstruct();
            var_5.player = var_1;
            var_5.start = gettime();
            var_6 = 0;

            if ( var_0.phwhistletimer )
            {
                self._id_12CFB[var_4] = spawnstruct();

                if ( !isdefined( var_0._id_12CFB[var_4] ) )
                {
                    var_5._id_11D9C = 0;
                    var_0._id_12CFB[var_4] = var_5;
                    var_6 = 1;
                }

                var_0._id_12CFB[var_4]._id_11D9C++;
            }
            else
            {
                if ( !isdefined( var_0._id_12CFB[var_4] ) )
                    var_0._id_12CFB[var_4] = 0;

                var_0._id_12CFB[var_4]++;
                self._id_12CFB[var_4] = var_5;
                var_6 = 1;
            }

            if ( var_6 )
                self thread [[ var_0.isanyplayertouching ]]( var_5 );
        }

        thread ai_molotov_swapp( var_4 );
    }
}

ai_molotov_swapp( var_0 )
{
    var_1 = self._id_12CFB[var_0];
    var_1 notify( "trigger_exit" );
    var_1 endon( "trigger_exit" );
    waitframe();
    waittillframeend;
    var_2 = level.clients_hacked.types[self.type];
    self._id_12CFB[var_0] = undefined;
    var_3 = 0;

    if ( var_2.phwhistletimer )
    {
        var_2._id_12CFB[var_0]._id_11D9C--;

        if ( !var_2._id_12CFB[var_0]._id_11D9C )
        {
            var_1 = var_2._id_12CFB[var_0];
            var_2._id_12CFB[var_0] = undefined;
            var_3 = 1;
        }
    }
    else
    {
        var_2._id_12CFB[var_0]--;

        if ( !var_2._id_12CFB[var_0] )
            var_2._id_12CFB[var_0] = undefined;

        var_3 = 1;
    }

    if ( var_3 )
        self thread [[ var_2.isvalidanimsuiteentity ]]( var_1 );
}

_id_13725( var_0, var_1, var_2 )
{
    self notify( "move" );
    self endon( "move" );
    self endon( "delete" );
    var_3 = _id_13722();

    if ( !isdefined( var_0 ) )
        var_0 = var_3;

    var_4 = _id_13723();

    if ( !isdefined( var_1 ) )
        var_1 = var_4;

    if ( !isdefined( var_2 ) )
        var_2 = 0;

    var_5 = level.clients_hacked.types[self.type];

    if ( isdefined( var_5.thermitestuckto ) )
        self thread [[ var_5.thermitestuckto ]]( var_0, var_1, var_2 );

    var_6 = var_3 != var_0 || var_4 != var_1;

    if ( var_6 )
    {
        var_7 = ( var_0[0], var_0[1], var_1 );

        if ( var_2 <= 0 )
            self.mapcircle.origin = var_7 _id_1278F( var_0, var_1 );
        else
        {
            self.moving = 1;

            if ( var_4 < var_1 )
                _id_1278F( var_0, var_1 );

            self.mapcircle moveto( var_7, var_2 );
            childthread ai_molotov_swap();
            wait( var_2 );

            if ( var_4 > var_1 )
                _id_1278F( var_0, var_1 );
        }
    }
    else
    {

    }

    self.moving = 0;
}

ai_molotov_swap()
{
    self.trigger endon( "death" );

    for (;;)
    {
        var_0 = _id_13722();
        self.trigger.origin = ( var_0[0], var_0[1], -2000 );
        waitframe();
    }
}

_id_13722()
{
    return ( self.mapcircle.origin[0], self.mapcircle.origin[1], 0 );
}

_id_13723()
{
    return self.mapcircle.origin[2];
}

isonturret( var_0 )
{
    return var_0 scripts\mp\gametypes\br_public.gsc::rungwperif_flak();
}

isoutside( var_0 )
{
    return var_0 scripts\mp\gametypes\br_public.gsc::zombiejumping();
}

_id_13724()
{
    var_0 = loadfx( "vfx/iw8_br/gameplay/corruptzone/vfx_corruptzone_spores_10k" );
    self.wait_for_player_in_gulag = spawnfx( var_0, _id_13722() );
    self.wait_for_player_in_gulag forcenetfieldhighlod( 1 );
    triggerfx( self.wait_for_player_in_gulag );
}

_id_13727()
{
    if ( isdefined( self.wait_for_player_in_gulag ) )
        self.wait_for_player_in_gulag delete();
}

_id_1371F( var_0 )
{
    if ( !var_0.player scripts\mp\gametypes\br_public.gsc::zombiejumping() )
    {
        var_0.player scripts\cp_mp\utility\game_utility::_visionsetnakedforplayer( "mp_don3_plague", 0.5 );
        thread _id_1372B( var_0 );
        thread _id_1372C( var_0 );
    }

    var_0.player setscriptablepartstate( "plague_zone", "enter" );
}

_id_1372B( var_0 )
{
    var_1 = getdvarint( "scr_br_zones_plague_damage", 3 );
    var_2 = getdvarfloat( "scr_br_zones_plague_jugg_damage_scale", 7.0 );
    var_3 = getdvarfloat( "scr_br_zones_plague_damage_rate", 2 );
    var_4 = getdvarint( "scr_br_zones_plague_cough", 0 );
    var_0 endon( "end_plague_update" );
    var_0.player endon( "disconnect" );

    for (;;)
    {
        var_5 = var_0.player;

        if ( scripts\cp_mp\gasmask::hasgasmask( var_5 ) )
            var_5 scripts\cp_mp\gasmask::processdamage( var_1 );
        else
        {
            var_6 = var_1;

            if ( isdefined( level.swap_access_card ) )
                var_6 = var_5 [[ level.swap_access_card ]]( var_6 );

            if ( var_5 scripts\mp\utility\killstreak::isjuggernaut() )
                var_6 = int( var_6 * var_2 );

            var_5 dodamage( var_6, var_5.origin, var_5, undefined, "MOD_TRIGGER_HURT", "danger_circle_br" );

            if ( var_5 scripts\mp\gametypes\br_public.gsc::hasarmor() )
                var_5 scripts\mp\gametypes\br_public.gsc::damagearmor( var_6 );

            if ( var_4 )
                var_5 scripts\mp\gametypes\br_circle.gsc::_id_12EE3();
        }

        wait( var_3 );
    }
}

_id_1372C( var_0 )
{
    var_0 endon( "end_plague_update" );
    var_0.player endon( "disconnect" );

    for (;;)
    {
        if ( scripts\cp_mp\gasmask::hasgasmask( var_0.player ) )
            var_0.player scripts\mp\gametypes\br_pickups.gsc::make_bomb_detonator_interact( "plague_zone" );

        wait 1;
    }
}

_id_13720( var_0 )
{
    var_0 notify( "end_plague_update" );

    if ( !isdefined( var_0.player ) )
        return;

    var_0.player setscriptablepartstate( "plague_zone", "exit" );

    if ( !var_0.player scripts\mp\gametypes\br_public.gsc::zombiejumping() )
    {
        if ( scripts\cp_mp\gasmask::hasgasmask( var_0.player ) )
            var_0.player scripts\mp\gametypes\br_pickups.gsc::make_all_oscilloscopes_usable( "plague_zone" );

        var_0.player scripts\cp_mp\utility\game_utility::_visionsetnakedforplayer( "", 0.5 );
    }
}

_id_13726( var_0, var_1, var_2 )
{

}

quickdropaddtoexisting( var_0, var_1, var_2 )
{
    var_3 = getdvar( var_0, var_1 );

    if ( var_3 == "" )
        return;

    waittillframeend;

    if ( isdefined( var_2 ) )
        scripts\mp\flags::gameflagwait( var_2 );

    var_4 = getdvarint( "scr_br_plague_zone_locations_max", -1 );
    var_5 = strtok( var_3, "," );

    if ( var_4 < 0 )
        var_4 = var_5.size;
    else
    {
        var_4 = min( var_4, var_5.size );
        var_5 = scripts\engine\utility::array_randomize( var_5 );
    }

    for ( var_6 = 0; var_6 < var_4; var_6++ )
    {
        var_7 = var_5[var_6];
        quickdropaddtocache( var_7 );
        thread _id_1208A( var_7 );
    }
}

_id_1208A( var_0 )
{
    var_1 = level.clients_hacked.tr_createquestlocale[var_0];

    if ( !isdefined( var_1 ) )
        return;

    if ( var_1.groundfloor_rear_gunner_handler > var_1.groundentrance_effects )
        var_2 = randomfloatrange( var_1.groundentrance_effects, var_1.groundfloor_rear_gunner_handler );
    else
        var_2 = var_1.groundentrance_effects;

    wait( var_2 );

    if ( var_1.piccadilly_spawnpatchtriggers > 0 )
    {
        var_3 = _id_1278E( "plague", var_1.origin, 50 );
        var_4 = mortar_smoke_occlusions( var_3 );
        var_4 thread _id_13725( undefined, var_1.radius, var_1.piccadilly_spawnpatchtriggers );
    }
    else
        var_3 = _id_1278E( "plague", var_1.origin, var_1.radius );

    level waittill( "game_ended" );
    var_4 = mortar_smoke_occlusions( var_3 );

    if ( isdefined( var_4 ) )
        var_4 _id_1371E();
}

quickdropaddtocache( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( level.clients_hacked.tr_createquestlocale ) )
        level.clients_hacked.tr_createquestlocale = [];

    if ( isdefined( level.clients_hacked.tr_createquestlocale[var_0] ) )
        return;

    if ( !isdefined( var_1 ) )
        var_1 = ( 0, 0, 0 );

    if ( !isdefined( var_2 ) )
        var_2 = -1;

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    if ( !isdefined( var_4 ) )
        var_4 = 0;

    if ( !isdefined( var_5 ) )
        var_5 = 0;

    switch ( var_0 )
    {
        case "dam":
            [var_1, var_2, var_3, var_4, var_5] = [ ( -21543, 47479, 0 ), 10000, 75, 5, 10 ];
            break;
        case "stadium":
            [var_1, var_2, var_3, var_4, var_5] = [ ( 28696, 2288, 0 ), 10000, 75, 5, 10 ];
            break;
        case "hospital":
            [var_1, var_2, var_3, var_4, var_5] = [ ( 9443, -11877, 0 ), 10000, 75, 5, 10 ];
            break;
        case "ship":
            [var_1, var_2, var_3, var_4, var_5] = [ ( 38750, -43340, 0 ), 10000, 75, 5, 10 ];
            break;
        case "tv":
            [var_1, var_2, var_3, var_4, var_5] = [ ( 15258, 17988, 0 ), 10000, 75, 5, 10 ];
            break;
        case "super":
            [var_1, var_2, var_3, var_4, var_5] = [ ( -13027, 9242, 0 ), 10000, 75, 5, 10 ];
            break;
        case "gulag":
            [var_1, var_2, var_3, var_4, var_5] = [ ( 51158, -38213, 0 ), 10000, 75, 5, 10 ];
            break;
        case "quarry":
            [var_1, var_2, var_3, var_4, var_5] = [ ( 34267, 43134, 0 ), 10000, 75, 5, 10 ];
            break;
        case "boneyard":
            [var_1, var_2, var_3, var_4, var_5] = [ ( -27531, -10899, 0 ), 10000, 75, 5, 10 ];
            break;
        case "bank":
            [var_1, var_2, var_3, var_4, var_5] = [ ( 21767, -19846, 0 ), 10000, 75, 5, 10 ];
            break;
        default:
            break;
    }

    var_16 = spawnstruct();
    var_17 = "scr_br_plague_zone_" + var_0 + "_";
    var_16.origin = getdvarvector( var_17 + "origin", var_1 );
    var_16.radius = getdvarfloat( var_17 + "radius", var_2 ) * getdvarfloat( "scr_br_plague_zone_radius_scale", 1.0 );
    var_16.piccadilly_spawnpatchtriggers = getdvarfloat( var_17 + "grow_time", var_3 ) * getdvarfloat( "scr_br_plague_zone_grow_time_scale", 1.0 );
    var_16.groundentrance_effects = getdvarfloat( var_17 + "delay", var_4 ) * getdvarfloat( "scr_br_plague_zone_delay_scale", 1.0 );
    var_16.groundfloor_rear_gunner_handler = getdvarfloat( var_17 + "delay_max", var_5 ) * getdvarfloat( "scr_br_plague_zone_delay_max_scale", 1.0 );

    if ( var_16.radius < 0 )
        return;

    level.clients_hacked.tr_createquestlocale[var_0] = var_16;
}

wait_for_player_to_getup( var_0 )
{
    return isonturret( var_0 );
}

rungwperif_tracers( var_0, var_1 )
{
    if ( !isdefined( level.clients_hacked ) || !isdefined( level.clients_hacked.zones ) || !isdefined( level.clients_hacked.types[var_0] ) )
        return 0;

    return isdefined( level.clients_hacked.types[var_0]._id_12CFB[var_1.guid] );
}
