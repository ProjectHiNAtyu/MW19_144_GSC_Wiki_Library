// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "blueprintextract_easterevent", 1 );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::_id_11E05( "blueprintextract_easterevent", ::juggernaut_update_hint_logic );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "blueprintextract_easterevent", ::juggernaut_logic );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestlocale( "blueprintextract_easterevent_locale" );
    scripts\mp\gametypes\br_quest_util.gsc::registercreatequestlocale( "blueprintextract_easterevent_locale", ::jugg_watchfordoors );
    scripts\mp\gametypes\br_quest_util.gsc::registercheckiflocaleisavailable( "blueprintextract_easterevent_locale", ::jugg_watchammo );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "blueprintextract_easterevent_locale", ::jugg_watchmanualreload );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "blueprintextract_easterevent_locale", ::jugg_watchearlyexit );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF5( "blueprintextract_easterevent_locale", ::jugg_watchforremovejugg );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF8( "blueprintextract_easterevent_locale", ::jugg_watchherodrop );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "blueprintextract_easterevent_locale" ).nextid = 0;
    scripts\mp\gametypes\br_quest_util.gsc::_id_11C73( "blueprintextract_easterevent", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11DF9( "blueprintextract_easterevent", ::jugg_enter_combat_callback );

    if ( !istrue( level.br_plunder_enabled ) )
    {
        scripts\mp\gametypes\br_plunder.gsc::register_vehicle_spawners();
        scripts\mp\gametypes\br_plunder.gsc::register_vfx();
        level._effect["vfx_extract_smoke"] = loadfx( "vfx/iw8_br/gameplay/vfx_br_adv_supply_drop_marker" );
        scripts\mp\gametypes\br_plunder.gsc::_id_11AA8();
        scripts\mp\gametypes\br_plunder.gsc::register_wave_spawner();
    }

    if ( !scripts\mp\gametypes\br_plunder.gsc::safecheckstring() )
        scripts\engine\scriptable::scriptable_addusedcallback( scripts\mp\gametypes\br_plunder.gsc::plundersiteused );

    var_1 = getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk";
    level.juggdroplocations = scripts\engine\utility::ter_op( var_1, "brloot_quest_extract_site_plunder", "brloot_quest_extract_site_br" );
    level.juggcanusecrate = scripts\engine\utility::ter_op( var_1, "brloot_quest_extract_site_model_plunder", "brloot_quest_extract_site_model_br" );

    if ( !isdefined( level._id_11AE1.data["extractHelipadPlunder"]._id_11B83 ) )
    {
        level._id_11AE1.data["extractHelipadPlunder"]._id_11B83 = level._id_11AE1.data["extractHelipadPlunder"]._id_130FC;
        level._id_11AE1.data["extractHelipadPlunder"]._id_130FC = ::jugg_managestockammo;
    }

    if ( !isdefined( level._id_11AE1.data["extractHelipadBR"]._id_11B83 ) )
    {
        level._id_11AE1.data["extractHelipadBR"]._id_11B83 = level._id_11AE1.data["extractHelipadBR"]._id_130FC;
        level._id_11AE1.data["extractHelipadBR"]._id_130FC = ::jugg_managestockammo;
    }

    game["dialog"]["mission_extract_accept"] = "bm_exfil_arrived";
    game["dialog"]["mission_extract_success"] = "contract_misc_success";
}

jugg_managestockammo( var_0, var_1, var_2 )
{
    var_1.setplayerbrsquadleader = var_0.index;
    var_1 notify( "heliDeposit" );

    if ( var_2 > 0 && istrue( level.br_plunder_enabled ) && ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" ) )
        [[ level._id_11AE1.data["extractHelipadPlunder"]._id_11B83 ]]( var_0, var_1, var_2 );
}

juggernaut_logic()
{
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehidefromteam( self.team );
    juggheli_spawner_exfil( 0, undefined );

    if ( isdefined( self.dropbrgasmask ) )
        self.dropbrgasmask _id_13022();

    self._id_12A93 thread juggheli_spawner_jammer5_2();
}

jugg_watchmanualreload()
{
    foreach ( var_1 in self.subscribedinstances )
        var_1 thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();

    scripts\mp\gametypes\br_quest_util.gsc::hacks_started();
    self.players_grenade_fire_monitor thread _id_11EC5();
}

juggernaut_update_hint_logic()
{
    var_0 = omnvardata( self );
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::lastgunkilltime( "blueprintextract_easterevent", var_0 );

    if ( !isdefined( var_1 ) )
        return 0;

    self._id_11F03 = var_1;
    return 1;
}

jugg_watchfordoors( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "blueprintextract_easterevent_locale" ).nextid++;
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createlocaleinstance( "blueprintextract_easterevent_locale", "blueprintextract_easterevent", "ExtractPoint:" + scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "blueprintextract_easterevent_locale" ).nextid );

    if ( !isdefined( var_0 ) )
    {
        var_1.curorigin = ( 0, 0, 0 );
        var_1.enabled = 0;
        return var_1;
    }

    var_2 = "activeCurrent";

    if ( scripts\cp_mp\utility\game_utility::getmapname() == "mp_kstenod" || level.mapname == "mp_escape2_pm" )
        var_2 = "activeCurrentNight";

    var_1.playerlist = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    var_1.playerreadytospawn = spawn( "script_model", var_0.origin );
    var_1.playerreadytospawn setmodel( level.juggcanusecrate );
    var_3 = var_1.playerlist[0];
    var_1.playerreadytospawn setotherent( var_3 );
    var_1.playerreadytospawn setscriptablepartstate( level.juggdroplocations, var_2 );
    var_1.playerreadytospawn.little_bird_mg_creategunnerturret = 1;
    var_1.players_grenade_fire_monitor = var_1.playerreadytospawn getlinkedscriptableinstance();
    var_1.players_grenade_fire_monitor.allowobjectiveuseaftermatchstart = "active";
    var_1.players_grenade_fire_monitor.allowed_objectives = "activeCurrent";
    var_1.players_grenade_fire_monitor.helihint_gotopad_vo = "hidden";
    var_1.players_grenade_fire_monitor.heliextractcallback = "hidden";
    var_1.players_grenade_fire_monitor._id_11C64 = 0;
    var_1.players_grenade_fire_monitor.little_bird_mg_init = 1;
    var_1.spawn_additional_covernode = var_0;
    var_1 scripts\mp\gametypes\br_quest_util.gsc::get_model_for_color_wire_cut( "ui_mp_br_mapmenu_icon_extraction_objective", "current", var_0.origin );
    var_1.lastcircletick = -1;
    var_1.curorigin = var_0.origin;
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "blueprintextract_easterevent_locale", var_1 );
    return var_1;
}

jugg_watchforfire( var_0 )
{
    var_1 = spawnstruct();
    var_1.origin = var_0;
    var_2 = scripts\mp\gametypes\br_extract_quest.gsc::omnvardata( var_1 );
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::lastgunkilltime( "blueprintextract_easterevent", var_2 );
    return isdefined( var_3 );
}

_id_11EC5()
{
    if ( getdvar( "scr_br_gametype", "" ) != "dmz" && getdvar( "scr_br_gametype", "" ) != "risk" )
        self setscriptablepartstate( level.juggdroplocations, "hidden" );

    if ( isdefined( self.heli ) )
        self waittill( "heli_left" );

    self getscriptablelinkedentity() delete();
}

jugg_watchammo( var_0 )
{

}

jugg_watchearlyexit( var_0, var_1 )
{
    if ( !isdefined( self.playerreadytospawn ) )
        return;

    var_2 = gettime();

    if ( self.lastcircletick == var_2 )
        return;

    self.lastcircletick = var_2;
    var_3 = distance2d( self.curorigin, var_0 );

    if ( var_3 > var_1 )
    {
        foreach ( var_5 in self.subscribedinstances )
        {
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_5.team, "br_blueprint_extract_quest_circle_failure_easterevent" );
            level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_obj_circle_fail", var_5.team, 1 );
            var_5.result = "circle";
        }

        scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
    }
}

jugg_watchforremovejugg( var_0 )
{
    jugg_modifyfalldamage( var_0 );
}

jugg_watchherodrop( var_0 )
{
    if ( var_0.team == self.subscribedinstances[0].team )
        juggernaut_setupexecute( var_0 );
}

juggheli_spawner_jammer5_1()
{
    objective_showtoplayersinmask( self.objectiveiconid );
    objective_removeallfrommask( self.objectiveiconid );

    foreach ( var_1 in self.subscribedinstances )
    {
        foreach ( var_3 in scripts\mp\utility\teams::getteamdata( var_1.team, "players" ) )
        {
            if ( !var_3 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
                objective_addclienttomask( self.objectiveiconid, var_3 );
        }
    }
}

jugg_modifyfalldamage( var_0 )
{
    objective_removeclientfrommask( self.objectiveiconid, var_0 );
}

juggernaut_setupexecute( var_0 )
{
    objective_addclienttomask( self.objectiveiconid, var_0 );
}

juggheli_spawner_jammer5_2()
{
    self endon( "removed" );
    waittillframeend;
    juggheli_spawner_jammer5_1();
}

juggheli_spawner_exfil( var_0, var_1 )
{
    var_2 = 0;
    var_3 = -1;

    if ( var_0 )
    {
        var_2 = var_1 getentitynumber();
        var_3 = self.juggernauts_spawned;
    }

    foreach ( var_5 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
    {
        var_5 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivesetparameter( var_2 );
        var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_12FB7( var_3 );
        var_6 = isdefined( var_1 ) && var_5 == var_1;
        var_7 = var_0 && var_6;
        var_5 setclientomnvar( "ui_br_has_extract_bag", var_7 );
    }
}

takequestitem( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::mountain_two_death_func( self.team );

    if ( isdefined( var_1 ) && var_1.size > 0 )
    {
        foreach ( var_3 in var_1 )
            var_3.relic_squadlink_toofar_hud_logic scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
    }

    var_5 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( "blueprintextract_easterevent", self.team, var_0.index, var_0 );
    var_5 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( self.team, self );
    var_5.team = self.team;
    var_5.tablet = var_0;
    var_5.juggernauts_spawned = var_0.juggernauts_spawned;
    var_6 = getdvarint( "scr_br_blueprintextract_easterevent_questTime", 240 );
    var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_11C74( var_6, 4 );
    var_7 = omnvardata( var_0 );
    var_8 = var_5 scripts\mp\gametypes\br_quest_util.gsc::requestquestlocale( "blueprintextract_easterevent_locale", var_7, 1 );

    if ( !var_8.enabled )
    {
        var_5.result = "no_locale";
        var_5 scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
        return;
    }

    var_8 juggheli_spawner_jammer5_1();
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( "blueprintextract_easterevent", self.team );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "blueprintextract_easterevent", var_5 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_129E2( "blueprintextract_easterevent", self, self.team );

    if ( !level.br_plunder_enabled )
    {
        foreach ( var_10 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
            var_10.plundercount = 0;
    }

    var_12 = spawnstruct();
    var_12.excludedplayers = [];
    var_12.excludedplayers[0] = self;
    var_12._id_11AEF = scripts\mp\gametypes\br_quest_util.gsc::objective_hide_for_mlg_spectator( "blueprintextract_easterevent", scripts\mp\gametypes\br_quest_util.gsc::objectiveids( self.team ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_blueprint_extract_quest_start_team_easterevent", var_12 );
    scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( self, "br_blueprint_extract_quest_start_tablet_finder_easterevent", var_12 );
    scripts\mp\gametypes\br_quest_util.gsc::hint_obj_name( var_5.team, self, 6, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "blueprintextract_easterevent" ) );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_extract_accept", var_5.team, 1 );
    _id_1248C( var_8, var_0.juggernauts_spawned );
    var_5.dropbrgasmask = self;

    foreach ( var_10 in level.players )
    {
        if ( var_10 != self )
            var_8.players_grenade_fire_monitor disablescriptablepartplayeruse( level.juggdroplocations, var_10 );
    }

    var_5 juggheli_spawner_exfil( 1, self );
    var_5 thread _id_1352F( self );
    var_5 thread _id_134E6( self );
}

_id_1248C( var_0, var_1 )
{
    self.juggernaut_dmg_modifier = 1;
    self.juggernaut_getavoidanceposition = var_0.players_grenade_fire_monitor.index;
    self.juggernaut_kill_assists_included = "brloot_blueprintextract_tablet";
    self.juggernaut_pincer = var_1;
}

_id_13022()
{
    self.juggernaut_dmg_modifier = undefined;
    self.juggernaut_getavoidanceposition = undefined;
    self.juggernaut_kill_assists_included = undefined;
    self.juggernaut_pincer = undefined;
}

jugg_get_closest_attackable_player( var_0 )
{
    if ( self hasweapon( var_0.weapon ) )
    {
        var_1 = getcompleteweaponname( "iw8_fists_mp" );
        var_2 = scripts\cp_mp\utility\inventory_utility::iscurrentweapon( var_0.weapon );
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_0.weapon );
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_1, undefined, undefined, 1 );

        if ( var_2 )
            scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_1 );
    }
}

jugg_dmg_debug( var_0 )
{
    if ( !isdefined( self.juggernaut_kills_tracker ) )
        return 0;

    return self.juggernaut_kills_tracker == var_0;
}

_id_13530( var_0 )
{
    self endon( "removed" );

    for (;;)
    {
        var_0 waittill( "weapon_change" );

        if ( isdefined( var_0 ) && !var_0 hasweapon( self.weapon ) )
        {
            var_1 = scripts\mp\gametypes\br_pickups.gsc::register_respawn_functions();
            var_2 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_1, var_0.origin, var_0.angles, var_0 );
            var_3 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( "brloot_blueprintextract_tablet", var_2 );
            var_3._id_11F03 = self._id_12A93.spawn_additional_covernode;
            level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "br_blueprint_extract_quest_failure", var_0.team, 1, 1 );
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_0.team, "br_blueprint_extract_quest_failure_easterevent" );
            var_0 _id_13022();
            self.result = "fail";
            thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
            return;
        }
    }
}

_id_1352F( var_0 )
{
    self endon( "removed" );
    var_1 = var_0.team;

    for (;;)
    {
        var_0 waittill( "death_or_disconnect" );
        level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "br_blueprint_extract_quest_failure", var_1, 1, 1 );
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_1, "br_blueprint_extract_quest_failure_easterevent" );

        if ( isdefined( var_0 ) )
            var_0 _id_13022();

        self.result = "fail";
        thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        return;
    }
}

_id_134E6( var_0 )
{
    self endon( "removed" );

    for (;;)
    {
        var_0 waittill( "heliDeposit" );

        if ( var_0.setplayerbrsquadleader == self._id_12A93.players_grenade_fire_monitor.index )
        {
            var_1 = "blueprint_unlock_" + self.juggernauts_spawned;
            var_2 = scripts\mp\gametypes\br_quest_util.gsc::objectivespawner( self.juggernauts_spawned );

            foreach ( var_4 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
            {
                var_4 scripts\cp\helicopter\chopper_boss::update_focus_fire_objective( var_1 );

                if ( var_2 > 0 )
                    var_4 thread scripts\mp\hud_message::showsplash( "br_unlockable_weapon_splash", var_2 );
            }

            self._id_12A93.players_grenade_fire_monitor._id_11C64 = 1;
            highlighttoteam( var_0 );
            var_6 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "blueprintextract_easterevent" );
            scripts\mp\gametypes\br_quest_util.gsc::hint_obj_name( self.team, var_0, 8, var_6 );
            level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_extract_success", self.team, 1, 1 );
            self._id_11FD6 = self._id_12A93.playerreadytospawn.origin;
            self._id_11FD3 = self._id_12A93.playerreadytospawn.angles;
            self.result = "success";
            thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
            return;
        }
    }
}

highlighttoteam( var_0 )
{
    level endon( "game_ended" );
    var_1 = self.team;
    var_2 = spawnstruct();
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::objectiveids( var_0.team );
    var_4 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "blueprintextract_easterevent" );
    var_5 = scripts\mp\gametypes\br_quest_util.gsc::objective_origin( scripts\mp\gametypes\br_quest_util.gsc::objective_minimapupdate( "blueprintextract_easterevent" ) );
    var_6 = scripts\mp\gametypes\br_quest_util.gsc::objectivespawner( self.juggernauts_spawned );
    var_2.usingobject = scripts\mp\gametypes\br_quest_util.gsc::v_start_pos( var_4, var_3, var_5, var_6 );
    waitframe();
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_1, "br_blueprint_extract_quest_complete_easterevent", var_2 );
}

omnvardata( var_0 )
{
    var_1 = spawnstruct();
    var_1._id_121E3 = "getInactiveHelipads";
    var_1._id_121DF = ( var_0.origin[0], var_0.origin[1], 0 );
    var_1._id_121E6 = 30000;
    var_1._id_121E7 = 0;
    var_1._id_121E4 = getdvarint( "scr_br_blueprintextract_idealMaxRange", 20000 );
    var_1._id_121E5 = getdvarint( "scr_br_blueprintextract_idealMinRange", 15000 );
    var_1._id_121E1 = 1;
    var_1._id_11F03 = var_0._id_11F03;
    return var_1;
}

jugg_enter_combat_callback()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_blueprint_extract_quest_timer_expired_easterevent" );
    level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( "mission_gen_fail", self.team, 1 );
}
