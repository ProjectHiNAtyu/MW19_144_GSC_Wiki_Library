// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "circle" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "gulag" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "oneLife" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "waitLoadoutDone" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "drogBagLoadout" );
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "playerCountLandmarks" );
    scripts\mp\gametypes\br_gametypes.gsc::initnonbunkerdoors( "tabletReplace" );

    if ( getdvarint( "scr_br_payload_latejoin", 1 ) != 0 )
        scripts\mp\gametypes\br_gametypes.gsc::initnonbunkerdoors( "allowLateJoiners" );

    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "spawnHandled", ::_id_127E1 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "playerKilledSpawn", ::playerrespawn );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "playerWelcomeSplashes", ::_id_11A17 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "infilSequence", ::hvt_visual_callout );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "skipInfilSequence", ::_id_125B2 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "modifyPlayerDamage", ::modifyplayerdamage );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "playerHandleRedeploy", ::x1opspreplayertransition );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "playerDropPlunderOnDeath", ::playerdropplunderondeath );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "spawnInitialVehicles", ::spawninitialvehicles );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "onPlayerConnect", ::onplayerconnect );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "skipPrimaryWeaponDrop", ::_id_125B9 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "skipLootPickupAnim", ::_id_125B6 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "onPlayerKilled", ::onplayerkilled );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "activateKillstreakOnPurchase", ::allow_deleteme_on_path );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "createC130PathStruct", scripts\engine\utility::void );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "postPlunder", ::_id_11B17 );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "onConnectSpawnPoint", ::tv_station_mindia_spawner_think );

    if ( istrue( game["switchedsides"] ) )
        level._id_125B8 = 1;

    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDB( "allowedEntities", [ "br", "br_payload" ] );
    level.completesmokinggunquest.vehicle_docollisiondamagetoplayer = getdvar( "scr_br_payload_path", "downtown2" );
    level.completesmokinggunquest.enemy_mine_damaged_think = getdvarint( "scr_br_payload_checkpoint_time", 240 );
    level.completesmokinggunquest.maxtime = getdvarint( "scr_br_payload_max_time", 300 );
    level.completesmokinggunquest.endptui = getdvarint( "scr_br_payload_checkpoint_remain", 60 );
    level.completesmokinggunquest._id_132AD = getdvarfloat( "scr_br_payload_vehicle_mph", 6 );
    level.completesmokinggunquest._id_132AE = getdvarfloat( "scr_br_payload_vehicle_mph_slow", 1 );
    level.completesmokinggunquest._id_132AB = getdvarfloat( "scr_br_payload_vehicle_auto_mph", 12 );
    level.completesmokinggunquest._id_132AC = getdvarfloat( "scr_br_payload_vehicle_mph_fast", 8 );
    level.completesmokinggunquest._id_1329B = getdvarfloat( "scr_br_payload_vehicle_back_mph", 2 );
    level.completesmokinggunquest._id_1329C = getdvarfloat( "scr_br_payload_vehicle_back_mph_slow", 1 );
    level.completesmokinggunquest._id_127BE = getdvarfloat( "scr_br_payload_spawn_dist_defend", 7500 );
    level.completesmokinggunquest._id_127BD = getdvarfloat( "scr_br_payload_spawn_dist_attack", 5500 );
    level.completesmokinggunquest._id_127E4 = getdvarfloat( "scr_br_payload_spawn_height_defend", 1500 );
    level.completesmokinggunquest._id_127E3 = getdvarfloat( "scr_br_payload_spawn_height_attack", 1000 );
    level.completesmokinggunquest._id_1280F = getdvarfloat( "scr_br_payload_spawn_radius_defend", 500 );
    level.completesmokinggunquest._id_1280E = getdvarfloat( "scr_br_payload_spawn_radius_attack", 500 );
    level.completesmokinggunquest.start_end_breach_fx = getdvarint( "scr_br_payload_max_damage_collision", 25 );
    level.completesmokinggunquest.vehicle_damage_shouldskipburndown = getdvarint( "scr_br_payload_econ", 1 );
    level.completesmokinggunquest._id_11CC2 = getdvarint( "scr_br_payload_radial_spawn", 1 );
    level.completesmokinggunquest.phoneisnotringing = getdvarint( "scr_br_payload_ground_spawn", 1 );
    level.completesmokinggunquest.phonehint = getdvarint( "scr_br_payload_ground_spawn_max", 20 );
    level.completesmokinggunquest._id_128BC = getdvarint( "scr_br_payload_squad_spawn", 0 );
    level.completesmokinggunquest._id_12791 = getdvarint( "scr_br_payload_attacker_air", 0 );
    level.completesmokinggunquest._id_12792 = getdvarint( "scr_br_payload_attacker_air_max", 0 );
    level.completesmokinggunquest._id_12794 = getdvarint( "scr_br_payload_spawn_protect_air_time", 5 );
    level.completesmokinggunquest._id_127E0 = getdvarint( "scr_br_payload_spawn_protect_ground_time", 10 );
    level.give_player_grenade_on_respawn = getdvarint( "scr_br_payload_tacmap_zoom", 12000 );
    level.completesmokinggunquest.brpickupscriptableid = getdvarint( "scr_br_payload_auto_kiosks", 1 );
    level.completesmokinggunquest.enemy_left_monitor = getdvarint( "scr_br_payload_checkpoint_models", 1 );
    level.completesmokinggunquest.endprematchskydiving = getdvarint( "scr_br_payload_bunker_price", 5000 );
    level.completesmokinggunquest.enemy_mines_init = getdvarint( "scr_br_payload_tower_price", 2500 );
    level.completesmokinggunquest.init_first_button = getdvarint( "scr_br_payload_vehicles", 0 );
    level.completesmokinggunquest._id_12829 = getdvarfloat( "scr_br_payload_spawn_vehicle_time", 10 );
    level.completesmokinggunquest._id_13349 = getdvarfloat( "scr_br_payload_vo_help", 20000 );
    level.completesmokinggunquest._id_13355 = getdvarfloat( "scr_br_payload_vo_same", 20000 );
    level.completesmokinggunquest._id_13347 = getdvarfloat( "scr_br_payload_vo_help", 5000 );
    level.completesmokinggunquest._id_1334F = getdvarfloat( "scr_br_payload_vo_next", 10000 );
    level.completesmokinggunquest.bolt_watchpickup = getdvarint( "scr_br_payload_all_paths", 1 );
    level.completesmokinggunquest.convoy = getdvarint( "scr_br_payload_convoy", 1 );
    level.completesmokinggunquest.gameflagexists = getdvarint( "scr_br_payload_convoy_dist", 750 );
    level.completesmokinggunquest.gameisending = level.completesmokinggunquest.gameflagexists * level.completesmokinggunquest.gameflagexists;
    level.completesmokinggunquest.helidrivable = getdvarint( "scr_br_payload_disable_ascenders", 1 );
    var_0 = getdvarfloat( "scr_br_payload_vo_near_check", 1500 );
    level.completesmokinggunquest._id_1334E = var_0 * var_0;
    var_1 = getdvarfloat( "scr_br_payload_vo_obs", 700 );
    level.completesmokinggunquest._id_13350 = var_1 * var_1;
    level.completesmokinggunquest.bomb_sites = getdvarint( "scr_br_payload_time_per_checkpoint", 120 );
    level.completesmokinggunquest._id_12841 = getdvarint( "scr_br_spawn_zones", 1 );
    level.completesmokinggunquest._id_1283F = getdvarint( "scr_br_spawn_zone_radius", 1700 );
    level.completesmokinggunquest._id_1283B = getdvarint( "scr_br_spawn_zones_hide", 1 );
    level.completesmokinggunquest._id_1283E = getdvarfloat( "scr_br_spawn_zones_outline_dur", 3 );
    level.completesmokinggunquest._id_12842 = getdvarint( "scr_br_spawn_zone_warning", 1 );
    level.completesmokinggunquest._id_12846 = getdvarint( "scr_br_spawn_zone_warning_rad", 300 );
    level.completesmokinggunquest._id_1283D = getdvarint( "scr_br_spawn_zone_oob_forgive_time", 1000 );
    level.completesmokinggunquest._id_1283C = getdvarint( "scr_br_spawn_zone_oob_forgive_scale", 2.0 );
    level.completesmokinggunquest.processassist_regularcp = getdvarint( "scr_br_in_bounds_trigger", 1 );
    level.completesmokinggunquest._id_12EBB = getdvarint( "scr_br_truck_armor_box", 1 );
    level.completesmokinggunquest.little_bird_mg_initcollision = getdvarint( "scr_br_payload_force_tiebreaker", 0 );
    level.completesmokinggunquest._id_11F5A = getdvarint( "scr_br_payload_respawn_overview", 1 );
    level.completesmokinggunquest.turbopetchallengewatcher = getdvarint( "scr_br_payload_obstacle_pay_scale", 40 );
    level.completesmokinggunquest.vehicle_collision_handlemultievent = getdvarint( "scr_br_payload_path_redeploy", 5 );
    level.completesmokinggunquest.usedropspawn = getdvarint( "scr_br_payload_overtime_max", 120 );
    level.completesmokinggunquest.usefailcapacitymsg = getdvarint( "scr_br_payload_overtime_s1", 60 );
    level.completesmokinggunquest.usefailextractingmsg = getdvarint( "scr_br_payload_overtime_s2", 70 );
    level.completesmokinggunquest.usefaillaststandmsg = getdvarint( "scr_br_payload_overtime_s3", 80 );
    level.completesmokinggunquest.usefailnoplundermsg = getdvarint( "scr_br_payload_overtime_s4", 90 );
    level._id_11AE7 = 11;
    level._id_12D47 = 1;
    level.little_bird_mg_cp_waitandspawn = 1;
    level.choppersupport_canattackactivetarget = spawnstruct();
    level.choppersupport_canattackactivetarget.disabled = 0;
    level.choppersupport_canattackactivetarget.init_intro_armor = getdvarint( "scr_br_alt_mode_payload_drop_max", -1 );
    level.choppersupport_canattackactivetarget.init_jugg_maze = getdvarfloat( "scr_br_alt_mode_payload_drop_percent", 0.33 );

    if ( level.completesmokinggunquest.brpickupscriptableid )
        scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "placedKiosks" );

    if ( level.mapname == "mp_br_mechanics" && level.completesmokinggunquest.vehicle_docollisiondamagetoplayer != "all" )
        level.completesmokinggunquest.vehicle_docollisiondamagetoplayer = "standard";

    level.col_localethink_itemspawn = 4;
    level.choppergunner_waitintroanimtime = 1;
    level.completesmokinggunquest.paths = [];
    level.lootchopper_droploot = [ "apc_russian", "atv", "big_bird", "cargo_truck", "cop_car", "hoopty", "hoopty_truck", "jeep", "large_transport", "light_tank", "little_bird", "little_bird_mg", "medium_transport", "pickup_truck", "tac_rover", "technical", "van", "loot_chopper" ];
    setdvar( "LKTPRPKPMR", 1 );
    setdvar( "LOSOOOTNMS", 0 );
    setdvar( "NNMLSMNTOQ", 0 );
    thread relic_amped_reset_deathshield_on_revived();
    thread cleanup_trap_room();
}

relic_amped_reset_deathshield_on_revived()
{
    waittillframeend;

    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_0 = game["attackers"];
        var_1 = game["defenders"];
        game["attackers"] = var_1;
        game["defenders"] = var_0;
    }

    scripts\mp\utility\dvars::setoverridewatchdvar( "roundlimit", 2 );
    level.roundlimit = scripts\mp\utility\dvars::getwatcheddvar( "roundlimit" );
    scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 1, 0, 1 );
    scripts\mp\utility\dvars::setoverridewatchdvar( "roundswitch", 1 );
    level.roundswitch = scripts\mp\utility\dvars::getwatcheddvar( "roundswitch" );
    level._id_11B8D = ::createhudtimer;
    level.superslotcleanup = ::create_script_wait_for_flags;
    level.claymore_crate_spawn = ::createdestinationvfx;
    level._id_12056 = ::current_cypher_pieces;
    level.ontimelimit = ::ontimelimit;
    level.supplydropprice = ::zombiesdamagezombies;
    level.support_box_delay_max_ammo_hint = ::zombiesignorevehicleexplosions;
    level._id_12C86 = ::timelimitclock;
    level.sunsamplesizenear = ::sunsamplesizenear;
    level.unset_maze_ai_stealth_settings = ::intro_enemy_respawner;
    level.modeonspawnplayer = ::createextractionlocation;
    level.supersbyextraweapon = ::unset_heavy_hitter;
    level.forcegivesuper = ::createdevguientryforkidnapper;

    if ( level.completesmokinggunquest.vehicle_damage_shouldskipburndown )
        level.supply_station_direction = ::vehicle_fob_think;

    scripts\mp\flags::gameflaginit( "infil_complete", 0 );
    scripts\mp\flags::gameflaginit( "infil_anim_started", 0 );
    level.colorise_warnings = 1;
    level.roundenddelay = 5;
    level.brking_onplayerconnect = 1;
    level._id_125BD = 1;
    level._id_125A9 = 1;
    level._id_125B3 = 1;
    level.place_bad_place_until_flag = getdvarfloat( "scr_br_payload_gunner_dmg_reduction", 0.4 );
    level.place_traversal_badplace = getdvarfloat( "scr_br_payload_gunner_dmg_pen", 0.4 );
    level.vehicle_mp_deletenextframelate = "cargo_truck_mg";
    level.vehicle_occupancy_canspawninto = "mkilo_physics_mg_payload";
    level.completesmokinggunquest._id_132D2 = 250;
    level.completesmokinggunquest._id_132D1 = 200;
    level.completesmokinggunquest._id_132B3 = ( 0, 0, 200 );
    level.completesmokinggunquest.vehicle_getturrets = getdvarint( "scr_br_payload_quests", 1 );
    level.completesmokinggunquest.vehicle_invalid_seats = getdvarint( "scr_br_payload_reset_quest_tracking", 0 );
    level.completesmokinggunquest.vehicle_has_flare = getdvarint( "scr_br_payload_quests_num_squads", 1 );
    level.completesmokinggunquest.vehicle_incomingcallback = getdvarint( "scr_br_payload_quests_tablets", 1 );
    level.completesmokinggunquest.vehicle_incomingremovedcallback = getdvarint( "scr_br_payload_versus_tablets", 1 );
    level.completesmokinggunquest.vehicle_handleflarefire = getdvarint( "scr_br_payload_quests_give_att", 1 );
    level.completesmokinggunquest.vehicle_handleflarerecharge = getdvarint( "scr_br_payload_quests_give_def", 0 );
    level.completesmokinggunquest.vehicle_isneutraltoteam = getdvarint( "scr_br_payload_speed_reward_time", 45 );
    level.completesmokinggunquest.vehicle_occupancy_cp_giveriotshield = getdvarint( "scr_br_payload_xp_checkpoint", 2000 );
    scripts\mp\rank::use_emp_drone_func( "kill", 100 );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_spawn", "gameModeSupportsRespawn", ::vehicle_spawn_mp_gamemodesupportsrespawn );
    level.vehicle.spawn._id_11F53 = getdvarint( "scr_br_payload_vehicle_respawn", 30 );
    scripts\cp_mp\vehicles\vehicle_damage::_id_131E9( level.vehicle_mp_deletenextframelate, ::_id_132C2 );
    var_2 = scripts\cp_mp\vehicles\vehicle::vehicle_getleveldataforvehicle( "cargo_truck_mg" );
    var_2._id_12F50 = "tur_gun_payload_truck_mp";
    scripts\cp_mp\vehicles\vehicle_interact::_id_1320F( level.vehicle_mp_deletenextframelate, "single", [ "gunner" ] );
    var_3 = "driver";
    var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( level.vehicle_mp_deletenextframelate, var_3 );
    var_4.seatswitcharray = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_generateseatswitcharray( var_3, [ var_3 ] );
    var_3 = "gunner";
    var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( level.vehicle_mp_deletenextframelate, var_3 );
    var_4.exitids = [ "back", "back_left", "back_right", "front", "side_right" ];
    var_4.seatswitcharray = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_generateseatswitcharray( var_3, [ var_3 ] );
    var_4._id_12F49 = getcompleteweaponname( "tur_gun_payload_truck_mp" );
    scripts\cp_mp\vehicles\vehicle_interact::_id_13219( "upgrade", ::_id_131FF, ::_id_13220, ::_id_131FF, ::_id_131FF );
    scripts\cp_mp\vehicles\vehicle_interact::_id_13219( "copyofupgrade", ::_id_131FF, ::_id_13220, ::_id_131FF, ::_id_131FF );
    scripts\cp_mp\vehicles\vehicle_interact::_id_1320F( level.vehicle_mp_deletenextframelate, "upgrade", [ "tag_screen_left", 0, ::_id_131FE ] );
    scripts\cp_mp\vehicles\vehicle_interact::_id_1320F( level.vehicle_mp_deletenextframelate, "copyofupgrade", [ "tag_screen_right", 0, ::_id_131FE ] );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "specialCase_canUseCrate", ::createdefaultrectangularzone );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "killstreak", "createCustomStreakData", ::get_grenade_force );
    level.findfirstaliveplayer = undefined;
    regulateturretrateoffire();
    relic_amped_in_warning();
    registermovequestlocale();
    registerontimerexpired();
    register_vehicle_as_ambient();
    relic_healthpacks_killfunc();
    registeronrespawn();
    relic_nuketimer_waitforcompleteobjectives();
    register_ai_spawners();
    register_module_pause_unpause_funcs();
    registernonnvgnightmap();
    release_mortar_operator();
    level thread relic_landlocked_clear_message_on_player_return();
    relic_bang_and_boom_think();
    level.teamdata[game["attackers"]]["respawnDelay"] = getdvarint( "scr_br_payload_spawn_delay_attack", 0 );
    level.teamdata[game["defenders"]]["respawnDelay"] = getdvarint( "scr_br_payload_spawn_delay_defend", 15 );
    thread _id_1354F( game["attackers"] );
    thread _id_1354F( game["defenders"] );

    if ( istrue( level.completesmokinggunquest.vehicle_getturrets ) )
    {
        scripts\mp\gametypes\br_capshoot_quest.gsc::init();
        thread vehicle_getturretbyweapon();
    }

    thread vehicle_damage_setweaponhitdamagedataforvehicle();
    thread vehicle_getteamfriendlyto();
    thread vehicle_damage_setpremoddamagecallback();
    level.getoperatorspecificaccessoryweapon = 0;
    level.getoperators = 0;
}

_id_13220( var_0, var_1, var_2, var_3 )
{
    var_1.disabled = 1;
}

lb_dmg_factor_landing_gear( var_0 )
{
    if ( !isdefined( var_0 ) )
        return "super_ammo_drop";

    switch ( var_0 )
    {
        case "super_tac_insert":
        case "super_emp_drone":
        case "none":
            return "super_ammo_drop";
        default:
            return var_0;
    }
}

createdevguientryforkidnapper( var_0, var_1, var_2, var_3 )
{
    var_0 = lb_dmg_factor_landing_gear( var_0 );
    scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( var_0, var_1, var_2, var_3 );
}

vehicle_getteamfriendlyto()
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    setomnvar( "ui_hardpoint_timer", gettime() );
    thread _id_12479( game["attackers"] );
    thread _id_12479( game["defenders"] );
    scripts\mp\flags::gameflagwait( "infil_complete" );

    foreach ( var_1 in level.players )
    {
        var_1 scripts\mp\supers::setsuperbasepoints( 0 );
        var_1 scripts\mp\supers::setsuperextrapoints( 0 );
    }
}

_id_12479( var_0 )
{
    var_1 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    foreach ( var_3 in var_1 )
        scripts\mp\utility\outline::outlineenableforteam( var_3, var_0, "outline_depth_payload", "level_script" );
}

sunsamplesizenear()
{
    setomnvar( "ui_current_round", 1 );
    setomnvarforallclients( "post_game_state", 2 );
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "halftime", 0, undefined, 1, 2 );
    wait 10;

    foreach ( var_1 in level.players )
    {
        var_1 setclientomnvar( "ui_br_extended_load_screen", 1 );
        var_1 setsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 2 );
    }
}

onplayerconnect( var_0 )
{
    var_0 waittill( "spawned_player" );

    if ( var_0.team == game["attackers"] )
        var_0 _id_123A6( 0 );
    else
        var_0 _id_123A6( 1 );

    thread _id_12479( game["attackers"] );
    thread _id_12479( game["defenders"] );

    if ( scripts\mp\flags::gameflag( "infil_complete" ) )
    {
        var_0 thread _id_119BC();
        var_0 thread _id_11A09();
        var_0 scripts\mp\supers::setsuperbasepoints( 0 );
        var_0 scripts\mp\supers::setsuperextrapoints( 0 );
    }

    var_0.flagattachradar = [];
}

onplayerspawned()
{
    level endon( "prematch_done" );

    for (;;)
    {
        lastapproachinstruct( self );
        self waittill( "spawned_player" );
    }
}

onplayerkilled( var_0 )
{
    var_1 = var_0.victim;
    var_2 = var_0.attacker;

    if ( isdefined( var_2.vehicle ) && isdefined( var_2.vehicle.occupants ) && isdefined( var_2.vehicle.occupants["gunner"] ) )
    {
        if ( var_2 == var_2.vehicle.occupants["gunner"] )
        {
            var_2 thread scripts\mp\rank::giverankxp( "br_payload_kill_as_gunner", 50 );
            var_2 thread scripts\mp\rank::scoreeventpopup( "br_payload_kill_as_gunner" );
            var_2 thread scripts\mp\gametypes\br_analytics.gsc::clipleft( 50, "br_payload_kill_as_gunner" );
        }
    }

    if ( isdefined( var_1.vehicle ) && isdefined( var_1.vehicle.occupants ) && isdefined( var_1.vehicle.occupants["gunner"] ) )
    {
        if ( var_1 == var_1.vehicle.occupants["gunner"] )
        {
            var_2 thread scripts\mp\rank::giverankxp( "br_payload_killed_gunner", 100, undefined );
            var_2 thread scripts\mp\gametypes\br.gsc::padding_damage( "br_payload_killed_gunner", int( 50.0 ), var_2.currentweapon, 1 );
            var_2 thread scripts\mp\rank::scoreeventpopup( "br_payload_killed_gunner" );
            var_2 thread scripts\mp\gametypes\br_analytics.gsc::clipleft( 100, "br_payload_killed_gunner" );
        }
    }
}

unset_heavy_hitter( var_0 )
{
    scripts\mp\gametypes\br_weapons.gsc::create_puddle_triggers( var_0 );

    if ( scripts\mp\flags::gameflag( "prematch_done" ) )
        wavesv_finite_ending();
}

wavesv_finite_ending()
{
    var_0 = getdvarint( "scr_br_payload_start_ammo", 2 );

    if ( var_0 == -2 )
    {
        foreach ( var_2 in [ self.primaryweapon, self.secondaryweapon ] )
        {
            if ( isdefined( var_2 ) )
            {
                var_3 = weaponclipsize( var_2 );
                self setweaponammoclip( var_2, var_3 );
                self givemaxammo( var_2 );
            }
        }
    }
    else if ( var_0 == -1 )
        scripts\mp\gametypes\br_weapons.gsc::choppersupport_modifydamage_trial();
    else if ( var_0 > 0 )
    {
        scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();

        foreach ( var_6 in [ self.primaryweapon, self.secondaryweapon ] )
            _id_123B4( var_6, var_0 );

        _id_1236E();
    }

    scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
}

_id_1236E()
{
    foreach ( var_1 in [ self.primaryweapon, self.secondaryweapon ] )
    {
        if ( !isdefined( var_1 ) )
            continue;

        if ( scripts\engine\utility::string_starts_with( var_1, "iw8_sn_crossbow" ) || scripts\engine\utility::string_starts_with( var_1, "iw8_sn_t9crossbow" ) )
        {
            var_2 = asmdevgetallstates( var_1 );
            var_3 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_2 );

            if ( isdefined( var_3 ) )
            {
                var_4 = getdvarint( "scr_br_crossbow_ammo_override", 20 );
                scripts\mp\gametypes\br_weapons.gsc::br_ammo_give_type( self, var_3, var_4, 0 );
            }

            break;
        }
    }
}

_id_123B4( var_0, var_1 )
{
    var_2 = asmdevgetallstates( var_0 );
    var_3 = scripts\mp\utility\weapon::getweaponbasenamescript( var_2 );
    var_4 = weaponclass( var_3 );
    var_5 = "scr_br_payload_ammoscale_" + var_4;
    var_6 = int( max( 0, getdvarint( var_5, var_1 ) ) );
    var_7 = weaponclipsize( var_0 );
    var_8 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_2 );

    if ( isdefined( var_8 ) )
    {
        self.br_ammo[var_8] = 0;
        scripts\mp\gametypes\br_weapons.gsc::br_ammo_give_type( self, var_8, var_7 * var_6, 0 );
    }
}

allow_deleteme_on_path( var_0 )
{
    switch ( var_0 )
    {
        case "juggernaut":
            return 1;
        default:
            return undefined;
    }
}

relic_landlocked_clear_message_on_player_return()
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "infil_complete" );

    foreach ( var_1 in level.players )
        var_1.player_max_exposure_time = 0;

    for (;;)
    {
        foreach ( var_4 in level.completesmokinggunquest.paths )
        {
            if ( istrue( var_4.forcegivekillstreak ) )
                continue;

            if ( !isdefined( var_4.isgroundwardom ) )
                continue;

            foreach ( var_6 in var_4.isgroundwardom.touchlist )
            {
                foreach ( var_8 in var_6 )
                {
                    foreach ( var_1 in scripts\mp\gametypes\br_public.gsc::ondefuse( var_8.player.team, var_8.player.squadindex ) )
                    {
                        if ( !isdefined( var_1.vehicle_mp_create ) )
                            var_1.vehicle_mp_create = 0;

                        var_1.vehicle_mp_create = var_1.vehicle_mp_create + 5;

                        if ( var_1.vehicle_mp_create >= 20 )
                        {
                            if ( !var_1.player_max_exposure_time )
                                var_1 thread scripts\mp\rank::scoreeventpopup( "br_payload_squad_on_payload" );

                            var_1.player_max_exposure_time = 1;
                            var_10 = 15 * var_1.vehicle_mp_create;
                            var_1 thread scripts\mp\rank::giverankxp( "br_payload_squad_on_payload", var_10, undefined );
                            var_1 thread scripts\mp\gametypes\br.gsc::pasystems( min( 40, var_1.vehicle_mp_create ) * 1000 );
                            var_1 thread scripts\mp\gametypes\br_analytics.gsc::clipleft( var_10, "br_payload_squad_on_payload" );
                            var_1.vehicle_mp_create = 0;
                        }
                    }
                }
            }
        }

        foreach ( var_1 in level.players )
            var_1.player_max_exposure_time = 0;

        wait 5;
    }
}

_id_131FE( var_0, var_1 )
{

}

_id_131FF( var_0, var_1, var_2, var_3 )
{

}

vehicle_spawn_mp_gamemodesupportsrespawn()
{
    return 1;
}

_id_11A17( var_0 )
{
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    wait 1;

    if ( !istrue( game["liveLobbyCompleted"] ) && !istrue( game["switchedsides"] ) )
        scripts\mp\hud_message::showsplash( "br_prematch_welcome" );
}

_id_127E1( var_0 )
{
    if ( istrue( level.cp_vehicle_damage_monitor ) && isdefined( self.registerhint ) && !istrue( var_0.br_infilstarted ) )
    {
        var_1 = spawnstruct();
        var_0.br_infilstarted = 1;
        var_0._id_11B77 = var_0.registerhint;
        var_0._id_11B77.index = -1;
        var_0 thread _id_119D2( var_1 );
    }

    if ( istrue( game["switchedsides"] ) && isdefined( self.registerhint ) )
        return 1;

    return istrue( var_0.br_infilstarted ) && scripts\mp\flags::gameflag( "prematch_done" );
}

hvt_visual_callout()
{
    if ( !scripts\mp\gametypes\br_gametypes.gsc::roof_enemy_groups( "oneLife" ) )
    {
        level.disablespawning = 1;
        setdynamicdvar( "scr_" + scripts\mp\utility\game::getgametype() + "_numLives", 1 );
    }

    level.completesmokinggunquest._id_12A72 = 0;

    if ( !istrue( game["switchedsides"] ) )
        scripts\mp\deathicons::_id_11EC1();
    else
        _id_1343E();

    _id_127A8();
    level.cp_vehicle_damage_monitor = 1;

    foreach ( var_1 in level.players )
    {
        if ( isdefined( var_1 ) )
            var_1 thread weapon_xp_iw8_sn_sbeta();
    }

    level thread infil_lbravo_is_alive();

    if ( !istrue( game["switchedsides"] ) )
        wait 2;

    scripts\mp\flags::gameflagset( "prematch_fade_done" );
    _id_1343F( getdvarfloat( "scr_br_payload_infil_wait", 9 ) );

    foreach ( var_1 in level.players )
    {
        if ( isdefined( var_1 ) )
            var_1 thread weapon_xp_iw8_sn_kilo98();
    }

    scripts\mp\flags::gameflagset( "infil_anim_started" );
    wait 6.66667;
    waitframe();
    scripts\mp\flags::gameflagset( "infil_complete" );
    waitframe();
    gwperifvfx_plumes();
}

infil_lbravo_is_alive()
{
    level endon( "infil_complete" );

    for (;;)
    {
        level waittill( "connected", var_0 );

        if ( !scripts\mp\flags::gameflag( "infil_anim_started" ) )
        {
            var_0 thread weapon_xp_iw8_sn_sbeta( 1 );
            continue;
        }

        var_0 thread weapon_xp_iw8_sn_kilo98();
    }
}

_id_1343E()
{
    var_0 = gettime() + 10000;

    while ( gettime() < var_0 && getactiveclientcount() != level.players.size )
        waitframe();
}

_id_125B2()
{
    scripts\mp\flags::gameflagset( "infil_complete" );
}

_id_127A8()
{
    var_0 = 8;
    level.completesmokinggunquest.disabledamagefilter = [];
    var_1 = int( max( getactiveclientcount(), level.players.size ) );

    for ( var_2 = 0; var_2 < var_1; var_2++ )
    {
        var_3 = spawn( "script_model", ( 0, 0, 0 ) );
        var_3 setmodel( "generic_prop_x3" );
        level.completesmokinggunquest.disabledamagefilter[level.completesmokinggunquest.disabledamagefilter.size] = var_3;

        if ( ( var_2 + 1 ) % var_0 == 0 )
            waitframe();
    }
}

gwperifvfx_plumes()
{
    foreach ( var_1 in level.completesmokinggunquest.disabledamagefilter )
    {
        if ( isdefined( var_1 ) && !istrue( var_1.inuse ) )
            var_1 delete();
    }

    level.completesmokinggunquest.disabledamagefilter = undefined;
}

weapon_xp_iw8_sn_sbeta( var_0 )
{
    self endon( "disconnect" );

    if ( isdefined( self.cameraent ) )
        return;

    self.br_infilstarted = 1;

    if ( istrue( var_0 ) )
        waitframe();

    if ( !isdefined( level.completesmokinggunquest.disabledamagefilter[self getentitynumber()] ) )
    {
        var_1 = spawn( "script_model", ( 0, 0, 0 ) );
        var_1 setmodel( "generic_prop_x3" );
        level.completesmokinggunquest.disabledamagefilter[self getentitynumber()] = var_1;
    }

    self.cameraent = level.completesmokinggunquest.disabledamagefilter[self getentitynumber()];
    self.cameraent.inuse = 1;

    if ( !istrue( game["switchedsides"] ) )
        scripts\mp\gametypes\br_gulag.gsc::gulagfadetoblack();

    var_2 = ondamagerelicvampire( self.team, self.squadindex );
    var_3 = level.completesmokinggunquest.paths[var_2];

    if ( !isdefined( self._id_12809 ) )
    {
        _id_119B9( var_3 );
        self._id_12809 = whistlestarttimer( var_3 );
    }

    self.cameraent.origin = self._id_12809.origin;
    self.cameraent.angles = wheelson_thermite_damage_over_time( var_3, self.cameraent.origin );
    var_4 = whistlestarttime();
    self.cameraent scriptmodelplayanim( var_4, "spawn_camera_anim" );
    self.cameraent scriptmodelpauseanim( 1 );
    waittillframeend;
    var_5 = self.cameraent gettagorigin( "j_prop_1" );
    var_6 = getdvarint( "scr_br_initial_stream_timeout_pl_ms", 12000 );
    scripts\mp\gametypes\br_public.gsc::_id_119E7( var_5, var_6, 1 );

    if ( !istrue( var_0 ) && !istrue( game["switchedsides"] ) )
        wait 2.0;

    if ( istrue( self.clean_up_search ) )
        scripts\mp\gametypes\br.gsc::_id_12FD8( self );

    self setclientomnvar( "ui_br_infil_started", 1 );
    self setclientomnvar( "ui_br_infiled", 1 );
    scripts\mp\gametypes\br.gsc::spawnintermission( var_5, self.cameraent.angles );

    if ( !istrue( game["switchedsides"] ) )
        self setclientomnvar( "ui_br_bink_overlay_state", 5 );

    scripts\mp\gametypes\br_public.gsc::_id_11A13();
    level.completesmokinggunquest._id_12A72++;
}

wheelson_thermite_damage_over_time( var_0, var_1 )
{
    if ( self.team == game["attackers"] )
        var_2 = var_0.nodes[var_0.nodes.size - 1].origin - var_1;
    else
        var_2 = var_0.nodes[0].origin - var_1;

    var_3 = vectortoangles( var_2 );
    return ( 0, var_3[1], 0 );
}

whistlestarttime()
{
    if ( self.team == game["attackers"] )
        return "iw8_br_payload_intro_camera_swoop_attackers";
    else
        return "iw8_br_payload_intro_camera_swoop_defenders";
}

ondamagerelicvampire( var_0, var_1 )
{
    if ( isdefined( level.squaddata[var_0][var_1].registerlocation ) )
        return level.squaddata[var_0][var_1].registerlocation;

    if ( !isdefined( level.teamdata[var_0]["nextSpawnIndex"] ) )
    {
        var_2 = needs_radar( var_0 );

        if ( isdefined( level.teamdata[var_2]["nextSpawnIndex"] ) )
            level.teamdata[var_0]["nextSpawnIndex"] = level.teamdata[var_2]["nextSpawnIndex"];
        else
            level.teamdata[var_0]["nextSpawnIndex"] = randomint( level.completesmokinggunquest.paths.size );
    }

    level.squaddata[var_0][var_1].registerlocation = level.teamdata[var_0]["nextSpawnIndex"];
    level.teamdata[var_0]["nextSpawnIndex"]++;

    if ( level.teamdata[var_0]["nextSpawnIndex"] >= level.completesmokinggunquest.paths.size )
        level.teamdata[var_0]["nextSpawnIndex"] = 0;

    return level.squaddata[var_0][var_1].registerlocation;
}

weapon_xp_iw8_sn_kilo98()
{
    self endon( "disconnect" );

    if ( self.sessionstate != "intermission" )
        weapon_xp_iw8_sn_sbeta( 1 );
    else
        scripts\mp\gametypes\br_public.gsc::_id_11A13();

    weapon_xp_iw8_sn_hdromeo();

    if ( !istrue( game["switchedsides"] ) )
        self setclientomnvar( "ui_br_bink_overlay_state", 5 );

    _id_123A7( 1 );
    var_0 = 1;
    var_1 = 6.66667 - var_0;
    scripts\mp\gametypes\br_gulag.gsc::gulagfadefromblack();
    self clearsoundsubmix( "mp_br_lobby_fade", 1.5 );
    self clearsoundsubmix( "deaths_door_mp", 1 );
    self clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 1 );
    self clearsoundsubmix( "mp_br_mode_payload_completed", 0.5 );
    self clearpredictedstreampos();
    self setclientomnvar( "ui_br_transition_type", 0 );
    self setclientomnvar( "ui_br_extended_load_screen", 0 );
    self cameralinkto( self.cameraent, "j_prop_1", 1, 1 );
    self.cameraent scriptmodelpauseanim( 0 );
    thread weaponclassweights();
    wait( var_1 );
    var_2 = angleclamp180( angleclamp180( self.angles[1] ) - angleclamp180( self.cameraent.angles[1] ) );
    self.cameraent rotateyaw( var_2, var_0, 0.1, 0.1 );
    wait( var_0 );
    thread weapon_xp_iw8_sn_mike14();
    wait 1;
    self.cameraent delete();
}

weaponclassweights()
{
    self endon( "disconnect" );
    var_0 = 0.5;
    var_1 = 1.0;
    var_2 = 6.66667 - var_0 - var_1;
    self setsoundsubmix( "iw8_mp_spawn_camera" );
    wait( var_0 );
    scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "payload_welcome", self );

    if ( self.team == game["defenders"] )
    {
        scripts\mp\hud_message::showsplash( "br_payload_welcome_defenders" );
        scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "defend_intro1", self );
    }
    else
    {
        scripts\mp\hud_message::showsplash( "br_payload_welcome_attackers" );
        scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "attack_intro1", self );
    }

    wait( var_1 );
    self setplayermusicstate( "br_payload_round_start" );
    wait( var_2 );
    self clearsoundsubmix( "iw8_mp_spawn_camera", 6 );
}

weapon_xp_iw8_sn_hdromeo( var_0 )
{
    self endon( "disconnect" );
    self notify( "playerPayloadFirstSpawn" );
    self endon( "playerPayloadFirstSpawn" );
    scripts\mp\gametypes\br_public.gsc::_id_11981();
    self.forcespawnorigin = self._id_12809.origin;
    self.forcespawnangles = self._id_12809.angles;
    self._id_11F59 = !game["switchedsides"];
    self.plotarmor = 1;
    scripts\mp\playerlogic::spawnplayer( 0 );

    if ( istrue( self.clean_up_search ) )
        scripts\mp\gametypes\br.gsc::_id_12FD8( self );

    waitframe();
    self._id_12809 = undefined;
    self.plotarmor = undefined;
    self._id_11F59 = undefined;
    self.registerhint = undefined;
    self freezecontrols( 1 );
    self playerhide();
}

weapon_xp_iw8_sn_mike14()
{
    self cameraunlink();
    self freezecontrols( 0 );
    self playershow();

    if ( scripts\mp\gametypes\br_gulag.gsc::pickup_sound_hvt_handler() )
        scripts\mp\gametypes\br_gulag.gsc::gulagfadefromblack();

    self setclientomnvar( "ui_br_transition_type", 0 );
    self setclientomnvar( "ui_br_extended_load_screen", 0 );

    if ( self.team == game["attackers"] && level.completesmokinggunquest._id_12792 > -1 )
        thread weapon_xp_iw8_lm_kilo121();

    _id_123A7( 0 );
    scripts\mp\supers::setsuperbasepoints( 0 );
    scripts\mp\supers::setsuperextrapoints( 0 );
    weapon_xp_iw8_sn_golf28();
}

_id_1343F( var_0 )
{
    var_1 = gettime() + var_0 * 1000;

    while ( gettime() < var_1 && level.completesmokinggunquest._id_12A72 < level.players.size )
        waitframe();
}

_id_12828( var_0 )
{
    _id_1243A();

    foreach ( var_2 in level.completesmokinggunquest.paths )
    {
        _id_127FA( var_2, game["attackers"], var_0 );

        if ( level.completesmokinggunquest.convoy )
            _id_127FB( var_2, game["attackers"], var_0 );
    }

    get_gas_martyr_grenade_types( game["attackers"] );
    get_gas_martyr_grenade_types( game["defenders"] );
    thread _id_12D45();
}

_id_127FA( var_0, var_1, var_2 )
{
    var_3 = ( 0, 0, 0 );
    var_4 = var_0;
    var_5 = undefined;
    var_6 = 0;

    if ( level.completesmokinggunquest.convoy )
        var_6 = 1;

    if ( isdefined( var_0.nodes ) && isdefined( var_0.nodes[var_6] ) && isdefined( var_0.nodes[var_6 + 1] ) )
    {
        var_4 = var_0.nodes[var_6];
        var_5 = var_0.nodes[var_6 + 1];
        var_3 = vectortoangles( var_5.origin - var_4.origin );
    }
    else if ( isdefined( var_0.target ) )
    {
        if ( level.completesmokinggunquest.convoy )
            var_4 = scripts\engine\utility::getstruct( var_0.target, "targetname" );
        else
            var_4 = var_0;

        if ( isdefined( var_4 ) && isdefined( var_4.target ) )
        {
            var_5 = scripts\engine\utility::getstruct( var_4.target, "targetname" );
            var_3 = vectortoangles( var_5.origin - var_4.origin );
        }
    }

    var_7 = spawnstruct();
    var_7.origin = var_4.origin;
    var_7.angles = var_3;
    var_7.spawntype = "GAME_MODE";
    var_7.spawnmethod = "place_at_position_unsafe";
    var_7.team = var_1;
    var_7.left_side_spawn_adjuster = ::_id_132AA;
    var_7.vehicletype = level.vehicle_occupancy_canspawninto;
    var_7.modelname = "veh8_mil_lnd_mkilo23_payload";
    var_7.turretmodel = "veh8_mil_lnd_mkilo23_turret_payload";
    var_8 = spawnstruct();
    var_9 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( level.vehicle_mp_deletenextframelate, var_7, var_8 );
    var_9.ondeathrespawn = undefined;
    var_9 forcenetfieldhighlod( 1 );
    var_9 _meth_87C0( 1 );

    foreach ( var_11 in var_9.turrets )
    {
        var_11 setscriptablepartstate( "barrel", "show" );
        _id_12823( var_11 );
    }

    if ( istrue( var_2 ) && level.completesmokinggunquest._id_12EBB )
        _id_12799( var_9 );

    if ( isdefined( var_5 ) )
    {
        var_0.vehicle = var_9;
        var_9.path = var_0;
    }

    var_9 _id_132C7( var_0 );

    if ( isdefined( var_5 ) )
        var_9 thread _id_1329D( var_0 );

    return var_9;
}

_id_12823( var_0 )
{
    if ( getdvarint( "scr_br_payload_tcol", 1 ) == 0 )
        return;

    var_1 = spawn( "script_model", ( 0, 0, 0 ) );
    var_1 setmodel( "veh8_mil_lnd_mkilo23_turret_payload_nomesh" );
    var_1 linkto( var_0, "tag_aim_pivot", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_0._id_12F43 = var_1;
}

_id_12799( var_0 )
{
    var_1 = ( -158, -43, 67 );
    var_2 = ( 0, 0, 0 );
    var_3 = 80;
    var_4 = "ui_mp_br_loot_icon_health_armor_box";
    var_5 = &"EQUIPMENT_HINTS/ARMOR_BOX_USE";
    var_6 = "equip_armorBox";
    var_7 = spawn( "script_model", var_0.origin );
    var_7 setmodel( "offhand_wm_supportbox_armor_br" );
    var_7 linkto( var_0, "tag_origin", var_1, var_2 );
    var_7 setscriptablepartstate( "beacon", "active", 0 );
    var_7 setscriptablepartstate( "anims", "openIdle", 0 );
    var_7._id_12FC6 = 1;
    var_7.team = game["attackers"];
    var_7 scripts\mp\equipment\support_box::supportbox_addheadicon( var_4 );
    var_7 thread scripts\mp\equipment\support_box::supportbox_makeusable( var_6, var_5 );
    var_7 setuserange( var_3 );
    var_7 setusefov( 90 );
    var_7 notsolid();
    setheadiconsnaptoedges( var_7.player_vo_confirm_pickup, var_3 );
    setheadiconsnaptoedges( var_7.player_waitforlanded, var_3 );
    var_0.br_circle_closing_music = var_7;
}

_id_132A2()
{
    level endon( "game_ended" );
    self notify( "vehicleCleanupLoot" );
    self endon( "vehicleCleanupLoot" );
    self endon( "pathComplete" );
    self endon( "death" );

    for (;;)
    {
        var_0 = canceljoins( undefined, undefined, self.origin, level.completesmokinggunquest._id_132D2 );

        foreach ( var_2 in var_0 )
        {
            if ( issubstr( var_2.type, "_weapon_" ) )
                var_2 scripts\mp\gametypes\br_pickups.gsc::halfheight();
        }

        waitframe();
    }
}

_id_125B9( var_0 )
{
    var_1 = self;

    foreach ( var_3 in level.completesmokinggunquest.paths )
    {
        if ( isdefined( var_3.vehicle ) && spawn_sentry_at_pos( var_3.vehicle, var_1.origin ) )
            return 1;

        foreach ( var_5 in var_3.turbulence_scalar )
        {
            if ( isdefined( var_5 ) && spawn_sentries_from_targetname( var_5, var_1.origin ) )
                return 1;
        }
    }

    return 0;
}

spawn_sentry_at_pos( var_0, var_1 )
{
    var_2 = level.completesmokinggunquest._id_132D2 * level.completesmokinggunquest._id_132D2;
    var_3 = distance2dsquared( var_1, var_0.origin );
    return var_3 < var_2;
}

spawn_sentries_from_targetname( var_0, var_1 )
{
    var_2 = 10000;
    var_3 = distance2dsquared( self.origin, var_0.origin );
    return var_3 < var_2;
}

_id_125B6( var_0 )
{
    foreach ( var_2 in level.completesmokinggunquest.paths )
    {
        if ( isdefined( var_2.vehicle ) && spawn_sentry_at_pos( var_2.vehicle, var_0.origin ) )
            return 1;

        foreach ( var_4 in var_2.turbulence_scalar )
        {
            if ( spawn_sentries_from_targetname( var_4, var_0.origin ) )
                return 1;
        }
    }

    return 0;
}

_id_127FB( var_0, var_1, var_2 )
{
    var_3 = ( 0, 0, 0 );
    var_4 = undefined;

    if ( isdefined( var_0.nodes ) && isdefined( var_0.nodes[1] ) )
    {
        var_4 = var_0.nodes[1];
        var_3 = vectortoangles( var_4.origin - var_0.origin );
    }

    var_5 = spawnstruct();
    var_5.origin = var_0.origin;
    var_5.angles = var_3;
    var_5.spawntype = "GAME_MODE";
    var_5.spawnmethod = "place_at_position_unsafe";
    var_5.team = var_1;
    var_5.left_side_spawn_adjuster = ::_id_132AA;
    var_5.vehicletype = level.vehicle_occupancy_canspawninto;
    var_5.modelname = "veh8_mil_lnd_mkilo23_payload_convoy";
    var_5.turretmodel = "veh8_mil_lnd_mkilo23_turret_payload";
    var_6 = spawnstruct();
    var_7 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( level.vehicle_mp_deletenextframelate, var_5, var_6 );
    var_7.ondeathrespawn = undefined;
    var_7 _meth_87C0( 1 );

    foreach ( var_9 in var_7.turrets )
    {
        var_9 setscriptablepartstate( "barrel", "show" );
        _id_12823( var_9 );
    }

    if ( istrue( var_2 ) )
    {
        var_7 _id_12EBA( var_0.vo_exfil_helo_arrived_nag, 0 );

        if ( level.completesmokinggunquest._id_12EBB )
            _id_12799( var_7 );
    }

    if ( isdefined( var_4 ) )
    {
        var_0.gamemodeoverridemeleeviewkickscale = var_7;
        var_7.path = var_0;
    }

    if ( level.vehicle_mp_deletenextframelate == "cargo_truck_mg" )
    {
        var_7 setscriptablepartstate( "upgrade", "vehicle_unusable" );
        var_7 setscriptablepartstate( "copyofupgrade", "vehicle_unusable" );
    }

    var_7.riotshield_common = 1;

    if ( isdefined( var_4 ) )
        var_7 thread _id_132A3( var_0 );

    return var_7;
}

_id_132AA( var_0, var_1 )
{

}

_id_132C2( var_0 )
{
    return !isdefined( self.path );
}

_id_132C7( var_0 )
{
    if ( !isdefined( var_0.trigger ) )
        var_0.trigger = spawn( "trigger_radius", self.origin, 0, level.completesmokinggunquest._id_132D2, level.completesmokinggunquest._id_132D1 );

    if ( !istrue( var_0.trigger.siege_bot_team_triple_cap_check ) )
    {
        var_0.trigger enablelinkto();
        var_0.trigger.siege_bot_team_triple_cap_check = 1;
    }

    var_0.trigger linkto( self, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_0.trigger.blueprintextract_onpickupcreated = 1;

    if ( !isdefined( var_0.isgroundwardom ) )
        var_0.isgroundwardom = scripts\mp\gameobjects::createuseobject( self.team, var_0.trigger, [], level.completesmokinggunquest._id_132B3 );

    var_0.isgroundwardom.usecondition = ::end_reach_icbm_launch;
    var_0.isgroundwardom.enemy_think = 1;
    var_0.isgroundwardom.nousebar = 1;
    var_0.isgroundwardom scripts\mp\gameobjects::allowuse( "any" );
    var_0.isgroundwardom scripts\mp\gameobjects::setvisibleteam( "any" );
    var_0.isgroundwardom scripts\mp\gameobjects::pinobjiconontriggertouch();
    var_0.isgroundwardom.iconname = self.path.iconname;
    var_0.isgroundwardom scripts\mp\gameobjects::setownerteam( self.team );
    var_0.isgroundwardom scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_escort_neutral", "waypoint_halt_neutral" );
    _func_428( var_0.isgroundwardom.objidnum, 1 );
    scripts\mp\objidpoolmanager::update_objective_onentity( var_0.isgroundwardom.objidnum, self );
    scripts\mp\objidpoolmanager::update_objective_setzoffset( var_0.isgroundwardom.objidnum, var_0.isgroundwardom.offset3d[2] );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_0.isgroundwardom.objidnum, 0 );

    if ( level.vehicle_mp_deletenextframelate == "cargo_truck_mg" )
    {
        self setscriptablepartstate( "upgrade", "vehicle_unusable" );
        self setscriptablepartstate( "copyofupgrade", "vehicle_unusable" );
    }

    self.isgroundwardom = var_0.isgroundwardom;
}

needs_radar( var_0 )
{
    if ( var_0 == "axis" )
        return "allies";
    else
        return "axis";
}

_id_132BB()
{
    level endon( "game_ended" );
    level endon( "payloadComplete" );
    self notify( "vehicleMoveUpdate" );
    self endon( "vehicleMoveUpdate" );
    self endon( "pathComplete" );
    self endon( "death" );
    waittillframeend;
    var_0 = getdvarint( "scr_br_payload_vehicle_pay_time_tick", 6000 );
    var_1 = getdvarint( "scr_br_payload_vehicle_pay_scale", 4 );
    var_2 = getdvarint( "scr_br_payload_vehicle_defender_pay_scale", 7 );
    var_3 = gettime() + var_0;
    var_4 = self.path;
    var_5 = var_4.gamemodeoverridemeleeviewkickscale;
    _id_132B2( var_5 );
    var_6 = gettime() + 1000;

    for (;;)
    {
        var_7 = _id_132B0( self.team );
        var_8 = _id_132B0( needs_radar( self.team ) );
        _id_132D7( var_7, var_8 );
        _id_132D5();

        if ( var_3 < gettime() )
        {
            var_3 = gettime() + var_0;
            vehicle_occupancy_cleanfriendlystatus( var_7, var_8, var_1, var_2 );
        }

        if ( gettime() >= var_6 )
        {
            _id_1329A();
            var_6 = gettime() + 1000;
        }

        var_9 = undefined;

        if ( istrue( level.completesmokinggunquest.vehicle_isneutraltoplayer ) )
            var_10 = level.completesmokinggunquest._id_132AC;
        else
            var_10 = level.completesmokinggunquest._id_132AD;

        var_11 = var_10;
        var_12 = level.completesmokinggunquest._id_1329B;

        if ( isdefined( var_5 ) )
        {
            var_13 = distance2dsquared( self.origin, var_5.origin );

            if ( var_13 < level.completesmokinggunquest.gameisending )
            {
                var_11 = level.completesmokinggunquest._id_132AE;
                var_12 = level.completesmokinggunquest._id_1329C;
            }
        }

        if ( !var_7 && var_8 && !self.brcircleradialedgespawn )
        {
            self vehicle_setspeed( var_12 );
            self.veh_transmission = "reverse";

            if ( isdefined( var_5 ) )
            {
                if ( !istrue( var_5.brclampdamage ) )
                {
                    var_5 vehicle_setspeed( level.completesmokinggunquest._id_1329B );
                    var_5.veh_transmission = "reverse";
                }
                else
                    var_5 vehicle_setspeed( 0 );
            }

            var_9 = "reverse";

            if ( isdefined( self.returntoprop ) && isdefined( self.carepackage_set_useable ) )
            {
                var_14 = anglestoforward( self.angles ) * -1;
                var_15 = vectornormalize( self.origin - self.carepackage_set_useable );
                var_16 = vectordot( var_14, var_15 );

                if ( var_16 > 0 )
                {
                    var_17 = distance( self.carepackage_set_useable, self.origin );

                    if ( var_17 > getdvarfloat( "scr_payload_unblock_distance", 2.0 ) )
                    {
                        self.returntoprop = undefined;
                        self.brclosealldoors = undefined;
                        self.carepackage_set_useable = undefined;
                    }
                }
            }
        }
        else if ( isdefined( self.returntoprop ) )
        {
            var_9 = "blocked";
            self vehicle_setspeed( 0 );

            if ( isdefined( var_5 ) )
                var_5 vehicle_setspeed( 0 );
        }
        else if ( var_7 && !var_8 )
        {
            self vehicle_setspeed( var_10 );
            self.veh_transmission = "forward";
            self.brcircleradialedgespawn = 0;
            _id_132D6();

            if ( isdefined( self.brclosealldoors ) )
            {
                self.brclosealldoors tugofwar_hvt_taken_firsttime();
                self.brclosealldoors = undefined;
            }

            if ( isdefined( var_5 ) )
            {
                var_5 vehicle_setspeed( var_11 );
                var_5.veh_transmission = "forward";
                var_5.brclampdamage = 0;
            }

            var_9 = "forward";
        }
        else
        {
            if ( var_7 && var_8 )
                var_9 = "contested";

            self vehicle_setspeed( 0 );

            if ( isdefined( var_5 ) )
                var_5 vehicle_setspeed( 0 );
        }

        if ( !var_7 )
            _id_132C3();

        [var_9, var_19] = _id_132BC( var_9 );
        var_20 = var_7 > 0;
        tryspawnscriptableparenting( self.path, var_20, var_9, var_19 );
        waitframe();
    }
}

_id_132B2( var_0 )
{
    self vehicle_setspeed( level.completesmokinggunquest._id_132AD );

    if ( isdefined( var_0 ) )
        var_0 vehicle_setspeed( level.completesmokinggunquest._id_132AD );

    wait 0.5;
}

_id_132BC( var_0 )
{
    var_1 = mp_euphrates_gunnonlinear_opendoor( self.path );

    if ( var_1 < 0 || !isdefined( var_0 ) || var_0 != "forward" )
        return [ var_0, undefined ];

    var_2 = self.path;
    var_3 = var_2.enemy_claymore_watchfortrigger[var_1].transition_snd_org;
    var_4 = var_2.nodes[var_3].origin;
    var_5 = distance2dsquared( self.origin, var_4 );

    if ( var_5 < level.completesmokinggunquest._id_1334E )
        return [ "near", var_1 + 1 ];

    return [ var_0, undefined ];
}

_id_132A6()
{
    level endon( "game_ended" );
    self notify( "vehicleDamageVehicles" );
    self endon( "vehicleDamageVehicles" );
    self endon( "death" );
    self vehphys_enablecollisioncallback( 1 );

    for (;;)
    {
        self waittill( "collision", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );

        if ( !isdefined( var_7 ) )
            continue;

        if ( var_7 isautouse() )
        {
            var_7 _id_132A9( self );
            continue;
        }

        if ( isdefined( var_7.equipmentref ) && var_7.equipmentref == "equip_tac_cover" )
            var_7 scripts\mp\equipment\tactical_cover::tac_cover_destroy( undefined, 1 );
    }
}

isautouse()
{
    return isalive( self ) && ( scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "script_vehicle" );
}

_id_132A9( var_0 )
{
    self.vehicle_occupancy_allowspawninto = 1;
    self dodamage( self.health, var_0.origin, var_0, var_0 );

    if ( isdefined( self ) )
        self.vehicle_occupancy_allowspawninto = undefined;
}

_id_132D7( var_0, var_1 )
{
    if ( !var_0 && var_1 )
    {
        self.isgroundwardom scripts\mp\gameobjects::setownerteam( needs_radar( self.team ) );
        self.isgroundwardom scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_halting", "waypoint_escort" );
        vehicle_collision_updateinstance( self.path, game["attackers"], "red" );
        vehicle_collision_updateinstance( self.path, game["defenders"], "blue" );
        var_2 = scripts\engine\utility::ter_op( !game["switchedsides"], "halt0", "halt1" );
        self setscriptablepartstate( "radiusEffect", var_2, 0 );
        _func_428( self.isgroundwardom.objidnum, 0 );
        self.status = "back";
        _id_123AF( self.path.script_index, 2 );
    }
    else if ( isdefined( self.returntoprop ) )
    {
        self.isgroundwardom scripts\mp\gameobjects::setownerteam( "neutral" );
        self.isgroundwardom scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_blocked" );
        vehicle_collision_updateinstance( self.path, game["attackers"], "yellow" );
        vehicle_collision_updateinstance( self.path, game["defenders"], "yellow" );
        self setscriptablepartstate( "radiusEffect", "contest", 0 );
        _func_428( self.isgroundwardom.objidnum, 0 );
        self.status = "blocked";
        _id_123AF( self.path.script_index, 0 );
    }
    else if ( var_0 && !var_1 )
    {
        self.isgroundwardom scripts\mp\gameobjects::setownerteam( self.team );
        self.isgroundwardom scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_escorting", "waypoint_halt" );
        vehicle_collision_updateinstance( self.path, game["attackers"], "blue" );
        vehicle_collision_updateinstance( self.path, game["defenders"], "red" );
        var_2 = scripts\engine\utility::ter_op( !game["switchedsides"], "escort0", "escort1" );
        self setscriptablepartstate( "radiusEffect", var_2, 0 );
        _func_428( self.isgroundwardom.objidnum, 0 );
        self.status = "forward";
        _id_123AF( self.path.script_index, 1 );
    }
    else if ( var_0 && var_1 )
    {
        self.isgroundwardom scripts\mp\gameobjects::setownerteam( "neutral" );
        self.isgroundwardom scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_contested" );
        vehicle_collision_updateinstance( self.path, game["attackers"], "yellow" );
        vehicle_collision_updateinstance( self.path, game["defenders"], "yellow" );
        self setscriptablepartstate( "radiusEffect", "contest", 0 );
        _func_428( self.isgroundwardom.objidnum, 0 );
        self.status = "contested";
        _id_123AF( self.path.script_index, 3 );
    }
    else
    {
        self.isgroundwardom scripts\mp\gameobjects::setownerteam( self.team );
        self.isgroundwardom scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_escort_neutral", "waypoint_halt_neutral" );
        vehicle_collision_updateinstance( self.path, game["attackers"], "white" );
        vehicle_collision_updateinstance( self.path, game["defenders"], "white" );
        self setscriptablepartstate( "radiusEffect", "idle", 0 );
        _func_428( self.isgroundwardom.objidnum, 1 );
        self.status = "idle";
        _id_123AF( self.path.script_index, 4 );
    }

    _id_132D5();
}

_id_132D5()
{
    var_0 = self.path;
    var_1 = _id_132AF();
    var_2 = var_1 / var_0._id_12CEE;

    if ( var_0.enemy_ai_enter_alert_due_to_grenade_explode >= 0 )
    {
        var_3 = 0;

        if ( var_0.enemy_ai_enter_alert_due_to_grenade_explode > 0 )
            var_3 = var_0.enemy_claymore_watchfortrigger[var_0.enemy_ai_enter_alert_due_to_grenade_explode - 1].his_ontimerexpired;

        var_4 = var_0.enemy_claymore_watchfortrigger[var_0.enemy_ai_enter_alert_due_to_grenade_explode].his_ontimerexpired - var_3;
        var_1 = var_1 - var_3;
        var_5 = var_1 / var_4;
    }
    else
        var_5 = 0;

    _id_123AE( var_0.script_index, var_2 );

    if ( isdefined( level.teamdata[game["attackers"]]["checkpoint"].bunkermusicstarted[var_0.script_index] ) )
        level.teamdata[game["attackers"]]["checkpoint"].bunkermusicstarted[var_0.script_index].bunker_loot_vaults scripts\mp\hud_util::updatebar( var_2, 0 );

    if ( isdefined( level.teamdata[game["defenders"]]["checkpoint"].bunkermusicstarted[var_0.script_index] ) )
        level.teamdata[game["defenders"]]["checkpoint"].bunkermusicstarted[var_0.script_index].bunker_loot_vaults scripts\mp\hud_util::updatebar( var_2, 0 );

    if ( var_5 < 0 )
        var_5 = 0;

    objective_setprogress( self.isgroundwardom.objidnum, var_5 );
}

_id_132AF()
{
    var_0 = self;
    var_1 = var_0.path;

    if ( istrue( var_1.forcegivekillstreak ) )
        return var_1._id_12CEE;

    var_2 = var_1._id_12875[var_1._id_12874].points[var_1.get_random_primary_weapon_obj];
    var_3 = var_1._id_12875[var_1._id_12874].points[var_1.get_random_primary_weapon_obj + 1];
    var_4 = pointonsegmentnearesttopoint( var_2, var_3, var_0.origin );
    var_5 = distance( var_4, var_2 );
    var_6 = var_1._id_12875[var_1._id_12874].airdrop_specialcasecanusecrate[var_1.get_random_primary_weapon_obj];
    var_6 = var_6 + var_5;
    return var_6;
}

_id_132D6()
{
    var_0 = self;

    if ( isdefined( var_0._id_11C3C ) || !scripts\mp\flags::gameflag( "prematch_done" ) )
        return;

    var_0._id_11C3C = spawnstruct();
    var_0._id_11C3C.starttime = gettime();
    var_0._id_11C3C._id_129B3 = var_0 _id_132AF();
}

_id_132C3()
{
    var_0 = self;

    if ( !isdefined( var_0._id_11C3C ) || !scripts\mp\flags::gameflag( "prematch_done" ) )
        return;

    var_1 = var_0 _id_132AF();
    var_2 = var_1 - var_0._id_11C3C._id_129B3;
    var_3 = var_0.path;

    if ( var_3.spawn_fulton_ac130_mdl < var_2 )
        var_3.spawn_fulton_ac130_mdl = var_2;

    var_4 = gettime() - var_0._id_11C3C.starttime;
    var_3._id_12CF1 = var_3._id_12CF1 + var_4;
    var_0._id_11C3C = undefined;
}

_id_1329A()
{
    foreach ( var_1 in self.isgroundwardom.touchlist[game["attackers"]] )
    {
        var_2 = var_1.player;
        var_2 scripts\mp\utility\stats::incpersstat( "objTime", 1 );
        var_2 scripts\mp\persistence::statsetchild( "round", "objTime", var_2.pers["objTime"] );
        var_2 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "objTime", var_2.pers["objTime"] );
    }

    foreach ( var_1 in self.isgroundwardom.touchlist[game["defenders"]] )
    {
        var_2 = var_1.player;
        var_2 scripts\mp\utility\stats::incpersstat( "objTime", 1 );
        var_2 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "objTime", var_2.pers["objTime"] );
    }
}

destroy_lmgs( var_0, var_1 )
{
    var_2 = 0.0000157828;
    var_3 = 3600;
    var_4 = 10;
    var_5 = distance( var_0, var_1 );
    var_6 = var_5 * var_2;
    var_7 = max( var_6 / level.completesmokinggunquest._id_132AD * var_3, var_4 );
    return var_7;
}

destprogress( var_0, var_1 )
{
    var_0._id_12875 = [];
    var_0.enemy_claymore_watchfortrigger = [];
    var_0.turbulence_scalar = [];
    var_0.get_random_primary_weapon_obj = 0;
    var_0._id_12874 = 0;

    if ( level.completesmokinggunquest.brpickupscriptableid )
        var_0.set_relic_doubletap_params_internal = [];

    if ( level.completesmokinggunquest.convoy )
    {
        var_0.gamemodemolotovfunc = spawnstruct();
        var_0.gamemodemolotovfunc.points = [];
        var_0.gamemodemolotovfunc.times = [];
    }

    var_2 = var_0.nodes;

    if ( !isdefined( var_2 ) || istrue( var_1 ) )
    {
        if ( isdefined( var_0.target ) )
        {
            var_3 = var_0;
            var_2 = [ var_0 ];

            for (;;)
            {
                var_3 = scripts\engine\utility::getstruct( var_3.target, "targetname" );
                var_2[var_2.size] = var_3;

                if ( !isdefined( var_3.target ) )
                    break;
            }

            var_0.nodes = var_2;
        }
        else
        {

        }
    }
    else
    {

    }

    var_9 = int( var_2.size / 31 );
    var_10 = var_2.size - var_9 * 31;

    if ( var_10 != 0 )
        var_9++;

    var_11 = var_10 > 0 && var_10 < 4;
    var_12 = var_9 - 2;
    var_13 = var_9 - 1;
    var_14 = undefined;

    if ( level.completesmokinggunquest.brpickupscriptableid )
        var_0.set_relic_doubletap_params_internal[0] = 0;

    var_15 = 0;
    var_16 = 0;
    var_17 = 0;
    var_18 = 0;
    var_19 = 0;
    var_20 = 0;

    for ( var_21 = 0; var_21 < var_9; var_21++ )
    {
        var_0._id_12875[var_21] = spawnstruct();
        var_0._id_12875[var_21].points = [];
        var_0._id_12875[var_21].times = [];
        var_0._id_12875[var_21].right_control = [];
        var_0._id_12875[var_21].run_lbravo_spawner = [];
        var_0._id_12875[var_21].airdrop_specialcasecanusecrate = [];
        var_22 = 31;

        if ( var_21 == var_12 && var_11 )
            var_22 = 27 + var_10;
        else if ( var_21 == var_13 && var_10 > 0 )
        {
            if ( var_10 >= 4 )
                var_22 = var_10;
            else
                var_22 = 4;
        }

        var_23 = 0;

        if ( var_21 > 0 )
        {
            var_0._id_12875[var_21].points[var_23] = var_2[var_16].origin;
            var_0._id_12875[var_21].times[var_23] = destroy_lmgs( var_2[var_16].origin, var_2[var_16].origin );
            var_0._id_12875[var_21].airdrop_specialcasecanusecrate[var_23] = var_19;
            var_23++;
            var_22++;
            var_2[var_16]._id_12874 = var_21;
        }
        else
            var_2[var_21]._id_12874 = var_21;

        for ( var_24 = var_23; var_24 < var_22; var_24++ )
        {
            var_25 = var_24;

            if ( level.completesmokinggunquest.convoy && var_21 == 0 )
            {
                var_0.gamemodemolotovfunc.points[var_25] = var_2[var_15].origin;
                var_0.gamemodemolotovfunc.times[var_25] = destroy_lmgs( var_2[var_16].origin, var_2[var_15].origin );
                var_25 = var_25 - 1;

                if ( var_25 == 0 )
                    var_16 = 1;
            }

            if ( !level.completesmokinggunquest.convoy || var_21 > 0 || var_25 >= 0 )
            {
                var_0._id_12875[var_21].points[var_25] = var_2[var_15].origin;
                var_0._id_12875[var_21].times[var_25] = destroy_lmgs( var_2[var_16].origin, var_2[var_15].origin );
                var_26 = distance( var_2[var_16].origin, var_2[var_15].origin );
                var_19 = var_19 + var_26;
                var_0._id_12875[var_21].airdrop_specialcasecanusecrate[var_25] = var_19;

                if ( isdefined( var_2[var_15].checkpoint ) )
                {
                    var_0._id_12875[var_21].right_control[var_25] = var_17;
                    var_0.enemy_claymore_watchfortrigger[var_17] = spawnstruct();
                    var_0.enemy_claymore_watchfortrigger[var_17].his_ontimerexpired = var_19;
                    var_0.enemy_claymore_watchfortrigger[var_17].transition_snd_org = var_15;
                    var_2[var_15].checkpoint = var_0.enemy_claymore_watchfortrigger[var_17];

                    if ( level.completesmokinggunquest.brpickupscriptableid )
                    {
                        var_27 = var_15 - var_20;
                        var_28 = int( var_27 * 0.33 ) + var_20;
                        var_0.set_relic_doubletap_params_internal[var_0.set_relic_doubletap_params_internal.size] = var_28;
                        var_29 = int( var_27 * 0.66 ) + var_20;
                        var_0.set_relic_doubletap_params_internal[var_0.set_relic_doubletap_params_internal.size] = var_29;
                        var_0.set_relic_doubletap_params_internal[var_0.set_relic_doubletap_params_internal.size] = var_15;
                        var_20 = var_15;
                    }

                    var_17++;
                }

                if ( isdefined( var_2[var_15].obstacle ) )
                {
                    var_0._id_12875[var_21].run_lbravo_spawner[var_25] = var_18;

                    if ( !isent( var_2[var_15].obstacle ) )
                        var_2[var_15].obstacle = get_living_agents( var_2[var_15].obstacle.origin, var_2[var_15].obstacle.angles );

                    var_0.turbulence_scalar[var_18] = var_2[var_15].obstacle;
                    var_0.turbulence_scalar[var_18].path = var_0;
                    var_0.turbulence_scalar[var_18].dist = var_19;
                    var_0.turbulence_scalar[var_18].index = var_18;
                    var_0.turbulence_scalar[var_18].enemy_ai_enter_alert_due_to_grenade_explode = var_17;
                    var_18++;
                }

                var_16 = var_15;
            }

            var_15++;
        }
    }

    var_30 = var_15 - 1;

    if ( level.completesmokinggunquest.brpickupscriptableid )
    {
        var_27 = var_15 - var_20;
        var_28 = int( var_27 * 0.33 ) + var_20;
        var_0.set_relic_doubletap_params_internal[var_0.set_relic_doubletap_params_internal.size] = var_28;
        var_29 = int( var_27 * 0.66 ) + var_20;
        var_0.set_relic_doubletap_params_internal[var_0.set_relic_doubletap_params_internal.size] = var_29;
        var_0.set_relic_doubletap_params_internal[var_0.set_relic_doubletap_params_internal.size] = var_30;
    }

    var_0.enemy_claymore_watchfortrigger[var_17] = spawnstruct();
    var_0.enemy_claymore_watchfortrigger[var_17].his_ontimerexpired = var_19;
    var_0.enemy_claymore_watchfortrigger[var_17].transition_snd_org = var_30;
    var_0._id_12CEE = var_19;
}

_id_1329D( var_0, var_1 )
{
    self notify( "vehicleBeginPath" );
    self endon( "vehicleBeginPath" );
    self endon( "death" );
    var_2 = 1;
    self.brcircleradialedgespawn = 1;
    self.returntoprop = undefined;

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    var_0.get_random_primary_weapon_obj = 0;
    var_0._id_12874 = var_1;

    foreach ( var_4 in var_0.turbulence_scalar )
        var_4 tugofwar_tank( 0 );

    thread _id_132BB();
    thread _id_132A6();
    thread _id_132A2();
    var_6 = 1;

    while ( var_0._id_12874 < var_0._id_12875.size )
    {
        self startpathnodes( var_0._id_12875[var_0._id_12874].points, var_0._id_12875[var_0._id_12874].times, 0, 0.5, 0.5, 0, 0, var_2, 1, !var_6, 1, 1 );
        var_2 = 0;
        var_6 = _id_132D8( var_0, var_6 );

        if ( ropeguy() )
            break;
    }

    self vehicle_setspeed( 0 );

    if ( isdefined( var_0.gamemodeoverridemeleeviewkickscale ) )
        var_0.gamemodeoverridemeleeviewkickscale vehicle_setspeed( 0 );

    self notify( "pathComplete" );
    var_0.forcegivekillstreak = 1;
    var_0 notify( "pathComplete" );

    if ( level.completesmokinggunquest._id_12791 )
        var_0._id_127AC.forcegivekillstreak = 1;

    _id_132C3();
    helis_assault3_hangar( var_0 );

    if ( !ropeguy() && _id_124F1( var_0 ) )
    {
        _id_11D82( var_0 );
        var_0.enemy_ai_enter_alert_due_to_grenade_explode++;
        projectiledeleteonnote();

        if ( isdefined( level.completesmokinggunquest.enemy_failsafe_ifonedidntspawn ) )
        {
            var_7 = mp_euphrates_patches();

            foreach ( var_9 in level.completesmokinggunquest.enemy_failsafe_ifonedidntspawn )
                var_9 setvalue( var_7 );
        }

        var_0 notify( "checkPointUpdate" );
        enemy_damage_monitoring();
    }
    else if ( !ropeguy() && level.completesmokinggunquest.bolt_watchpickup )
        laststandweaponobj( var_0 );
}

laststandweaponobj( var_0 )
{
    scripts\mp\gametypes\br.gsc::_id_12BEE( "br_payload_all_to_end", undefined, game["attackers"] );
    scripts\mp\gametypes\br.gsc::_id_12BEE( "br_payload_all_to_end_enemy", undefined, game["defenders"] );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_0.vehicle.isgroundwardom.objidnum );
    vehicle_collision_updateinstance( var_0, game["attackers"], "white" );
    vehicle_collision_updateinstance( var_0, game["defenders"], "white" );
    var_1 = mp_euphrates_gunnonlinear_opendoor( var_0 );
    thread tryspawnscriptableparenting( var_0, 1, "checkpoint", var_1 + 1 );
    _id_11D82( var_0 );
    var_0.enemy_ai_enter_alert_due_to_grenade_explode++;
    projectiledeleteonnote();
    _id_12439( var_0 );
    _id_1246E( var_0, var_0.enemy_ai_enter_alert_due_to_grenade_explode );
    var_0 notify( "checkPointUpdate" );

    if ( isdefined( level.completesmokinggunquest.enemy_failsafe_ifonedidntspawn ) )
    {
        var_2 = mp_euphrates_patches();

        foreach ( var_4 in level.completesmokinggunquest.enemy_failsafe_ifonedidntspawn )
            var_4 setvalue( var_2 );
    }

    thread _id_11F68( var_0 );

    if ( level.completesmokinggunquest.vehicle_collision_handlemultievent )
        thread vehicle_collision_handlemultievent( var_0 );
}

_id_132A3( var_0, var_1 )
{
    self notify( "vehicleBeginPath" );
    self endon( "vehicleBeginPath" );
    var_0 endon( "pathComplete" );
    self endon( "death" );
    var_2 = 1;

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    self.get_random_primary_weapon_obj = 0;
    self._id_12874 = var_1;
    thread _id_132A6();
    var_3 = 1;

    while ( self._id_12874 < var_0._id_12875.size )
    {
        if ( self._id_12874 == 0 )
        {
            var_4 = var_0.gamemodemolotovfunc.points;
            var_5 = var_0.gamemodemolotovfunc.times;
        }
        else
        {
            var_4 = var_0._id_12875[self._id_12874].points;
            var_5 = var_0._id_12875[self._id_12874].times;
        }

        self startpathnodes( var_4, var_5, 0, 0.5, 0.5, 0, 0, var_2, 1, !var_3, 1, 1 );
        var_2 = 0;
        var_3 = _id_132A4( var_0, var_4 );

        if ( ropeguy() )
            break;
    }

    self vehicle_setspeed( 0 );
}

_id_132A4( var_0, var_1 )
{
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    self endon( "death" );
    var_2 = var_1.size - 1;

    for (;;)
    {
        self waittill( "trigger", var_3 );
        var_4 = self._id_12874 == 0 && var_3 == 0;
        self.get_random_primary_weapon_obj = var_3;

        if ( var_4 )
        {
            self.brclampdamage = 1;
            continue;
        }

        if ( var_3 <= 0 )
        {
            self._id_12874--;
            self.get_random_primary_weapon_obj = var_1.size - 2;
            return 0;
        }
        else if ( var_3 >= var_2 )
        {
            self._id_12874++;
            self.get_random_primary_weapon_obj = 0;
            return 1;
        }
    }
}

_id_124F1( var_0 )
{
    if ( level.completesmokinggunquest.bolt_watchpickup )
    {
        foreach ( var_0 in level.completesmokinggunquest.paths )
        {
            if ( !istrue( var_0.forcegivekillstreak ) )
                return 0;
        }
    }

    return 1;
}

_id_132D8( var_0, var_1 )
{
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    self endon( "death" );
    var_2 = var_0._id_12875[var_0._id_12874];
    var_3 = var_2.points.size - 1;

    if ( var_1 )
        var_4 = 0;
    else
        var_4 = var_3;

    var_5 = var_1;

    for (;;)
    {
        self waittill( "trigger", var_6 );
        var_7 = var_0._id_12874 == 0 && var_6 == 0;

        if ( !var_7 && var_6 == var_0.get_random_primary_weapon_obj )
            var_5 = !var_5;
        else
            var_5 = var_7 || var_6 > var_0.get_random_primary_weapon_obj;

        var_0.get_random_primary_weapon_obj = var_6;

        if ( isdefined( var_2.run_lbravo_spawner[var_6] ) )
        {
            var_8 = var_2.run_lbravo_spawner[var_6];
            var_9 = var_0.turbulence_scalar[var_8];

            if ( istrue( var_9.fullweaponname ) && var_5 )
            {
                self.returntoprop = var_9;
                self.carepackage_set_useable = var_2.points[var_6];
            }
            else if ( !istrue( var_9.fullweaponname ) && var_5 )
                var_9 tugofwar_hvt_taken_firsttime();
            else if ( !istrue( var_9.fullweaponname ) && !var_5 )
                var_9 tugofwar_tank( 1 );
        }

        if ( var_7 || isdefined( var_2.right_control[var_6] ) )
        {
            self.brcircleradialedgespawn = 1;

            if ( var_6 > var_4 && isdefined( var_2.right_control[var_6] ) )
            {
                level thread scripts\mp\gametypes\br_quest_util.gsc::_id_1313A( self.origin, "dom" );
                train_collision_item_valid( var_2.right_control[var_6], var_0 );
            }
        }
        else if ( var_6 <= 0 )
        {
            var_0._id_12874--;
            var_0.get_random_primary_weapon_obj = var_0._id_12875[var_0._id_12874].points.size - 2;
            return 0;
        }
        else if ( var_6 >= var_3 )
        {
            var_0._id_12874++;
            var_0.get_random_primary_weapon_obj = 0;
            return 1;
        }

        var_4 = var_6;
    }
}

_id_132B0( var_0 )
{
    if ( !isdefined( self.isgroundwardom ) )
        return 0;

    return self.isgroundwardom.numtouching[var_0];
}

zombiejumpbartext( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    foreach ( var_2 in level.completesmokinggunquest.paths )
    {
        if ( isdefined( var_2.trigger ) && var_0 istouching( var_2.trigger ) )
            return 1;
    }

    return 0;
}

_id_12D45()
{
    level endon( "game_ended" );
    level notify( "trackPlayersPerPath" );
    level endon( "trackPlayersPerPath" );

    foreach ( var_1 in level.completesmokinggunquest.paths )
        var_1.numplayers = [];

    var_3 = game["attackers"];

    for (;;)
    {
        foreach ( var_1 in level.completesmokinggunquest.paths )
            var_1.numplayers[var_3] = 0;

        foreach ( var_7 in level.players )
        {
            if ( !isdefined( var_7 ) || !isalive( var_7 ) || var_7.team != var_3 )
                continue;

            var_8 = var_7 wheelson_fire_thermite();
            var_9 = var_7 wheelson_molotov_damage_over_time();

            if ( isdefined( var_8 ) && var_9 > gettime() )
            {
                var_8.numplayers[var_3]++;
                continue;
            }

            var_10 = var_7 weapon_xp_iw8_sn_delta();

            if ( isdefined( var_10 ) )
            {
                var_10.numplayers[var_3]++;
                var_7 _id_119B9( var_10 );
                var_7 _id_119A9();
            }
        }

        var_3 = needs_radar( var_3 );
        waitframe();
    }
}

weapon_xp_iw8_sn_delta()
{
    var_0 = undefined;
    var_1 = undefined;

    if ( !isdefined( self.flagattachradar ) || self.flagattachradar.size == 0 )
        return;

    foreach ( var_3 in level.completesmokinggunquest.paths )
    {
        var_4 = self.flagattachradar[var_3.label];
        var_5 = var_3.nodes[var_4];
        var_6 = distance2dsquared( var_5.origin, self.origin );
        var_7 = var_4;
        var_8 = var_6;
        var_9 = var_6;

        for ( var_10 = var_4 + 1; var_10 < var_3.nodes.size; var_10++ )
        {
            var_11 = var_3.nodes[var_10];
            var_12 = distance2dsquared( var_11.origin, self.origin );

            if ( var_12 < var_8 )
            {
                var_7 = var_10;
                var_8 = var_12;
            }

            if ( var_12 > var_9 )
                break;

            var_9 = var_12;
        }

        for ( var_10 = var_4 - 1; var_10 >= 0; var_10-- )
        {
            var_11 = var_3.nodes[var_10];
            var_12 = distance2dsquared( var_11.origin, self.origin );

            if ( var_12 < var_8 )
            {
                var_7 = var_10;
                var_8 = var_12;
            }

            if ( var_12 > var_9 )
                break;

            var_9 = var_12;
        }

        self.flagattachradar[var_3.label] = var_7;

        if ( !isdefined( var_0 ) || var_8 < var_1 )
        {
            var_0 = var_3;
            var_1 = var_8;
        }
    }

    return var_0;
}

_id_119A9()
{
    var_0 = 3500;

    if ( getdvarint( "scr_br_payload_oob_far", 0 ) == 0 )
        return;

    if ( !scripts\mp\flags::gameflag( "infil_complete" ) )
        return;

    var_1 = wheelson_fire_thermite();
    var_2 = self.flagattachradar[var_1.label];
    var_3 = var_1.nodes[var_2];
    var_4 = undefined;
    var_5 = undefined;
    var_6 = undefined;

    if ( var_2 + 1 >= var_1.nodes.size )
    {
        var_6 = var_2 - 1;
        var_4 = pointonsegmentnearesttopoint( var_1.nodes[var_2].origin, var_1.nodes[var_6].origin, self.origin );
    }
    else if ( var_2 - 1 < 0 )
    {
        var_6 = var_2 + 1;
        var_4 = pointonsegmentnearesttopoint( var_1.nodes[var_2].origin, var_1.nodes[var_6].origin, self.origin );
    }
    else
    {
        var_7 = pointonsegmentnearesttopoint( var_1.nodes[var_2].origin, var_1.nodes[var_2 + 1].origin, self.origin );
        var_8 = pointonsegmentnearesttopoint( var_1.nodes[var_2].origin, var_1.nodes[var_2 - 1].origin, self.origin );
        var_9 = distance2dsquared( self.origin, var_7 );
        var_10 = distance2dsquared( self.origin, var_8 );

        if ( var_10 < var_9 )
        {
            var_4 = var_8;
            var_5 = var_10;
            var_6 = var_2 - 1;
        }
        else
        {
            var_4 = var_7;
            var_5 = var_9;
            var_6 = var_2 + 1;
        }
    }

    if ( !isdefined( var_5 ) )
        var_5 = distance2dsquared( self.origin, var_4 );

    var_11 = getdvarint( "scr_br_payload_max_dist_away", var_0 );
    var_12 = var_11 * var_11;
    var_13 = 0;

    if ( var_5 > var_12 )
        var_13 = 1;

    if ( var_13 && !isdefined( self.vehicle_dismount_watcher ) )
    {
        var_14 = needs_radar( self.team );
        self.vehicle_dismount_watcher = scripts\mp\utility\outline::outlineenableforteam( self, var_14, "outline_nodepth_red", "level_script" );
    }
    else if ( !var_13 && isdefined( self.vehicle_dismount_watcher ) )
    {
        scripts\mp\utility\outline::outlinedisable( self.vehicle_dismount_watcher, self );
        self.vehicle_dismount_watcher = undefined;
    }
}

weapon_xp_iw8_sn_crossbow()
{
    self endon( "endOOBFar" );
    self endon( "disconnect" );
    self waittill( "death" );
    self.vehicle_dismount_watcher = undefined;
}

register_vehicle_as_ambient()
{
    if ( !istrue( level.completesmokinggunquest.phoneisnotringing ) )
        return;

    if ( level.mapname == "mp_br_mechanics" )
        scripts\mp\gametypes\br_payload_spawns_mp_br_mechanics.gsc::initspawns();
    else if ( level.mapname == "mp_don4" )
        scripts\mp\gametypes\br_payload_spawns_mp_don4.gsc::initspawns();

    if ( level.completesmokinggunquest._id_12815[game["attackers"]].size == 0 || level.completesmokinggunquest._id_12815[game["defenders"]].size == 0 )
        level.completesmokinggunquest.phoneisnotringing = 0;

    if ( level.completesmokinggunquest.phoneisnotringing )
    {
        _id_12471( game["attackers"] );
        _id_12471( game["defenders"] );
    }
}

lastdeathheadiconforenemy( var_0 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, 0, 0 );

    var_1 = var_0.radius + 50;
    var_2 = anglestoforward( var_0.angles );
    var_0.light_target_update = var_0.origin + var_2 * var_1;
}

_id_12471( var_0 )
{
    var_1 = level.completesmokinggunquest._id_12815[var_0];

    foreach ( var_3 in var_1 )
    {
        lastapproachinstruct( var_3 );
        lastdeathheadiconforenemy( var_3 );
    }

    if ( isdefined( level.completesmokinggunquest._id_129DF ) )
    {
        var_1 = level.completesmokinggunquest._id_129DF[var_0];

        foreach ( var_3 in var_1 )
        {
            lastapproachinstruct( var_3 );
            lastdeathheadiconforenemy( var_3 );
        }
    }
}

lastapproachinstruct( var_0 )
{
    var_0.flagattachradar = [];

    foreach ( var_2 in level.completesmokinggunquest.paths )
    {
        var_3 = undefined;
        var_4 = undefined;
        var_5 = undefined;

        for ( var_6 = 0; var_6 < var_2.nodes.size; var_6++ )
        {
            var_7 = var_2.nodes[var_6];
            var_8 = distance2dsquared( var_7.origin, var_0.origin );

            if ( !isdefined( var_3 ) || var_8 < var_4 )
            {
                var_3 = var_6;
                var_4 = var_8;
            }

            if ( !isdefined( var_5 ) )
            {
                var_5 = var_8;
                continue;
            }

            if ( var_8 > var_5 )
                break;
        }

        var_0.flagattachradar[var_2.label] = var_3;
    }
}

_id_1354F( var_0 )
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "infil_complete" );
    level.teamdata[var_0]["nextRespawn"] = 0;

    if ( level.teamdata[var_0]["respawnDelay"] == 0 )
        return;

    for (;;)
    {
        level.teamdata[var_0]["nextRespawn"] = gettime() + level.teamdata[var_0]["respawnDelay"] * 1000;
        wait( level.teamdata[var_0]["respawnDelay"] );
    }
}

onteamleadgained( var_0, var_1 )
{
    if ( level.teamdata[var_0]["respawnDelay"] == 0 )
        return 0;

    if ( !isdefined( var_1 ) )
        var_1 = level.teamdata[var_0]["nextRespawn"];

    var_2 = max( var_1 - gettime(), 0 );
    var_3 = int( var_2 / 1000 );
    return var_3;
}

create_script_wait_for_flags( var_0 )
{
    if ( scripts\mp\flags::gameflag( "prematch_done" ) && istrue( level.completesmokinggunquest._id_11F5A ) )
        _id_119E9();

    return 1;
}

playerrespawn( var_0, var_1 )
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) || !istrue( self.br_infilstarted ) || isdefined( self.cameraent ) )
        return 0;

    thread _id_119D2( var_0 );
    return 1;
}

_id_119D2( var_0 )
{
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( !istrue( level.choppergunner_watchexplosioninfluencepoint ) )
        self.class = scripts\mp\gametypes\br.gsc::viphud_hidefromplayer();

    var_1 = level.teamdata[self.team]["nextRespawn"];
    var_2 = scripts\mp\utility\teams::getteamdata( self.team, "teamCount" );

    if ( var_2 > 1 && !ropeguy() )
        thread scripts\mp\gametypes\br_spectate.gsc::spawnspectator( var_0, undefined, 1 );

    fine_drop_pos();

    if ( ropeguy() )
        level waittill( "forever" );

    self.waitingtospawn = 1;
    createhudtimer( 0, var_1 );
    self.waitingtospawn = 0;
    thread scripts\mp\playerlogic::spawnplayer( undefined, 0 );
    self freezecontrols( 1 );

    if ( !istrue( level.skipprematchdropspawn ) )
        thread weapon_xp_iw8_lm_kilo121();

    while ( !isalive( self ) )
        waitframe();

    waitframe();
    weapon_xp_iw8_sn_golf28();
    scripts\mp\utility\outline::outlineenableforteam( self, self.team, "outline_depth_payload", "level_script" );
    var_3 = !self isplayerheadless();
    var_4 = gettime();

    if ( var_3 )
    {
        while ( isalive( self ) && isdefined( self.weaponlist ) && !self hasloadedviewweapons( self.weaponlist ) )
        {
            if ( var_4 + 3000 < gettime() )
                break;

            waitframe();
        }
    }

    self notify( "brWaitAndSpawnClientComplete" );
    self.waitingtospawn = 0;
    self freezecontrols( 0 );
    scripts\mp\gametypes\br.gsc::_id_12FD8( self );
    scripts\mp\damage::resetplayervariables();
}

weapon_xp_iw8_sn_golf28()
{
    if ( getdvarint( "scr_br_payload_last_stand", 0 ) != 0 )
        scripts\mp\gametypes\br.gsc::parachute_get_path( self );

    scripts\mp\gametypes\br_armor.gsc::participantplunder( 1 );
    wavesv_finite_ending();
    scripts\mp\gametypes\br_public.gsc::weapon_xp_iw8_ar_kilo433();
    thread _id_119DA();
    thread _id_119DB();
    self.setplayermostwantedextrainfo = undefined;
}

_id_1281E( var_0 )
{
    self endon( "disconnect" );
    self notify( "reset_timer" );
    waitframe();
    self setclientomnvar( "ui_privateevent_timer_type", 3 );
    var_1 = var_0;
    var_2 = gettime() + var_1 * 1000;
    self setclientomnvar( "ui_privateevent_timer", var_2 );
    scripts\engine\utility::_id_13404( var_0, "reset_timer", "death" );
    self setclientomnvar( "ui_privateevent_timer_type", 0 );
}

_id_119DA()
{
    self endon( "disconnect" );

    if ( !isdefined( self.setplayermostwantedextrainfo ) )
        return;

    if ( getdvarint( "scr_br_payload_spawn_speed", 1 ) == 0 )
        return;

    if ( isbot( self ) )
        return;

    if ( self.team == game["defenders"] )
        return;

    var_0 = self.setplayermostwantedextrainfo;

    if ( isplayer( var_0 ) || istrue( var_0.balloon_deposit ) )
        return;

    var_1 = var_0;

    if ( distsqtodefenderflagstart( var_1 ) )
    {
        while ( isalive( self ) && !self isonground() )
            waitframe();
    }

    if ( !isalive( self ) )
        return;

    var_2 = 0;
    var_3 = getdvarint( "scr_br_payload_spawn_speed_time", 0 );

    if ( var_3 == 0 )
    {
        var_4 = getdvarint( "scr_br_payload_spawn_speed_boost", 290 );
        var_5 = var_1.vehicle;
        var_6 = distance( self.origin, var_5.origin );
        var_3 = var_6 / var_4 - getdvarfloat( "scr_br_payload_spawn_speed_boost_adj", 5 );

        if ( var_3 < 0 )
            var_3 = 0;
    }

    var_7 = getdvarfloat( "scr_br_payload_speed_mult", 0.4 );
    thread _id_1281E( var_3 );
    var_8 = self.fastcrouchspeedmod;
    self.fastcrouchspeedmod = var_7;
    scripts\mp\weapons::updatemovespeedscale();
    self lerpfovbypreset( "zombiedefault" );

    if ( !scripts\mp\gametypes\br_public.gsc::player_name_who_broke_stealth() )
    {
        scripts\mp\utility\perk::giveperk( "specialty_sprintmelee" );
        scripts\mp\utility\perk::giveperk( "specialty_sprintads" );
        scripts\mp\utility\perk::giveperk( "specialty_marathon" );
    }

    while ( isalive( self ) && var_2 < var_3 )
    {
        if ( self issupersprinting() )
            self refreshsprinttime();

        wait 0.1;
        var_2 = var_2 + 0.1;
    }

    if ( !scripts\mp\gametypes\br_public.gsc::player_name_who_broke_stealth() )
    {
        _id_120DF( "specialty_sprintmelee" );
        _id_120DF( "specialty_sprintads" );
        _id_120DF( "specialty_marathon" );
    }

    self.fastcrouchspeedmod = var_8;
    scripts\mp\weapons::updatemovespeedscale();
    self lerpfovbypreset( "default_2seconds" );
}

_id_120DF( var_0 )
{
    if ( scripts\mp\utility\perk::_hasperk( var_0 ) )
        scripts\mp\utility\perk::removeperk( var_0 );
}

_id_119C4()
{
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    self endon( "disconnect" );
    var_0 = self.vehicle_collision_takedamage;

    if ( isbot( self ) )
    {
        if ( !isdefined( var_0 ) )
        {
            var_0 = obj_id( "A" );
            _id_119B9( var_0 );
        }

        return var_0;
    }

    if ( getdvarint( "debug_gsc_spawn_choice_enabled", 0 ) == 1 )
    {
        var_1 = scripts\mp\hud_util::createicon( "progress_bar_fill", 400, 35 );
        var_1.sort = 0;
        var_1.color = mp_shipment_patch( "lightblue" );
        var_1.archived = 0;
        var_1.alpha = 0.5;
        var_2 = [];
        var_3 = obj_id( "A" );
        var_4 = undefined;
        var_5 = undefined;

        if ( isdefined( var_3 ) )
        {
            var_4 = scripts\mp\hud_util::createfontstring( "default", 2.0 );
            var_4.archived = 0;
            var_4.label = &"BR_PAYLOAD/SPAWN_A";
            var_4.path = var_3;
            var_4 thread plunderrepositoryrestricted( self, var_3 );

            if ( isdefined( var_0 ) && !isplayer( var_0 ) && var_3 == var_0 )
                var_1.enemygunship_getshotgoal = var_4;

            var_2[var_2.size] = var_4;

            if ( level.completesmokinggunquest._id_12791 && self.team == game["attackers"] )
            {
                var_5 = scripts\mp\hud_util::createfontstring( "default", 2.0 );
                var_5.archived = 0;
                var_5.label = &"BR_PAYLOAD/SPAWN_B_AIR";
                var_5.path = var_3._id_127AC;

                if ( isdefined( var_0 ) && !isplayer( var_0 ) && var_3._id_127AC == var_0 )
                    var_1.enemygunship_getshotgoal = var_5;

                var_2[var_2.size] = var_5;
            }
        }

        var_6 = obj_id( "B" );
        var_7 = undefined;
        var_8 = undefined;

        if ( isdefined( var_6 ) )
        {
            var_7 = scripts\mp\hud_util::createfontstring( "default", 2.0 );
            var_7.archived = 0;
            var_7.label = &"BR_PAYLOAD/SPAWN_B";
            var_7.path = var_6;
            var_7 thread plunderrepositoryrestricted( self, var_6 );

            if ( isdefined( var_0 ) && !isplayer( var_0 ) && var_6 == var_0 )
                var_1.enemygunship_getshotgoal = var_7;

            var_2[var_2.size] = var_7;

            if ( level.completesmokinggunquest._id_12791 && self.team == game["attackers"] )
            {
                var_8 = scripts\mp\hud_util::createfontstring( "default", 2.0 );
                var_8.archived = 0;
                var_8.label = &"BR_PAYLOAD/SPAWN_B_AIR";
                var_8.path = var_6._id_127AC;

                if ( isdefined( var_0 ) && !isplayer( var_0 ) && var_6._id_127AC == var_0 )
                    var_1.enemygunship_getshotgoal = var_8;

                var_2[var_2.size] = var_8;
            }
        }

        var_9 = [];

        if ( level.completesmokinggunquest._id_128BC )
        {
            var_10 = scripts\mp\gametypes\br_public.gsc::ondefuse( self.team, self.squadindex );

            foreach ( var_12 in var_10 )
            {
                if ( var_12 == self )
                    continue;

                var_13 = scripts\mp\hud_util::createfontstring( "default", 1.5 );
                var_13.archived = 0;
                var_13 setplayernamestring( var_12 );
                var_13.player = var_12;
                var_13._id_11B5B = scripts\mp\hud_util::createfontstring( "default", 1.5 );
                var_13._id_11B5B.archived = 0;
                var_9[var_9.size] = var_13;
            }
        }

        if ( !isdefined( var_1.enemygunship_getshotgoal ) )
            var_1.enemygunship_getshotgoal = var_2[0];

        var_15 = undefined;
        scripts\mp\utility\player::_freezecontrols( 0, 1, "payload_choice" );
        var_16 = 250;
        var_17 = 300;
        var_18 = undefined;
        var_19 = undefined;
        var_20 = undefined;

        while ( !isdefined( var_15 ) )
        {
            var_21 = _id_1267F( var_2, var_9 );
            var_22 = self getnormalizedmovement();
            var_23 = var_22[0] > 0;
            var_24 = var_22[0] < 0;

            if ( isdefined( var_19 ) )
            {
                if ( gettime() >= var_19 || !var_23 && !var_24 )
                    var_19 = undefined;
            }
            else if ( var_23 )
                var_20 = -1;
            else if ( var_24 )
                var_20 = 1;

            for ( var_25 = 0; var_25 < var_21.size; var_25++ )
            {
                var_26 = var_21[var_25];

                if ( var_1.enemygunship_getshotgoal == var_26 )
                {
                    if ( !isdefined( var_26.path ) && !isdefined( var_26.player ) )
                    {
                        var_1.enemygunship_getshotgoal = var_2[0];
                        var_27 = undefined;
                        var_28 = undefined;
                        var_18 = undefined;
                        var_20 = undefined;
                    }
                    else if ( isdefined( var_20 ) )
                    {
                        var_29 = var_25 + var_20;

                        if ( var_29 < 0 )
                            var_29 = var_21.size - 1;
                        else if ( var_29 >= var_21.size )
                            var_29 = 0;

                        var_30 = var_21[var_29];
                        var_1.enemygunship_getshotgoal = var_30;
                        var_1 scripts\mp\hud_util::setpoint( "CENTER", "CENTER", 0, var_30.yoffset );
                        var_20 = undefined;
                        var_27 = undefined;
                        var_28 = undefined;
                        var_19 = gettime() + var_17;
                    }
                    else
                        var_1 scripts\mp\hud_util::setpoint( "CENTER", "CENTER", 0, var_26.yoffset );

                    break;
                }
            }

            _id_13086( var_2, var_9, var_1 );
            _id_12B14( var_1.enemygunship_getshotgoal.path );
            var_20 = undefined;

            if ( self usebuttonpressed() )
            {
                if ( isdefined( var_18 ) && gettime() >= var_18 )
                {
                    var_31 = var_1.enemygunship_getshotgoal;

                    if ( isdefined( var_31.path ) && !istrue( var_31.path.forcegivekillstreak ) )
                        var_15 = var_31.path;
                    else if ( isdefined( var_31.player ) && isalive( var_31.player ) && !issquadmateindanger( var_31.player ) )
                        var_15 = var_31.player;
                }
                else if ( !isdefined( var_18 ) )
                    var_18 = gettime() + var_16;
            }
            else
                var_18 = undefined;

            waitframe();
        }

        self notify( "spawnChoice" );
        var_1 destroy();

        foreach ( var_33 in var_2 )
            var_33 destroy();

        foreach ( var_33 in var_9 )
        {
            var_33._id_11B5B destroy();
            var_33 destroy();
        }

        return var_15;
    }
    else
    {
        if ( istrue( level.completesmokinggunquest._id_11F5A ) )
            thread startspectatorview();

        var_15 = undefined;

        while ( !isdefined( var_15 ) )
        {
            var_3 = obj_id( "A" );
            thread _id_127AD( self, var_3 );
            var_6 = obj_id( "B" );
            thread _id_127AD( self, var_6 );
            self waittill( "luinotifyserver", var_37, var_38 );

            if ( var_37 == "spawn_choice_path" )
            {
                if ( 0 == var_38 )
                    var_0 = obj_id( "A" );
                else
                    var_0 = obj_id( "B" );

                var_15 = var_0;
                _id_123A4( 0 );
            }
            else if ( var_37 == "spawn_hover_path" )
            {
                if ( 0 == var_38 )
                    var_0 = obj_id( "A" );
                else
                    var_0 = obj_id( "B" );

                thread lightsfx( var_0 );
            }
            else if ( var_37 == "spawn_choice_player" )
            {
                var_15 = scripts\mp\playerlogic::getplayerfromclientnum( var_38 );
                _id_123A4( 0 );
            }

            if ( isdefined( var_15 ) )
            {
                self notify( "spawnChoice" );
                return var_15;
            }
        }
    }
}

lightsfx( var_0 )
{
    self notify( "followTrackCamThink" );
    self endon( "followTrackCamThink" );
    self endon( "spawnChoice" );

    if ( !isdefined( var_0 ) )
        return;

    var_1 = scripts\mp\gametypes\br.gsc::get_int_or_0( self.lightsreset ) - gettime();

    if ( var_1 > 0 )
        wait( var_1 );

    self.lightsreset = gettime() + 250;
    _id_12B14( var_0 );
}

_id_1267F( var_0, var_1 )
{
    var_2 = -60;
    var_3 = 30;
    var_4 = var_2;
    var_5 = [];

    foreach ( var_7 in var_0 )
    {
        var_7 scripts\mp\hud_util::setpoint( "CENTER", "CENTER", 0, var_4 );
        var_5[var_5.size] = var_7;
        var_4 = var_4 + var_3;

        foreach ( var_9 in var_1 )
        {
            if ( !isdefined( var_9.player ) )
                continue;

            var_10 = var_9.player wheelson_fire_thermite();

            if ( var_10 == var_7.path )
            {
                var_9 scripts\mp\hud_util::setpoint( "LEFT", "CENTER", 0, var_4 );
                var_9._id_11B5B scripts\mp\hud_util::setpoint( "RIGHT", "CENTER", 0, var_4 );
                var_5[var_5.size] = var_9;
                var_4 = var_4 + var_3;
            }
        }
    }

    return var_5;
}

_id_13086( var_0, var_1, var_2 )
{
    var_3 = -60;
    var_4 = 30;
    var_5 = 0;

    foreach ( var_7 in var_1 )
    {
        if ( !isdefined( var_7.player ) )
        {
            var_7.alpha = 0;
            var_7._id_11B5B.alpha = 0;
            continue;
        }

        if ( !isalive( var_7.player ) )
        {
            var_7.color = ( 1, 0, 0 );
            var_7._id_11B5B.color = ( 1, 0, 0 );
            var_7._id_11B5B.label = &"BR_PAYLOAD/SPAWN_DEAD";
            continue;
        }

        if ( issquadmateindanger( var_7.player ) )
        {
            var_7.color = ( 1, 0, 0 );
            var_7._id_11B5B.color = ( 1, 0, 0 );
            var_7._id_11B5B.label = &"BR_PAYLOAD/SPAWN_COMBAT";
            continue;
        }

        var_7.color = ( 0, 1, 1 );
        var_7._id_11B5B.color = ( 1, 1, 1 );

        if ( var_2.enemygunship_getshotgoal == var_7 )
        {
            var_7._id_11B5B.label = &"BR_PAYLOAD/SPAWN_VALID_HOLD";
            var_5 = 1;
            continue;
        }

        var_7._id_11B5B.label = &"BR_PAYLOAD/SPAWN_VALID";
    }

    foreach ( var_10 in var_0 )
    {
        var_11 = !istrue( var_10.path.forcegivekillstreak );

        if ( !var_11 )
            var_10.color = ( 1, 0, 0 );

        if ( istrue( var_10.path.balloon_deposit ) && var_10.path.path.label == "A" )
        {
            if ( var_2.enemygunship_getshotgoal == var_10 && var_11 )
                var_10.label = &"BR_PAYLOAD/SPAWN_A_AIR_HOLD";
            else
                var_10.label = &"BR_PAYLOAD/SPAWN_A_AIR";

            continue;
        }

        if ( istrue( var_10.path.balloon_deposit ) && var_10.path.path.label == "B" )
        {
            if ( var_2.enemygunship_getshotgoal == var_10 && var_11 )
                var_10.label = &"BR_PAYLOAD/SPAWN_B_AIR_HOLD";
            else
                var_10.label = &"BR_PAYLOAD/SPAWN_B_AIR";

            continue;
        }

        if ( var_10.path.label == "A" )
        {
            if ( var_2.enemygunship_getshotgoal == var_10 && var_11 )
                var_10.label = &"BR_PAYLOAD/SPAWN_A_HOLD";
            else
                var_10.label = &"BR_PAYLOAD/SPAWN_A";

            continue;
        }

        if ( var_10.path.label == "B" )
        {
            if ( var_2.enemygunship_getshotgoal == var_10 && var_11 )
            {
                var_10.label = &"BR_PAYLOAD/SPAWN_B_HOLD";
                continue;
            }

            var_10.label = &"BR_PAYLOAD/SPAWN_B";
        }
    }
}

issquadmateindanger( var_0 )
{
    var_1 = 5000;
    var_2 = 3000;
    var_3 = 450;
    var_4 = 200;
    var_5 = gettime();

    if ( isdefined( var_0 ) && ( isdefined( var_0.lastdamagetime ) && var_0.lastdamagetime + var_1 > var_5 ) || isdefined( var_0.lasttimedamaged ) && var_0.lasttimedamaged + var_1 > var_5 )
        return 1;

    if ( var_0 isonladder() )
        return 1;

    var_0 scripts\mp\battlechatter_mp::validaterecentattackers();

    if ( isdefined( var_0.recentattackers ) && var_0.recentattackers.size > 0 )
        return 1;

    if ( isdefined( var_0.setup_jugg_maze_kill_trigger ) && var_0.setup_jugg_maze_kill_trigger + var_2 > var_5 )
        return 1;

    if ( isdefined( var_0.setup_jugg_maze_kill_trigger ) && isdefined( var_0.setup_intel ) && var_0.setup_jugg_maze_kill_trigger > var_0.setup_intel || isdefined( var_0.setup_jugg_maze_kill_trigger ) && !isdefined( var_0.setup_intel ) )
        return 1;

    var_6 = var_0 getclosestenemy( var_3, var_4, 1 );

    if ( isdefined( var_6 ) )
        return 1;

    if ( isdefined( var_0.vehicle ) )
        return 1;

    if ( var_0 scripts\mp\outofbounds::istouchingoobtrigger() )
        return 1;

    var_7 = var_0 wheelson_fire_thermite();

    if ( isdefined( var_7 ) )
    {
        var_8 = var_7.vehicle;

        if ( var_0 istouching( var_7.trigger ) && var_8.status == "contested" )
            return 1;
    }

    if ( !var_0 isonground() )
    {
        var_9 = scripts\mp\gametypes\br_public.gsc::init_season3_intel_challenges( var_0.origin, 0, -200 );

        if ( var_9["fraction"] == 1 )
            return 1;
    }

    return 0;
}

obj_id( var_0 )
{
    foreach ( var_2 in level.completesmokinggunquest.paths )
    {
        if ( var_2.label == var_0 )
            return var_2;
    }

    return undefined;
}

obj_a_covers( var_0 )
{
    foreach ( var_2 in level.completesmokinggunquest.paths )
    {
        if ( var_0 != var_2 )
            return var_2;
    }

    return undefined;
}

vehicle_collision_handlemultievent( var_0 )
{
    var_1 = obj_a_covers( var_0 );

    if ( var_1.enemy_ai_enter_alert_due_to_grenade_explode + 1 < var_0.enemy_ai_enter_alert_due_to_grenade_explode )
    {
        foreach ( var_3 in level.players )
        {
            if ( !isalive( var_3 ) )
                continue;

            var_4 = var_3 wheelson_fire_thermite();

            if ( var_4 == var_0 && !isdefined( var_3.vehicle_is_ambient ) )
                var_3 thread x1opsrespawnselection( var_1 );
        }
    }
}

x1opsrespawnselection( var_0 )
{
    var_1 = level.completesmokinggunquest.vehicle_collision_handlemultievent;
    var_2 = gettime() + var_1 * 1000;
    scripts\mp\utility\lower_message::_id_12394( "br_payload_redeploy", var_2, var_1 );
    wait( var_1 );
    x1opspreplayertransition( var_0 );
}

x1opspreplayertransition( var_0 )
{
    var_1 = "ui_br_open_purchase_killstreak";
    var_2 = 0;
    var_3 = "ui_br_purchase_killstreak_response";
    var_4 = 1;
    self setclientomnvar( var_3, var_4 );
    self setclientomnvar( var_1, var_2 );
    scripts\cp_mp\utility\player_utility::_freezecontrols( 1, undefined, "kiosk" );
    var_5 = var_0;

    if ( !isdefined( var_5 ) )
        var_5 = _id_119C4();

    if ( isplayer( var_5 ) )
        var_6 = var_5 wheelson_fire_thermite();
    else if ( istrue( var_5.balloon_deposit ) )
        var_6 = var_5.path;
    else
        var_6 = var_5;

    self.setplayermostwantedextrainfo = var_5;
    _id_119B9( var_6 );

    if ( isdefined( self ) )
    {
        var_7 = whistlestarttimer( var_5 );
        self notify( "_watchToAutoCloseMenu_end" );
        _id_1197D( var_7 );
        scripts\cp_mp\utility\player_utility::_freezecontrols( 0, 1, "kiosk" );
        return 1;
    }
    else
        return 0;
}

_id_1197D( var_0 )
{
    var_1 = self;
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    var_1 endon( "disconnect" );
    var_2 = var_1 scripts\mp\gametypes\br_gulag.gsc::_id_11977( var_0 );
    var_3 = 1.0;
    scripts\mp\gametypes\br.gsc::current_respawn_point_override( var_0.origin[0], var_0.origin[1], level.give_player_grenade_on_respawn );
    self setclientomnvar( "ui_br_transition_type", 2 );
    var_1 playerhide();
    wait( var_3 );
    scripts\mp\gametypes\br_public.gsc::_id_11981();
    var_1 scripts\mp\gametypes\br_gulag.gsc::_id_119F1( var_0.origin, var_0.angles );
    scripts\cp_mp\utility\player_utility::_freezecontrols( 1, undefined, "redeploy" );
    waitframe();
    var_1 scripts\mp\gametypes\br_public.gsc::_id_11A13();
    var_1 scripts\mp\gametypes\br_public.gsc::weapon_xp_iw8_ar_kilo433();
    scripts\cp_mp\utility\player_utility::_freezecontrols( 0, 1, "redeploy" );
    var_1 playershow();
    var_1 setclientomnvar( "ui_br_transition_type", 0 );
    var_1 setclientomnvar( "ui_show_spectateHud", -1 );

    if ( self.team == game["attackers"] && level.completesmokinggunquest._id_12792 > -1 )
        thread weapon_xp_iw8_lm_kilo121();

    weapon_xp_iw8_sn_golf28();
}

plunderrepositoryrestricted( var_0, var_1 )
{
    level endon( "game_ended" );
    var_0 endon( "spawnChoice" );
    var_0 endon( "disconnect" );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = -1;

    for (;;)
    {
        if ( var_2 != var_1.numplayers[var_0.team] )
        {
            self setvalue( var_1.numplayers[var_0.team] );
            var_2 = var_1.numplayers[var_0.team];
            _id_123AB( var_1.script_index, var_1.numplayers[var_0.team] );
        }

        waitframe();
    }
}

_id_127AD( var_0, var_1 )
{
    level endon( "game_ended" );
    var_0 endon( "spawnChoice" );
    var_0 endon( "disconnect" );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = -1;

    for (;;)
    {
        if ( var_2 != var_1.numplayers[var_0.team] )
        {
            var_2 = var_1.numplayers[var_0.team];
            _id_123AB( var_1.script_index, var_1.numplayers[var_0.team] );
        }

        waitframe();
    }
}

weapon_xp_iw8_lm_kilo121()
{
    self endon( "disconnect" );
    self endon( "payload_remove_spawn_protection_flying" );

    while ( self.sessionstate != "playing" )
        waitframe();

    thread scripts\cp_mp\parachute::startfreefall( 0, 1, undefined, undefined, 1, 0 );
    self skydive_deployparachute();

    if ( scripts\mp\flags::gameflag( "prematch_done" ) && level.completesmokinggunquest._id_12794 )
    {
        self.vehicle_isenemytoteam = 1;
        thread _id_119D7();
        var_0 = gettime() + level.completesmokinggunquest._id_12794 * 1000;

        while ( !self isonground() && self playerads() < 0.5 && gettime() < var_0 )
            waitframe();

        self.vehicle_isenemytoteam = undefined;
        self notify( "payload_remove_spawn_protection_flying" );
    }
}

_id_119D7()
{
    self endon( "death_or_disconnect" );
    self endon( "payload_remove_spawn_protection_flying" );
    self waittill( "weapon_fired" );
    self.vehicle_isenemytoteam = undefined;
    self notify( "payload_remove_spawn_protection_flying" );
}

createextractionlocation()
{
    scripts\mp\gametypes\br.gsc::onspawnplayer();

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        scripts\mp\gametypes\br_armor.gsc::participantplunder( 1 );
}

createinvalidcirclearea()
{
    self endon( "disconnect" );
    self waittill( "brWaitAndSpawnClientComplete" );
    self clearpredictedstreampos();
    self setclientomnvar( "ui_br_transition_type", 0 );

    if ( !istrue( game["switchedsides"] ) || scripts\mp\flags::gameflag( "infil_complete" ) )
        self setclientomnvar( "ui_br_extended_load_screen", 0 );
}

createhudtimer( var_0, var_1 )
{
    var_2 = 4.0;
    var_3 = 3.0;
    var_4 = var_2 + var_3;

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
    {
        scripts\mp\gametypes\br.gsc::createhudtimer( var_0 );
        return;
    }

    if ( self isplayerheadless() )
    {
        self setclientomnvar( "ui_br_extended_load_screen", 0 );
        return;
    }

    self clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 1 );

    if ( ropeguy() )
        level waittill( "forever" );

    thread createinvalidcirclearea();

    if ( !isdefined( self.registerhint ) )
    {
        if ( !isdefined( var_1 ) )
            var_1 = 0;

        var_5 = onteamleadgained( self.team, var_1 );
        var_6 = var_5 > 0;
        var_7 = undefined;
        var_8 = max( var_5 - var_4, 0 );

        if ( var_6 )
        {
            var_7 = var_5 * 1000;
            var_9 = scripts\mp\utility\teams::getteamdata( self.team, "teamCount" );

            if ( var_9 == 1 )
            {
                self setclientomnvar( "ui_show_spectateHud", self getentitynumber() );
                scripts\mp\gametypes\br_spectate.gsc::weapon_xp_iw8_ar_golf36();
                scripts\mp\gametypes\br.gsc::spawnintermission( self.origin + ( 0, 0, 100 ), self.angles );
                scripts\mp\spectating::setdisabled();
                scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_7 ) );
            }

            scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_7 ) );
            wait( var_8 );
        }

        var_10 = gettime();
        var_11 = _id_119C4();

        if ( isplayer( var_11 ) )
        {
            var_12 = var_11 wheelson_fire_thermite();
            var_11 thread scripts\mp\rank::giverankxp( "br_payload_squadmate_redeploy", 20 );
            var_11 thread scripts\mp\rank::scoreeventpopup( "br_payload_squadmate_redeploy" );
        }
        else if ( istrue( var_11.balloon_deposit ) )
            var_12 = var_11.path;
        else
            var_12 = var_11;

        if ( istrue( var_12.forcegivekillstreak ) )
        {
            var_12 = obj_a_covers( var_12 );
            var_11 = var_12;

            if ( istrue( var_12.forcegivekillstreak ) )
                level waittill( "forever" );
        }

        self.setplayermostwantedextrainfo = var_11;
        _id_119B9( var_12 );
        var_13 = ( gettime() - var_10 ) / 1000.0;
        _id_119EA( var_11, var_8, var_13, var_5, var_6, var_7 );
    }
    else
    {
        self.registerhint = undefined;
        scripts\mp\gametypes\br_public.gsc::_id_11A13();
    }

    scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    self freezecontrols( 0 );
}

_id_119EA( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    self notify( "playerStreamRespawn" );
    self endon( "playerStreamRespawn" );
    self.vehicle_is_ambient = 1;
    self._id_11B77 = whistlestarttimer( var_0 );

    if ( isdefined( self._id_11B77 ) )
        self._id_11B77.index = -1;

    var_6 = getdvarint( "scr_br_drop_prespawn_timeout_ms", 9000 );
    var_7 = self._id_11B77.origin;
    scripts\mp\gametypes\br_public.gsc::_id_119E7( var_7, var_6, 1, 0, var_5 );
    var_8 = 1.0;
    var_9 = 0.25;
    var_10 = var_8 - var_9;
    thread scripts\mp\gametypes\br_gulag.gsc::fadeoutin( var_8 );
    wait( var_10 );
    scripts\mp\gametypes\br_spectate.gsc::weapon_xp_iw8_ar_golf36();
    scripts\mp\gametypes\br.gsc::spawnintermission( var_7, self._id_11B77.angles );
    scripts\mp\spectating::setdisabled();
    scripts\mp\gametypes\br.gsc::current_respawn_point_override( var_7[0], var_7[1], level.give_player_grenade_on_respawn );
    self setclientomnvar( "ui_br_transition_type", 2 );
    wait( var_9 );

    if ( var_4 )
    {
        var_11 = max( var_3 - var_1 - var_2 - var_8, 0 );
        wait( var_11 );

        if ( self.vehicle_is_ambient > 1 )
            scripts\mp\gametypes\br_public.gsc::_id_11A13();
        else
            scripts\mp\gametypes\br_public.gsc::weapon_xp_iw8_ar_kilo433();
    }
    else
        scripts\mp\gametypes\br_public.gsc::_id_11A13();

    self setclientomnvar( "ui_show_spectateHud", -1 );
    self.vehicle_is_ambient = undefined;
}

tv_station_mindia_spawner_think()
{
    if ( istrue( game["switchedsides"] ) || scripts\mp\flags::gameflag( "infil_complete" ) )
    {
        var_0 = ondamagerelicvampire( self.team, self.squadindex );
        var_1 = level.completesmokinggunquest.paths[var_0];
        _id_119B9( var_1 );
        self._id_12809 = whistlestarttimer( var_1 );
        return self._id_12809;
    }
}

distsqtodefenderflagstart( var_0 )
{
    if ( level.completesmokinggunquest._id_12792 < 0 )
        return 0;

    if ( !isdefined( var_0.enemy_ai_enter_alert_due_to_grenade_explode ) )
        return 1;

    return var_0.enemy_ai_enter_alert_due_to_grenade_explode <= level.completesmokinggunquest._id_12792;
}

whistlestarttimer( var_0 )
{
    var_1 = var_0;

    if ( isplayer( var_0 ) )
        var_1 = var_0 wheelson_fire_thermite();
    else if ( istrue( var_0.balloon_deposit ) )
        var_1 = var_0.path;

    var_2 = self.team == game["attackers"] && distsqtodefenderflagstart( var_1 ) || istrue( var_0.balloon_deposit );

    if ( level.completesmokinggunquest.phoneisnotringing && !var_2 )
    {
        if ( isplayer( var_0 ) )
        {
            weapon_xp_iw8_ar_scharlie( var_0 );
            [var_4, var_5] = var_0 weaponstocycle( var_0.origin, var_0.angles );
        }
        else
            var_4 = weaponref( var_1 );

        if ( isdefined( var_4 ) )
            return var_4;
    }

    var_6 = var_1._id_12875[var_1._id_12874].points[var_1.get_random_primary_weapon_obj];

    if ( var_2 )
        [var_8, var_9] = whistling( var_1 );
    else if ( level.completesmokinggunquest._id_11CC2 )
        [var_8, var_9] = wheelson_remote_tank_think( var_1 );
    else
    {
        var_11 = var_1._id_12875[var_1._id_12874].points[var_1.get_random_primary_weapon_obj + 1];
        var_12 = vectornormalize( var_11 - var_6 );

        if ( self.team == game["defenders"] )
        {
            var_13 = level.completesmokinggunquest._id_127BE;
            var_9 = level.completesmokinggunquest._id_127E4;
            var_14 = level.completesmokinggunquest._id_1280F;
        }
        else
        {
            var_13 = level.completesmokinggunquest._id_127BD;
            var_9 = level.completesmokinggunquest._id_127E3;
            var_14 = level.completesmokinggunquest._id_1280E;
            var_12 = var_12 * -1;
        }

        var_15 = var_6 + var_12 * var_13;
        var_16 = ( 0, randomintrange( 0, 360 ), 0 );
        var_17 = randomfloat( var_14 );
        var_18 = anglestoforward( var_16 ) * -1;
        var_19 = var_18 * var_17;
        var_8 = var_15 + var_19;
    }

    if ( !scripts\mp\gametypes\br_circle.gsc::score_spawner_relative_to_objective( var_8, 0 ) )
    {
        var_8 = scripts\mp\gametypes\br_c130.gsc::_id_125F1( var_6, var_8 );
        var_20 = vectornormalize( var_6 - var_8 );
        var_8 = var_8 + var_20 * 100;
    }

    if ( level.completesmokinggunquest.processassist_regularcp )
    {
        var_21 = physics_createcontents( [ "physicscontents_playertrigger" ] );
        var_22 = scripts\engine\trace::ray_trace_ents( var_8, var_6, [ var_1.processassist_regularcp ], var_21 );

        if ( var_22["fraction"] < 1.0 )
            var_8 = var_22["position"];
    }

    var_8 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_8 );
    var_16 = vectortoangles( var_6 - var_8 );
    var_4 = spawnstruct();
    var_4.origin = var_8 + ( 0, 0, var_9 );
    var_4.angles = var_16;
    var_4.height = var_9;
    return var_4;
}

whistling( var_0 )
{
    var_1 = 21;
    var_2 = 11;
    var_3 = 50;
    var_4 = isdefined( level.completesmokinggunquest._id_129DF ) && isdefined( self.cameraent );
    var_5 = var_2;

    if ( var_4 )
        var_5 = var_1;

    var_6 = weaponref( var_0, 1, var_5 );
    var_7 = var_0.spawncount[self.team];
    var_8 = var_7 % 2 == 0;
    var_9 = int( var_7 / 2 );
    var_10 = var_9 * var_3;
    var_11 = var_6.origin;

    if ( var_8 )
    {
        var_12 = anglestoright( var_6.angles );
        var_11 = var_6.origin + var_12 * var_10;
    }
    else
    {
        var_13 = anglestoleft( var_6.angles );
        var_11 = var_6.origin + var_13 * var_10;
    }

    return [ ( var_11[0], var_11[1], 0 ), level.completesmokinggunquest._id_127E3 ];
}

wheelson_remote_tank_think( var_0 )
{
    var_1 = 20;
    var_2 = 1;
    var_3 = getdvarfloat( "scr_br_payload_spawn_degrees", var_1 );
    var_4 = getdvarfloat( "scr_br_payload_spawn_degrees", var_2 );
    var_5 = var_0._id_12875[var_0._id_12874].points[var_0.get_random_primary_weapon_obj];

    if ( !isdefined( var_0._id_12793 ) || var_0._id_12793 != var_0.get_random_primary_weapon_obj )
    {
        var_6 = var_0._id_12875[var_0._id_12874].points[var_0.get_random_primary_weapon_obj + 1];
        var_7 = vectornormalize( var_6 - var_5 );
        var_0._id_12793 = var_0.get_random_primary_weapon_obj;
        var_0._id_12833 = vectortoyaw( var_7 );
        var_0._id_12832 = vectortoyaw( -1 * var_7 );
        var_0._id_12835 = -1 * var_3;
        var_0._id_12834 = -1 * var_3;
    }

    if ( self.team == game["defenders"] )
    {
        var_8 = level.completesmokinggunquest._id_127BE;
        var_9 = level.completesmokinggunquest._id_127E4;
        var_10 = level.completesmokinggunquest._id_1280F;
        var_11 = var_0._id_12833 + var_0._id_12835;
        var_0._id_12835 = var_0._id_12835 + var_4;

        if ( var_0._id_12835 > var_3 )
            var_0._id_12835 = -1 * var_3;
    }
    else
    {
        var_8 = level.completesmokinggunquest._id_127BD;
        var_9 = level.completesmokinggunquest._id_127E3;
        var_10 = level.completesmokinggunquest._id_1280E;
        var_11 = var_0._id_12832 + var_0._id_12834;
        var_0._id_12834 = var_0._id_12834 + var_4;

        if ( var_0._id_12834 > var_3 )
            var_0._id_12834 = -1 * var_3;
    }

    var_12 = var_5[0] + var_8 * cos( var_11 );
    var_13 = var_5[1] + var_8 * sin( var_11 );
    return [ ( var_12, var_13, 0 ), var_9 ];
}

weaponref( var_0, var_1, var_2 )
{
    var_3 = self.team;
    var_4 = isdefined( level.completesmokinggunquest._id_129DF ) && isdefined( self.cameraent );

    if ( isdefined( var_0.enemy_ai_enter_alert_due_to_grenade_explode ) )
        var_5 = var_0.enemy_ai_enter_alert_due_to_grenade_explode;
    else
        var_5 = 0;

    var_6 = var_0.get_player_who_most_recently_threw_grenade;

    if ( !isdefined( var_0._id_12815[var_3] ) || var_5 != var_0._id_127AA[var_3] || !var_4 && istrue( var_0._id_129DE ) )
    {
        if ( var_4 )
        {
            var_0._id_12815[var_3] = scripts\engine\utility::array_randomize( nextscore( var_3, var_6 ) );
            var_0._id_129DE = 1;
        }
        else
        {
            var_0._id_12815[var_3] = scripts\engine\utility::array_randomize( nextplayertospectate( var_3, var_6, var_5 ) );
            var_0._id_129DE = 0;
        }

        if ( var_0._id_12815[var_3].size == 0 )
        {
            iprintlnbold( "Spawns not setup for this path" );
            return;
        }

        var_0._id_127E7[var_3] = randomint( var_0._id_12815[var_3].size );
        var_0.spawncount[var_3] = 0;
        var_0.spawntime[var_3] = gettime();
        var_0._id_127AA[var_3] = var_5;
    }

    if ( var_0._id_12815[var_3].size == 0 )
        iprintlnbold( "Spawns not setup for this path" );
    else
    {
        var_7 = var_0._id_127E7[var_3];
        var_8 = var_0._id_12815[var_3][var_7];

        if ( !isdefined( var_2 ) )
        {
            var_2 = level.completesmokinggunquest.phonehint;

            if ( isdefined( var_8.radius ) && var_8.radius < 200 )
                var_2 = var_2 / 2;
        }

        if ( var_0.spawntime[var_3] + 3000 < gettime() || var_0.spawncount[var_3] >= var_2 )
        {
            var_0.spawncount[var_3] = 0;
            var_0._id_127E7[var_3]++;

            if ( var_0._id_127E7[var_3] >= var_0._id_12815[var_3].size )
                var_0._id_127E7[var_3] = 0;

            var_7 = var_0._id_127E7[var_3];
            var_8 = var_0._id_12815[var_3][var_7];
        }

        if ( !isdefined( var_8.angles ) )
            var_8.angles = ( 0, 0, 0 );

        weapon_xp_iw8_ar_scharlie( var_8 );

        if ( istrue( var_1 ) )
        {
            var_0.spawntime[var_3] = gettime();
            var_0.spawncount[var_3] = var_0.spawncount[var_3] + 1;
            return var_8;
        }

        [var_10, var_11] = weaponstocycle( var_8.origin, var_8.angles, var_0.spawncount[var_3] );
        var_12 = var_8.light_target_update - var_10.origin;
        var_10.angles = vectortoangles( var_12 );
        var_0.spawntime[var_3] = gettime();
        var_0.spawncount[var_3] = var_11 + 1;
    }
}

weaponstocycle( var_0, var_1, var_2, var_3 )
{
    var_4 = 32;
    var_5 = 8;
    var_6 = 50;
    var_7 = 20;
    var_8 = 5;
    var_9 = -200;

    if ( !isdefined( var_2 ) )
        var_2 = 0;

    var_10 = scripts\engine\trace::create_contents( 1, 1, 1, 1, 0, 1, 1 );
    var_11 = isscriptabledefined() && getdvarint( "scr_br_payload_spawn_navmesh", 1 );
    var_12 = 0;
    var_13 = 0;
    var_14 = var_2;

    for (;;)
    {
        var_15 = nexthealthtiercalledout( var_0, var_1[1], var_14 );

        if ( var_11 && !ispointonnavmesh( var_15 ) )
            var_15 = getclosestpointonnavmesh( var_15 );

        var_16 = var_15 + ( 0, 0, var_7 );
        var_17 = var_15 + ( 0, 0, var_9 );
        var_18 = scripts\engine\trace::player_trace( var_16, var_17, var_1, self, var_10 );
        var_12++;

        if ( var_18["fraction"] == 0 )
        {
            if ( !istrue( var_3 ) && var_12 >= var_5 )
            {
                var_12 = 0;
                waitframe();
            }

            var_16 = var_15 + ( 0, 0, var_6 );
            var_17 = var_15 + ( 0, 0, var_9 );
            var_18 = scripts\engine\trace::player_trace( var_16, var_17, var_1, self, var_10 );
            var_12++;
        }

        if ( var_18["fraction"] == 0 )
        {
            if ( !istrue( var_3 ) && var_12 >= var_5 )
            {
                var_12 = 0;
                waitframe();
            }

            var_16 = var_15 + ( 0, 0, var_8 );
            var_17 = var_15 + ( 0, 0, var_9 );
            var_18 = scripts\engine\trace::player_trace( var_16, var_17, var_1, self, var_10 );
            var_12++;
        }

        if ( var_18["fraction"] > 0 && var_18["fraction"] != 1 )
        {
            if ( !istrue( var_3 ) && var_12 >= var_5 )
            {
                var_12 = 0;
                waitframe();
            }

            var_19 = var_0 + ( 0, 0, 60 );
            var_20 = var_18["position"] + ( 0, 0, 60 );
            var_21 = scripts\engine\trace::ray_trace( var_19, var_20, self, var_10 );
            var_12++;

            if ( var_21["fraction"] != 1 )
            {
                if ( !istrue( var_3 ) && var_12 >= var_5 )
                {
                    var_12 = 0;
                    waitframe();
                }

                var_19 = var_0 + ( 0, 0, 25 );
                var_20 = var_18["position"] + ( 0, 0, 60 );
                var_21 = scripts\engine\trace::ray_trace( var_19, var_20, self, var_10 );
                var_12++;
            }

            if ( var_21["fraction"] == 1 )
            {
                var_22 = spawnstruct();
                var_22.origin = var_18["position"];
                var_22.angles = var_1;
                var_22.height = 0;
                return [ var_22, var_14 ];
            }
        }

        var_14++;
        var_13++;

        if ( var_13 >= var_4 )
        {
            var_15 = var_0;

            if ( var_11 && !ispointonnavmesh( var_15 ) )
                var_15 = getclosestpointonnavmesh( var_15 );

            var_22 = spawnstruct();
            var_22.origin = var_15;
            var_22.angles = var_1;
            var_22.height = 0;
            return [ var_22, var_2 ];
        }

        if ( !istrue( var_3 ) && var_12 >= var_5 )
        {
            var_12 = 0;
            waitframe();
        }
    }
}

weapon_xp_iw8_ar_scharlie( var_0 )
{
    foreach ( var_2 in level.completesmokinggunquest.paths )
        self.flagattachradar[var_2.label] = var_0.flagattachradar[var_2.label];
}

nextscore( var_0, var_1 )
{
    var_2 = level.completesmokinggunquest._id_129DF[var_0];
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        if ( var_5.script_group == var_1 )
            var_3[var_3.size] = var_5;
    }

    return var_3;
}

nextplayertospectate( var_0, var_1, var_2 )
{
    var_3 = level.completesmokinggunquest._id_12815[var_0];
    var_4 = [];

    foreach ( var_6 in var_3 )
    {
        if ( var_6.script_group == var_1 && var_6.script_index == var_2 )
            var_4[var_4.size] = var_6;
    }

    return var_4;
}

nexthealthtiercalledout( var_0, var_1, var_2 )
{
    var_3 = 10;
    var_4 = 100.0;
    var_5 = 100.0;
    var_6 = 90;
    var_7 = 10.0;
    var_8 = 360.0 / var_3;
    var_9 = int( var_2 / var_3 );
    var_10 = var_2 - var_9 * var_3;
    var_11 = var_1 + var_6 + ( var_10 * var_8 + var_9 * var_7 );
    var_12 = var_4 + var_9 * var_5;
    var_13 = ( 0.0, var_11, 0.0 );
    var_14 = anglestoforward( var_13 );
    var_15 = var_0 + var_14 * var_12;
    return var_15;
}

obj_leads_found_overall( var_0 )
{
    foreach ( var_2 in level.completesmokinggunquest.paths )
    {
        if ( var_2.script_index == var_0 )
            return var_2;
    }
}

obj_icon_revealed( var_0 )
{
    foreach ( var_2 in level.completesmokinggunquest.paths )
    {
        if ( var_2.get_player_who_most_recently_threw_grenade == var_0 )
            return var_2;
    }
}

getspectatorsofplayer( var_0, var_1 )
{
    level notify( "debugSpawnOrigin" );
    level endon( "debugSpawnOrigin" );

    for (;;)
        waitframe();
}

_id_119B9( var_0 )
{
    var_1 = 500;

    if ( isdefined( self.vehicle_collision_takedamage ) && self.vehicle_collision_takedamage == var_0 )
        return;

    var_2 = self.vehicle_collision_takedamage;
    self.vehicle_collision_takedamage = var_0;
    self.vehicle_collision_registerevent = gettime() + var_1;
    _id_123A3( var_0.label != "A" );
}

wheelson_fire_thermite()
{
    return self.vehicle_collision_takedamage;
}

wheelson_molotov_damage_over_time()
{
    return self.vehicle_collision_registerevent;
}

modifyplayerdamage( var_0 )
{
    var_1 = var_0.damage;

    if ( istrue( self.vehicle_isfriendlytoplayer ) || istrue( self.vehicle_isenemytoteam ) )
    {
        var_1 = 0;

        if ( isdefined( var_0.attacker ) && isplayer( var_0.attacker ) )
            var_0.attacker scripts\mp\damagefeedback::updatedamagefeedback( "hitspawnprotect" );
    }

    if ( self.team == game["attackers"] )
    {
        var_2 = isdefined( var_0.attacker ) && var_0.attacker isautouse() && istrue( var_0.attacker.vehicle_occupancy_allowspawninto );

        if ( var_2 )
            var_1 = int( min( var_1, level.completesmokinggunquest.start_end_breach_fx ) );
    }

    if ( isdefined( var_0.attacker ) && var_0.attacker isautouse() && isdefined( var_0.attacker.path ) )
        var_1 = 0;

    if ( getdvarint( "scr_br_payload_mod_gunner_dmg", 1 ) && isdefined( var_0.victim.pkg_lbl_vo ) )
    {
        if ( isplayer( var_0.attacker ) && scripts\engine\utility::isbulletdamage( var_0.meansofdeath ) && var_1 < 100 )
        {
            var_3 = var_0.idflags & level.idflags_penetration;
            var_4 = scripts\mp\utility\damage::isheadshot( var_0.shitloc, var_0.meansofdeath, var_0.attacker );
            var_5 = weaponclass( var_0.objweapon ) == "spread";

            if ( var_3 )
                var_1 = var_1 * level.place_traversal_badplace;
            else if ( !var_4 || !var_5 )
                var_1 = var_1 * level.place_bad_place_until_flag;
        }
    }

    return var_1;
}

vehicle_fob_think( var_0, var_1 )
{
    if ( scripts\mp\flags::gameflag( "prematch_done" ) )
    {
        var_2 = var_0.attacker;

        if ( !isdefined( var_2 ) || !isplayer( var_2 ) )
        {
            if ( isdefined( var_0.attacker ) && isdefined( var_0.attacker.owner ) && isplayer( var_0.attacker.owner ) )
                var_2 = var_0.attacker.owner;
            else if ( isdefined( var_0.inflictor ) && isplayer( var_0.inflictor ) )
                var_2 = var_0.inflictor;
            else if ( isdefined( var_0.inflictor ) && isdefined( var_0.inflictor.owner ) && isplayer( var_0.inflictor.owner ) )
                var_2 = var_0.inflictor.owner;
            else
                var_2 = undefined;
        }

        if ( isdefined( var_2 ) && var_2 != self )
        {
            var_3 = 0;

            if ( var_2.team == game["attackers"] )
                var_3 = getdvarint( "scr_br_payload_attacker_kill_pay_scale", 4 );
            else
                var_3 = getdvarint( "scr_br_payload_defender_kill_pay_scale", 3 );

            if ( zombiejumpbartext( var_2 ) )
                var_3 = var_3 + 4;

            vehicle_damage_updatestate_br( var_2, var_3, "payload_kill" );
        }
    }

    return scripts\mp\gametypes\br.gsc::createhudelem( var_0, var_1 );
}

playerdropplunderondeath( var_0, var_1 )
{
    if ( self.team == game["attackers"] )
    {
        if ( getdvarint( "scr_br_payload_attacker_plunderdrop", 1 ) == 0 )
            return 1;

        var_2 = getdvarint( "scr_br_payload_attacker_saveshare", 7.0 );
        var_3 = getdvarint( "scr_br_payload_attacker_taxshare", 0.0 );
        var_4 = getdvarint( "scr_br_payload_attacker_dropshare", 0.0 );
    }
    else
    {
        if ( getdvarint( "scr_br_payload_defender_plunderdrop", 1 ) == 0 )
            return 1;

        var_2 = getdvarint( "scr_br_payload_defender_saveshare", 7.0 );
        var_3 = getdvarint( "scr_br_payload_defender_taxshare", 0.0 );
        var_4 = getdvarint( "scr_br_payload_defender_dropshare", 0.0 );
    }

    if ( isdefined( self.plundercount ) && self.plundercount > 0 )
        var_5 = self.plundercount;
    else
    {
        scripts\mp\gametypes\br_plunder.gsc::init_reach_pipe_room( 0, var_0 );
        return 1;
    }

    var_6 = var_2 + var_3 + var_4;
    var_7 = var_2 / var_6;
    var_8 = int( max( var_5 - 5, int( min( var_5, max( 2, int( var_5 * var_7 ) ) ) + 0.5 ) ) );
    var_9 = int( var_5 - var_8 );
    var_10 = max( 1, var_3 + var_4 );
    var_11 = var_3 / var_10;
    var_12 = var_4 / var_10;
    var_13 = int( max( 0, int( var_9 * var_12 ) ) );
    self.plundercountondeath = var_8;
    var_14 = spawnstruct();
    var_14._id_125BB = 1;
    scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_8, var_14 );

    if ( var_13 <= 0 )
        return 1;

    scripts\mp\gametypes\br_plunder.gsc::init_reach_pipe_room( var_13, var_0 );
    return 1;
}

vehicle_occupancy_cleanfriendlystatus( var_0, var_1, var_2, var_3 )
{
    if ( !level.completesmokinggunquest.vehicle_damage_shouldskipburndown )
        return;

    if ( var_0 )
    {
        var_4 = self.isgroundwardom.touchlist[self.team];
        vehicle_damage_updatestatemaxhealthvalues( var_4, var_2, "vehicle_tick_att" );
    }

    if ( var_1 || isdefined( self.returntoprop ) )
    {
        var_4 = self.isgroundwardom.touchlist[game["defenders"]];
        vehicle_damage_updatestatemaxhealthvalues( var_4, var_3, "vehicle_tick_def" );
    }
}

vehicle_damage_updatestatemaxhealthvalues( var_0, var_1, var_2 )
{
    var_3 = getdvarfloat( "scr_br_plunder_while_spectating", 0.4 );
    var_4 = 0;

    foreach ( var_6 in var_0 )
    {
        if ( isbot( var_6.player ) && scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
            continue;

        var_7 = var_1;

        if ( !scripts\mp\utility\player::isreallyalive( var_6.player ) )
            var_7 = int( max( var_1 * var_3, 1 ) );

        if ( !isdefined( var_6.player.plundercount ) )
            var_6.player.plundercount = 0;

        var_6.player scripts\mp\gametypes\br_plunder.gsc::_id_11960( var_7 );
        level.br_plunder._id_11A9E = level.br_plunder._id_11A9E + var_7;
        var_6.player scripts\mp\gametypes\br_analytics.gsc::_id_12D37( var_6.player, var_2, var_7 );
    }
}

vehicle_damage_updatestate_br( var_0, var_1, var_2 )
{
    var_3 = getdvarfloat( "scr_br_plunder_while_spectating", 0.5 );
    var_4 = 0;

    if ( isbot( var_0 ) && scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
        return;

    var_5 = var_1;

    if ( !scripts\mp\utility\player::isreallyalive( var_0 ) )
        var_5 = int( var_1 * var_3 );

    if ( !isdefined( var_0.plundercount ) )
        var_0.plundercount = 0;

    var_0 scripts\mp\gametypes\br_plunder.gsc::_id_11960( var_5 );
    level.br_plunder._id_11A9E = level.br_plunder._id_11A9E + var_5;
    var_0 scripts\mp\gametypes\br_analytics.gsc::_id_12D37( var_0, var_2, var_5 );
}

relic_healthpacks_killfunc()
{
    if ( !level.completesmokinggunquest._id_12841 )
        return;

    foreach ( var_1 in level.completesmokinggunquest.paths )
    {
        [var_3, var_4] = trigger_aggro_damage_amount( var_1 );
        var_1._id_12840 = [];
        var_1._id_12840[game["attackers"]] = [];
        var_1._id_12840[game["defenders"]] = [];

        for ( var_5 = 0; var_5 < var_3; var_5++ )
        {
            var_6 = get_next_station_on_track( var_1 );
            var_1._id_12840[game["attackers"]][var_5] = var_6;
        }

        for ( var_5 = 0; var_5 < var_4; var_5++ )
        {
            var_6 = get_next_station_on_track( var_1 );
            var_1._id_12840[game["defenders"]][var_5] = var_6;
        }
    }

    if ( istrue( level.completesmokinggunquest._id_12842 ) )
    {
        level.completesmokinggunquest._id_1282C = [ 1500, 2000, 2500, 2800, 3000, 3200, 3500 ];
        level._effect["payload_oob_1500"] = loadfx( "vfx/iw8_br/gameplay/payload/vfx_br_payload_oob_circle_1500" );
        level._effect["payload_oob_2000"] = loadfx( "vfx/iw8_br/gameplay/payload/vfx_br_payload_oob_circle_2000" );
        level._effect["payload_oob_2500"] = loadfx( "vfx/iw8_br/gameplay/payload/vfx_br_payload_oob_circle_2500" );
        level._effect["payload_oob_2800"] = loadfx( "vfx/iw8_br/gameplay/payload/vfx_br_payload_oob_circle_2800" );
        level._effect["payload_oob_3000"] = loadfx( "vfx/iw8_br/gameplay/payload/vfx_br_payload_oob_circle_3000" );
        level._effect["payload_oob_3200"] = loadfx( "vfx/iw8_br/gameplay/payload/vfx_br_payload_oob_circle_3200" );
        level._effect["payload_oob_3500"] = loadfx( "vfx/iw8_br/gameplay/payload/vfx_br_payload_oob_circle_3500" );
    }
}

_id_13156()
{
    foreach ( var_1 in level.completesmokinggunquest._id_12840 )
    {

    }
}

get_next_station_on_track( var_0 )
{
    var_1 = getmaxobjectivecount( 0, 0, level.completesmokinggunquest._id_1283F );
    var_1 setmapcirclecolorindex( 0 );
    var_1 hide();
    var_1.enabled = 0;
    var_1.path = var_0;
    return var_1;
}

trigger_aggro_damage_amount( var_0 )
{
    var_1 = [];
    var_1[game["attackers"]] = [];
    var_1[game["defenders"]] = [];

    foreach ( var_3 in level.completesmokinggunquest._id_12840 )
    {
        if ( var_3.script_group != var_0.get_player_who_most_recently_threw_grenade )
            continue;

        var_4 = scripts\engine\utility::ter_op( var_3.team == "allies", game["attackers"], game["defenders"] );

        if ( !isdefined( var_1[var_4][var_3.script_index] ) )
        {
            var_1[var_4][var_3.script_index] = 1;
            continue;
        }

        var_1[var_4][var_3.script_index]++;
    }

    var_6 = 0;

    foreach ( var_8 in var_1[game["defenders"]] )
    {
        if ( var_8 > var_6 )
            var_6 = var_8;
    }

    var_10 = 0;

    foreach ( var_8 in var_1[game["attackers"]] )
    {
        if ( var_8 > var_10 )
            var_10 = var_8;
    }

    return [ var_6, var_10 ];
}

get_next_station_on_track_after_index( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = spawn( "trigger_radius", var_0, 0, var_1, 2000 );
    var_5.targetname = "OutOfBounds";
    var_5.radius = var_1;
    var_5.script_team = var_2;
    var_5._id_12839 = var_3;
    var_5.spawntime = gettime();

    if ( !istrue( var_4 ) )
        thread scripts\mp\outofbounds::watchoobtrigger( var_5 );

    return var_5;
}

_id_12472( var_0, var_1 )
{
    if ( !level.completesmokinggunquest._id_12841 )
        return;

    scripts\mp\flags::gameflagwait( "infil_complete" );
    _id_12473( var_0, var_1, game["attackers"] );
    _id_12473( var_0, var_1, game["defenders"] );
    level.outofboundstriggers = getentarray( "OutOfBounds", "targetname" );
}

_id_12473( var_0, var_1, var_2 )
{
    var_3 = needs_radar( var_2 );
    var_4 = nextplayertospectate( var_2, var_0.get_player_who_most_recently_threw_grenade, var_1 );
    var_5 = oncooldown( var_4, var_0, var_1, var_2 );
    [var_7, var_8] = nuke_shouldnukeendgame( var_4 );

    for ( var_9 = 0; var_9 < var_0._id_12840[var_2].size; var_9++ )
    {
        var_10 = var_0._id_12840[var_2][var_9];

        if ( isdefined( var_10.trigger ) )
            hacking_vo( var_10.trigger );

        var_10 fakeprops();

        if ( var_9 < var_5.size )
        {
            var_11 = var_5[var_9];
            var_10.origin = ( var_11.origin[0], var_11.origin[1], var_11.radius );
            var_12 = ( var_11.origin[0], var_11.origin[1], var_7 + -1000 );
            var_10.trigger = get_next_station_on_track_after_index( var_12, var_11.radius, var_3, var_10 );

            if ( istrue( level.completesmokinggunquest._id_12842 ) )
            {
                var_13 = get_next_station_on_track_after_index( var_12, int( var_11.radius + level.completesmokinggunquest._id_12846 ), var_3, var_10, 1 );
                var_13.targetname = "OobWarning";
                scripts\mp\utility\trigger::makeenterexittrigger( var_13, ::_id_12843, ::_id_12844 );
                var_10._id_1346E = var_13;
                var_10.radius = var_11.radius;
            }

            if ( !var_10.enabled )
            {
                if ( !level.completesmokinggunquest._id_1283B )
                    var_10 showtoteam( var_3 );

                var_10.enabled = 1;
            }

            var_10.enabled = 1;
            continue;
        }

        var_10 hide();
        var_10.enabled = 0;
    }
}

hacking_vo( var_0 )
{
    foreach ( var_2 in var_0.entstouching )
    {
        if ( isdefined( var_2.oob ) && var_2.oob > 0 )
            scripts\mp\outofbounds::disableoob( var_2 );

        var_2.oobtriggers = scripts\engine\utility::array_remove( var_2.oobtriggers, var_0 );

        if ( var_2.oobtriggers.size == 0 )
            var_2.oobtriggers = undefined;
    }

    var_0 notify( "clearOOB" );
    var_0 delete();
}

helis_assault3_hangar( var_0 )
{
    if ( !level.completesmokinggunquest._id_12841 )
        return;

    foreach ( var_2 in var_0._id_12840[game["attackers"]] )
    {
        if ( isdefined( var_2.trigger ) )
            hacking_vo( var_2.trigger );

        var_2 fakeprops();
        var_2.enabled = 0;
        var_2 hide();
    }

    foreach ( var_2 in var_0._id_12840[game["defenders"]] )
    {
        if ( isdefined( var_2.trigger ) )
            hacking_vo( var_2.trigger );

        var_2 fakeprops();
        var_2.enabled = 0;
        var_2 hide();
    }
}

oncrankedhit( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) )
        var_1 = 0;

    var_3 = [];

    if ( isdefined( level.completesmokinggunquest._id_12840 ) && level.completesmokinggunquest._id_12840.size > 0 )
    {
        foreach ( var_5 in level.completesmokinggunquest._id_12840 )
        {
            if ( var_5.script_group != var_0.get_player_who_most_recently_threw_grenade )
                continue;

            if ( var_5.script_index != var_1 )
                continue;

            var_6 = scripts\engine\utility::ter_op( var_5.team == "allies", game["attackers"], game["defenders"] );

            if ( var_6 != var_2 )
                continue;

            var_3[var_3.size] = var_5;
        }
    }

    return var_3;
}

oncooldown( var_0, var_1, var_2, var_3 )
{
    var_4 = oncrankedhit( var_1, var_2, var_3 );

    if ( var_4.size == 0 )
    {
        [var_6, var_7] = nuke_shouldnukeendgame( var_0 );
        var_8 = ( var_7[0], var_7[1], var_6 );
        var_4[0] = spawnstruct();
        var_4[0].origin = var_8;
        var_4[0].radius = level.completesmokinggunquest._id_1283F;
    }

    return var_4;
}

nuke_shouldnukeendgame( var_0 )
{
    var_1 = ( 0, 0, 0 );
    var_2 = undefined;

    foreach ( var_4 in var_0 )
    {
        var_1 = var_1 + var_4.origin;

        if ( !isdefined( var_2 ) || var_4.origin[2] < var_2 )
            var_2 = var_4.origin[2];
    }

    var_6 = var_1 / var_0.size;
    return [ var_2, var_6 ];
}

showtoteam( var_0 )
{
    self hide();
    var_1 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    foreach ( var_3 in var_1 )
        self showtoplayer( var_3 );
}

_id_119DB()
{
    self endon( "death_or_disconnect" );
    self endon( "payload_remove_spawn_protection" );

    if ( isdefined( self.setplayermostwantedextrainfo ) && ( isplayer( self.setplayermostwantedextrainfo ) || istrue( self.setplayermostwantedextrainfo.balloon_deposit ) ) )
        return;

    if ( isdefined( self.setplayermostwantedextrainfo ) )
        var_0 = self.setplayermostwantedextrainfo;
    else
        var_0 = wheelson_fire_thermite();

    if ( distsqtodefenderflagstart( var_0 ) )
        return;

    self.vehicle_isfriendlytoplayer = 1;
    thread _id_119DC();
    var_1 = gettime() + level.completesmokinggunquest._id_127E0 * 1000;
    var_2 = whistletimer( var_0 );

    while ( isdefined( var_2 ) && isdefined( var_2.trigger ) && self istouching( var_2.trigger ) && self playerads() < 0.5 && gettime() < var_1 )
        waitframe();

    self.vehicle_isfriendlytoplayer = undefined;
    self notify( "payload_remove_spawn_protection" );
}

whistletimer( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = wheelson_fire_thermite();

    var_1 = var_0._id_12840[self.team];

    if ( isdefined( var_1 ) && var_1.size > 0 )
    {
        foreach ( var_3 in var_1 )
        {
            if ( !istrue( var_3.enabled ) )
                continue;

            if ( self istouching( var_3.trigger ) )
                return var_3;
        }
    }
}

_id_119DC()
{
    self endon( "death_or_disconnect" );
    self endon( "payload_remove_spawn_protection" );
    self waittill( "weapon_fired" );
    self.vehicle_isfriendlytoplayer = undefined;
    self notify( "payload_remove_spawn_protection" );
}

oncontractstart( var_0 )
{
    var_1 = "payload_oob_" + var_0;
    return var_1;
}

_id_12843( var_0, var_1 )
{
    if ( !isplayer( var_0 ) || var_0.team != var_1.script_team )
        return;

    var_2 = var_1._id_12839;

    if ( !isdefined( var_2 ) )
        return;

    if ( !isdefined( var_2._id_1346C ) )
        var_2._id_1346C = [];

    var_3 = var_0 getentitynumber();
    var_4 = oncontractstart( var_2.radius );
    var_5 = ( var_1.origin[0], var_1.origin[1], var_0.origin[2] );
    var_2._id_1346C[var_3] = spawn( "script_model", var_5 );
    var_2._id_1346C[var_3] setmodel( "tag_origin" );
    var_2._id_1346C[var_3] hide();
    var_2._id_1346C[var_3] showtoplayer( var_0 );
    thread _id_12845( var_0, var_2._id_1346C[var_3], var_4 );
}

_id_12845( var_0, var_1, var_2 )
{
    var_1 endon( "death" );
    var_0 endon( "disconnect" );
    waitframe();
    var_1 forcenetfieldhighlod( 1 );
    playfxontag( scripts\engine\utility::getfx( var_2 ), var_1, "tag_origin" );
    var_3 = var_1.origin[0];
    var_4 = var_1.origin[1];

    for (;;)
    {
        var_1.origin = ( var_3, var_4, var_0.origin[2] );
        waitframe();
    }
}

_id_12844( var_0, var_1 )
{
    if ( !isplayer( var_0 ) || var_0.team != var_1.script_team )
        return;

    var_2 = var_0 getentitynumber();
    var_3 = var_1._id_12839;

    if ( !isdefined( var_3 ) || !isdefined( var_3._id_1346C ) || !isdefined( var_3._id_1346C[var_2] ) )
        return;

    var_3._id_1346C[var_2] delete();
    var_3._id_1346C[var_2] = undefined;
}

fakeprops()
{
    var_0 = self;

    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0._id_1346E ) )
    {
        var_0._id_1346E delete();
        var_0._id_1346E = undefined;
    }

    if ( isdefined( var_0._id_1346C ) )
    {
        foreach ( var_2 in var_0._id_1346C )
        {
            if ( isdefined( var_2 ) )
                var_2 delete();
        }

        var_0._id_1346C = undefined;
    }
}

_id_123E9( var_0 )
{
    if ( var_0 <= 0 )
    {
        setomnvar( "ui_hardpoint_timer", gettime() );
        return;
    }

    var_1 = scripts\mp\utility\game::gettimepassed();
    setomnvar( "ui_hardpoint_timer", gettime() + int( var_0 * 1000 ) );
    var_2 = int( var_1 / 1000 );
    var_3 = var_2 + var_0;
    scripts\mp\utility\dvars::setoverridewatchdvar( "timelimit", var_3 );
    setdvar( "scr_br_timelimit", var_3 );
}

ropeguy()
{
    return istrue( level.vehicle_damage_setweaponclassmoddamageforvehicle ) || istrue( level.gameended );
}

ontimelimit()
{
    if ( ropeguy() )
        return;

    if ( setextrascore4() )
        return;

    if ( istrue( level.vehicle_mp_createlate ) || ropeguy() )
        return;

    level.vehicle_mp_createlate = 1;
    _id_11D82();
    _id_11D84();
    var_0 = game["attackers"];
    var_1 = game["defenders"];
    var_2 = "time_limit_reached";
    thread _id_13351( "stopped", undefined, undefined, 2 );
    thread scripts\mp\gametypes\br.gsc::update_ai_volumes( var_0, 2, undefined, 1, 1, 1 );
    intro_driver_logic();
    vehicle_damage_setweaponhitdamagedata( 1, var_1 );
    thread scripts\mp\gametypes\br.gsc::brendgame( var_1, game["end_reason"][var_2], 0 );
}

intro_driver_logic()
{
    if ( !istrue( game["switchedsides"] ) )
        return;

    foreach ( var_1 in level.players )
    {
        var_2 = var_1.pers["score"] + var_1.pers["round1_score"];
        var_1.score = var_2;
        var_3 = var_1.pers["kills"] + var_1.pers["round1_kills"];
        var_1.kills = var_3;
        var_4 = var_1.pers["damage"] + var_1.pers["round1_damage"];
        var_1 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "damageDealt", var_4 );
        var_5 = var_1.pers["objTime"] + var_1.pers["round1_objTime"];
        var_1 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "objTime", var_5 );
    }
}

intro_enemy_respawner()
{
    foreach ( var_1 in level.players )
        _func_0431( var_1 );

    foreach ( var_1 in level.players )
    {
        var_1.deletetmtylheadicon = var_1.pers["team"];
        var_1.demoforcesre = var_1.pers["recordedLoss"];
        var_1.depletiondelay = var_1.pers["score"];
        var_1.demo_debug_nuke = var_1.pers["kills"];
        var_1.deletesquadspawnstruct = var_1.pers["damage"];
        var_1.demotehvt = var_1.pers["objTime"];
        var_1.denyascendmessagejugg = var_1.pers["roundsAFK"];
    }

    _func_0432();

    foreach ( var_1 in level.players )
    {
        var_1.pers["team"] = var_1.deletetmtylheadicon;
        var_1.pers["recordedLoss"] = var_1.demoforcesre;
        var_1.pers["round1_score"] = var_1.depletiondelay;
        var_1.pers["round1_kills"] = var_1.demo_debug_nuke;
        var_1.pers["round1_damage"] = var_1.deletesquadspawnstruct;
        var_1.pers["round1_objTime"] = var_1.demotehvt;
        var_1.pers["roundsAFK"] = var_1.denyascendmessagejugg;
    }

    game["gamestarted"] = undefined;
    game["clientMatchDataDef"] = undefined;
}

_id_1243A()
{
    level.completesmokinggunquest.get_station_track_available_time_stamp = 0;
    level.completesmokinggunquest.setgameendflagsandnotifies = 0;
    _id_12367( 0 );

    foreach ( var_1 in level.completesmokinggunquest.paths )
    {
        var_1.enemy_ai_enter_alert_due_to_grenade_explode = -1;
        train_collision_item_valid( var_1.enemy_ai_enter_alert_due_to_grenade_explode, var_1 );
    }
}

mp_euphrates_gunnonlinear_opendoor( var_0 )
{
    return var_0.enemy_ai_enter_alert_due_to_grenade_explode;
}

train_collision_item_valid( var_0, var_1 )
{
    if ( !enemy_mine_proximity_think() )
        return;

    if ( var_1.enemy_ai_enter_alert_due_to_grenade_explode >= 0 )
        level notify( "checkPointUpdate", var_1 );

    if ( var_1.enemy_ai_enter_alert_due_to_grenade_explode >= 0 )
    {
        _id_11D82( var_1 );
        projectiledeleteonnote();
    }

    var_2 = var_1.enemy_ai_enter_alert_due_to_grenade_explode;
    var_1.enemy_ai_enter_alert_due_to_grenade_explode++;
    level.completesmokinggunquest.get_station_track_available_time_stamp = gettime();

    if ( isdefined( level.completesmokinggunquest.enemy_failsafe_ifonedidntspawn ) )
    {
        var_3 = mp_euphrates_patches();

        foreach ( var_5 in level.completesmokinggunquest.enemy_failsafe_ifonedidntspawn )
            var_5 setvalue( var_3 );
    }

    if ( var_1.enemy_ai_enter_alert_due_to_grenade_explode > 0 )
    {
        _id_123AA( var_1.script_index, var_1.enemy_ai_enter_alert_due_to_grenade_explode );
        var_7 = "br_payload_checkpoint";
        var_8 = "br_payload_checkpoint_enemy";
        scripts\mp\gametypes\br.gsc::_id_12BEE( var_7, undefined, game["attackers"] );
        scripts\mp\gametypes\br.gsc::_id_12BEE( var_8, undefined, game["defenders"] );

        foreach ( var_10 in level.teamdata[game["attackers"]]["players"] )
        {
            var_10 thread scripts\mp\rank::giverankxp( "br_payload_reached_checkpoint", level.completesmokinggunquest.vehicle_occupancy_cp_giveriotshield, undefined );
            var_10 thread scripts\mp\gametypes\br.gsc::padding_damage( "br_payload_reached_checkpoint", int( level.completesmokinggunquest.vehicle_occupancy_cp_giveriotshield / 2 ), var_10.currentweapon, 1 );
            var_10 thread scripts\mp\rank::scoreeventpopup( "br_payload_reached_checkpoint" );
        }

        tryspawnscriptableparenting( var_1, 1, "checkpoint", var_1.enemy_ai_enter_alert_due_to_grenade_explode );
        thread _id_127C4( game["attackers"] );
        thread _id_127C4( game["defenders"] );
    }

    var_1 notify( "checkPointUpdate" );
    level thread enemies_validate_life( var_1 );
    thread _id_12439( var_1 );
    thread _id_12472( var_1, var_1.enemy_ai_enter_alert_due_to_grenade_explode );
    thread _id_12466( var_1, var_1.enemy_ai_enter_alert_due_to_grenade_explode );
    thread _id_11B74( var_1.enemy_ai_enter_alert_due_to_grenade_explode, var_1 );
    thread _id_1246E( var_1, var_1.enemy_ai_enter_alert_due_to_grenade_explode );
    thread _id_1245D( var_1, var_1.enemy_ai_enter_alert_due_to_grenade_explode );
    thread _id_11F68( var_1 );
}

_id_11F68( var_0 )
{
    var_1 = var_0;

    if ( istrue( var_0.forcegivekillstreak ) )
        var_1 = obj_a_covers( var_0 );

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3.vehicle_is_ambient ) && var_3.vehicle_is_ambient > 0 )
        {
            var_4 = var_3 wheelson_fire_thermite();

            if ( var_4 == var_0 )
            {
                var_3.vehicle_is_ambient++;
                var_3._id_11B77 = var_3 whistlestarttimer( var_1 );

                if ( isdefined( var_3._id_11B77 ) )
                    var_3._id_11B77.index = -1;

                var_5 = var_3._id_11B77.origin;
                var_6 = getdvarint( "scr_br_drop_prespawn_timeout_ms", 9000 );
                var_3 scripts\mp\gametypes\br_public.gsc::_id_119E7( var_5, var_6, 1, 0 );
                var_3 scripts\mp\gametypes\br_spectate.gsc::weapon_xp_iw8_ar_golf36();
                var_3 scripts\mp\gametypes\br.gsc::spawnintermission( var_5, var_3._id_11B77.angles );
                var_3 scripts\mp\spectating::setdisabled();
                var_3 scripts\mp\gametypes\br.gsc::current_respawn_point_override( var_5[0], var_5[1], level.give_player_grenade_on_respawn );
                var_3 setclientomnvar( "ui_br_transition_type", 2 );
            }
        }
    }
}

mp_euphrates_patches()
{
    var_0 = 0;

    foreach ( var_2 in level.completesmokinggunquest.paths )
    {
        var_3 = 0;

        if ( isdefined( var_2.enemy_ai_enter_alert_due_to_grenade_explode ) )
            var_3 = var_2.enemy_ai_enter_alert_due_to_grenade_explode;

        var_0 = var_0 + var_3;
    }

    return var_0;
}

_id_12439( var_0 )
{
    level notify( "setupCheckpoint" );
    level endon( "setupCheckpoint" );

    if ( var_0.enemy_ai_enter_alert_due_to_grenade_explode == 0 )
        var_1 = level.completesmokinggunquest.enemy_mine_damaged_think;
    else
    {
        var_1 = int( level.completesmokinggunquest.setgameendflagsandnotifies / 1000 ) + level.completesmokinggunquest.bomb_sites;
        setmusicstate( "br_payload_time_added_outro" );

        if ( level.completesmokinggunquest.maxtime > 0 )
            var_1 = int( min( var_1, level.completesmokinggunquest.maxtime ) );

        level notify( "cancel_announcer_dialog" );
        thread timelimitclock();
    }

    scripts\mp\flags::gameflagwait( "infil_complete" );
    _id_123E9( var_1 );
    _id_12368( var_1 );
}

_id_11D82( var_0 )
{
    if ( !enemy_mine_proximity_think() )
        return;

    var_1 = gettime() - level.completesmokinggunquest.get_station_track_available_time_stamp;

    if ( isdefined( var_0 ) )
        level.completesmokinggunquest.setgun = var_0;

    var_2 = mp_hackney_yard_patch();

    if ( var_1 > var_2 )
        var_1 = var_2;

    level.completesmokinggunquest.setgameendflagsandnotifies = var_2 - var_1;
}

_id_12369( var_0, var_1, var_2 )
{
    var_3 = "time_split_" + var_1;
    game[var_0 + "_payload"][var_3] = var_2;
}

mp_harbor_patch( var_0, var_1 )
{
    var_2 = "time_split_" + var_1;
    var_3 = game[var_0 + "_payload"][var_2];
    return var_3;
}

_id_12368( var_0, var_1 )
{
    var_2 = "time_limit_objective";
    game[var_2] = int( var_0 * 1000 );
}

mp_hackney_yard_patch( var_0 )
{
    var_1 = "time_limit_objective";
    return game[var_1];
}

_id_12367( var_0 )
{
    if ( !game["switchedsides"] )
        game["num_checkpoints_objective"] = var_0;
}

projectiledeleteonnote()
{
    if ( !game["switchedsides"] )
        game["num_checkpoints_objective"] = game["num_checkpoints_objective"] + 1;
}

mp_farms2_gw_patch()
{
    return game["num_checkpoints_objective"];
}

enemy_mine_proximity_think()
{
    var_0 = 1;
    return var_0;
}

enemy_damage_monitoring()
{
    if ( ropeguy() )
        return;

    level.ontimelimit = scripts\engine\utility::void;
    _id_11D84();
    setomnvar( "ui_hardpoint_timer", 0 );
    var_0 = game["defenders"];
    var_1 = game["attackers"];
    var_2 = "objective_completed";
    thread _id_13351( "finished", undefined, undefined, 2 );
    thread scripts\mp\gametypes\br.gsc::update_ai_volumes( var_0, 2, undefined, 1, 1, 1 );
    intro_driver_logic();
    vehicle_damage_setweaponhitdamagedata( 0, var_1 );
    thread scripts\mp\gametypes\br.gsc::brendgame( var_1, game["end_reason"][var_2], 0 );
}

createdestinationvfx( var_0 )
{
    if ( game["switchedsides"] )
    {
        level thread scripts\mp\gametypes\br.gsc::handleendgamesplash( var_0 );
        level thread scripts\mp\gametypes\br.gsc::play_thrust_fx( var_0 );

        if ( istrue( level._id_1254A ) )
            level thread scripts\mp\gametypes\br.gsc::play_tape_machine_animations( var_0 );

        if ( isdefined( level.claymore_forceclampangles ) )
            wait( level.claymore_forceclampangles );

        level thread scripts\mp\gametypes\br.gsc::play_thrust_fx( var_0 );

        if ( istrue( level._id_1254A ) )
            level thread scripts\mp\gametypes\br.gsc::play_tape_machine_animations( var_0 );
    }
}

current_cypher_pieces( var_0, var_1 )
{
    foreach ( var_3 in level.players )
        var_3 thread scripts\mp\utility\game::setuipostgamefade( 0.0 );

    if ( !var_1 )
        wait( var_0 );
    else
    {
        wait( var_0 / 2 );
        level notify( "give_match_bonus" );
        wait( var_0 / 2 );
    }

    level notify( "round_end_finished" );
}

needs_power( var_0, var_1 )
{
    var_2 = undefined;

    if ( isdefined( level.completesmokinggunquest.setgun ) && isdefined( level.completesmokinggunquest.setgun.vehicle ) && ( !var_0 || var_1 == "tie" ) )
        var_2 = level.completesmokinggunquest.setgun.vehicle;
    else
    {
        var_3 = undefined;

        foreach ( var_5 in level.completesmokinggunquest.paths )
        {
            if ( istrue( var_5.forcegivekillstreak ) || !isdefined( var_5.vehicle ) )
                continue;

            if ( !isdefined( var_3 ) || var_5.enemy_ai_enter_alert_due_to_grenade_explode > var_3.enemy_ai_enter_alert_due_to_grenade_explode )
            {
                var_3 = var_5;
                var_6 = var_5.enemy_ai_enter_alert_due_to_grenade_explode;
            }
        }

        var_2 = var_3.vehicle;
    }

    return var_2;
}

_id_132CF()
{
    var_0 = self.path;
    var_1 = var_0.gamemodeoverridemeleeviewkickscale;

    if ( var_0.enemy_ai_enter_alert_due_to_grenade_explode == 0 )
    {
        var_2 = 1;
        var_3 = 0;
    }
    else
    {
        var_2 = var_0.enemy_claymore_watchfortrigger[var_0.enemy_ai_enter_alert_due_to_grenade_explode - 1].transition_snd_org;
        var_3 = var_2 - 2;
    }

    var_4 = var_0.nodes[var_2];
    var_5 = var_4.origin;
    var_6 = obj_leads_spawned_overall( var_0, var_2 );
    var_7 = vectortoangles( var_6 );
    self vehicle_teleport( var_5, var_7 );
    var_8 = var_0.nodes[var_3];
    var_9 = var_8.origin;
    var_6 = obj_leads_spawned_overall( var_0, var_3 );
    var_10 = vectortoangles( var_6 );
    var_1 vehicle_teleport( var_9, var_10 );
    return [ var_5, var_7 ];
}

needs_controller( var_0, var_1 )
{
    var_2 = undefined;

    if ( var_0 == game["attackers"] )
    {
        var_3 = var_1.nodes[var_1.nodes.size - 1];
        var_2 = var_3.origin;
    }
    else
    {
        if ( var_1.enemy_ai_enter_alert_due_to_grenade_explode == 0 )
            var_4 = 1;
        else
            var_4 = var_1.enemy_claymore_watchfortrigger[var_1.enemy_ai_enter_alert_due_to_grenade_explode - 1].transition_snd_org;

        var_5 = var_1.nodes[var_4];
        var_2 = var_5.origin;
    }

    return var_2;
}

mousetrapsfound( var_0, var_1 )
{
    var_3 = ( 0, 0, 0 );
    var_4 = ( 0, 0, 0 );

    if ( var_1 == game["defenders"] && level.completesmokinggunquest.vehicle_docollisiondamagetoplayer == "port" && var_0.label == "A" && var_0.enemy_ai_enter_alert_due_to_grenade_explode == 1 )
    {
        var_3 = ( 0, -10, 0 );
        var_4 = var_3;
    }
    else if ( var_1 == game["attackers"] && level.completesmokinggunquest.vehicle_docollisiondamagetoplayer == "trainstation2" && var_0.label == "A" )
    {
        var_3 = ( 0, -10, 0 );
        var_4 = var_3;
    }
    else if ( var_1 == game["attackers"] && level.completesmokinggunquest.vehicle_docollisiondamagetoplayer == "downtown2" && var_0.label == "B" )
    {
        var_3 = ( 0, -10, 0 );
        var_4 = var_3;
    }
    else if ( var_1 == game["attackers"] && level.completesmokinggunquest.vehicle_docollisiondamagetoplayer == "downtown2" && var_0.label == "A" )
        var_4 = ( 0, 25, 0 );

    return [ var_3, var_4 ];
}

vehicle_damage_setweaponhitdamagedata( var_0, var_1, var_2, var_3 )
{
    level.vehicle_damage_setweaponclassmoddamageforvehicle = 1;
    level notify( "payloadComplete" );
    level notify( "ending_sequence" );
    var_4 = needs_power( var_0, var_1 );
    var_5 = var_4.path;
    var_6 = needs_controller( var_1, var_5 );

    foreach ( var_8 in level.players )
    {
        var_8 notify( "abort_killcam" );
        var_8.cancelkillcam = 1;

        if ( var_8.team == var_1 )
            var_8 setclientomnvar( "ui_br_player_position", 1 );

        var_8 _id_123A4( 0 );
        var_8 freezecontrols( 1 );
        var_8 clearsoundsubmix( "iw8_mp_spawn_camera" );
        var_8 clearsoundsubmix( "deaths_door_mp" );
        var_8 setclientomnvar( "ui_br_transition_type", 0 );
        var_8 setclientomnvar( "ui_br_extended_load_screen", 0 );

        if ( isdefined( var_8.updateexpiredlootleader ) )
        {
            var_8.updateexpiredlootleader stoploopsound( self.updatefobindanger );
            var_8.updateexpiredlootleader delete();
            var_8.updateexpiredlootleader = undefined;
            var_8.updatefobindanger = undefined;
        }

        var_8 scripts\mp\gametypes\br_public.gsc::_id_119E7( var_6 );
    }

    setomnvarforallclients( "post_game_state", 9 );
    wait 3;
    setomnvar( "scriptable_loot_hide", 1 );
    removeallcorpses();

    foreach ( var_11 in level.completesmokinggunquest.enemy_goto_struct_on_spawn )
    {
        var_11.enemy_is_visible hide();

        if ( isdefined( var_11.enemy_is_visible.turret ) )
            var_11.enemy_is_visible.turret hide();
    }

    foreach ( var_11 in level.completesmokinggunquest._id_12D13 )
        var_11.enemy_is_visible hide();

    var_15 = undefined;

    if ( var_1 == game["attackers"] )
    {
        var_15 = spawn( "script_model", var_4.origin );
        var_15.angles = ( 0, var_4.angles[1], 0 );
        var_15 setmodel( "vfx_br_payload_checkpoint" );
        var_15 forcenetfieldhighlod( 1 );
        var_15 setscriptablepartstate( "checkpoint", "finish" );
    }
    else
        thread cargo_truck_initcollision( var_4 );

    if ( var_1 == game["attackers"] )
    {
        var_16 = "mp_payload_victory_cam";
        var_17 = "mp_payload_loss_cam";
        var_18 = var_5.nodes[var_5.nodes.size - 1];
        var_19 = var_18.origin;
        var_20 = obj_leads_spawned_overall( var_5, var_5.nodes.size - 1 );
        var_21 = vectortoangles( var_20 );
    }
    else
    {
        var_16 = "mp_payload_loss_cam";
        var_17 = "mp_payload_victory_cam";
        [var_19, var_21] = var_4 _id_132CF();
    }

    [var_24, var_25] = mousetrapsfound( var_5, var_1 );
    var_26 = var_21 + var_24;
    var_27 = var_21 + var_25;
    var_28 = spawn( "script_model", var_19 );
    var_28.angles = var_26;
    var_28 setmodel( "generic_prop_x3" );
    var_28 forcenetfieldhighlod( 1 );
    var_29 = spawn( "script_model", var_19 );
    var_29.angles = var_27;
    var_29 setmodel( "generic_prop_x3" );
    var_29 forcenetfieldhighlod( 1 );
    var_28 scriptmodelplayanim( var_16, "payload_complete" );
    var_29 scriptmodelplayanim( var_17, "payload_complete" );
    var_30 = scripts\mp\utility\teams::getteamdata( game["attackers"], "players" );

    foreach ( var_8 in var_30 )
    {
        var_8 thread scripts\mp\playerlogic::respawn_asspectator( var_19 + ( 0, 0, 60 ), ( 0, 0, 0 ) );
        var_8 scripts\mp\spectating::setdisabled();
        var_8 cameralinkto( var_28, "j_prop_1", 1, 1 );
    }

    var_33 = scripts\mp\utility\teams::getteamdata( game["defenders"], "players" );

    foreach ( var_8 in var_33 )
    {
        var_8 thread scripts\mp\playerlogic::respawn_asspectator( var_19 + ( 0, 0, 60 ), ( 0, 0, 0 ) );
        var_8 scripts\mp\spectating::setdisabled();
        var_8 cameralinkto( var_29, "j_prop_1", 1, 1 );
    }

    foreach ( var_8 in level.players )
    {
        if ( var_8.team == var_1 )
            var_8 setplayermusicstate( "br_payload_completed_win" );
        else
            var_8 setplayermusicstate( "br_payload_completed_lose" );

        var_8 thermalvisionoff();
        var_8 setsoundsubmix( "mp_br_mode_payload_completed", 0.5 );
    }
}

cargo_truck_initcollision( var_0 )
{
    wait 1.5;
    var_1 = var_0.path;
    var_2 = var_1.gamemodeoverridemeleeviewkickscale;

    if ( isdefined( var_1.vo_exfil_helo_arrived_nag ) )
        var_1.vo_exfil_helo_arrived_nag delete();

    foreach ( var_4 in var_1.pieces )
    {
        if ( isdefined( var_4 ) )
            var_4 delete();
    }

    if ( isdefined( var_2.br_circle_closing_music ) )
        var_2.br_circle_closing_music delete();

    var_2 scripts\cp_mp\vehicles\cargo_truck::cargo_truck_explode();
    wait 1;

    if ( isdefined( var_0.br_circle_closing_music ) )
        var_0.br_circle_closing_music delete();

    var_0 scripts\cp_mp\vehicles\cargo_truck::cargo_truck_explode();
}

relic_amped_in_warning()
{
    var_0 = scripts\engine\utility::getstructarray( "payloadPath", "targetname" );

    foreach ( var_2 in var_0 )
    {
        if ( !isdefined( level.completesmokinggunquest.paths ) )
            level.completesmokinggunquest.paths = [];

        var_3 = level.completesmokinggunquest.paths.size;
        level.completesmokinggunquest.paths[var_3] = var_2;
    }

    for ( var_5 = 0; var_5 < level.completesmokinggunquest.paths.size; var_5++ )
    {
        var_2 = level.completesmokinggunquest.paths[var_5];
        var_6 = "E";
        var_7 = "_e";
        var_8 = &"BR_PAYLOAD/PATH_E";

        switch ( var_2.script_index )
        {
            case 0:
                var_6 = "A";
                var_7 = "_a";
                var_8 = &"BR_PAYLOAD/PATH_A";
                break;
            case 1:
                var_6 = "B";
                var_7 = "_b";
                var_8 = &"BR_PAYLOAD/PATH_B";
                break;
            case 2:
                var_6 = "C";
                var_7 = "_c";
                var_8 = &"BR_PAYLOAD/PATH_C";
                break;
            case 3:
                var_6 = "D";
                var_7 = "_d";
                var_8 = &"BR_PAYLOAD/PATH_D";
                break;
            default:
                break;
        }

        var_2.label = var_6;
        var_2.iconname = var_7;
        var_2.vehicle_collision_loadtablecell = var_8;
        var_2._id_12815 = [];
        var_2._id_127E7 = [];
        var_2.spawncount = [];
        var_2._id_127AA = [];
        var_2.spawntime = [];
        var_2.numplayers = [];
        var_2.numplayers[game["attackers"]] = 0;
        var_2.numplayers[game["defenders"]] = 0;
        var_2._id_13357 = "none";
        var_2._id_13356 = 0;
        var_2._id_13348 = 0;
        var_2._id_1334A = 0;
        var_2.objidnum = [];
        var_2._id_11F7F = [];
        var_2.trigger_explosion_grenades = [];
        var_2.pieces = [];
        var_2.set_relic_fastbleedout = [];
        var_2.turn_off_have_target_hud = 0;
        var_2.spawn_fulton_ac130_mdl = 0.0;
        var_2._id_12CF1 = 0;

        if ( level.completesmokinggunquest._id_12791 )
        {
            var_2._id_1283A = 0;
            var_2._id_127AC = spawnstruct();
            var_2._id_127AC.balloon_deposit = 1;
            var_2._id_127AC.path = var_2;
        }

        if ( level.completesmokinggunquest._id_12792 > -1 )
            var_2._id_1283A = 0;

        if ( level.completesmokinggunquest.enemy_left_monitor )
            var_2.enemy_left_monitor = [];

        destprogress( var_2 );
    }
}

registernonnvgnightmap()
{
    if ( !level.completesmokinggunquest.processassist_regularcp )
        return;

    thread registeronentergulag();
}

registeronentergulag()
{
    var_0 = getentarray( "payload_oob", "targetname" );

    if ( var_0.size == 0 )
        return;

    var_1 = undefined;

    foreach ( var_3 in level.completesmokinggunquest.paths )
    {
        foreach ( var_5 in var_0 )
        {
            if ( var_3.get_player_who_most_recently_threw_grenade == var_5.script_group )
            {
                var_1 = var_5;
                var_1.index = 0;
                break;
            }
        }

        if ( isdefined( var_1 ) )
            break;
    }

    foreach ( var_3 in level.completesmokinggunquest.paths )
        var_3.processassist_regularcp = var_1;

    scripts\mp\flags::gameflagwait( "infil_complete" );
    thread vehicle_occupancy_clearallowmovementplayer( var_1 );
}

vehicle_occupancy_clearallowmovementplayer( var_0 )
{
    var_0.entstouching = [];
    thread vehicle_occupancy_clearseatcorpse( var_0 );
    thread vehicle_occupancy_clearforceweaponswitchallowed( var_0 );
}

vehicle_occupancy_clearforceweaponswitchallowed( var_0 )
{
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    var_0 endon( "IBTrigger" );

    for (;;)
    {
        var_0 waittill( "trigger", var_1 );

        if ( isdefined( var_1.precomputeddropbagpos ) && var_1.precomputeddropbagpos > 0 )
            continue;

        vehicle_deletenextframelate( var_0, var_1 );
    }
}

vehicle_occupancy_clearseatcorpse( var_0 )
{
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    var_0 endon( "IBTrigger" );

    for (;;)
    {
        var_1 = var_0.entstouching;

        foreach ( var_4, var_3 in var_1 )
        {
            if ( !isdefined( var_3 ) )
                var_0.entstouching[var_4] = undefined;

            if ( isdefined( var_3 ) && !var_0 istouching( var_3 ) )
                vehicle_deregister_on_death( var_0, var_3 );
        }

        waitframe();
    }
}

vehicle_deletenextframelate( var_0, var_1 )
{
    var_2 = var_1 getentitynumber();

    if ( isdefined( var_1._id_11F78 ) )
        var_1._id_11F78 = undefined;

    if ( isdefined( var_0._id_12BDF ) && isdefined( var_1.owner ) && var_0._id_12BDF != var_1.owner.team )
        return;

    if ( isdefined( var_0._id_12BDF ) && !isdefined( var_1.owner ) && var_0._id_12BDF != var_1.team )
        return;

    if ( !isdefined( var_1.precomputeddropbags ) )
    {
        var_1.precomputeddropbags = [];

        for ( var_3 = 0; var_3 < level.completesmokinggunquest.paths.size; var_3++ )
            var_1.precomputeddropbags[var_3] = 0;
    }

    var_1.precomputeddropbags[var_0.index] = 1;
    var_0.entstouching[var_2] = var_1;

    if ( !isdefined( var_1.oobtriggers ) )
        var_1.oobtriggers = [];

    var_4 = [ var_0 ];

    foreach ( var_6 in var_1.oobtriggers )
        var_4[var_4.size] = var_6;

    var_1.oobtriggers = var_4;

    if ( isdefined( var_1.precomputeddropbagpos ) )
        var_1.precomputeddropbagpos++;
    else
        var_1.precomputeddropbagpos = 1;

    if ( isdefined( var_1.oob ) && var_1.oob > 0 )
        scripts\mp\outofbounds::disableoob( var_1 );
}

vehicle_deregister_on_death( var_0, var_1 )
{
    var_2 = var_1 getentitynumber();

    if ( isdefined( var_0._id_12BDF ) && isdefined( var_1.owner ) && var_0._id_12BDF != var_1.owner.team )
        return;

    if ( isdefined( var_0._id_12BDF ) && !isdefined( var_1.owner ) && var_0._id_12BDF != var_1.team )
        return;

    if ( isdefined( var_1.precomputeddropbagpos ) && var_1.precomputeddropbagpos > 0 && var_1.precomputeddropbags[var_0.index] )
    {
        var_1.precomputeddropbags[var_0.index] = 0;
        var_1.precomputeddropbagpos--;

        foreach ( var_4 in var_1.precomputeddropbags )
        {
            if ( istrue( var_4 ) )
                return;
        }

        scripts\mp\outofbounds::enableoob( var_1 );
    }

    if ( isdefined( var_1.oobtriggers ) )
    {
        var_1.oobtriggers = scripts\engine\utility::array_remove( var_1.oobtriggers, var_0 );

        if ( var_1.oobtriggers.size == 0 )
            var_1.oobtriggers = undefined;
    }
}

zombiesdamagezombies( var_0, var_1, var_2 )
{
    var_3 = scripts\mp\outofbounds::getlastoobtrigger( self );

    if ( isdefined( var_3 ) && isdefined( var_3.spawntime ) )
    {
        if ( gettime() - var_3.spawntime < level.completesmokinggunquest._id_1283D )
        {
            var_4 = scripts\mp\outofbounds::getoutofboundstime( var_2, self._id_11F78 );
            var_4 = var_4 * level.completesmokinggunquest._id_1283C;
            self.oobendtime = int( gettime() + var_4 * 1000 );
            thread scripts\mp\outofbounds::watchooboutoftime( self, var_4 );
        }
    }

    scripts\mp\outofbounds::playerentercallback( var_0, var_1, var_2 );
    self notify( "playerDelayDisableOOBOutline" );

    if ( !isdefined( self.vehicle_dlog_enterevent ) )
    {
        var_5 = needs_radar( self.team );
        self.vehicle_dlog_enterevent = scripts\mp\utility\outline::outlineenableforteam( self, var_5, "outline_nodepth_red", "level_script" );
    }

    if ( level.completesmokinggunquest._id_1283B )
    {
        if ( isdefined( self.vehicle_deregisterturret ) )
        {
            self.vehicle_deregisterturret hidefromplayer( self );
            self.vehicle_deregisterturret = undefined;
        }

        foreach ( var_3 in self.oobtriggers )
        {
            if ( isdefined( var_3._id_12839 ) )
            {
                var_3._id_12839 showtoplayer( self );
                self.vehicle_deregisterturret = var_3._id_12839;
            }
        }
    }

    thread zombiespawnabovedeath();
}

zombiesignorevehicleexplosions( var_0, var_1, var_2 )
{
    scripts\mp\outofbounds::playerexitcallback( var_0, var_1, var_2 );

    if ( isdefined( self._id_11F7D ) )
        self._id_11F7D.alpha = 0;

    if ( isdefined( self.vehicle_dlog_enterevent ) )
        thread weapon_xp_iw8_la_kgolf();
}

weapon_xp_iw8_la_kgolf()
{
    self endon( "disconnect" );
    self notify( "playerDelayDisableOOBOutline" );
    self endon( "playerDelayDisableOOBOutline" );
    wait( level.completesmokinggunquest._id_1283E );
    scripts\mp\utility\outline::outlinedisable( self.vehicle_dlog_enterevent, self );
    self.vehicle_dlog_enterevent = undefined;

    if ( isdefined( self.vehicle_deregisterturret ) )
    {
        self.vehicle_deregisterturret hidefromplayer( self );
        self.vehicle_deregisterturret = undefined;
    }
}

fine_drop_pos()
{
    var_0 = self;
    var_0.precomputeddropbags = undefined;
    var_0.precomputeddropbagpos = undefined;
}

release_mortar_operator()
{
    level.completesmokinggunquest.traincylestolink = [];
    anin_playvo_func( "mp_don4", "downtown2", ( 18755, -21000, -160 ), 275, 90 );
    anin_playvo_func( "mp_don4", "downtown2", ( 21415, -17040, -170 ), 275, 90 );
    anin_playvo_func( "mp_don4", "downtown2", ( 21900, -16675, -195 ), 180, 90 );
    anin_playvo_func( "mp_don4", "downtown2", ( 20890, -23335, -170 ), 275, 90 );
    anin_playvo_func( "mp_don4", "downtown2", ( 24850, -19405, -190 ), 275, 90 );
    anin_playvo_func( "mp_don4", "downtown2", ( 25935, -14950, -240 ), 275, 90 );
    anin_playvo_func( "mp_don4", "port", ( 37075, -26140, -550 ), 150, 90 );
    anin_playvo_func( "mp_don4", "port", ( 35945, -27130, -550 ), 180, 90 );
    anin_playvo_func( "mp_don4", "port", ( 36375, -25765, -550 ), 180, 90 );
    anin_playvo_func( "mp_don4", "port", ( 38735, -23415, -540 ), 180, 90 );
    anin_playvo_func( "mp_don4", "port", ( 38530, -23595, -540 ), 180, 90 );
    anin_playvo_func( "mp_don4", "port", ( 38400, -23735, -540 ), 180, 90 );
    anin_playvo_func( "mp_don4", "port", ( 34305, -25675, -550 ), 180, 90 );
    anin_playvo_func( "mp_don4", "trainstation2", ( -22730, -27155, -120 ), 150, 90 );
    anin_playvo_func( "mp_don4", "trainstation2", ( -19540, -25000, -180 ), 275, 90 );
    anin_playvo_func( "mp_don4", "trainstation2", ( -13500, -21525, -320 ), 180, 120 );
    anin_playvo_func( "mp_don4", "trainstation2", ( -22445, -28805, -105 ), 275, 90 );
    anin_playvo_func( "mp_don4", "trainstation2", ( -15630, -24035, -260 ), 275, 90 );
    anin_playvo_func( "mp_don4", "trainstation2", ( -8735, -21455, -270 ), 275, 90 );
}

anin_playvo_func( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( level.completesmokinggunquest.traincylestolink ) )
        return;

    if ( var_0 != level.mapname || var_1 != level.completesmokinggunquest.vehicle_docollisiondamagetoplayer )
        return;

    var_5 = spawn( "trigger_radius", var_2, 0, var_3, var_4 );
    var_5.targetname = "payload_no_contest_trigger";
    var_5.radius = var_3;
    var_5.height = var_4;
    level.completesmokinggunquest.traincylestolink[level.completesmokinggunquest.traincylestolink.size] = var_5;
}

end_reach_icbm_launch( var_0 )
{
    if ( !isdefined( var_0 ) || !isplayer( var_0 ) || level.completesmokinggunquest.traincylestolink.size == 0 )
        return 1;

    foreach ( var_2 in level.completesmokinggunquest.traincylestolink )
    {
        if ( var_0 istouching( var_2 ) )
            return 0;
    }

    return 1;
}

regulateturretrateoffire()
{
    scripts\mp\gametypes\br_payload_path_mp_br_mechanics_0.gsc::relic_amped_explosion_time( 0, "all", 0 );
    scripts\mp\gametypes\br_payload_path_mp_br_mechanics_1.gsc::relic_amped_explosion_time( 1, "all", 1 );
    scripts\mp\gametypes\br_payload_path_mp_br_mechanics_2.gsc::relic_amped_explosion_time( 2, "all", 2 );
    scripts\mp\gametypes\br_payload_path_mp_br_mechanics_3.gsc::relic_amped_explosion_time( 3, "all", 3 );
    scripts\mp\gametypes\br_payload_path_mp_br_mechanics_0.gsc::relic_amped_explosion_time( 0, "standard", 0 );
    scripts\mp\gametypes\br_payload_path_mp_br_mechanics_1.gsc::relic_amped_explosion_time( 1, "standard", 1 );
    scripts\mp\gametypes\br_payload_path_mp_don4_0.gsc::relic_amped_explosion_time( 0, "downtown", 0 );
    scripts\mp\gametypes\br_payload_path_mp_don4_1.gsc::relic_amped_explosion_time( 1, "downtown", 1 );
    scripts\mp\gametypes\br_payload_path_mp_don4_2.gsc::relic_amped_explosion_time( 2, "downtown", 2 );
    scripts\mp\gametypes\br_payload_path_mp_don4_3.gsc::relic_amped_explosion_time( 0, "trainstation", 3 );
    scripts\mp\gametypes\br_payload_path_mp_don4_4.gsc::relic_amped_explosion_time( 1, "trainstation", 4 );
    scripts\mp\gametypes\br_payload_path_mp_don4_5.gsc::relic_amped_explosion_time( 2, "trainstation", 5 );
    scripts\mp\gametypes\br_payload_path_mp_don4_6.gsc::relic_amped_explosion_time( 0, "promenade", 6 );
    scripts\mp\gametypes\br_payload_path_mp_don4_7.gsc::relic_amped_explosion_time( 1, "promenade", 7 );
    scripts\mp\gametypes\br_payload_path_mp_don4_8.gsc::relic_amped_explosion_time( 2, "promenade", 8 );
    scripts\mp\gametypes\br_payload_path_mp_don4_9.gsc::relic_amped_explosion_time( 0, "eastriver", 9 );
    scripts\mp\gametypes\br_payload_path_mp_don4_10.gsc::relic_amped_explosion_time( 1, "eastriver", 10 );
    scripts\mp\gametypes\br_payload_path_mp_don4_11.gsc::relic_amped_explosion_time( 2, "eastriver", 11 );
    scripts\mp\gametypes\br_payload_path_mp_don4_1.gsc::relic_amped_explosion_time( 0, "downtown2", 1 );
    scripts\mp\gametypes\br_payload_path_mp_don4_0.gsc::relic_amped_explosion_time( 1, "downtown2", 0 );
    scripts\mp\gametypes\br_payload_path_mp_don4_1.gsc::relic_amped_explosion_time( 0, "downtown3", 1 );
    scripts\mp\gametypes\br_payload_path_mp_don4_2.gsc::relic_amped_explosion_time( 1, "downtown3", 2 );
    scripts\mp\gametypes\br_payload_path_mp_don4_3.gsc::relic_amped_explosion_time( 0, "trainstation2", 3 );
    scripts\mp\gametypes\br_payload_path_mp_don4_4.gsc::relic_amped_explosion_time( 1, "trainstation2", 4 );
    scripts\mp\gametypes\br_payload_path_mp_don4_12.gsc::relic_amped_explosion_time( 0, "port", 12 );
    scripts\mp\gametypes\br_payload_path_mp_don4_13.gsc::relic_amped_explosion_time( 1, "port", 13 );
}

_id_123AD( var_0, var_1 )
{
    if ( var_1 > 31 || var_0 >= 2 )
        return;

    var_2 = 5;
    var_3 = var_0 * 5;
    var_4 = int( pow( 2, var_2 ) ) - 1;
    var_5 = ( var_1 & var_4 ) << var_3;
    var_6 = ~( var_4 << var_3 );
    var_7 = getomnvar( "ui_br_paths" );
    var_8 = var_7 & var_6;
    var_9 = var_8 + var_5;
    setomnvar( "ui_br_paths", var_9 );
}

ammobox_giverandomattachment( var_0, var_1, var_2 )
{
    var_3 = spawnstruct();
    var_3.targetname = var_0;
    var_3.target = var_1;
    var_3.script_index = var_2;

    if ( isdefined( var_3.targetname ) )
    {
        if ( !isdefined( level.struct_class_names["targetname"][var_3.targetname] ) )
            level.struct_class_names["targetname"][var_3.targetname] = [];

        var_4 = level.struct_class_names["targetname"][var_3.targetname].size;
        level.struct_class_names["targetname"][var_3.targetname][var_4] = var_3;
    }

    if ( isdefined( var_3.target ) )
    {
        if ( !isdefined( level.struct_class_names["target"][var_3.target] ) )
            level.struct_class_names["target"][var_3.target] = [];

        var_4 = level.struct_class_names["target"][var_3.target].size;
        level.struct_class_names["target"][var_3.target][var_4] = var_3;
    }

    if ( isdefined( var_3.script_noteworthy ) )
    {
        if ( !isdefined( level.struct_class_names["script_noteworthy"][var_3.script_noteworthy] ) )
            level.struct_class_names["script_noteworthy"][var_3.script_noteworthy] = [];

        var_4 = level.struct_class_names["script_noteworthy"][var_3.script_noteworthy].size;
        level.struct_class_names["script_noteworthy"][var_3.script_noteworthy][var_4] = var_3;
    }

    return var_3;
}

_id_12A82( var_0, var_1 )
{
    self.origin = var_0;
}

get_intel_ref( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = 2.0;

    if ( isdefined( var_7 ) )
        var_9 = newteamhudelem( var_7 );
    else
        var_9 = newhudelem();

    var_9.elemtype = "font";
    var_9.font = "default";
    var_9.fontscale = var_8;
    var_9.basefontscale = var_8;
    var_9.x = 0;
    var_9.y = 0;
    var_9.width = 0;
    var_9.height = int( level.fontheight * var_8 );
    var_9.xoffset = 0;
    var_9.yoffset = 0;
    var_9.children = [];
    var_9 scripts\mp\hud_util::setparent( level.uiparent );
    var_9.hidden = 0;
    var_9.archived = 0;
    var_9.alpha = 1;
    var_9 scripts\mp\hud_util::setpoint( var_2, var_3, var_4, var_5 );

    if ( isdefined( var_0 ) )
        var_9.label = var_0;

    if ( isdefined( var_1 ) )
        var_9 setvalue( var_1 );

    if ( isdefined( var_6 ) )
        var_9.color = var_6;

    return var_9;
}

registermovequestlocale()
{
    var_0 = 0;
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_neutral_a", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_neutral_b", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_b", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_neutral_c", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_c", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_neutral_d", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_d", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_neutral_e", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_e", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_a", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_b", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_b", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_c", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_c", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_d", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_d", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_e", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_e", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escorting_a", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORTING", "icon_waypoint_dom_a", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escorting_b", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORTING", "icon_waypoint_dom_b", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escorting_c", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORTING", "icon_waypoint_dom_c", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escorting_d", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORTING", "icon_waypoint_dom_d", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escorting_e", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORTING", "icon_waypoint_dom_e", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_neutral_a", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_neutral_b", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_b", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_neutral_c", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_c", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_neutral_d", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_d", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_neutral_e", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_e", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_a", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_b", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_b", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_c", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_c", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_d", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_d", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_e", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_e", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halting_a", var_0, "enemy", "BR_PAYLOAD/OBJ_HALTING", "icon_waypoint_dom_a", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halting_b", var_0, "enemy", "BR_PAYLOAD/OBJ_HALTING", "icon_waypoint_dom_b", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halting_c", var_0, "enemy", "BR_PAYLOAD/OBJ_HALTING", "icon_waypoint_dom_c", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halting_d", var_0, "enemy", "BR_PAYLOAD/OBJ_HALTING", "icon_waypoint_dom_d", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halting_e", var_0, "enemy", "BR_PAYLOAD/OBJ_HALTING", "icon_waypoint_dom_e", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_contested_a", var_0, "contest", "BR_PAYLOAD/OBJ_CONTESTED", "icon_waypoint_dom_a", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_contested_b", var_0, "contest", "BR_PAYLOAD/OBJ_CONTESTED", "icon_waypoint_dom_b", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_contested_c", var_0, "contest", "BR_PAYLOAD/OBJ_CONTESTED", "icon_waypoint_dom_c", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_contested_d", var_0, "contest", "BR_PAYLOAD/OBJ_CONTESTED", "icon_waypoint_dom_d", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_contested_e", var_0, "contest", "BR_PAYLOAD/OBJ_CONTESTED", "icon_waypoint_dom_e", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_blocked_a", var_0, "contest", "BR_PAYLOAD/OBJ_BLOCKED", "icon_waypoint_dom_a", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_blocked_b", var_0, "contest", "BR_PAYLOAD/OBJ_BLOCKED", "icon_waypoint_dom_b", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_blocked_c", var_0, "contest", "BR_PAYLOAD/OBJ_BLOCKED", "icon_waypoint_dom_c", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_blocked_d", var_0, "contest", "BR_PAYLOAD/OBJ_BLOCKED", "icon_waypoint_dom_d", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_blocked_e", var_0, "contest", "BR_PAYLOAD/OBJ_BLOCKED", "icon_waypoint_dom_e", 1 );
}

get_gas_martyr_grenade_types( var_0 )
{
    var_1 = 0;
    var_2 = 150;
    var_3 = 15;
    level.teamdata[var_0]["checkpoint"] = spawnstruct();
    level.teamdata[var_0]["checkpoint"].bunkermusicstarted = [];
    var_7 = var_2;
    var_8 = scripts\engine\utility::ter_op( level.completesmokinggunquest.paths.size <= var_1, level.completesmokinggunquest.paths.size, var_1 );

    for ( var_9 = 0; var_9 < var_8; var_9++ )
    {
        var_10 = level.completesmokinggunquest.paths[var_9];
        level.teamdata[var_0]["checkpoint"].bunkermusicstarted[var_10.script_index] = get_force_push_direction( var_0, var_7, var_10 );
        var_7 = var_7 + var_3;
    }
}

vehicle_collision_updateinstance( var_0, var_1, var_2 )
{
    var_3 = mp_shipment_patch( var_2 );
    var_4 = level.teamdata[var_1]["checkpoint"].bunkermusicstarted[var_0.script_index];

    if ( isdefined( var_4 ) )
        var_4.bunker_loot_vaults.bar.color = var_3;
}

mp_shipment_patch( var_0 )
{
    switch ( var_0 )
    {
        case "red":
            return ( 1, 0, 0 );
        case "blue":
            return ( 0, 0.75, 1 );
        case "yellow":
            return ( 1, 1, 0 );
        case "green":
            return ( 0, 1, 0 );
        case "orange":
            return ( 1, 0.5, 0 );
        case "lightblue":
            return ( 0.25, 0.5, 1 );
        case "white":
        default:
            return ( 1, 1, 1 );
    }
}

get_force_push_direction( var_0, var_1, var_2 )
{
    var_3 = 14;
    var_4 = 14;
    var_5 = 14;
    var_6 = 140;
    var_7 = var_3 + var_4;
    var_8 = newteamhudelem( var_0 );
    var_8.fontscale = 1.2;
    var_8.x = var_3;
    var_8.y = var_1;
    var_8.alignx = "left";
    var_8.aligny = "top";
    var_8.horzalign = "left_adjustable";
    var_8.vertalign = "top_adjustable";
    var_8.alpha = 0.5;
    var_8.glowalpha = 0;
    var_8.hidewheninmenu = 1;
    var_8.archived = 0;
    var_8.label = var_2.vehicle_collision_loadtablecell;
    var_9 = get_num_dogtag_in_kill_zone_or_under_bridge_zone( var_0, ( 1, 1, 1 ), var_6, var_5 );
    var_9.x = var_7;
    var_9.y = var_1;
    var_9.alignx = "left";
    var_9.aligny = "top";
    var_9.horzalign = "left_adjustable";
    var_9.vertalign = "top_adjustable";
    var_9.alpha = 0.5;
    var_9 _id_124A2();
    var_9.archived = 1;
    var_9.hidewheninmenu = 1;
    var_9.bar.archived = 1;
    var_9.bar.hidewheninmenu = 1;
    var_9.bar.alpha = 0.5;
    var_8.bunker_loot_vaults = var_9;
    var_8.ticks = [];
    var_8.init_ai = [];

    for ( var_10 = 0; var_10 < var_2.enemy_claymore_watchfortrigger.size - 1; var_10++ )
        var_8.ticks[var_10] = get_friendly_convoy_vehicle( var_0, var_7, var_1, var_5, var_6, var_2, var_10 );

    for ( var_10 = 0; var_10 < var_2.turbulence_scalar.size; var_10++ )
        var_8.init_ai[var_10] = get_lostsight_alias( var_0, var_7, var_1, var_5, var_6, var_2, var_10 );

    return var_8;
}

h( var_0 )
{
    foreach ( var_2 in var_0.ticks )
        var_2 destroy();

    var_0.ticks = undefined;

    foreach ( var_5 in var_0.init_ai )
        var_5 destroy();

    var_0.init_ai = undefined;
    var_0.bunker_loot_vaults.bar destroy();
    var_0.bunker_loot_vaults.bar = undefined;
    var_0.bunker_loot_vaults destroy();
    var_0.bunker_loot_vaults = undefined;
    var_0 destroy();
}

_id_124A2( var_0, var_1, var_2, var_3 )
{
    self.bar.horzalign = self.horzalign;
    self.bar.vertalign = self.vertalign;
    self.bar.alignx = "left";
    self.bar.aligny = self.aligny;
    self.bar.y = self.y;
    self.bar.x = self.x;
    scripts\mp\hud_util::updatebar( self.bar.frac );
}

get_num_dogtag_in_kill_zone_or_under_bridge_zone( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = newteamhudelem( var_0 );
    var_5.x = 0;
    var_5.y = 0;
    var_5.frac = 0;
    var_5.color = var_1;
    var_5.sort = -2;
    var_5.shader = "progress_bar_fill";
    var_5 setshader( "progress_bar_fill", var_2, var_3 );
    var_5.hidden = 0;

    if ( isdefined( var_4 ) )
        var_5.flashfrac = var_4;

    var_6 = newteamhudelem( var_0 );
    var_6.elemtype = "bar";
    var_6.width = var_2;
    var_6.height = var_3;
    var_6.xoffset = 0;
    var_6.yoffset = 0;
    var_6.bar = var_5;
    var_6.children = [];
    var_6.sort = -3;
    var_6.color = ( 0, 0, 0 );
    var_6.alpha = 0.5;
    var_6 scripts\mp\hud_util::setparent( level.uiparent );
    var_6 setshader( "progress_bar_bg", var_2, var_3 );
    var_6.hidden = 0;
    return var_6;
}

get_friendly_convoy_vehicle( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = 1;
    var_8 = var_5.enemy_claymore_watchfortrigger[var_6].his_ontimerexpired / var_5._id_12CEE;
    var_9 = var_1 + var_8 * var_4;
    var_10 = newteamhudelem( var_0 );
    var_10.shader = "progress_bar_fill";
    var_10 setshader( "progress_bar_fill", var_7, var_3 );
    var_10.x = var_9;
    var_10.y = var_2;
    var_10.alignx = "left";
    var_10.aligny = "top";
    var_10.horzalign = "left_adjustable";
    var_10.vertalign = "top_adjustable";
    var_10.alpha = 0.5;
    var_10.glowalpha = 0;
    var_10.hidewheninmenu = 1;
    var_10.archived = 1;
    var_10.color = ( 1, 1, 1 );
    return var_10;
}

get_lostsight_alias( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = 3;
    var_8 = 4;
    var_9 = var_5.turbulence_scalar[var_6].dist / var_5._id_12CEE;
    var_10 = var_1 + var_9 * var_4 - var_7 / 2.0;
    var_11 = var_2 + var_3 / 2.0 - var_8 / 2.0;
    var_12 = newteamhudelem( var_0 );
    var_12.shader = "progress_bar_fill";
    var_12 setshader( "progress_bar_fill", var_7, var_8 );
    var_12.x = var_10;
    var_12.y = var_11;
    var_12.alignx = "left";
    var_12.aligny = "top";
    var_12.horzalign = "left_adjustable";
    var_12.vertalign = "top_adjustable";
    var_12.alpha = 1.0;
    var_12.glowalpha = 0;
    var_12.hidewheninmenu = 1;
    var_12.archived = 0;
    var_12.color = namelocations( var_0, 0 );
    return var_12;
}

failtimedrunquest()
{
    foreach ( var_1 in level.teamnamelist )
    {
        if ( isdefined( level.teamdata[var_1]["checkpoint"] ) )
        {
            foreach ( var_3 in level.teamdata[var_1]["checkpoint"].bunkermusicstarted )
                h( var_3 );
        }
    }
}

get_next_open_stop( var_0, var_1 )
{
    var_2 = newhudelem();
    var_2.elemtype = "font";
    var_2.font = var_0;
    var_2.fontscale = var_1;
    var_2.basefontscale = var_1;
    var_2.x = 0;
    var_2.y = 0;
    var_2.width = 0;
    var_2.height = int( level.fontheight * var_1 );
    var_2.xoffset = 0;
    var_2.yoffset = 0;
    var_2.children = [];
    var_2 scripts\mp\hud_util::setparent( level.uiparent );
    var_2.hidden = 0;
    var_2.archived = 0;
    return var_2;
}

get_next_cypher_id_from_pool( var_0, var_1, var_2 )
{
    var_3 = newhudelem();
    var_3.x = 0;
    var_3.y = 0;
    var_3.frac = 0;
    var_3.color = var_0;
    var_3.sort = -2;
    var_3.shader = "progress_bar_fill";
    var_3 setshader( "progress_bar_fill", var_1, var_2 );
    var_3.hidden = 0;
    var_3.archived = 0;
    var_4 = newhudelem();
    var_4.elemtype = "bar";
    var_4.width = var_1;
    var_4.height = var_2;
    var_4.xoffset = 0;
    var_4.yoffset = 0;
    var_4.bar = var_3;
    var_4.children = [];
    var_4.sort = -3;
    var_4.color = ( 0, 0, 0 );
    var_4.alpha = 0.5;
    var_4 scripts\mp\hud_util::setparent( level.uiparent );
    var_4 setshader( "progress_bar_bg", var_1 + 4, var_2 + 4 );
    var_4.hidden = 0;
    var_4.archived = 0;
    return var_4;
}

get_living_agents( var_0, var_1 )
{
    var_0 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_0, 100, -100 );
    var_2 = ( 0, var_1[1], 0 );
    var_3 = anglestoforward( var_2 );
    var_4 = var_0 + var_3 * 110;
    var_5 = scripts\mp\gametypes\br_public.gsc::init_season3_intel_challenges( var_4, 100, -100 );
    var_4 = var_5["position"];
    var_6 = vectortopitch( var_5["normal"] ) + 90;
    var_7 = ( var_6, var_1[1], 0 );
    var_8 = var_0 + var_3 * -30;
    var_5 = scripts\mp\gametypes\br_public.gsc::init_season3_intel_challenges( var_8, 100, -100 );
    var_8 = var_5["position"];
    var_6 = vectortopitch( var_5["normal"] ) + 90;
    var_9 = ( var_6, var_1[1], 0 );
    var_10 = spawn( "script_model", var_4 );
    var_10.angles = var_7;
    var_10 setmodel( "uk_tool_box_small_01" );
    var_10 notsolid();
    var_10 hide();
    var_10.turn_off_laser_trap = var_4;
    var_10.turn_off_hours_later_chyron_text = var_7;
    var_10.tryupdategenericprogress = var_8;
    var_10.trytoplaydamagesound = var_9;
    var_11 = var_1[1] - 90;
    var_10.scriptable = spawn( "script_model", var_0 );
    var_10.scriptable.angles = ( 0, var_11, -1 * var_6 );
    var_10.scriptable setmodel( "payload_bld_barrier_constructed_01" );
    var_10.scriptable forcenetfieldhighlod( 1 );
    var_10.objidnum = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );

    if ( var_10.objidnum != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( var_10.objidnum, "active", var_0 );
        scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_10.objidnum );
        scripts\mp\objidpoolmanager::update_objective_setbackground( var_10.objidnum, 1 );
        scripts\mp\objidpoolmanager::objective_set_play_intro( var_10.objidnum, 0 );
        scripts\mp\objidpoolmanager::objective_set_play_outro( var_10.objidnum, 0 );
        scripts\mp\objidpoolmanager::update_objective_icon( var_10.objidnum, "ui_mp_br_mapmenu_icon_obstacle" );
        _func_421( var_10.objidnum, 1 );
    }

    var_10.fullweaponname = 0;
    var_10 tugofwar_hvt_taken_firsttime();
    return var_10;
}

_id_12466( var_0, var_1 )
{
    foreach ( var_3 in var_0.turbulence_scalar )
    {
        if ( var_1 == 0 )
        {
            var_3 show();
            var_3.scriptable setscriptablepartstate( "obstacle", "destroyed" );
            var_3.scriptable notsolid();
        }

        if ( var_3.enemy_ai_enter_alert_due_to_grenade_explode == var_1 )
        {
            scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_3.objidnum );
            continue;
        }

        scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_3.objidnum );
    }
}

_id_119BC()
{
    foreach ( var_1 in level.completesmokinggunquest.paths )
    {
        foreach ( var_3 in var_1.turbulence_scalar )
        {
            if ( var_3.enemy_ai_enter_alert_due_to_grenade_explode == var_1.enemy_ai_enter_alert_due_to_grenade_explode )
            {
                if ( istrue( self.fullweaponname ) && self.team == game["attackers"] || !istrue( self.fullweaponname ) && self.team == game["defenders"] )
                {
                    self enableplayeruse( self );
                    self hudoutlineenableforclient( self, "outline_depth_cyan" );
                    continue;
                }

                self disableplayeruse( self );
                self hudoutlinedisableforclient( self );
            }
        }
    }
}

_id_13514()
{
    var_0 = 5.0;
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    self endon( "death" );
    self notify( "watchObstacleUse" );
    self endon( "watchObstacleUse" );

    if ( !istrue( self.firstinit ) )
    {
        wait 3;
        self.firstinit = 1;
    }

    var_1 = self;
    var_1 setcursorhint( "HINT_NOICON" );
    var_1 sethintonobstruction( "show" );
    var_1 setusepriority( -1 );
    var_1 setuseholdduration( "duration_none" );
    var_1 setuserange( 100 );
    var_1 sethintstring( &"BR_PAYLOAD/OBSTACLE_BUILD" );
    var_1.userate = 1;
    var_1.curprogress = 0;
    var_1.usetime = var_0;
    var_1.inuse = 0;
    var_1.playerusing = undefined;
    var_1 turn_off_heli_spawners();

    for (;;)
    {
        var_1 waittill( "trigger", var_2 );

        if ( istrue( var_2.isjuggernaut ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
                var_2 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "KILLSTREAKS/JUGG_CANNOT_BE_USED" );

            continue;
        }

        if ( dmz_numteamswithplayers( var_2 ) )
        {
            _id_129E8( var_2 );
            var_1.playerusing = var_2;
            var_1 makeunusable();
            var_3 = _id_13515( var_2 );

            if ( istrue( var_1.isusable ) )
                var_1 makeusable();

            var_1.playerusing = undefined;

            if ( istrue( var_3 ) )
                tryweaponswitchnag( var_2 );
        }
    }
}

_id_13515( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "joined_team" );
    var_0 endon( "joined_spectators" );
    var_1 = self;
    var_1.id = "destroy";
    var_1.userate = scripts\engine\utility::ter_op( isdefined( var_0.objectivescaler ), var_0.objectivescaler, 1 );

    if ( !istrue( self.fullweaponname ) )
    {
        var_1.id = "build";
        self.scriptable setscriptablepartstate( "obstacle", "building" );
    }

    var_2 = gettime();

    while ( isdefined( var_0 ) && var_0 scripts\cp_mp\utility\player_utility::_isalive() && display_message_to_guilty_player( var_0 ) && var_0 usebuttonpressed( 1 ) && istrue( var_0.revive_wounded_in_handler ) )
    {
        var_1.curprogress = var_1.curprogress + level.framedurationseconds * var_1.userate;

        if ( var_1.curprogress >= var_1.usetime )
        {
            if ( isdefined( var_0 ) )
                _id_12A56( var_0 );

            var_1.playerusing = undefined;
            var_1.curprogress = 0.0;
            return 1;
        }

        var_0 scripts\mp\gameobjects::updateuiprogress( var_1, 1 );
        waitframe();
    }

    if ( self.fullweaponname )
        self show();

    var_1.playerusing = undefined;

    if ( isdefined( var_0 ) )
        _id_12A56( var_0 );

    if ( !istrue( self.fullweaponname ) )
    {
        var_3 = ( gettime() - var_2 ) / 1000;
        tu0bakechanges( 0, var_3 );
    }
    else
    {
        for (;;)
        {
            if ( isdefined( var_0 ) && isalive( var_0 ) )
            {
                var_4 = var_0 getcurrentweapon();

                if ( var_4.basename == "briefcase_bomb_mp" )
                {
                    waitframe();
                    continue;
                }
            }

            break;
        }
    }

    var_1.curprogress = 0.0;
    return 0;
}

tugofwar_tank( var_0 )
{
    self.isusable = 1;
    self makeusable();
    turn_off_heli_spawners();

    if ( var_0 )
        scripts\mp\objidpoolmanager::objective_playermask_showtoall( self.objidnum );

    thread _id_13514();
}

tugofwar_hvt_taken_firsttime()
{
    self notify( "makeObstacleUnusable" );
    self.isusable = 0;
    self.playerusing = undefined;
    self makeunusable();
    self hudoutlinedisable();
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( self.objidnum );
}

_id_129E8( var_0 )
{
    var_1 = self;

    if ( istrue( var_0.isjuggernaut ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "allowActionSet" ) )
            var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "allowActionSet" ) ]]( "juggCrateUse", 0 );
    }
    else
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "allowActionSet" ) )
            var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "allowActionSet" ) ]]( "crateUse", 0 );

        var_0.revive_wounded_in_handler = 1;

        if ( self.fullweaponname )
        {
            self hide();
            var_0 thread x1opsplayertransition( "briefcase_bomb_mp", self );
        }
        else
            var_0 thread x1opsnpcweaponreceivermodel( "buildable_tool_mp", self );
    }

    var_0 scripts\mp\gameobjects::updateuiprogress( var_1, 0 );
}

_id_12A56( var_0 )
{
    var_1 = self;

    if ( istrue( var_0.isjuggernaut ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "allowActionSet" ) )
            var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "allowActionSet" ) ]]( "juggCrateUse", 1 );
    }
    else if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "allowActionSet" ) )
        var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "allowActionSet" ) ]]( "crateUse", 1 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "updateUIProgress" ) )
        var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "updateUIProgress" ) ]]( var_1, 0 );

    var_0.revive_wounded_in_handler = undefined;
    var_0 notify( "obstacle_use_end" );
}

dmz_numteamswithplayers( var_0 )
{
    if ( !var_0 scripts\common\utility::is_crate_use_allowed() )
        return 0;

    if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() )
        return 0;

    if ( var_0 isonladder() )
        return 0;

    if ( isdefined( self.playerscaptured ) && isdefined( self.playerscaptured[var_0 getentitynumber()] ) )
        return 0;

    if ( istrue( self.issquadonlycrate ) )
    {
        if ( isdefined( self.playersused ) && scripts\engine\utility::array_contains( self.playersused, var_0 ) )
            return 0;

        if ( var_0.squadindex != self.squadindex || var_0.team != self.team )
            return 0;
    }

    if ( istrue( self.scn_infil_hackney_heli_npc1 ) )
    {
        if ( isdefined( self.playersused ) && scripts\engine\utility::array_contains( self.playersused, var_0 ) )
            return 0;

        if ( var_0.team != self.team )
            return 0;
    }

    if ( isbot( var_0 ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "botIsKillstreakSupported" ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) )
            {
                if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]() != "grnd" && ![[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "botIsKillstreakSupported" ) ]]( self.cratetype ) )
                    return 0;
            }
        }

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "isKillstreakBlockedForBots" ) )
        {
            if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "isKillstreakBlockedForBots" ) ]]( self.cratetype ) )
                return 0;
        }
    }

    if ( !self.isusable )
        return 0;

    if ( var_0 isskydiving() )
        return 0;

    if ( istrue( var_0.inlaststand ) )
        return 0;

    if ( isdefined( self.playerusing ) && self.playerusing != var_0 )
        return 0;

    return 1;
}

display_message_to_guilty_player( var_0 )
{
    if ( !scripts\common\utility::is_crate_use_allowed() )
        return 0;

    if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() )
        return 0;

    if ( var_0 meleebuttonpressed() )
        return 0;

    if ( var_0 isinexecutionvictim() )
        return 0;

    if ( istrue( var_0.inlaststand ) )
        return 0;

    if ( distancesquared( var_0.origin, self.origin ) >= 10000 )
        return 0;

    if ( !self.isusable )
        return 0;

    return 1;
}

tryweaponswitchnag( var_0 )
{
    if ( istrue( self.fullweaponname ) )
    {
        self.fullweaponname = 0;
        self.path.turn_off_have_target_hud++;
        self sethintstring( &"BR_PAYLOAD/OBSTACLE_BUILD" );
        tu0bakechanges( 1 );
        self setmodel( "uk_tool_box_small_01" );
        self.origin = self.turn_off_laser_trap;
        self.angles = self.turn_off_hours_later_chyron_text;
        self dontinterpolate();
        self show();
        var_1 = 0;

        if ( isdefined( self.path.vehicle.returntoprop ) && self.path.vehicle.returntoprop == self )
        {
            self.path.vehicle.returntoprop = undefined;
            self.path.vehicle.carepackage_set_useable = undefined;
            self.path.vehicle.brclosealldoors = self;
            var_1 = 1;
        }
        else
        {
            var_2 = distance2dsquared( self.path.vehicle.origin, self.origin );

            if ( var_2 < level.completesmokinggunquest._id_13350 )
                var_1 = 1;
        }

        if ( var_1 )
            tryspawnscriptableparenting( self.path, 0, "obstacleRemoved" );

        foreach ( var_4 in level.players )
        {
            if ( !isalive( var_4 ) )
                continue;

            var_4 thread scripts\mp\hud_message::showsplash( "br_payload_obstacle_removed", undefined, var_0 );
        }

        if ( isdefined( var_0 ) )
        {
            foreach ( var_4 in level.teamdata[var_0.team]["players"] )
            {
                var_4 thread scripts\mp\rank::giverankxp( "br_payload_obstacle_destroyed", 150, undefined );
                var_4 thread scripts\mp\gametypes\br.gsc::padding_damage( "br_payload_obstacle_destroyed", int( 75.0 ), var_4.currentweapon, 1 );
                var_4 thread scripts\mp\rank::scoreeventpopup( "br_payload_obstacle_destroyed" );
                var_4 thread scripts\mp\gametypes\br_analytics.gsc::clipleft( 150, "br_payload_obstacle_destroyed" );
            }
        }

        scripts\mp\objidpoolmanager::update_objective_ownerteam( self.objidnum, game["attackers"] );
    }
    else
    {
        self.fullweaponname = 1;
        self.origin = self.tryupdategenericprogress;
        self.angles = self.trytoplaydamagesound;
        self dontinterpolate();
        self sethintstring( &"BR_PAYLOAD/OBSTACLE_REMOVE" );
        self setmodel( "offhand_wm_briefcase_bomb" );
        self.scriptable setscriptablepartstate( "obstacle", "constructed" );

        if ( isdefined( self.path.vehicle.brclosealldoors ) && self.path.vehicle.brclosealldoors == self )
        {
            self.path.vehicle.returntoprop = self;
            self.path.vehicle.brclosealldoors = undefined;
        }

        if ( isdefined( var_0 ) )
        {
            foreach ( var_4 in level.teamdata[var_0.team]["players"] )
            {
                var_4 thread scripts\mp\rank::giverankxp( "br_payload_obstacle_built", 500, undefined );
                var_4 thread scripts\mp\gametypes\br.gsc::padding_damage( "br_payload_obstacle_built", int( 250.0 ), var_4.currentweapon, 1 );
                var_4 thread scripts\mp\rank::scoreeventpopup( "br_payload_obstacle_built" );
                var_4 thread scripts\mp\gametypes\br_analytics.gsc::clipleft( 500, "br_payload_obstacle_built" );
            }
        }

        var_10 = self.scriptable physics_getentityaabb();
        var_11 = physics_createcontents( [ "physicscontents_player" ] );
        var_12 = physics_aabbbroadphasequery( var_10["min"], var_10["max"], var_11, [] );
        var_13 = self.turn_off_laser_trap - self.tryupdategenericprogress;
        var_14 = vectornormalize( var_13 );
        var_15 = distance( self.turn_off_laser_trap, self.tryupdategenericprogress );
        var_16 = var_15 / 2.0;
        var_17 = self.tryupdategenericprogress + var_14 * var_16;

        foreach ( var_4 in var_12 )
        {
            if ( !isdefined( var_4 ) || !isalive( var_4 ) )
                continue;

            var_19 = var_4.origin - var_17;
            var_20 = vectornormalize( var_19 );
            var_21 = var_4.origin - self.tryupdategenericprogress;
            var_22 = var_4.origin - self.turn_off_laser_trap;
            var_23 = vectordot( var_14, var_21 );
            var_24 = vectordot( var_14, var_22 );

            if ( !( var_23 > 0 && var_24 < 0 ) )
                continue;

            var_25 = vectordot( var_14, var_20 );
            var_26 = var_25 * var_16;
            var_26 = abs( var_26 );
            var_27 = var_16 + 35 - var_26;
            var_27 = var_27 * scripts\engine\utility::sign( var_25 );
            var_28 = var_4.origin + var_14 * var_27;
            var_28 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_28, 100, -100 );
            var_4 setorigin( var_28 );
        }

        scripts\mp\objidpoolmanager::update_objective_ownerteam( self.objidnum, game["defenders"] );
    }

    _id_123AC( self.path.script_index, self.index, self.fullweaponname );

    if ( isdefined( var_0 ) )
        vehicle_damage_updatestate_br( var_0, level.completesmokinggunquest.turbopetchallengewatcher, "obstacle" );

    turn_off_heli_spawners();
    turn_off_laser_vfx( game["attackers"] );
    turn_off_laser_vfx( game["defenders"] );
}

tu0bakechanges( var_0, var_1 )
{
    var_2 = 2;
    self makeunusable();

    if ( var_0 )
    {
        playsoundatpos( self.origin + ( 0, 0, 50 ), "payload_buildable_bomb_timer" );
        wait 2;
        self hide();
    }

    var_3 = "destroying";
    var_4 = var_2;

    if ( isdefined( var_1 ) )
    {
        if ( var_1 <= 2.3 )
        {
            var_3 = "building_failed5";
            var_4 = 0.7;
        }
        else if ( var_1 <= 3 )
        {
            var_3 = "building_failed4";
            var_4 = 1.0;
        }
        else if ( var_1 <= 3.6 )
        {
            var_3 = "building_failed3";
            var_4 = 1.4;
        }
        else if ( var_1 <= 4.3 )
        {
            var_3 = "building_failed2";
            var_4 = 1.7;
        }
        else
        {
            var_3 = "building_failed1";
            var_4 = 1.9;
        }
    }

    self.scriptable setscriptablepartstate( "obstacle", var_3 );
    wait( var_4 );

    if ( istrue( self.isusable ) )
    {
        self makeusable();
        turn_off_heli_spawners();
    }
}

namelocations( var_0, var_1 )
{
    if ( istrue( var_1 ) )
    {
        if ( var_0 == game["attackers"] )
            return mp_shipment_patch( "red" );
        else
            return mp_shipment_patch( "blue" );
    }
    else if ( var_0 == game["attackers"] )
        return mp_shipment_patch( "blue" );
    else
        return mp_shipment_patch( "red" );
}

turn_off_laser_vfx( var_0 )
{
    var_1 = level.teamdata[var_0]["checkpoint"].bunkermusicstarted[self.path.script_index];

    if ( isdefined( var_1 ) )
    {
        var_2 = var_1.init_ai[self.index];
        var_2.color = namelocations( var_0, self.fullweaponname );
    }
}

turn_off_heli_spawners()
{
    var_0 = scripts\mp\utility\teams::getteamdata( game["attackers"], "players" );
    var_1 = scripts\mp\utility\teams::getteamdata( game["defenders"], "players" );

    if ( istrue( self.fullweaponname ) )
    {
        foreach ( var_3 in var_0 )
            self enableplayeruse( var_3 );

        foreach ( var_3 in var_1 )
            self disableplayeruse( var_3 );

        if ( var_0.size > 0 )
            self hudoutlineenableforclients( var_0, "outline_depth_cyan" );

        if ( var_1.size > 0 )
        {
            self hudoutlinedisableforclients( var_1 );
            return;
        }
    }
    else
    {
        foreach ( var_3 in var_1 )
            self enableplayeruse( var_3 );

        foreach ( var_3 in var_0 )
            self disableplayeruse( var_3 );

        if ( var_1.size > 0 )
            self hudoutlineenableforclients( var_1, "outline_depth_cyan" );

        if ( var_0.size > 0 )
            self hudoutlinedisableforclients( var_0 );
    }
}

tryspawnscriptableparenting( var_0, var_1, var_2, var_3 )
{
    thread _id_13351( var_2, var_3, var_0 );

    if ( istrue( var_1 ) )
        usecallback( var_0.label );
}

registerontimerexpired()
{
    level.completesmokinggunquest.overtime = [];
    usefloorrocks();
    _id_123A9( 0 );
    level thread totalcashongroundatstart();
}

usecallback( var_0 )
{
    usefloorrocks();

    if ( usedpropsindex() )
        level.completesmokinggunquest.overtime[var_0] = level.completesmokinggunquest.usefailvehiclemsg + useeventtype();
    else
        level.completesmokinggunquest.overtime[var_0] = gettime();

    level.completesmokinggunquest.overtime[var_0] = level.completesmokinggunquest.overtime[var_0] + obj_destroy_tanks() * 1000;
}

usedpropsindex()
{
    var_0 = useeventamount();
    return var_0 >= useeventtype();
}

useeventamount()
{
    if ( isdefined( level.completesmokinggunquest.usefailvehiclemsg ) )
        return gettime() - level.completesmokinggunquest.usefailvehiclemsg;

    return 0;
}

useeventtimestamp()
{
    return level.completesmokinggunquest.usedropspawn;
}

useeventtype()
{
    return int( useeventtimestamp() * 1000 );
}

usefloorrocks()
{
    var_0 = useeventamount();
    var_1 = var_0 / 1000;
    var_2 = [ 5.0, 4.0, 3.0, 2.0, 1.0 ];

    if ( var_1 < level.completesmokinggunquest.usefailcapacitymsg || usedpropsindex() )
        var_3 = var_2[0];
    else if ( var_1 < level.completesmokinggunquest.usefailextractingmsg )
        var_3 = var_2[1];
    else if ( var_1 < level.completesmokinggunquest.usefaillaststandmsg )
        var_3 = var_2[2];
    else if ( var_1 < level.completesmokinggunquest.usefailnoplundermsg )
        var_3 = var_2[3];
    else
        var_3 = var_2[4];

    level.completesmokinggunquest.usedspawners = var_3;
    _id_123A8( int( var_3 ) );
}

obj_destroy_tanks()
{
    return level.completesmokinggunquest.usedspawners;
}

obj_fob1( var_0 )
{
    var_1 = var_0;
    var_1 = var_1 - gettime();

    if ( var_1 <= 0 )
        var_1 = 0;

    return var_1;
}

obj_hangar_bombs()
{
    var_0 = gettime();

    foreach ( var_3, var_2 in level.completesmokinggunquest.overtime )
    {
        if ( var_2 > var_0 )
            var_0 = var_2;
    }

    _id_123A9( obj_fob1( int( var_0 ) ) );
    return int( var_0 );
}

obj_fob2()
{
    var_0 = obj_hangar_bombs();
    var_0 = ( var_0 - gettime() ) / 1000;

    if ( var_0 <= 0 )
        var_0 = 0;

    return var_0;
}

obj_fob1_juggs()
{
    var_0 = obj_hangar_bombs();
    var_0 = var_0 - gettime();

    if ( var_0 <= 0 )
        var_0 = 0;

    return var_0;
}

setextrascore4()
{
    var_0 = obj_fob2();

    if ( var_0 <= 0 )
        return 0;

    usecallback( "minOvertime" );
    level.timelimitoverride = 1;
    level.completesmokinggunquest.usefailvehiclemsg = gettime();
    level notify( "start_overtime" );
    thread _id_13351( "overtime" );
    level thread setfaketispawnpoint();

    while ( scripts\mp\gamelogic::gettimeremaining() <= 0 && obj_fob2() > 0 )
        waitframe();

    level notify( "stop_overtime" );
    _id_123A9( 0 );
    level.timelimitoverride = 0;
    level.completesmokinggunquest.usefailvehiclemsg = undefined;
    usefloorrocks();
    return scripts\mp\gamelogic::gettimeremaining() > 0;
}

setfaketispawnpoint()
{
    level endon( "stop_overtime" );

    for (;;)
    {
        waittillframeend;
        var_0 = obj_fob2();
        waitframe();
    }
}

usedprops()
{
    return scripts\mp\gamelogic::gettimeremaining() <= 0 && obj_fob2() > 0;
}

useautorespawn()
{
    var_0 = "scr_overtime_debug";
    setdvar( var_0, 0 );

    for (;;)
    {
        while ( !getdvarint( var_0, 0 ) )
            wait 0.5;

        var_1 = scripts\mp\hud_util::createservertimer( "hudbig", 1.0 );
        var_1 scripts\mp\hud_util::setpoint( "LEFTBOTTOM", undefined, 15, -80 );
        var_1.color = ( 1, 0, 0 );
        var_1.archived = 0;
        var_1.label = &"Overtime Seconds: ";
        var_2 = scripts\mp\hud_util::createservertimer( "hudbig", 1.0 );
        var_2 scripts\mp\hud_util::setpoint( "LEFTBOTTOM", undefined, 15, -60 );
        var_2.color = ( 1, 0, 0 );
        var_2.archived = 0;
        var_2.label = &"Overtime Seconds Max: ";
        var_3 = scripts\mp\hud_util::createservertimer( "hudbig", 1.0 );
        var_3 scripts\mp\hud_util::setpoint( "LEFTBOTTOM", undefined, 15, -40 );
        var_3.color = ( 1, 0, 0 );
        var_3.archived = 0;
        var_3.label = &"Total Overtime: ";
        var_4 = scripts\mp\hud_util::createservertimer( "hudbig", 1.0 );
        var_4 scripts\mp\hud_util::setpoint( "LEFTBOTTOM", undefined, 15, -20 );
        var_4.color = ( 1, 0, 0 );
        var_4.archived = 0;
        var_4.label = &"Total Overtime Max: ";

        while ( getdvarint( var_0, 0 ) )
        {
            waitframe();
            waittillframeend;
            var_1 setvalue( obj_fob2() );
            var_2 setvalue( obj_destroy_tanks() );
            var_3 setvalue( useeventamount() / 1000 );
            var_4 setvalue( useeventtimestamp() );
        }

        level notify( "stop_overtime" );
        var_1 destroy();
        var_2 destroy();
        var_3 destroy();
        var_4 destroy();
    }
}

registeronrespawn()
{
    if ( !level.completesmokinggunquest.brpickupscriptableid )
        return;

    var_0 = [];

    if ( isdefined( level.completesmokinggunquest.set_relic_hideobjicons ) && level.completesmokinggunquest.set_relic_hideobjicons.size > 0 )
    {
        foreach ( var_2 in level.completesmokinggunquest.set_relic_hideobjicons )
        {
            var_3 = var_2.script_group;

            if ( !isdefined( var_3 ) )
                continue;

            var_4 = obj_icon_revealed( var_3 );

            if ( isdefined( var_4 ) )
            {
                var_5 = var_2.angles;

                if ( !isdefined( var_5 ) )
                    var_5 = ( 0, 0, 0 );

                var_6 = easepower( "br_plunder_box", var_2.origin, var_5 );

                if ( isdefined( var_6 ) )
                {
                    var_6.path = var_4;
                    var_6.enemy_ai_enter_alert_due_to_grenade_explode = var_2.script_index;

                    if ( !isdefined( var_6.enemy_ai_enter_alert_due_to_grenade_explode ) )
                        var_6.enemy_ai_enter_alert_due_to_grenade_explode = 0;

                    var_0[var_0.size] = var_6;
                    var_4.set_relic_fastbleedout[var_4.set_relic_fastbleedout.size] = var_6;
                }
            }
        }
    }

    if ( var_0.size == 0 )
    {
        foreach ( var_4 in level.completesmokinggunquest.paths )
        {
            foreach ( var_10 in var_4.set_relic_doubletap_params_internal )
            {
                var_11 = var_4.nodes[var_10].origin;
                var_12 = obj_leads_spawned_overall( var_4, var_10 );
                var_6 = get_last_callout_time( var_11, var_12, var_4.script_index );

                if ( isdefined( var_6 ) )
                {
                    var_6.path = var_4;
                    var_6.enemy_ai_enter_alert_due_to_grenade_explode = var_4.script_index;

                    if ( !isdefined( var_6.enemy_ai_enter_alert_due_to_grenade_explode ) )
                        var_6.enemy_ai_enter_alert_due_to_grenade_explode = 0;

                    var_0[var_0.size] = var_6;
                    var_4.set_relic_fastbleedout[var_4.set_relic_fastbleedout.size] = var_6;
                }
            }
        }
    }

    thread _id_12390( var_0 );
}

_id_12390( var_0 )
{
    scripts\mp\flags::gameflagwait( "infil_complete" );
    scripts\mp\gametypes\br_armory_kiosk.gsc::_id_123D8( var_0 );
}

get_last_callout_time( var_0, var_1, var_2 )
{
    var_3 = 300;
    var_4 = 600;
    var_5 = 50;
    var_6 = 100;
    var_7 = vectortoangles( var_1 );
    var_8 = anglestoright( var_7 );
    var_9 = -1 * var_8;

    for ( var_10 = var_3; var_10 <= var_4; var_10 = var_10 + var_5 )
    {
        var_11 = var_0 + var_10 * var_8;
        var_12 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_11 );
        var_13 = abs( var_0[2] - var_12[2] );

        if ( var_13 < var_6 )
        {
            var_14 = vectortoangles( var_9 );
            var_15 = easepower( "br_plunder_box", var_12, var_14 );
            return var_15;
        }

        var_16 = var_0 + var_10 * var_9;
        var_17 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_16 );
        var_13 = abs( var_0[2] - var_17[2] );

        if ( var_13 < var_6 )
        {
            var_14 = vectortoangles( var_8 );
            var_15 = easepower( "br_plunder_box", var_17, var_14 );
            return var_15;
        }
    }
}

getsquadspawnlocations( var_0, var_1, var_2, var_3 )
{
    getsolospawnstruct( var_0, var_1, var_2, ( 0, 1, 0 ), var_3 );
}

getsafeoriginaroundpoint( var_0, var_1, var_2, var_3 )
{
    getsolospawnstruct( var_0, var_1, var_2, ( 1, 1, 0 ), var_3 );
}

getsolospawnstruct( var_0, var_1, var_2, var_3, var_4 )
{
    for (;;)
    {
        if ( getdvarint( "debugPathPoint", 0 ) != var_2 )
        {
            waitframe();
            continue;
        }

        if ( isdefined( var_1 ) )
        {

        }

        if ( isdefined( var_4 ) )
        {

        }

        waitframe();
    }
}

_id_1245D( var_0, var_1 )
{
    foreach ( var_3 in var_0.set_relic_fastbleedout )
    {
        if ( var_3.enemy_ai_enter_alert_due_to_grenade_explode == var_1 )
        {
            var_3 setscriptablepartstate( "br_plunder_box", "visible" );
            continue;
        }

        var_3 setscriptablepartstate( "br_plunder_box", "hidden" );
    }
}

relic_amped_is_player_valid_to_explode()
{
    var_0 = scripts\cp_mp\killstreaks\airdrop::getleveldata( "payload_c130_loot" );
    var_0.capturestring = &"MP/GENERIC_LOOT_CRATE_CAPTURE";
    var_0.dummymodel = "military_carepackage_01_br";
    var_0.friendlymodel = undefined;
    var_0.enemymodel = undefined;
    var_0.mountmantlemodel = undefined;
    var_0.supportsownercapture = 0;
    var_0.headicon = undefined;
    var_0.usepriority = -1;
    var_0.usefov = 180;
    var_0.friendlyuseonly = 1;
    var_0.ownerusetime = 2.0;
    var_0.otherusetime = 2.0;
    var_0.activatecallback = scripts\cp_mp\killstreaks\airdrop::col_localethink_objectivevisibility;
    var_0.capturecallback = ::col_removelocaleinstance;
    var_0.destroycallback = scripts\cp_mp\killstreaks\airdrop::col_removequestinstance;
    var_0.get_active_bombzones = scripts\cp_mp\killstreaks\airdrop::collbrush;
    var_0.destroyoncapture = 0;
}

col_removelocaleinstance( var_0 )
{
    if ( isdefined( self._id_125EB ) )
    {
        self._id_125EB setscriptablepartstate( "smoke_signal", "off", 0 );
        self._id_125EB delete();
    }

    var_0 thread scripts\mp\utility\points::giveunifiedpoints( "br_c130_box_open" );
    var_0._id_11F7C = 1;
}

createdefaultrectangularzone()
{
    return !istrue( self._id_11F7C );
}

get_grenade_force( var_0, var_1 )
{
    if ( var_1 == "juggernaut" )
        var_0._id_125AA = 1;

    return var_0;
}

relic_nuketimer_waitforcompleteobjectives()
{
    game["dialog"]["payload_welcome"] = "gametype_payload";
    game["dialog"]["halftime"] = "gametype_payload_halftime";
    game["dialog"]["timesup_120"] = "payload_2_min";
    game["dialog"]["timesup_60"] = "payload_60_sec";
    game["dialog"]["timesup_45"] = "payload_45_sec";
    game["dialog"]["timesup_20"] = "payload_20_sec";
    game["dialog"]["timesup_10"] = "payload_10_sec";
    game["dialog"]["payload_oob"] = "payload_out";
    game["dialog"]["redeploy"] = "payload_attack_prepare";
    game["dialog"]["contract_acquired"] = "contract_acquired";
    game["dialog"]["contract_complete"] = "contract_complete";
    game["dialog"]["contract_fail"] = "contract_fail";
    game["dialog"]["attack_intro1"] = "gametype_desc_payload_attack";
    game["dialog"]["attack_intro2"] = "gametype_desc_payload_attack2";
    game["dialog"]["attack_securing_a"] = "payload_attack_alpha_move";
    game["dialog"]["attack_securing_b"] = "payload_attack_bravo_move";
    game["dialog"]["attack_losing_a"] = "payload_attack_a_back";
    game["dialog"]["attack_losing_b"] = "payload_attack_b_back";
    game["dialog"]["attack_contested_a"] = "payload_attack_a_contest";
    game["dialog"]["attack_contested_b"] = "payload_attack_b_contest";
    game["dialog"]["attack_blocked_a"] = "payload_attack_a_blocked";
    game["dialog"]["attack_blocked_b"] = "payload_attack_b_blocked";
    game["dialog"]["attack_obstacle_a"] = "payload_obs_a";
    game["dialog"]["attack_obstacle_b"] = "payload_obs_b";
    game["dialog"]["attack_secured1_a"] = [ "payload_attack_a_success", "payload_attack_sat_1" ];
    game["dialog"]["attack_secured1_b"] = [ "payload_attack_b_success", "payload_attack_sat_1" ];
    game["dialog"]["attack_secured2_a"] = [ "payload_attack_a_success", "payload_attack_sat_2" ];
    game["dialog"]["attack_secured2_b"] = [ "payload_attack_b_success", "payload_attack_sat_2" ];
    game["dialog"]["attack_secured3_a"] = [ "payload_attack_path_a", "payload_attack_sat_3" ];
    game["dialog"]["attack_secured3_b"] = [ "payload_attack_path_b", "payload_attack_sat_3" ];
    game["dialog"]["payload_attack_a_success"] = "payload_attack_a_success";
    game["dialog"]["payload_attack_b_success"] = "payload_attack_b_success";
    game["dialog"]["payload_attack_path_a"] = "payload_attack_path_a";
    game["dialog"]["payload_attack_path_b"] = "payload_attack_path_b";
    game["dialog"]["payload_attack_sat_1"] = "payload_attack_sat_1";
    game["dialog"]["payload_attack_sat_2"] = "payload_attack_sat_2";
    game["dialog"]["payload_attack_sat_3"] = "payload_attack_sat_3";
    game["dialog"]["attack_overtime"] = "payload_attack_overtime";
    game["dialog"]["attack_near1_a"] = "payload_attack_a_near1";
    game["dialog"]["attack_near1_b"] = "payload_attack_b_near1";
    game["dialog"]["attack_near2_a"] = "payload_attack_a_near2";
    game["dialog"]["attack_near2_b"] = "payload_attack_b_near2";
    game["dialog"]["attack_near3_a"] = "payload_attack_a_near3";
    game["dialog"]["attack_near3_b"] = "payload_attack_b_near3";
    game["dialog"]["attack_finished"] = "payload_attack_win";
    game["dialog"]["attack_stopped"] = "payload_attack_lose";
    game["dialog"]["defend_intro1"] = "gametype_desc_payload_defend";
    game["dialog"]["defend_intro2"] = "gametype_desc_payload_defend2";
    game["dialog"]["defend_losing_a"] = "payload_defend_a_move";
    game["dialog"]["defend_losing_b"] = "payload_defend_b_move";
    game["dialog"]["defend_securing_a"] = "payload_defend_a_retreat";
    game["dialog"]["defend_securing_b"] = "payload_defend_b_retreat";
    game["dialog"]["defend_contested_a"] = "payload_defend_a_contest";
    game["dialog"]["defend_contested_b"] = "payload_defend_b_contest";
    game["dialog"]["defend_blocked_a"] = "payload_defend_a_block";
    game["dialog"]["defend_blocked_b"] = "payload_defend_b_block";
    game["dialog"]["defend_obstacle_a"] = "payload_defend_a_destroy";
    game["dialog"]["defend_obstacle_b"] = "payload_defend_b_destroy";
    game["dialog"]["defend_lost1_a"] = [ "payload_defend_cross_fail1", "payload_defend_sat_1" ];
    game["dialog"]["defend_lost1_b"] = [ "payload_defend_cross_fail1", "payload_defend_sat_1" ];
    game["dialog"]["defend_lost2_a"] = [ "payload_defend_cross_fail2", "payload_defend_sat_2" ];
    game["dialog"]["defend_lost2_b"] = [ "payload_defend_cross_fail2", "payload_defend_sat_2" ];
    game["dialog"]["defend_lost3_a"] = [ "payload_defend_path_a", "payload_defend_sat_3" ];
    game["dialog"]["defend_lost3_b"] = [ "payload_defend_path_b", "payload_defend_sat_3" ];
    game["dialog"]["payload_defend_cross_fail1"] = "payload_defend_cross_fail1";
    game["dialog"]["payload_defend_cross_fail2"] = "payload_defend_cross_fail2";
    game["dialog"]["payload_defend_path_a"] = "payload_defend_path_a";
    game["dialog"]["payload_defend_path_b"] = "payload_defend_path_b";
    game["dialog"]["payload_defend_sat_1"] = "payload_defend_sat_1";
    game["dialog"]["payload_defend_sat_2"] = "payload_defend_sat_2";
    game["dialog"]["payload_defend_sat_3"] = "payload_defend_sat_3";
    game["dialog"]["defend_overtime"] = "payload_defend_overtime";
    game["dialog"]["defend_near1_a"] = "payload_defend_a_near1";
    game["dialog"]["defend_near1_b"] = "payload_defend_b_near1";
    game["dialog"]["defend_near2_a"] = "payload_defend_a_near2";
    game["dialog"]["defend_near2_b"] = "payload_defend_b_near2";
    game["dialog"]["defend_near3_a"] = "payload_defend_a_near3";
    game["dialog"]["defend_near3_b"] = "payload_defend_b_near3";
    game["dialog"]["defend_stopped"] = "payload_defend_win";
    game["dialog"]["defend_finished"] = "payload_defend_lose";
    game["dialog"]["round_success"] = undefined;
    game["dialog"]["round_failure"] = undefined;
    game["dialog"]["round_draw"] = undefined;
}

_id_13351( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_0 ) )
    {
        var_2._id_13357 = "none";
        var_2._id_13356 = gettime() + level.completesmokinggunquest._id_13355;
        var_2._id_1334A = gettime() + level.completesmokinggunquest._id_13349;
        return;
    }

    if ( isdefined( var_3 ) )
        wait( var_3 );

    var_4 = _id_1251B( var_0 );
    var_5 = isdefined( var_2 ) && var_2._id_13357 == var_0;

    if ( !var_4 && var_5 && isdefined( var_2 ) && var_2._id_13356 > gettime() && var_2._id_1334A > gettime() )
    {
        var_2._id_13348 = gettime() + level.completesmokinggunquest._id_13347;
        return;
    }

    if ( !var_4 && !var_5 && isdefined( var_2 ) && var_2._id_13348 > gettime() )
    {
        var_2._id_1334A = gettime() + level.completesmokinggunquest._id_13349;
        var_2._id_13356 = gettime() + level.completesmokinggunquest._id_1334F;
        return;
    }

    var_6 = var_5 && isdefined( var_2 ) && var_2._id_1334A <= gettime();
    var_7 = undefined;
    var_8 = undefined;
    var_9 = var_4;
    var_10 = var_4;
    var_11 = undefined;

    switch ( var_0 )
    {
        case "forward":
            var_7 = "attack_securing" + var_2.iconname;
            var_8 = "defend_losing" + var_2.iconname;

            if ( var_6 )
                var_10 = 1;

            break;
        case "reverse":
            var_7 = "attack_losing" + var_2.iconname;
            var_8 = "defend_securing" + var_2.iconname;

            if ( var_6 )
                var_9 = 1;

            break;
        case "contested":
            var_7 = "attack_contested" + var_2.iconname;
            var_8 = "defend_contested" + var_2.iconname;

            if ( var_6 )
                var_9 = 1;

            break;
        case "blocked":
            var_7 = "attack_blocked" + var_2.iconname;
            break;
        case "obstacleRemoved":
            var_7 = "attack_obstacle" + var_2.iconname;
            var_8 = "defend_obstacle" + var_2.iconname;
            break;
        case "checkpoint":
            var_7 = "attack_secured" + var_1 + var_2.iconname;
            var_8 = "defend_lost" + var_1 + var_2.iconname;
            var_11 = 2;
            break;
        case "overtime":
            var_7 = "attack_overtime";
            var_8 = "defend_overtime";
            break;
        case "near":
            var_7 = "attack_near" + var_1 + var_2.iconname;
            var_8 = "defend_near" + var_1 + var_2.iconname;

            if ( var_6 )
                var_10 = 1;

            break;
        case "finished":
            var_7 = "attack_finished";
            var_8 = "defend_finished";
            break;
        case "stopped":
            var_7 = "attack_stopped";
            var_8 = "defend_stopped";
            break;
        default:
            return;
    }

    if ( var_9 )
        thread setupzombierespawnglobaltimer( var_7, game["attackers"], 1, var_11, undefined, 1 );
    else if ( isdefined( var_7 ) )
        thread setupzombierespawnglobaltimer( var_7, game["attackers"], 1, var_11, undefined, 1, var_2 );

    if ( var_10 )
        thread setupzombierespawnglobaltimer( var_8, game["defenders"], 1, var_11, undefined, 1 );
    else if ( isdefined( var_8 ) )
        thread setupzombierespawnglobaltimer( var_8, game["defenders"], 1, var_11, undefined, 1, var_2 );

    if ( isdefined( var_2 ) )
    {
        var_2._id_13357 = var_0;
        var_2._id_13348 = gettime() + level.completesmokinggunquest._id_13347;
        var_2._id_13356 = gettime() + level.completesmokinggunquest._id_13355;

        if ( !var_5 || var_6 )
            var_2._id_1334A = gettime() + level.completesmokinggunquest._id_13349;
    }
}

setupzombierespawnglobaltimer( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( isarray( game["dialog"][var_0] ) )
    {
        for ( var_7 = 0; var_7 < game["dialog"][var_0].size; var_7++ )
        {
            var_8 = game["dialog"][var_0][var_7];

            if ( isdefined( var_6 ) )
                setupzombiepowers( var_8, var_1, var_6, var_3 );
            else
                scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( var_8, var_1, var_2, var_3, var_4, var_5 );

            waitframe();
        }
    }
    else if ( isdefined( var_6 ) )
        setupzombiepowers( var_0, var_1, var_6, var_3 );
    else
        scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( var_0, var_1, var_2, var_3, var_4, var_5 );
}

_id_1251B( var_0 )
{
    switch ( var_0 )
    {
        case "obstacleRemoved":
        case "finished":
        case "checkpoint":
        case "stopped":
        case "overtime":
            return 1;
        default:
            break;
    }

    return 0;
}

setupzombiepowers( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( game["dialog"][var_0] ) )
        return;

    var_4 = scripts\mp\utility\teams::getteamdata( var_1, "players" );

    for ( var_5 = 0; var_5 < var_4.size; var_5++ )
    {
        var_6 = var_4[var_5];
        var_7 = var_6 wheelson_fire_thermite();

        if ( isdefined( var_7 ) && var_2 != var_7 )
            continue;

        scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( var_0, var_6, 1, 1, var_3 );
    }
}

zombiespawnabovedeath()
{
    self endon( "disconnect" );

    if ( istrue( self._id_13346 ) )
        return;

    self._id_13346 = 1;
    scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "payload_oob", self );
    wait 5;
    self._id_13346 = undefined;
}

timelimitclock()
{
    level endon( "cancel_announcer_dialog" );
    var_0 = 0;
    var_1 = 0;
    var_2 = 0;
    var_3 = 0;
    var_4 = 0;
    var_5 = scripts\engine\utility::ter_op( scripts\mp\utility\game::isanymlgmatch(), 5, 2 );

    while ( game["state"] == "playing" )
    {
        if ( scripts\mp\utility\game::gettimelimit() == 0 )
        {
            waitframe();
            continue;
        }

        if ( !level.timerstopped && scripts\mp\utility\game::gettimelimit() && !istrue( level.bombsplanted ) )
        {
            var_6 = scripts\mp\gamelogic::gettimeremaining() / 1000;
            var_7 = int( var_6 + 0.5 );
            var_8 = 0;

            if ( var_5 == 2 && var_7 % 2 == 1 )
                var_8 = 1;

            if ( !var_0 && ( var_8 == 1 && var_7 == 121 || var_8 == 0 && var_7 == 120 ) )
            {
                scripts\mp\gametypes\br_public.gsc::brleaderdialog( "timesup_120", 0, undefined, 1 );
                thread scripts\mp\music_and_dialog::timelimitmusic( "draw" );
                var_0 = 1;
            }
            else if ( !var_1 && ( var_8 == 1 && var_7 == 61 || var_8 == 0 && var_7 == 60 ) )
            {
                scripts\mp\gametypes\br_public.gsc::brleaderdialog( "timesup_60", 0, undefined, 1 );
                var_1 = 1;
            }
            else if ( !var_2 && ( var_8 == 0 && var_7 == 46 || var_8 == 1 && var_7 == 45 ) )
            {
                scripts\mp\gametypes\br_public.gsc::brleaderdialog( "timesup_45", 0, undefined, 1 );
                var_2 = 1;
            }
            else if ( !var_3 && ( var_8 == 1 && var_7 == 21 || var_8 == 0 && var_7 == 20 ) )
            {
                scripts\mp\gametypes\br_public.gsc::brleaderdialog( "timesup_20", 0, undefined, 1 );
                setmusicstate( "br_payload_20_sec_left" );
                var_3 = 1;
            }
            else if ( !var_4 && ( var_8 == 1 && var_7 == 11 || var_8 == 0 && var_7 == 10 ) )
            {
                scripts\mp\gametypes\br_public.gsc::brleaderdialog( "timesup_10", 0, undefined, 1 );
                var_4 = 1;
            }

            if ( var_7 <= 10 || var_7 <= 30 && var_7 % var_5 == var_8 )
            {
                level notify( "match_ending_very_soon" );
                var_9 = 1;

                if ( var_7 == 0 )
                    break;

                if ( isdefined( level.overridetimelimitclock ) && level.overridetimelimitclock < var_7 )
                    var_9 = 0;

                if ( var_9 )
                {
                    var_10 = scripts\mp\gamelogic::mp_oilrig_patches( var_6 );
                    playsoundatpos( ( 0, 0, 0 ), var_10 );
                }
            }

            if ( var_6 - floor( var_6 ) >= 0.05 )
            {
                wait( var_6 - floor( var_6 ) );
                continue;
            }
        }

        wait 1.0;
    }
}

register_ai_spawners()
{
    if ( !level.completesmokinggunquest.enemy_left_monitor )
        return;

    setomnvar( "requires_scriptmover_ladder_checks", 1 );
    _id_1243B( level.completesmokinggunquest.enemy_goto_struct_on_spawn, "buildable_checkpoint", "buildable_checkpoint_clipbrush", "checkpoint_01_anim", "iw8_br_payload_raise_bunker", &"BR_PAYLOAD/PURCHASE_BUNKER", &"BR_PAYLOAD/PURCHASE_BUNKER_DISABLED", level.completesmokinggunquest.endprematchskydiving, "ui_mp_br_mapmenu_icon_bunker" );
    _id_1243B( level.completesmokinggunquest._id_12D13, "buildable_guardtower", "buildable_guardtower_clipbrush", "guardtower_01_anim", "iw8_br_payload_raise_tower", &"BR_PAYLOAD/PURCHASE_TOWER", &"BR_PAYLOAD/PURCHASE_TOWER_DISABLED", level.completesmokinggunquest.enemy_mines_init, "ui_mp_br_mapmenu_icon_tower" );
    relic_amped_is_player_valid_to_explode();
}

_id_1243B( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    if ( !isdefined( var_0 ) )
        var_0 = scripts\engine\utility::getstructarray( var_1, "targetname" );

    foreach ( var_10 in var_0 )
    {
        if ( !isdefined( var_10.angles ) )
            var_10.angles = ( 0, 0, 0 );

        var_10.superselectonunset = var_3;
        var_10.focus_fire_attackers = var_2;
        var_10._id_12A8A = var_1;
        var_10._id_11CDB = var_4;
        var_10._id_11C36 = 0;
        var_11 = spawn( "script_model", var_10.origin );
        var_11.angles = var_10.angles;
        var_11 setmodel( "tag_origin" );
        var_11 hide();
        var_11._id_13116 = var_5;
        var_11.price = var_7;
        var_11.loc = var_10;
        var_10.enemy_is_visible = var_11;
        var_11.scriptable = spawn( "script_model", var_10.origin );
        var_11.scriptable.angles = var_10.angles;
        var_11.scriptable setmodel( "military_hq_crate_02_payload" );
        var_11.scriptable forcenetfieldhighlod( 1 );
        var_11.scriptable setscriptablepartstate( "main", "idle" );
        var_12 = var_11.scriptable;
        var_12._id_13116 = var_6;
        var_12.price = var_7;
        var_12.loc = var_10;
        var_10.enemy_lbravo_flyby = var_12;
        var_10.objidnum = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );

        if ( var_10.objidnum != -1 )
        {
            scripts\mp\objidpoolmanager::objective_add_objective( var_10.objidnum, "active", var_10.origin );
            scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_10.objidnum );
            scripts\mp\objidpoolmanager::update_objective_setbackground( var_10.objidnum, 1 );
            scripts\mp\objidpoolmanager::objective_set_play_intro( var_10.objidnum, 0 );
            scripts\mp\objidpoolmanager::objective_set_play_outro( var_10.objidnum, 0 );
            scripts\mp\objidpoolmanager::update_objective_icon( var_10.objidnum, var_8 );
            scripts\mp\objidpoolmanager::update_objective_ownerteam( var_10.objidnum, game["defenders"] );
            _func_421( var_10.objidnum, 1 );
        }

        var_13 = 0;

        if ( isdefined( var_10.script_group ) )
            var_13 = var_10.script_group;
        else
            var_10.script_group = var_13;

        var_14 = obj_icon_revealed( var_13 );

        if ( isdefined( var_14 ) )
        {
            var_15 = var_14.enemy_left_monitor.size;

            if ( isdefined( var_10.script_index ) )
                var_15 = var_10.script_index;
            else
                var_10.script_index = var_15;

            if ( !isdefined( var_14.enemy_left_monitor[var_15] ) )
                var_14.enemy_left_monitor[var_15] = [];

            var_16 = var_14.enemy_left_monitor[var_15].size;
            var_14.enemy_left_monitor[var_15][var_16] = var_10;
        }
    }
}

_id_11B74( var_0, var_1 )
{
    if ( !level.completesmokinggunquest.enemy_left_monitor )
        return;

    var_2 = var_0 - 1;
    scripts\mp\flags::gameflagwait( "infil_complete" );

    if ( isdefined( var_1 ) )
    {
        if ( var_0 > 0 && isdefined( var_1.enemy_left_monitor[var_2] ) )
        {
            foreach ( var_4 in var_1.enemy_left_monitor[var_2] )
            {
                if ( !istrue( var_4._id_11C36 ) )
                    var_4 _id_12A86();
            }
        }

        if ( isdefined( var_1.enemy_left_monitor[var_0] ) )
        {
            foreach ( var_4 in var_1.enemy_left_monitor[var_0] )
                var_4 _id_12A87();
        }
    }
    else
    {
        foreach ( var_1 in level.completesmokinggunquest.paths )
        {
            if ( var_0 > 0 && isdefined( var_1.enemy_left_monitor[var_2] ) )
            {
                foreach ( var_4 in var_1.enemy_left_monitor[var_2] )
                {
                    if ( !istrue( var_4._id_11C36 ) )
                        var_4 _id_12A86();
                }
            }

            if ( isdefined( var_1.enemy_left_monitor[var_0] ) )
            {
                foreach ( var_4 in var_1.enemy_left_monitor[var_0] )
                    var_4 _id_12A87();
            }
        }
    }
}

_id_12A8B()
{
    var_0 = 5.0;
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    self endon( "death" );
    self endon( "makeStructureUnusable" );
    self notify( "structureWatchUse" );
    self endon( "structureWatchUse" );
    var_1 = self;
    var_1 setcursorhint( "HINT_NOICON" );
    var_1 sethintonobstruction( "show" );
    var_1 setusepriority( -1 );
    var_1 setuseholdduration( "duration_none" );
    var_1 sethintstring( var_1._id_13116 );
    var_1 sethintstringparams( var_1.price );
    var_1.userate = 1;
    var_1.curprogress = 0;
    var_1.usetime = var_0;
    var_1.inuse = 0;
    var_1.playerusing = undefined;

    for (;;)
    {
        var_1 waittill( "trigger", var_2 );

        if ( istrue( var_2.isjuggernaut ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
                var_2 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "KILLSTREAKS/JUGG_CANNOT_BE_USED" );

            continue;
        }

        if ( var_1 _id_12A83( var_2 ) )
        {
            var_3 = int( var_1.price / 100 );
            var_2 scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_2.plundercount - var_3 );
            _id_127AB( var_1.loc, var_2 );
            return;
        }
    }
}

_id_12A83( var_0 )
{
    if ( !var_0 scripts\common\utility::is_crate_use_allowed() )
        return 0;

    if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() )
        return 0;

    if ( var_0 isonladder() )
        return 0;

    if ( isdefined( self.playerscaptured ) && isdefined( self.playerscaptured[var_0 getentitynumber()] ) )
        return 0;

    if ( istrue( self.issquadonlycrate ) )
    {
        if ( isdefined( self.playersused ) && scripts\engine\utility::array_contains( self.playersused, var_0 ) )
            return 0;

        if ( var_0.squadindex != self.squadindex || var_0.team != self.team )
            return 0;
    }

    if ( istrue( self.scn_infil_hackney_heli_npc1 ) )
    {
        if ( isdefined( self.playersused ) && scripts\engine\utility::array_contains( self.playersused, var_0 ) )
            return 0;

        if ( var_0.team != self.team )
            return 0;
    }

    if ( isbot( var_0 ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "botIsKillstreakSupported" ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) )
            {
                if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]() != "grnd" && ![[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "botIsKillstreakSupported" ) ]]( self.cratetype ) )
                    return 0;
            }
        }

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "isKillstreakBlockedForBots" ) )
        {
            if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "isKillstreakBlockedForBots" ) ]]( self.cratetype ) )
                return 0;
        }
    }

    if ( !self.isusable )
        return 0;

    if ( var_0 isskydiving() )
        return 0;

    if ( istrue( var_0.inlaststand ) )
        return 0;

    if ( isdefined( self.playerusing ) && self.playerusing != var_0 )
        return 0;

    var_1 = int( self.price / 100 );

    if ( var_0.plundercount < var_1 )
        return 0;

    return 1;
}

_id_12A87()
{
    self.enemy_is_visible show();
    self.enemy_is_visible.isusable = 1;
    self.enemy_lbravo_flyby.isusable = 1;
    self.enemy_is_visible.scriptable setscriptablepartstate( "main", "idle" );
    self.enemy_is_visible makeusable();
    self.enemy_lbravo_flyby makeusable();
    var_0 = int( self.enemy_is_visible.price / 100 );
    var_1 = scripts\mp\utility\teams::getteamdata( game["attackers"], "players" );

    foreach ( var_3 in var_1 )
    {
        self.enemy_is_visible.scriptable hudoutlinedisableforclient( var_3 );
        self.enemy_lbravo_flyby disableplayeruse( var_3 );
        self.enemy_is_visible disableplayeruse( var_3 );
    }

    var_5 = scripts\mp\utility\teams::getteamdata( game["defenders"], "players" );

    foreach ( var_3 in var_5 )
    {
        var_7 = isdefined( var_3.plundercount ) && var_3.plundercount >= var_0;
        var_8 = !istrue( self._id_11C36 );

        if ( var_8 && var_7 == 0 )
        {
            self.enemy_is_visible disableplayeruse( var_3 );
            self.enemy_lbravo_flyby enableplayeruse( var_3 );
            self.enemy_is_visible.scriptable hudoutlinedisableforclient( var_3 );
            continue;
        }

        self.enemy_is_visible enableplayeruse( var_3 );
        self.enemy_lbravo_flyby disableplayeruse( var_3 );

        if ( var_8 && var_7 )
        {
            self.enemy_is_visible.scriptable hudoutlineenableforclient( var_3, "outline_depth_cyan" );
            continue;
        }

        self.enemy_is_visible.scriptable hudoutlinedisableforclient( var_3 );
    }

    scripts\mp\objidpoolmanager::update_objective_ownerteam( self.enemy_is_visible.loc.objidnum, game["defenders"] );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( self.enemy_is_visible.loc.objidnum );
    scripts\mp\objidpoolmanager::objective_teammask_addtomask( self.enemy_is_visible.loc.objidnum, game["defenders"] );
    self.enemy_is_visible thread _id_12A8B();
    self.enemy_lbravo_flyby thread _id_12A8B();
}

_id_12A86()
{
    self.enemy_is_visible notify( "makeStructureUnusable" );
    self.enemy_lbravo_flyby notify( "makeStructureUnusable" );
    self.enemy_is_visible.isusable = 0;
    self.enemy_lbravo_flyby.isusable = 0;
    self.enemy_is_visible.scriptable setscriptablepartstate( "main", "idle" );
    self.enemy_is_visible makeunusable();
    self.enemy_lbravo_flyby makeunusable();
    self.enemy_is_visible _id_12A89();
    self.enemy_lbravo_flyby _id_12A89();
    self.enemy_is_visible.scriptable _id_12A84();
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( self.enemy_is_visible.loc.objidnum );
    self.enemy_is_visible hide();
}

_id_12A89()
{
    var_0 = scripts\mp\utility\teams::getteamdata( game["attackers"], "players" );
    var_1 = scripts\mp\utility\teams::getteamdata( game["defenders"], "players" );

    foreach ( var_3 in var_1 )
        self enableplayeruse( var_3 );

    foreach ( var_3 in var_0 )
        self disableplayeruse( var_3 );
}

_id_12A84()
{
    var_0 = scripts\mp\utility\teams::getteamdata( game["attackers"], "players" );
    var_1 = scripts\mp\utility\teams::getteamdata( game["defenders"], "players" );

    if ( var_0.size > 0 )
        self hudoutlinedisableforclients( var_0 );

    if ( var_1.size > 0 )
        self hudoutlinedisableforclients( var_1 );
}

_id_11A09()
{
    if ( self.team == game["defenders"] )
    {
        foreach ( var_1 in level.completesmokinggunquest.enemy_goto_struct_on_spawn )
            _id_11A08( var_1 );

        foreach ( var_1 in level.completesmokinggunquest._id_12D13 )
            _id_11A08( var_1 );
    }
}

_id_11A08( var_0 )
{
    if ( var_0._id_11C36 == 0 )
    {
        var_1 = int( var_0.enemy_is_visible.price / 100 );

        if ( self.plundercount >= var_1 )
        {
            var_0.enemy_is_visible enableplayeruse( self );
            var_0.enemy_lbravo_flyby disableplayeruse( self );

            if ( istrue( var_0.enemy_is_visible.isusable ) )
                var_0.enemy_is_visible.scriptable hudoutlineenableforclient( self, "outline_depth_cyan" );
        }
        else if ( self.plundercount < var_1 )
        {
            var_0.enemy_is_visible disableplayeruse( self );
            var_0.enemy_lbravo_flyby enableplayeruse( self );
            var_0.enemy_is_visible.scriptable hudoutlinedisableforclient( self );
        }
    }
}

_id_127AB( var_0, var_1 )
{
    var_0._id_11C36 = 1;
    var_2 = var_0.enemy_is_visible;
    var_2 makeunusable();
    var_0.enemy_is_visible = var_2;
    var_2 _id_12A88( var_1, var_0.superselectonunset, var_0._id_11CDB );
    var_3 = getent( var_0.focus_fire_attackers, "targetname" );

    if ( isdefined( var_3 ) )
    {
        var_4 = spawn( "script_model", var_0.origin );
        var_4.angles = var_0.angles;
        var_4 clonebrushmodeltoscriptmodel( var_3 );
        var_2.collision = var_4;
        var_5 = getentarrayinradius( "player", "classname", var_0.origin, 500 );

        foreach ( var_1 in var_5 )
        {
            if ( !isalive( var_1 ) )
                continue;

            if ( var_1 istouching( var_4 ) )
                var_1 setorigin( var_0.origin );
        }
    }

    if ( var_0._id_12A8A == "buildable_checkpoint" )
        var_2 thread delayed_depositing();
    else if ( var_0._id_12A8A == "buildable_guardtower" )
        var_2 _id_12D11( var_1 );

    return var_2;
}

_id_12A88( var_0, var_1, var_2 )
{
    var_3 = 1.53;
    var_4 = anglestoforward( self.angles );
    var_5 = self.origin + var_4 * 50;
    var_6 = spawn( "script_model", self.origin );
    var_6.angles = self.angles;
    var_6 setmodel( "generic_prop_x3" );
    var_6 scriptmodelplayanim( var_2, "structure_reveal" );
    var_6 scriptmodelpauseanim( 1 );
    self.scriptable delete();
    self setmodel( var_1 );
    self linkto( var_6, "j_prop_1", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    self dontinterpolate();
    var_6 scriptmodelpauseanim( 0 );
    wait( var_3 );
    waitframe();
    var_6 delete();
}

bearsred( var_0, var_1 )
{
    var_2 = scripts\cp_mp\killstreaks\airdrop::init_pipe_room_obj( var_0 + ( 0, 0, 3000 ), var_0, ( 0, 0, 0 ), "payload_c130_loot", "inactive", undefined, 1 );
    var_2.nevertimeout = 1;
    var_2 setotherent( var_1 );
    var_2 waittill( "collision", var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );
    waitframe();
    var_2 scripts\cp_mp\killstreaks\airdrop::makecrateunusable();
    var_2 delete();
}

onprematchfadedone( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0.enemy_left_monitor[var_1] ) )
        return;

    foreach ( var_4 in var_0.enemy_left_monitor[var_1] )
    {
        if ( var_4._id_12A8A == var_2 && !istrue( var_4._id_11C36 ) )
            return var_4;
    }
}

delay_end_alarm_sound( var_0, var_1 )
{
    return delay_set_bomber_traversals( var_0, var_1, "buildable_checkpoint" );
}

delay_show_backpack( var_0, var_1 )
{
    return delay_set_bomber_traversals( var_0, var_1, "buildable_guardtower" );
}

delay_set_bomber_traversals( var_0, var_1, var_2 )
{
    var_3 = 25;
    var_4 = 26;
    var_5 = var_1.path;
    var_6 = level.completesmokinggunquest.enemy_ai_enter_alert_due_to_grenade_explode;

    if ( var_6 == 0 && var_0.team == game["attackers"] )
    {
        var_0 scripts\mp\gametypes\br_armory_kiosk.gsc::activate_laser_trap( var_3 );
        return 0;
    }

    if ( var_0.team == game["attackers"] )
        var_6--;

    if ( isdefined( var_5.enemy_left_monitor[var_6] ) )
    {
        var_7 = onprematchfadedone( var_5, var_6, var_2 );

        if ( isdefined( var_7 ) )
        {
            _id_127AB( var_7, var_0 );
            return 1;
        }
    }

    var_0 scripts\mp\gametypes\br_armory_kiosk.gsc::activate_laser_trap( var_4 );
    return 0;
}

delayed_depositing()
{
    level endon( "game_ended" );
    var_0 = ( 0, -30, 0 );
    var_1 = ( 0, -90, 0 );
    var_2 = rotatevector( var_0, self.angles );
    var_3 = self.origin + var_2;
    var_4 = spawnturret( "misc_turret", var_3, "manual_turret_payload_mp", 0 );
    var_4.angles = ( 0, self.angles[1], 0 ) + var_1;
    var_4 setmodel( "weapon_wm_mg_mobile_turret" );
    var_4 setscriptablepartstate( "hide_reticle", 1, 0 );
    self.turret = var_4;
    var_5 = "j_trigger";
    var_6 = var_4 gettagorigin( var_5 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "manual_turret", "createHintObject" ) )
        var_4.useownerobj = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "manual_turret", "createHintObject" ) ]]( var_6, "HINT_BUTTON", undefined, &"BR_PAYLOAD/TURRET_MG", -1, "duration_none", undefined, 80, 60, 80, 60 );

    var_4.useownerobj linkto( var_4, var_5 );
    var_4 setdefaultdroppitch( 0 );
    var_4 setturretmodechangewait( 1 );
    var_4.maxhealth = 999999;
    var_4.health = var_4.maxhealth;
    var_4 makeunusable();

    for (;;)
    {
        var_4.useownerobj waittill( "trigger", var_7 );
        var_8 = var_7.origin;
        var_7 scripts\cp_mp\killstreaks\manual_turret::spectatekey( 0 );
        var_7 disableturretdismount();
        var_4.owner = var_7;
        var_7 giveweapon( "manual_turret_payload_mp", -1, 0, -1, 1 );
        var_9 = var_7 scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( "manual_turret_payload_mp", 1 );

        if ( !istrue( var_9 ) )
        {
            if ( isalive( var_7 ) )
            {
                var_7 enableturretdismount();
                var_7 scripts\cp_mp\killstreaks\manual_turret::spectatekey( 1 );

                if ( var_7 hasweapon( "manual_turret_payload_mp" ) )
                    var_7 takeweapon( "manual_turret_payload_mp" );

                var_7 scripts\mp\utility\inventory::switchtolastweapon();
            }

            continue;
        }

        var_4 setotherent( var_7 );
        var_4 setentityowner( var_7 );
        var_7 controlturreton( var_4 );
        var_7 setclientomnvar( "ui_mobile_turret_controls", 2 );
        var_7 setplayerangles( var_4.angles );
        var_7 thread scripts\cp_mp\killstreaks\manual_turret::manualturret_disablefire( var_7, 0.5, 1 );
        waitframe();

        while ( var_7 usebuttonpressed() )
            waitframe();

        while ( isalive( var_7 ) && !var_7 usebuttonpressed() && !var_7 isinexecutionvictim() )
            waitframe();

        if ( isdefined( var_7 ) )
        {
            var_7 enableturretdismount();
            var_7 controlturretoff( var_4 );
            var_7 setclientomnvar( "ui_mobile_turret_controls", 0 );
            var_7 scripts\cp_mp\killstreaks\manual_turret::spectatekey( 1 );

            if ( var_7 hasweapon( "manual_turret_payload_mp" ) )
                var_7 takeweapon( "manual_turret_payload_mp" );

            var_7 scripts\mp\utility\inventory::switchtolastweapon();
            var_7 thread scripts\cp_mp\killstreaks\manual_turret::specialdayloadouts();
            var_7 setorigin( var_8 );
        }

        var_4.owner = undefined;
        var_4 setotherent( undefined );
        var_4 setentityowner( undefined );
        wait 0.5;
    }
}

_id_12D11( var_0 )
{
    var_1 = 4;

    if ( !isdefined( level.completesmokinggunquest._id_11CBD ) )
        level.completesmokinggunquest._id_11CBD = [];

    if ( level.completesmokinggunquest._id_11CBD.size >= var_1 )
    {
        var_2 = undefined;
        var_3 = undefined;

        foreach ( var_6, var_5 in level.completesmokinggunquest._id_11CBD )
        {
            if ( !isdefined( var_3 ) || var_5._id_11CBE < var_3 )
            {
                var_2 = var_6;
                var_3 = var_5._id_11CBE;
            }
        }

        level.completesmokinggunquest._id_11CBD[var_2] clearportableradar();
        level.completesmokinggunquest._id_11CBD[var_2] = undefined;
    }

    self._id_11CBE = gettime();
    self makeportableradar( var_0 );
    level.completesmokinggunquest._id_11CBD[self getentitynumber()] = self;
}

vehicle_damage_setweaponhitdamagedataforvehicle()
{
    level endon( "game_ended" );
    wait 1;

    if ( !level.completesmokinggunquest.helidrivable )
        return;

    var_0 = getentitylessscriptablearrayinradius( "scriptable_scriptable_auto_ascender", "classname" );
    var_1 = getentitylessscriptablearrayinradius( "scriptable_scriptable_auto_ascender_solo", "classname" );
    var_2 = getentitylessscriptablearrayinradius( "scriptable_scriptable_auto_ascender_soa_tower", "classname" );
    var_3 = getentitylessscriptablearrayinradius( "scriptable_scriptable_auto_ascender_solo_soa_tower", "classname" );

    if ( var_0.size )
    {
        foreach ( var_5 in var_0 )
        {
            if ( var_5 getscriptablehaspart( "ascender" ) )
                var_5 setscriptablepartstate( "ascender", "noprompt" );
        }
    }

    if ( var_1.size )
    {
        foreach ( var_5 in var_1 )
        {
            if ( var_5 getscriptablehaspart( "ascender_solo" ) )
                var_5 setscriptablepartstate( "ascender_solo", "noprompt" );
        }
    }

    if ( var_2.size )
    {
        foreach ( var_5 in var_2 )
        {
            if ( var_5 getscriptablehaspart( "ascender" ) )
                var_5 setscriptablepartstate( "ascender", "noprompt" );
        }
    }

    if ( var_3.size )
    {
        foreach ( var_5 in var_3 )
        {
            if ( var_5 getscriptablehaspart( "ascender_solo" ) )
                var_5 setscriptablepartstate( "ascender_solo", "noprompt" );
        }
    }
}

register_module_pause_unpause_funcs()
{
    if ( !level.completesmokinggunquest.init_first_button )
        return;

    var_0 = [ "jeep", "tac_rover" ];
    var_1 = 0;

    if ( !isdefined( level.completesmokinggunquest.vehiclespawns ) )
        level.completesmokinggunquest.vehiclespawns = scripts\engine\utility::getstructarray( "payload_vehicle_spawns", "script_noteworthy" );

    foreach ( var_3 in level.completesmokinggunquest.vehiclespawns )
    {
        var_3._id_132C4 = var_3.script_parameters;

        if ( !isdefined( var_3._id_132C4 ) )
        {
            var_3._id_132C4 = var_0[var_1];
            var_1++;

            if ( var_1 >= var_0.size )
                var_1 = 0;
        }

        if ( !isdefined( var_3.angles ) )
            var_3.angles = ( 0, 0, 0 );

        var_4 = var_3.script_index;
        var_5 = var_3.script_group;
        var_6 = obj_icon_revealed( var_5 );

        if ( isdefined( var_6 ) )
        {
            var_7 = var_6.enemy_claymore_watchfortrigger[var_4];

            if ( !isdefined( var_7.vehiclespawns ) )
                var_7.vehiclespawns = [];

            var_8 = game["attackers"];

            if ( var_3.targetname == "defender" )
                var_8 = game["defenders"];

            if ( !isdefined( var_7.vehiclespawns[var_8] ) )
                var_7.vehiclespawns[var_8] = [];

            var_9 = var_7.vehiclespawns[var_8].size;
            var_7.vehiclespawns[var_8][var_9] = var_3;
        }
    }
}

spawninitialvehicles()
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) && !istrue( game["switchedsides"] ) )
        scripts\mp\gametypes\br_vehicles.gsc::spawninitialvehicles();
    else
    {
        _id_12828( 1 );
        thread _id_127C4( game["attackers"] );
        thread _id_127C4( game["defenders"] );
    }
}

_id_127C4( var_0 )
{
    level endon( "game_ended" );
    level notify( "spawnDrivableVehiclesTimer_" + var_0 );
    level endon( "spawnDrivableVehiclesTimer_" + var_0 );
    var_1 = 2;
    var_2 = 1;

    foreach ( var_4 in level.completesmokinggunquest.paths )
        var_4.trigger_explosion_grenades[var_0] = 0;

    for (;;)
    {
        foreach ( var_4 in level.completesmokinggunquest.paths )
        {
            var_7 = mp_euphrates_gunnonlinear_opendoor( var_4 );

            if ( var_7 < 0 )
                var_7 = 0;

            var_8 = var_4.enemy_claymore_watchfortrigger[var_7];

            if ( isdefined( var_8 ) && isdefined( var_8.vehiclespawns ) )
            {
                var_9 = var_8.vehiclespawns[var_0];

                foreach ( var_11 in var_9 )
                {
                    if ( var_4.trigger_explosion_grenades[var_0] >= var_1 )
                        break;

                    if ( istrue( var_11.inuse ) )
                        continue;

                    var_12 = scripts\mp\gametypes\br_vehicles.gsc::tryspawnavehicle( var_11._id_132C4, var_11, "alwaysSpawn" );

                    if ( isdefined( var_12 ) )
                    {
                        scripts\cp_mp\vehicles\vehicle_spawn::_id_13287( var_12 );
                        var_12 thread _id_132BA( var_4, var_11, var_0 );

                        if ( !var_2 )
                            break;
                    }
                }
            }
        }

        var_2 = 0;
        wait( level.completesmokinggunquest._id_12829 );
    }
}

_id_132BA( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_0.trigger_explosion_grenades[var_2]++;
    var_1.inuse = 1;
    self waittill( "death" );
    var_0.trigger_explosion_grenades[var_2]--;
    var_1.inuse = undefined;
}

obj_leads_spawned_overall( var_0, var_1 )
{
    var_2 = var_0.nodes[var_1].origin;

    if ( var_1 + 1 < var_0.nodes.size )
    {
        var_3 = var_0.nodes[var_1 + 1].origin;
        var_4 = var_3 - var_2;
    }
    else
    {
        var_5 = var_0.nodes[var_1 - 1].origin;
        var_4 = var_2 - var_5;
    }

    return var_4;
}

_id_124EA( var_0 )
{
    if ( level.completesmokinggunquest.vehicle_docollisiondamagetoplayer == "port" && var_0.label == "B" && var_0.enemy_ai_enter_alert_due_to_grenade_explode == 0 || level.completesmokinggunquest.vehicle_docollisiondamagetoplayer == "trainstation2" && var_0.label == "A" && var_0.enemy_ai_enter_alert_due_to_grenade_explode == 1 )
        return 1;

    return 0;
}

enemies_validate_life( var_0 )
{
    [var_2, var_3, var_4, var_5] = last_weapon_fired_time( var_0, var_0.enemy_ai_enter_alert_due_to_grenade_explode );
    thread get_freight_lift_spawnpoints( var_0, var_2, var_4 );
    thread get_freight_lift_spawnpoints( var_0, var_3, var_4 );
}

last_weapon_fired_time( var_0, var_1 )
{
    var_2 = 150;
    var_3 = 200;
    var_4 = 5;
    var_5 = 30;
    var_6 = 184;
    var_7 = var_2 - var_4;
    var_8 = 50;
    var_9 = var_0.enemy_claymore_watchfortrigger[var_1].transition_snd_org;
    var_10 = var_0.nodes[var_9].origin;
    var_11 = var_0.nodes[var_9].angles;
    var_12 = vectornormalize( obj_leads_spawned_overall( var_0, var_9 ) );
    var_13 = vectortoangles( var_12 );
    var_14 = anglestoright( var_13 );
    var_15 = -1 * var_14;
    var_16 = var_10 + var_6 * var_12 + var_2 * var_14;
    var_17 = var_10 + var_6 * var_12 + var_2 * var_15;
    var_18 = 0;
    var_19 = 0;

    for ( var_20 = var_2; var_20 <= var_3; var_20 = var_20 + var_4 )
    {
        var_21 = var_10 + var_6 * var_12 + var_20 * var_14;
        var_22 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_21 );
        var_23 = abs( var_10[2] - var_22[2] );
        var_24 = var_23 < var_5;

        if ( var_24 && !var_19 )
        {
            var_17 = var_22;
            var_19 = 1;
        }

        var_25 = var_10 + var_6 * var_12 + var_20 * var_15;
        var_26 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_25 );
        var_27 = abs( var_10[2] - var_26[2] );
        var_28 = var_27 < var_5;

        if ( var_28 && !var_18 )
        {
            var_16 = var_26;
            var_18 = 1;
        }

        if ( var_28 && var_24 )
            return [ var_22, var_26, var_13, 1 ];
    }

    waitframe();

    if ( !var_18 || !var_19 )
    {
        for ( var_20 = var_8; var_20 <= var_7; var_20 = var_20 - var_4 )
        {
            if ( !var_19 )
            {
                var_21 = var_10 + var_6 * var_12 + var_20 * var_14;
                var_22 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_21 );
                var_23 = abs( var_10[2] - var_22[2] );
                var_24 = var_23 < var_5;

                if ( var_24 )
                {
                    var_17 = var_22;
                    var_19 = 1;
                }
            }

            if ( !var_18 )
            {
                var_25 = var_10 + var_6 * var_12 + var_20 * var_15;
                var_26 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_25 );
                var_27 = abs( var_10[2] - var_26[2] );
                var_28 = var_27 < var_5;

                if ( var_28 )
                {
                    var_16 = var_26;
                    var_18 = 1;
                }
            }

            if ( var_18 && var_19 )
                break;
        }
    }

    return [ var_16, var_17, var_13, 0 ];
}

get_freight_lift_spawnpoints( var_0, var_1, var_2 )
{
    var_3 = spawn( "script_model", var_1 );
    var_3.angles = ( 0, var_2[1], 0 );
    var_3 setmodel( "vfx_br_payload_checkpoint" );
    var_3 forcenetfieldhighlod( 1 );
    var_4 = "checkpoint";

    if ( _id_124EA( var_0 ) )
        var_4 = "checkpoint_ohcheck";

    var_3 setscriptablepartstate( "checkpoint", var_4 );
    _id_133D8( var_0 );
    var_3 setscriptablepartstate( "checkpoint", "checkpoint_clear" );
    wait 5;
    var_3 delete();
}

_id_133D8( var_0 )
{
    var_0 waittill( "checkPointUpdate" );
}

x1opsplayertransition( var_0, var_1 )
{
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self giveweapon( var_0 );
    self setweaponammostock( var_0, 0 );
    self setweaponammoclip( var_0, 0 );
    scripts\mp\supers::allowsuperweaponstow();
    var_2 = scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_0, 0, 1 );

    if ( !istrue( var_2 ) )
    {
        scripts\mp\supers::unstowsuperweapon();

        if ( scripts\cp_mp\utility\inventory_utility::isswitchingtoweaponwithmonitoring( var_0 ) )
            scripts\cp_mp\utility\inventory_utility::abortmonitoredweaponswitch( var_0 );
        else
            self takeweapon( var_0 );
    }

    var_1 notify( "build_tool_ready" );

    while ( istrue( self.revive_wounded_in_handler ) )
    {
        waitframe();

        if ( !scripts\cp_mp\utility\inventory_utility::iscurrentweapon( var_0 ) )
            self.revive_wounded_in_handler = 0;
    }

    var_1 show();
    scripts\cp_mp\utility\inventory_utility::getridofweapon( var_0 );
    var_1 notify( "build_complete" );
}

x1opsnpcweaponreceivermodel( var_0, var_1 )
{
    var_2 = self;
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    var_2 endon( "death_or_disconnect" );

    if ( var_2 isgestureplaying( "iw8_ges_payload_build_barrier" ) )
        return;

    var_2 enableoffhandweapons();
    var_2 giveandfireoffhand( var_0 );
    waitframe();

    if ( !var_2 hasweapon( var_0 ) )
    {
        var_2 giveandfireoffhand( var_0 );
        waitframe();
    }

    var_1 notify( "build_tool_ready" );

    while ( istrue( var_2.revive_wounded_in_handler ) )
        waitframe();

    self takeweapon( var_0 );
    var_1 notify( "build_complete" );
}

vehicle_getturretbyweapon()
{
    if ( !istrue( level.completesmokinggunquest.vehicle_incomingcallback ) )
        return;

    level endon( "payloadComplete" );
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_done" );
    level._id_12BEF = [];
    level._id_12BEF[game["attackers"]] = [];
    level._id_12BEF[game["defenders"]] = [];
    level._id_12BE6 = [];
    level._id_12BE6[game["attackers"]] = undefined;
    level._id_12BE6[game["defenders"]] = undefined;
    var_0 = 1;

    for (;;)
    {
        level waittill( "checkPointUpdate", var_1 );
        var_2 = int( max( mp_euphrates_patches() - 1, 0 ) );
        wait 3;
        var_3 = undefined;
        var_4 = undefined;

        if ( istrue( level.completesmokinggunquest.vehicle_handleflarefire ) || istrue( level.completesmokinggunquest.vehicle_incomingremovedcallback ) )
        {
            var_5 = scripts\mp\gametypes\br_capshoot_quest.gsc::move_spawnpoints_to_valid_positions();
            var_3 = var_5[var_2 % var_5.size];
        }

        if ( istrue( level.completesmokinggunquest.vehicle_handleflarerecharge ) || istrue( level.completesmokinggunquest.vehicle_incomingremovedcallback ) )
        {
            var_6 = scripts\mp\gametypes\br_capshoot_quest.gsc::nag_player_remind_lore_vo();
            var_4 = var_6[var_2 % var_6.size];
        }

        var_7 = level.completesmokinggunquest.vehicle_has_flare;

        if ( istrue( level.completesmokinggunquest.vehicle_handleflarefire ) )
        {
            thread get_footstepsprint_alias( var_1, var_7, game["attackers"], var_3, game["defenders"], var_4 );

            if ( var_0 )
                _id_1253F( game["attackers"] );
        }

        if ( istrue( level.completesmokinggunquest.vehicle_handleflarerecharge ) )
        {
            thread get_footstepsprint_alias( var_1, var_7, game["defenders"], var_4, game["attackers"], var_3 );

            if ( var_0 )
                _id_1253F( game["defenders"] );
        }

        if ( var_0 )
            var_0 = 0;
    }
}

get_footstepsprint_alias( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level notify( "create_quest_tablets" );
    level endon( "create_quest_tablets" );

    for ( var_6 = 0; var_6 < var_1; var_6++ )
        get_footstep_alias( var_0, var_2, var_3, var_4, var_5 );
}

get_footstep_alias( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_0 ) )
        return;

    var_5 = -600;
    var_6 = -300;
    var_7 = 15;
    var_8 = var_0;

    if ( istrue( var_0.forcegivekillstreak ) )
        var_8 = obj_a_covers( var_0 );

    var_9 = undefined;

    if ( isdefined( var_8.gamemodeoverridemeleeviewkickscale ) )
        var_9 = var_8.gamemodeoverridemeleeviewkickscale;
    else
        var_9 = var_8.vehicle;

    if ( isdefined( var_9 ) )
    {
        var_10 = randomfloatrange( -1 * var_7, var_7 );
        var_11 = ( 0, var_9.angles[1] + var_10, 0 );
        var_12 = anglestoforward( var_11 );
        var_13 = randomfloatrange( var_5, var_6 );
        var_14 = var_9.origin + var_12 * var_13;
        var_15 = _id_127A9( var_14, var_1, var_2, var_3, var_4 );
        var_15.path = var_8;
    }
}

_id_127A9( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = 20;
    var_6 = scripts\mp\gametypes\br_public.gsc::init_rpg_spawns( var_0 );
    var_6 = var_6 + ( 0, 0, var_5 );
    var_7 = scripts\mp\gametypes\br_quest_util.gsc::_id_12772( var_2, var_6 );

    if ( isdefined( var_7 ) )
    {
        var_7.team = var_1;

        if ( score_event_enemy_killed() )
            var_7.wait_for_morales_thanks = ::last_vo_time;

        if ( istrue( level.completesmokinggunquest.vehicle_incomingremovedcallback ) )
        {
            var_7.updaterotatedebug = ::moveplunderextractionsitesonuse;
            var_7.otherteam = var_3;
            var_7.updatescavengerhud = var_4;
        }

        scripts\mp\gametypes\br_pickups.gsc::_id_11E02( var_7 );
    }

    return var_7;
}

last_vo_time( var_0, var_1 )
{
    var_2 = var_1.path;

    if ( !score_event_enemy_killed() || !isdefined( var_2 ) )
        return undefined;

    level.completesmokinggunquest._id_11C71 = var_2;
    var_3 = scripts\engine\utility::array_sort_with_func( level.completesmokinggunquest._id_11C70, ::adrenaline_crate_spawn );
    level.completesmokinggunquest._id_11C71 = undefined;
    var_4 = var_3[0];

    for ( var_5 = 0; var_5 < var_3.size; var_5++ )
    {
        var_6 = var_3[var_5];
        var_7 = 0;

        foreach ( var_9 in var_2._id_12840[var_0.team] )
        {
            if ( isdefined( var_9.trigger ) && ispointinvolume( var_6.origin, var_9.trigger ) )
                continue;

            if ( isdefined( var_9._id_1346E ) && ispointinvolume( var_6.origin, var_9._id_1346E ) )
                continue;

            var_7 = 1;
        }

        if ( !istrue( var_7 ) )
            continue;

        var_4 = var_6;
        break;
    }

    var_11 = spawnstruct();
    var_11.origin = var_4.origin;
    var_11.angles = var_4.angles;
    var_11.spawnflags = 16;
    var_11._id_11C6F = var_4;
    return var_11;
}

moveplunderextractionsitesonuse( var_0 )
{
    var_1 = var_0.otherteam;
    var_2 = var_0.path;

    if ( !isdefined( var_1 ) || !isdefined( var_2 ) || !isdefined( var_2.vehicle ) )
        return undefined;

    var_3 = undefined;
    var_4 = undefined;

    foreach ( var_6 in level.squaddata[var_1] )
    {
        var_7 = 0;
        var_8 = var_6.players.size;

        if ( var_8 > 0 )
        {
            foreach ( var_10 in var_6.players )
                var_7 = var_7 + distancesquared( var_10.origin, var_2.vehicle.origin );

            var_7 = var_7 / var_8;

            if ( !istrue( var_4 ) || var_7 > var_4 )
            {
                var_3 = var_6;
                var_4 = var_7;
            }
        }
    }

    if ( isdefined( var_3 ) && var_3.players.size > 0 )
        return var_3.players[0];

    return undefined;
}

_id_1253F( var_0 )
{
    var_1 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3 ) && isalive( var_3 ) )
            var_3 thread scripts\mp\hud_message::showsplash( "br_capshoot_quest_first_tablet_alert" );
    }
}

score_event_enemy_killed()
{
    return isdefined( level.completesmokinggunquest._id_11C70 ) && level.completesmokinggunquest._id_11C70.size > 0;
}

adrenaline_crate_spawn( var_0, var_1 )
{
    var_2 = level.completesmokinggunquest._id_11C71;
    var_3 = var_2.vehicle.origin;
    return distancesquared( var_0.origin, var_3 ) < distancesquared( var_1.origin, var_3 );
}

_id_123A3( var_0 )
{
    _id_1237F( "current_player_path_assignment", var_0 );
}

_id_123A6( var_0 )
{
    _id_1237F( "current_player_team_assignment", var_0 );
}

_id_123A4( var_0 )
{
    _id_1237F( "current_player_respawn", var_0 );
}

_id_123A5( var_0 )
{
    _id_1237F( "current_player_tacmap", var_0 );
}

_id_123A7( var_0 )
{
    _id_1237F( "in_cinematic_controls_locked", var_0 );
}

_id_123AB( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( var_0 == 1, "number_of_teammates_on_path_b", "number_of_teammates_on_path_a" );
    _id_12380( var_2, var_1 );
}

_id_123AF( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( var_0 == 1, "path_b_state", "path_a_state" );
    _id_12380( var_2, var_1 );
}

_id_123AA( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( var_0 == 1, "path_b_checkpoints_complete", "path_a_checkpoints_complete" );
    _id_12380( var_2, var_1 );
}

_id_123A9( var_0 )
{
    var_1 = int( var_0 / 100 );
    var_1 = scripts\engine\utility::ter_op( var_1 <= 0, 0, var_1 );
    _id_12380( "last_chance_time", var_1 );
}

_id_123A8( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    _id_12380( "last_chance_max_time", var_0 );
}

spawnintermission_nocam( var_0 )
{
    var_1 = 0;

    if ( var_0 >= 0.999 )
        var_1 = 10000;
    else if ( var_0 > 0.0 )
        var_1 = int( var_0 * 10000 );

    return var_1;
}

_id_123AE( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( var_0 == 1, "path_b_percent_complete", "path_a_percent_complete" );
    var_3 = spawnintermission_nocam( var_1 );
    _id_12380( var_2, var_3 );
}

_id_123AC( var_0, var_1, var_2 )
{
    var_3 = scripts\engine\utility::ter_op( var_0 == 1, "path_b_obstacle_state", "path_a_obstacle_state" );
    var_4 = scripts\engine\utility::ter_op( var_2 == 1, 1, 0 );
    _id_12380( var_3, var_4, var_1 );
}

_id_12380( var_0, var_1, var_2 )
{
    [var_4, var_5, var_6, var_1] = next_mortar_vo( var_0, var_1 );

    if ( isdefined( var_2 ) )
        var_4 = var_4 + var_2;

    if ( var_6 == "" )
        return;

    zone_bounds( var_6, var_1, var_4, var_5 );
}

_id_1237F( var_0, var_1 )
{
    [var_3, var_4, var_5, var_1] = next_mortar_vo( var_0, var_1 );

    if ( var_5 == "" )
        return;

    zombievehiclelaststand( var_5, var_1, var_3, var_4 );
}

next_mortar_vo( var_0, var_1 )
{
    var_2 = 0;
    var_3 = 0;
    var_4 = "";

    switch ( var_0 )
    {
        case "current_player_path_assignment":
            [var_2, var_3] = [ 0, 1 ];
            var_4 = "ui_br_payload_data_client";
            break;
        case "current_player_team_assignment":
            [var_2, var_3] = [ 1, 1 ];
            var_4 = "ui_br_payload_data_client";
            break;
        case "current_player_respawn":
            [var_2, var_3] = [ 2, 1 ];
            var_4 = "ui_br_payload_data_client";
            break;
        case "in_cinematic_controls_locked":
            [var_2, var_3] = [ 3, 1 ];
            var_4 = "ui_br_payload_data_client";
            break;
        case "current_player_tacmap":
            [var_2, var_3] = [ 4, 1 ];
            var_4 = "ui_br_payload_data_client";
            break;
        case "number_of_teammates_on_path_a":
            [var_2, var_3] = [ 0, 6 ];
            var_4 = "ui_br_payload_data";
            break;
        case "number_of_teammates_on_path_b":
            [var_2, var_3] = [ 6, 6 ];
            var_4 = "ui_br_payload_data";
            break;
        case "path_a_state":
            [var_2, var_3] = [ 12, 3 ];
            var_4 = "ui_br_payload_data";
            break;
        case "path_b_state":
            [var_2, var_3] = [ 15, 3 ];
            var_4 = "ui_br_payload_data";
            break;
        case "path_a_checkpoints_complete":
            [var_2, var_3] = [ 18, 2 ];
            var_4 = "ui_br_payload_data";
            break;
        case "path_b_checkpoints_complete":
            [var_2, var_3] = [ 20, 2 ];
            var_4 = "ui_br_payload_data";
            break;
        case "last_chance_time":
            [var_2, var_3] = [ 22, 10 ];
            var_4 = "ui_br_payload_data";
            break;
        case "path_a_obstacle_state":
            [var_2, var_3] = [ 0, 1 ];
            var_4 = "ui_br_payload_data_2";
            break;
        case "path_b_obstacle_state":
            [var_2, var_3] = [ 10, 1 ];
            var_4 = "ui_br_payload_data_2";
            break;
        case "last_chance_max_time":
            [var_2, var_3] = [ 20, 3 ];
            var_4 = "ui_br_payload_data_2";
            break;
        case "path_a_percent_complete":
            [var_2, var_3] = [ 0, 16 ];
            var_4 = "ui_br_payload_percents";
            break;
        case "path_b_percent_complete":
            [var_2, var_3] = [ 16, 16 ];
            var_4 = "ui_br_payload_percents";
            break;
        default:
            break;
    }

    return [ var_2, var_3, var_4, var_1 ];
}

zombievehiclelaststand( var_0, var_1, var_2, var_3 )
{
    var_4 = int( pow( 2, var_3 ) ) - 1;
    var_5 = ( var_1 & var_4 ) << var_2;
    var_6 = ~( var_4 << var_2 );
    var_7 = self getclientomnvar( var_0 );
    var_8 = var_7 & var_6;
    var_9 = var_8 + var_5;

    if ( var_9 != var_7 )
        self setclientomnvar( var_0, var_9 );
}

zone_bounds( var_0, var_1, var_2, var_3 )
{
    var_4 = int( pow( 2, var_3 ) ) - 1;
    var_5 = ( var_1 & var_4 ) << var_2;
    var_6 = ~( var_4 << var_2 );
    var_7 = getomnvar( var_0 );
    var_8 = var_7 & var_6;
    var_9 = var_8 + var_5;

    if ( var_9 != var_7 )
        setomnvar( var_0, var_9 );
}

vehicle_damage_setpremoddamagecallback()
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    wait 6.0;
    thread vehicle_damage_setpostmoddamagecallback();
    scripts\mp\flags::gameflagwait( "infil_complete" );
    wait( randomintrange( 20, 25 ) );
    thread vehicle_damage_setpostmoddamagecallback();
}

#using_animtree("script_model");

vehicle_damage_setpostmoddamagecallback()
{
    level endon( "game_ended" );
    var_0 = [];
    var_1 = undefined;
    var_2 = level.completesmokinggunquest.vehicle_docollisiondamagetoplayer;
    var_3 = [];
    var_4 = 1.2;

    switch ( var_2 )
    {
        case "port":
            var_0[var_0.size] = ( 38775, -23332, 197 );
            var_0[var_0.size] = ( 33582, -25827, -278 );
            var_1 = 255;
            break;
        case "trainstation2":
            var_0[var_0.size] = ( -9592, -17688, -360 );
            var_0[var_0.size] = ( -7456, -20160, 592 );
            var_1 = 15;
            break;
        case "downtown2":
            var_0[var_0.size] = ( 24012, -22726, 371 );
            var_0[var_0.size] = ( 21811, -18619, 784 );
            var_1 = 60;
            break;
        case "standard":
            var_0[var_0.size] = ( 0, 0, 0 );
            var_1 = 0;
            break;
        default:
            break;
    }

    var_5 = spawnstruct();
    var_5.streakname = "precision_airstrike";
    var_5.owner = last_vampire_feedback();
    var_5.score = 0;
    var_5.shots_fired = 0;
    var_5.hits = 0;
    var_5.damage = 0;
    var_5.kills = 0;
    var_5.player_completed = 0;
    var_5.bomb_sites_spawn = 0;
    var_6 = undefined;
    var_7 = %mp_alfa10_flyin;
    var_8 = undefined;
    var_9 = 24000;
    var_10 = 6500;
    var_11 = 1000;
    var_12 = 1500;
    var_13 = 215;
    var_14 = ( 0, var_1, 0 );
    var_15 = undefined;
    var_16 = last_vampire_feedback();

    if ( isdefined( var_16 ) && istrue( var_0.size > 1 ) )
    {
        for ( var_17 = 0; var_17 < var_0.size; var_17++ )
        {
            var_18 = scripts\cp_mp\killstreaks\airstrike::getflightpath( var_0[var_17], var_14, var_9, 1, var_11, var_10, var_12, var_5.streakname, var_15 );
            wait( var_4 );
            var_11 = var_11 + randomintrange( 200, 300 );
            level thread scripts\cp_mp\killstreaks\airstrike::doplanestrike( var_0[var_17], var_18["startPoint"], var_18["endPoint"], var_11, var_6, var_5, var_7, var_5.owner, var_8 );
        }

        level thread isxmike109explosiveheadshot( var_2, var_4 );
    }
}

isxmike109explosiveheadshot( var_0, var_1 )
{
    level endon( "game_ended" );
    wait 5;

    switch ( var_0 )
    {
        case "port":
            scripts\engine\utility::exploder( "pl_intro_exp_docks" );
            wait( var_1 - 1 );
            scripts\engine\utility::exploder( "pl_intro_exp_docks2" );
            break;
        case "trainstation2":
            wait 0.5;
            scripts\engine\utility::exploder( "pl_intro_exp_trnstn" );
            wait( var_1 - 0.7 );
            scripts\engine\utility::exploder( "pl_intro_exp_trnstn2" );
            break;
        case "downtown2":
            wait( var_1 - 1 );
            scripts\engine\utility::exploder( "pl_intro_exp_dwtn" );
            scripts\engine\utility::exploder( "pl_intro_exp_dwtn2" );
            break;
        case "standard":
            scripts\engine\utility::exploder( "pl_intro_exp_1" );
            break;
        default:
            break;
    }
}

last_vampire_feedback()
{
    var_0 = undefined;

    foreach ( var_2 in level.players )
    {
        if ( isalive( var_2 ) && var_2.team == game["attackers"] )
        {
            var_0 = var_2;
            break;
        }
    }

    return var_0;
}

startspectatorview()
{
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "spawned_player" );
    scripts\mp\gametypes\br_spectate.gsc::weapon_xp_iw8_ar_golf36();

    if ( isbot( self ) )
        return;

    thread weapon_xp_iw8_la_gromeo();
    scripts\mp\utility\player::updatesessionstate( "spectator" );
    scripts\mp\spectating::setdisabled();

    if ( isdefined( self.lastdeathangles ) )
        self setplayerangles( self.lastdeathangles );

    _id_123A4( 1 );
    waitframe();
    var_0 = obj_pregame();

    if ( !isdefined( var_0 ) )
        return;

    var_1 = var_0.origin;
    var_2 = var_0.angles;
    self cameralinkto( var_0, "tag_origin", 1 );
    self visionsetthermalforplayer( "ac130_color" );
    self thermalvisionon();
    self playlocalsound( "mp_cmd_camera_zoom_out" );
    self setclienttriggeraudiozonepartialwithfade( "spawn_cam", 0.5, "mix" );
}

_id_1307D( var_0, var_1, var_2, var_3 )
{
    self unlink();
    var_4 = self.origin;
    var_5 = self.angles;
    var_6 = 0;

    if ( var_1[0] != var_4[0] )
    {
        self moveto( var_1, 0.1 );
        var_6 = 1;
    }

    if ( istrue( var_6 ) )
    {
        var_7 = anglestoforward( var_2 ) * 300;
        var_7 = var_7 * ( 1, 1, 0 );
        var_0 earthquakeforplayer( 0.03, 15.0, var_1 + var_7, 1000 );
    }

    thread sidehouse_intel_sequence( var_3 );
}

sidehouse_intel_sequence( var_0 )
{
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    self endon( "death" );
    self waittill( "movedone" );

    if ( isdefined( var_0 ) )
        self linkto( var_0 );
}

_id_12B14( var_0 )
{
    if ( isdefined( self.last_gren_drop_time ) && isdefined( self.vehicle_collision_takedamage ) && !isbot( self ) )
    {
        [var_2, var_3, var_4] = wheelson_delay_allow_attack( var_0 );
        self.last_gren_drop_time _id_1307D( self, var_2, var_3, var_4 );
    }
}

wheelson_delay_allow_attack( var_0 )
{
    if ( !isdefined( var_0 ) )
    {
        if ( isdefined( self.vehicle_collision_takedamage ) )
            var_0 = self.vehicle_collision_takedamage;
        else
            var_0 = level.completesmokinggunquest.paths[0];
    }

    var_1 = var_0.label;
    var_2 = 0;

    if ( var_1 != "A" )
        var_2 = 1;

    var_3 = obj_leads_found_overall( var_2 );
    var_4 = var_3.vehicle;
    var_5 = 88;
    var_6 = var_4.angles[1];
    var_7 = anglestoforward( ( 0, var_6, 0 ) );
    var_8 = 500;
    var_9 = 5000;
    var_10 = ( var_4.origin[0] + var_7[0] * var_8, var_4.origin[1] + var_7[1] * var_8, var_9 );
    var_11 = ( var_5, var_6, 0 );

    if ( self.team == game["defenders"] )
        var_11 = ( var_5, var_6 + 180, 0 );

    return [ var_10, var_11, var_4 ];
}

obj_pregame()
{
    if ( isdefined( self.last_gren_drop_time ) )
        return self.last_gren_drop_time;

    var_0 = wheelson_fire_thermite();
    [var_2, var_3, var_4] = wheelson_delay_allow_attack( var_0 );
    var_5 = spawn( "script_model", var_2 );
    var_5.angles = var_3;
    var_5 setmodel( "tag_origin" );
    var_5 hide();
    var_5 forcenetfieldhighlod( 1 );
    var_5 showtoplayer( self );
    self.last_gren_drop_time = var_5;
    return self.last_gren_drop_time;
}

_id_119E9()
{
    var_0 = wheelson_fire_thermite();
    [var_2, var_3, var_4] = wheelson_delay_allow_attack( var_0 );
    scripts\mp\gametypes\br_public.gsc::_id_119E7( var_2 );
}

yaw_updater()
{
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    self endon( "disconnect" );
    self waittill( "playerPrestreamComplete" );
    wait 2;
    thread scripts\mp\spawncamera::startoperatorsound();
    waitframe();

    if ( isdefined( self.updateexpiredlootleader ) )
    {
        self.updateexpiredlootleader.origin = self.origin + ( 0, 0, 80 );
        self.updateexpiredlootleader linkto( self );
    }

    scripts\mp\flags::gameflagwait( "infil_complete" );

    if ( isdefined( self.updateexpiredlootleader ) )
    {
        self clearsoundsubmix( "iw8_mp_spawn_camera" );
        self.updateexpiredlootleader unlink();
        self.updateexpiredlootleader stoploopsound( self.updatefobindanger );
        self.updateexpiredlootleader delete();
        self.updateexpiredlootleader = undefined;
        self.updatefobindanger = undefined;
    }
}

weapon_xp_iw8_la_gromeo()
{
    level endon( "payloadComplete" );
    level endon( "game_ended" );
    self endon( "disconnect" );
    thread scripts\mp\spawncamera::startoperatorsound();
    waitframe();

    if ( isdefined( self.updateexpiredlootleader ) )
    {
        self.updateexpiredlootleader.origin = self.origin + ( 0, 0, 80 );
        self.updateexpiredlootleader linkto( self );
    }
}

relic_bang_and_boom_think()
{
    if ( !isdefined( level.completesmokinggunquest._id_12118 ) )
    {
        var_0 = [];

        foreach ( var_2 in level.completesmokinggunquest.paths )
        {
            var_0[var_0.size] = _id_12817( "ee_machinery_satellite_solarpanel_04_dmg_payload", var_2.get_player_who_most_recently_threw_grenade, 0 );
            var_0[var_0.size] = _id_12817( "ee_machinery_satellite_solarpanel_04_dmg_payload", var_2.get_player_who_most_recently_threw_grenade, 1 );
            var_0[var_0.size] = _id_12817( "ee_machinery_satellite_panel_01_payload", var_2.get_player_who_most_recently_threw_grenade, 2 );
        }

        level.completesmokinggunquest._id_12118 = var_0;
    }

    var_4 = getent( "payload_satellite_clipbrush", "script_noteworthy" );

    if ( isdefined( var_4 ) )
        var_4 delete();

    foreach ( var_2 in level.completesmokinggunquest.paths )
    {
        foreach ( var_7 in level.completesmokinggunquest._id_12118 )
        {
            if ( var_7.script_group == var_2.get_player_who_most_recently_threw_grenade )
            {
                var_8 = var_7;

                if ( !isent( var_8 ) )
                    var_8 = _id_12817( var_7.model, var_7.script_group, var_7.script_index + 1 );

                var_8 notsolid();
                var_2.pieces[var_2.pieces.size] = var_8;
            }
        }

        var_2.vo_exfil_helo_arrived_nag = _id_12817( "ee_machinery_satellite_thruster_module_nopanel_dmg_payload" );
    }
}

_id_12817( var_0, var_1, var_2 )
{
    var_3 = spawn( "script_model", ( 0, 0, 0 ) );
    var_3 setmodel( var_0 );
    var_3.script_group = var_1;
    var_3.script_index = var_2;
    var_3 hide();
    return var_3;
}

oldlatespawnplayer( var_0, var_1 )
{
    foreach ( var_3 in var_0.pieces )
    {
        if ( var_3.script_index == var_1 )
            return var_3;
    }
}

_id_1246E( var_0, var_1 )
{
    if ( var_1 > 0 )
    {
        var_2 = oldlatespawnplayer( var_0, var_1 );
        var_0.gamemodeoverridemeleeviewkickscale _id_12EBA( var_2, var_1 );
    }
}

_id_12EBA( var_0, var_1 )
{
    var_2 = ( 0, 0, 0 );
    var_3 = ( 0, 0, 0 );

    switch ( var_1 )
    {
        case 0:
            var_3 = ( -41.3, -9.2, 106.1 );
            break;
        case 1:
            var_3 = ( -23.7, 40.8, 127.1 );
            var_2 = ( 0, 2, -80 );
            break;
        case 2:
            var_3 = ( -70.7, 40.8, 127.1 );
            var_2 = ( 0, 2, -80 );
            break;
        case 3:
            var_3 = ( 9.7, -1.8, 100.1 );
            var_2 = ( 0, -90, -84 );
            break;
        default:
            break;
    }

    var_0 show();
    var_0 linkto( self, "tag_origin", var_3, var_2 );
}

cleanup_trap_room()
{
    wait 5;
    scripts\mp\utility\sound::apc_target_enemies( "br_mode_payload_sfx" );
    setglobalsoundcontext( "gamemode", "payload" );
}

totalcollecteditems()
{
    level endon( "stop_overtime" );
    var_0 = 0;
    var_1 = obj_hangar_bombs();

    for (;;)
    {
        var_2 = obj_hangar_bombs();

        if ( var_2 > var_1 )
        {
            if ( var_0 >= 10 )
            {
                foreach ( var_4 in level.players )
                    var_4 playlocalsound( "mus_payload_overtime_hit" );
            }

            var_0 = 0;
        }
        else if ( var_2 == var_1 )
            var_0 = var_0 + 1;

        var_1 = var_2;
        waitframe();
    }
}

totaldamage()
{
    while ( isdefined( level.addquestrewardtierframeend ) == 1 )
    {
        foreach ( var_1 in level.players )
        {
            var_2 = isdefined( var_1.addscriptedspawnpoints );

            if ( var_2 == 0 )
            {
                var_1 setplayermusicstate( "br_payload_overtime_suspense" );
                var_1 playlocalsound( "mus_payload_overtime_hit" );
                var_1.addscriptedspawnpoints = 1;
            }
        }

        waitframe();
    }

    foreach ( var_1 in level.players )
    {
        var_2 = isdefined( var_1.addscriptedspawnpoints );

        if ( var_2 == 1 )
        {
            var_1 setplayermusicstate( "br_payload_overtime_slam" );
            var_1.addscriptedspawnpoints = undefined;
        }
    }

    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 4.5 );

    foreach ( var_1 in level.players )
        var_1 setplayermusicstate( "" );
}

totalcashongroundatstart()
{
    for (;;)
    {
        level waittill( "start_overtime" );
        level.addquestrewardtierframeend = 1;
        level thread totaldamage();
        level thread totalcollecteditems();
        level waittill( "stop_overtime" );
        waittillframeend;
        level.addquestrewardtierframeend = undefined;
    }
}

_id_11B17( var_0 )
{
    thread _id_11A09();
}

_id_11D84()
{
    foreach ( var_1 in level.completesmokinggunquest.paths )
    {
        if ( !isdefined( var_1 ) || !isdefined( var_1.vehicle ) )
            continue;

        var_2 = var_1.vehicle;
        var_2 _id_132C3();
        getentitylessscriptablearray( "dlog_event_br_payload_game_end", [ "path_name", level.completesmokinggunquest.vehicle_docollisiondamagetoplayer, "path_index", var_1.script_index, "total_push_distance", var_2 _id_132AF(), "longest_push_distance", var_1.spawn_fulton_ac130_mdl, "total_push_time", var_1._id_12CF1, "checkpoints_completed", var_1.enemy_ai_enter_alert_due_to_grenade_explode, "obstacles_destroyed", var_1.turn_off_have_target_hud ] );
    }
}
