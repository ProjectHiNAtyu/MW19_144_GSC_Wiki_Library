// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\mp\gametypes\br_plunder.gsc::init();
    scripts\mp\gametypes\br_armory_kiosk.gsc::init();
    scripts\mp\flags::gameflaginit( "POIs_spawned", 0 );
    level thread _spawnpois();
}

initplayer()
{
    scripts\mp\gametypes\br_plunder.gsc::initplayer();
}

onprematchdone()
{
    scripts\mp\flags::gameflagwait( "POIs_spawned" );
    scripts\mp\gametypes\br_armory_kiosk.gsc::onprematchdone();
}

getinteractiveoutlineasset()
{
    return "outline_depth_red";
}

_spawnpois()
{
    level endon( "game_ended" );
    var_0 = 0.05;
    var_1 = 5;
    var_2 = 5;
    var_3 = 65;
    var_4 = 7;
    var_5 = 7;

    if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
    {
        level.applymovingcircles = getdvarint( "scr_bmo_event_distribution_pad", 35 );
        level._id_11C3D = getdvarint( "scr_bmo_event_distribution_pad_push", 1 );
        level.delete_headicon_on_death = getdvarint( "scr_bmo_buystation_distribution_pad", 0 );
        level thread _id_12461();
    }

    level.strict_ff_enable = getdvarint( "br_min_plunder_extractions", var_5 );
    level.start_ml_p3_exfil = getdvarint( "br_max_plunder_extractions", var_4 );

    if ( level.strict_ff_enable < level.start_ml_p3_exfil )
        level.start_ml_p3_exfil = randomintrange( level.strict_ff_enable, level.start_ml_p3_exfil + 1 );

    var_6 = getdvarint( "br_max_armory_kiosk", var_3 );
    var_7 = scripts\mp\gametypes\br_armory_kiosk.gsc::mounttrig();

    if ( isdefined( var_7 ) && var_7.size > 0 )
    {
        var_7 = add_practice_bots( var_7, var_6, level.delete_headicon_on_death );

        if ( isdefined( var_7 ) && var_7.size > 0 )
            scripts\mp\gametypes\br_armory_kiosk.gsc::_id_123D8( var_7 );
    }

    var_8 = scripts\mp\gametypes\br_plunder.gsc::mounted();

    if ( isdefined( var_8 ) && var_8.size > 0 )
    {
        var_8 = add_practice_bots( var_8, level.start_ml_p3_exfil, 1 );

        if ( isdefined( var_8 ) && var_8.size > 0 )
            scripts\mp\gametypes\br_plunder.gsc::_id_12377( var_8 );
    }

    var_9 = scripts\engine\utility::getstructarray( "br_respawn_station", "targetname" );

    for ( var_10 = 0; var_10 < var_9.size; var_10++ )
    {
        wait( var_0 );
        scripts\mp\gametypes\br_respawn.gsc::spawnambulance( var_9[var_10] );
    }

    scripts\mp\flags::gameflagset( "POIs_spawned" );
}

add_practice_bots( var_0, var_1, var_2 )
{
    if ( var_0.size == 0 || var_1 == 0 )
        return undefined;

    if ( var_1 > var_0.size )
        var_1 = var_0.size;

    if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
        return scripts\mp\gametypes\br_gametype_dmz.gsc::add_rider_to_decho( var_0, var_1, var_2 );
    else if ( !isdefined( level.br_circle ) || !isdefined( level.br_level ) )
        return add_scriptable_setup( var_0, var_1 );

    var_3 = level.br_level.circleradius.size - 1;
    var_4 = int( max( 1, var_3 * getdvarfloat( "br_poi_noise", 1.0 ) ) );

    for ( var_5 = 0; var_5 < var_0.size; var_5++ )
    {
        var_6 = var_0[var_5];
        var_7 = randomintrange( -1 * var_4, var_4 + 1 );
        var_6.score = scripts\mp\gametypes\br_circle.gsc::mp_m_king_patch( var_6.origin ) + var_7;
    }

    var_8 = scripts\engine\utility::array_sort_with_func( var_0, ::forced_laststand_weapon );
    var_9 = [];

    for ( var_5 = 0; var_5 < var_1; var_5++ )
        var_9[var_5] = var_8[var_5];

    return scripts\engine\utility::array_slice( var_8, 0, var_1 );
}

forced_laststand_weapon( var_0, var_1 )
{
    return var_0.score > var_1.score;
}

add_scriptable_setup( var_0, var_1 )
{
    if ( var_0.size == 0 || var_1 == 0 )
        return;

    var_2 = [];

    if ( var_0.size > 0 )
    {
        var_0 = scripts\engine\utility::array_randomize( var_0 );
        var_3 = int( min( var_1, var_0.size ) );

        for ( var_4 = 0; var_4 < var_3; var_4++ )
            var_2[var_2.size] = var_0[var_4];
    }

    return var_2;
}

showmiscmessagetoteam( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_0 ) )
    {
        var_4 = "mp/hints.csv";
        var_5 = 1;
        var_6 = 0;
        var_7 = -1;
        var_8 = tablelookuprownum( var_4, var_5, var_1 );

        if ( isdefined( var_8 ) && var_8 >= 0 )
            var_7 = int( tablelookupbyrow( var_4, var_8, var_6 ) );

        if ( var_7 < 0 )
            return;

        var_9 = undefined;

        if ( isdefined( var_3 ) )
            var_9 = gettime() + var_3;

        var_12 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

        foreach ( var_14 in var_12 )
            var_14 scripts\mp\utility\lower_message::setlowermessageomnvar( var_7, var_9, var_2 );
    }
}

initstatemachineforpoitype( var_0 )
{
    if ( !isdefined( level.poistates ) )
        level.poistates = [];

    level.poistates[var_0] = [];
}

registerstatecallbacksforpoitype( var_0, var_1, var_2, var_3, var_4 )
{
    level.poistates[var_0][var_1] = spawnstruct();
    level.poistates[var_0][var_1].onenter = var_2;
    level.poistates[var_0][var_1].onupdate = var_3;
    level.poistates[var_0][var_1].onexit = var_4;
}

gotopoistate( var_0, var_1 )
{
    var_2 = self;

    if ( isdefined( var_2.currentstate ) )
    {
        var_3 = level.poistates[var_0][var_2.currentstate];

        if ( isdefined( var_3 ) && isdefined( var_3.onexit ) )
            level [[ var_3.onexit ]]( var_2 );
    }

    var_2 notify( "poi_state_change" );
    var_2.currentstate = var_1;
    var_3 = level.poistates[var_0][var_2.currentstate];

    if ( isdefined( var_3 ) )
    {
        if ( isdefined( var_3.onenter ) )
            level [[ var_3.onenter ]]( var_2 );

        if ( isdefined( var_3.onupdate ) )
            var_2 thread _poistateupdate( var_3.onupdate );
    }
}

gotopoistateontimer( var_0, var_1, var_2 )
{
    var_3 = self;
    var_3 endon( "death" );
    var_3 endon( "poi_state_change" );
    wait( var_2 );
    var_3 thread gotopoistate( var_0, var_1 );
}

getcurrentpoistate()
{
    var_0 = self;
    return var_0.currentstate;
}

_poistateupdate( var_0 )
{
    var_1 = self;
    var_1 endon( "death" );
    var_2 = var_1.currentstate;

    while ( var_2 == var_1.currentstate )
    {
        level [[ var_0 ]]( var_1 );
        waitframe();
    }
}

_id_12461()
{
    if ( !isdefined( level.mapcorners ) )
        waitframe();

    var_0 = level.mapcorners[0].origin[0];
    var_1 = level.mapcorners[1].origin[0];
    var_2 = ( level.mapcorners[0].origin[0], level.mapcorners[0].origin[1], level.mapcorners[0].origin[2] );
    var_3 = ( level.mapcorners[1].origin[0], level.mapcorners[0].origin[1], level.mapcorners[1].origin[2] );

    if ( var_1 < var_0 )
    {
        var_2 = ( level.mapcorners[1].origin[0], level.mapcorners[0].origin[1], level.mapcorners[1].origin[2] );
        var_3 = ( level.mapcorners[0].origin[0], level.mapcorners[0].origin[1], level.mapcorners[0].origin[2] );
    }

    var_4 = level.mapcorners[0].origin[1];
    var_5 = level.mapcorners[1].origin[1];
    var_6 = ( level.mapcorners[0].origin[0], level.mapcorners[1].origin[1], level.mapcorners[0].origin[2] );
    var_7 = ( level.mapcorners[1].origin[0], level.mapcorners[1].origin[1], level.mapcorners[1].origin[2] );

    if ( var_5 < var_4 )
    {
        var_6 = ( level.mapcorners[1].origin[0], level.mapcorners[1].origin[1], level.mapcorners[1].origin[2] );
        var_7 = ( level.mapcorners[0].origin[0], level.mapcorners[1].origin[1], level.mapcorners[0].origin[2] );
    }

    var_8 = [];

    if ( scripts\cp_mp\utility\game_utility::riskspawn_debugdvar() )
    {
        level.gametypeoverridescavsearchparams = abs( distance( var_7, var_2 ) );
        var_9 = level.gametypeoverridescavsearchparams / 10;
        var_2 = ( var_2[0] + var_9, var_2[1] - var_9, var_2[2] );
        var_3 = ( var_3[0] - var_9, var_3[1] - var_9, var_3[2] );
        var_6 = ( var_6[0] - var_9, var_6[1] + var_9, var_6[2] );
        var_7 = ( var_7[0] + var_9, var_7[1] + var_9, var_7[2] );
        level.gametypeoverridescavsearchparams = abs( distance( var_7, var_2 ) );

        for ( var_10 = 1; var_10 < 4; var_10 = var_10 + 2 )
        {
            var_11 = var_10 * level.gametypeoverridescavsearchparams / 2;

            for ( var_12 = 1; var_12 < 4; var_12 = var_12 + 2 )
            {
                var_13 = var_12 * level.gametypeoverridescavsearchparams / 2;
                var_14 = ( var_7[0] + var_11 / 2, var_7[1] + var_13 / 2, 0 );
                var_8[var_8.size] = var_14;
            }
        }
    }

    level._id_11C47 = [];

    if ( level.mapname == "mp_br_mechanics" )
    {
        level._id_11C47[level._id_11C47.size] = ( 3965, 4054, 0 );
        level._id_11C47[level._id_11C47.size] = ( 4069, -4150, 0 );
        level._id_11C47[level._id_11C47.size] = ( -4035, -4074, 0 );
        level._id_11C47[level._id_11C47.size] = ( -4009, 4105, 0 );
    }
    else if ( level.mapname == "mp_br_money" )
    {
        level._id_11C47[level._id_11C47.size] = ( 46569.5, -8170, 0 );
        level._id_11C47[level._id_11C47.size] = ( 56849.5, -8170, 0 );
        level._id_11C47[level._id_11C47.size] = ( 67081.5, -17919.5, 0 );
        level._id_11C47[level._id_11C47.size] = ( 46593, -17919.5, 0 );
    }
    else
    {
        level._id_11C47[level._id_11C47.size] = ( -21299.2, 41779.2, 0 );
        level._id_11C47[level._id_11C47.size] = ( 37683.2, 41779.2, 0 );
        level._id_11C47[level._id_11C47.size] = ( 37683.2, -17203.2, 0 );
        level._id_11C47[level._id_11C47.size] = ( -21299.2, -17203.2, 0 );
    }

    level._id_11C47 = scripts\engine\utility::array_randomize( level._id_11C47 );
    var_15 = 33704;
    level._id_11C48 = abs( var_15 * var_15 );

    if ( level.applymovingcircles > 0 && scripts\cp_mp\utility\game_utility::riskspawn_debugdvar() )
    {
        level._id_11CE7 = randomintrange( 0, 5 );
        var_9 = level.gametypeoverridescavsearchparams / 10;
        var_16 = level.gametypeoverridescavsearchparams / ( 100 / level.applymovingcircles );

        switch ( level._id_11CE7 )
        {
            case 0:
                var_17 = ( var_2[0] + var_9, var_2[1] - var_9, var_2[2] );
                var_18 = ( var_3[0] - var_16, var_3[1] - var_9, var_3[2] );
                var_19 = ( var_6[0] - var_16, var_6[1] + var_16, var_6[2] );
                var_20 = ( var_7[0] + var_9, var_7[1] + var_16, var_7[2] );
                break;
            case 1:
                var_17 = ( var_2[0] + var_16, var_2[1] - var_9, var_2[2] );
                var_18 = ( var_3[0] - var_9, var_3[1] - var_9, var_3[2] );
                var_19 = ( var_6[0] - var_16, var_6[1] + var_9, var_6[2] );
                var_20 = ( var_7[0] + var_16, var_7[1] + var_16, var_7[2] );
                break;
            case 2:
                var_17 = ( var_2[0] + var_16, var_2[1] - var_16, var_2[2] );
                var_18 = ( var_3[0] - var_9, var_3[1] - var_16, var_3[2] );
                var_19 = ( var_6[0] - var_9, var_6[1] + var_9, var_6[2] );
                var_20 = ( var_7[0] + var_16, var_7[1] + var_9, var_7[2] );
                break;
            case 3:
                var_17 = ( var_2[0] + var_9, var_2[1] - var_16, var_2[2] );
                var_18 = ( var_3[0] - var_16, var_3[1] - var_16, var_3[2] );
                var_19 = ( var_6[0] - var_16, var_6[1] + var_9, var_6[2] );
                var_20 = ( var_7[0] + var_9, var_7[1] + var_9, var_7[2] );
                break;
            case 4:
                var_17 = ( var_2[0] + var_16, var_2[1] - var_16, var_2[2] );
                var_18 = ( var_3[0] - var_16, var_3[1] - var_16, var_3[2] );
                var_19 = ( var_6[0] - var_16, var_6[1] + var_16, var_6[2] );
                var_20 = ( var_7[0] + var_16, var_7[1] + var_16, var_7[2] );
                break;
            default:
                var_17 = ( var_2[0] + var_16, var_2[1] - var_16, var_2[2] );
                var_18 = ( var_3[0] - var_16, var_3[1] - var_16, var_3[2] );
                var_19 = ( var_6[0] - var_16, var_6[1] + var_16, var_6[2] );
                var_20 = ( var_7[0] + var_16, var_7[1] + var_16, var_7[2] );
                break;
        }

        var_21 = [];
        level.va_standard_spawnpoint_valid = [];
        level.va_cluster_spawnpoint_valid = abs( distance( var_20, var_17 ) );
        level._id_11AF6 = level.va_cluster_spawnpoint_valid / 2;

        for ( var_10 = 1; var_10 < 4; var_10 = var_10 + 2 )
        {
            var_11 = var_10 * level.va_cluster_spawnpoint_valid / 2;

            for ( var_12 = 1; var_12 < 4; var_12 = var_12 + 2 )
            {
                var_13 = var_12 * level.va_cluster_spawnpoint_valid / 2;
                var_14 = ( var_20[0] + var_11 / 2, var_20[1] + var_13 / 2, 0 );
                var_21[var_21.size] = var_14;
            }
        }

        if ( level._id_11C3D == 2 )
            level.va_standard_spawnpoint_valid = scripts\engine\utility::array_randomize( var_21 );
        else
        {
            switch ( level._id_11CE7 )
            {
                case 0:
                    if ( level._id_11C3D )
                    {
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[2];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[3];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[1];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[0];
                    }
                    else
                    {
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[1];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[3];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[2];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[0];
                    }

                    break;
                case 1:
                    if ( level._id_11C3D )
                    {
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[0];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[2];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[3];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[1];
                    }
                    else
                    {
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[3];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[2];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[0];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[1];
                    }

                    break;
                case 2:
                    if ( level._id_11C3D )
                    {
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[1];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[0];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[2];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[3];
                    }
                    else
                    {
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[2];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[0];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[1];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[3];
                    }

                    break;
                case 3:
                    if ( level._id_11C3D )
                    {
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[3];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[1];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[0];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[2];
                    }
                    else
                    {
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[0];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[1];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[3];
                        level.va_standard_spawnpoint_valid[level.va_standard_spawnpoint_valid.size] = var_21[2];
                    }

                    break;
                case 4:
                    level.va_standard_spawnpoint_valid = scripts\engine\utility::array_randomize( var_21 );
                    break;
                default:
                    level.va_standard_spawnpoint_valid = scripts\engine\utility::array_randomize( var_21 );
                    break;
            }
        }

        var_22 = abs( distance( var_17, var_19 ) );
        level.gametypeoverridedomsearchparams = var_22;
        var_23 = var_22 / 4.5;
        level.valid_carriable_pickup_weapon = var_23 * var_23;
    }
}
