// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

#using_animtree("script_model");

create()
{
    level.scr_animtree["planeWaves"] = #animtree;
    level.scr_anim["planeWaves"]["bomber_planes"] = %veh_wz_usa_bomber_b17_cloud;
    level.scr_animname["planeWaves"]["bomber_planes"] = "veh_wz_usa_bomber_b17_cloud";
}

brlep_loadfx()
{

}

init()
{
    level thread create_animpack();
    level thread create_bomb_wire_info();
    level thread create_ambient_vehicle();
    level thread create_ammo_crate_objectives();
    level thread scripts\mp\gametypes\br_gametype_rebirth.gsc::critical_messages();
    level thread create();
    level._id_12CD0 = ::flashtheprops;
}

create_animpack()
{
    level endon( "game_ended" );

    if ( getdvarint( "scr_br_lep_debug", 0 ) == 1 )
        scripts\mp\gametypes\br_gametypes.gsc::initnonbunkerdoors( "allowLateJoiners" );
}

create_bomb_wire_info()
{
    level endon( "game_ended" );
    brlep_loadfx();
    level thread scripts\mp\utility\sound::apc_target_enemies( "br_event_lep_sfx" );
    create_ai_type_override();
    scripts\mp\gametypes\br_gametypes.gsc::helihint_wait( "gulag" );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "onInfilSequenceEnd", ::brlep_infilsequenceend );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "mapCenterFinalCircle", ::create_cursor_hint_forced );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "getFinalCircleCenter", ::create_cursor_hint_forced );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "preCalcSafeCircleCenters", ::create_disconnectplayer );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "playerWelcomeSplashes", ::brlep_playerintrodialogs );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "onContractEnd", ::brlep_oncontractend );
    scripts\mp\gametypes\br_gametypes.gsc::_id_11DDC( "playerKilledSpawn", ::brlep_playerkilledspawn );
    waittillframeend;
    scripts\cp_mp\utility\script_utility::registersharedfunc( "killstreak", "dangerNotifyPlayersInRange", ::brlep_clusterdangernotifyplayersinrange );
    crate_falling_collision();
    level.br_postendgamesplashcallback = ::brlep_postendgamesplashescallback;
    level.claymore_forceclampangles = 0;
    level._id_13158 = [];
    level.planecrashlocations = spawnstruct();
    level.planecrashlocations.launch_smoke_mortar = [];
    level.planecrashlocations.activeobjectiveids = [];
    level.planecrashlocations.maskedplayers = [];

    switch ( level.mapname )
    {
        case "mp_br_mechanics":
            create_apc_vehicle_interaction();
            level thread create_name_fx();
            break;
        case "mp_don4":
            level.planecrashlocations._id_121CC = [];
            level.planecrashlocations.thirdcircleplanecrashlocations = [];
            create_badplace_extraction();
            level thread create_name_fx_base();
            break;
    }

    level thread brlep_initvisionset();
    brlep_initexfil();
    level thread cratephysicsoncallback();
    brlep_initplanecacheitems();

    if ( !isdefined( level.change_keypad_display_digit ) )
        level.change_keypad_display_digit = spawnstruct();

    level thread brlep_spawnbombersstartsequence();
    level thread brlep_monitorcontractstart();
    level thread brlep_manageflakvfxspawns();
    scripts\mp\utility\lui_game_event_aggregator::registeronluieventcallback( ::brlep_notifybinkcompleted );
}

brlep_initvisionset()
{
    level endon( "game_ended" );
    create_fake_loot_model_from_struct( "mp_don4_lep_start", 0.5 );
}

create_ai_type_override()
{
    level.should_do_vo_call = [ ( -20473, -5682, -738 ), ( 134, 18667, -792 ), ( 35557, 24084, -198 ) ];
    level.lep_bunkerfartherentrancelocations = [ [ ( -22749, -7178, -678 ), ( -18213, -4752, -678 ) ], [ ( -1047, 21103, -733 ), ( 1082, 16414, -733 ) ], [ ( 37656, 24942, -140 ), ( 33145, 22862, -140 ) ] ];
    level.lep_bunkerclustercenter = [];

    foreach ( var_7, var_1 in level.should_do_vo_call )
    {
        var_2 = 1;
        var_3 = var_1;

        foreach ( var_5 in level.lep_bunkerfartherentrancelocations[var_7] )
        {
            var_2++;
            var_3 = var_3 + var_5;
        }

        var_3 = var_3 / var_2;
        level.lep_bunkerclustercenters[var_7] = var_3;
    }

    var_8 = scripts\engine\utility::array_randomize( [ 0, 1, 2 ] );
    var_9 = var_8[0];
    level.should_enter_combat_after_checking_smoke_grenade = level.should_do_vo_call[var_9];

    if ( var_8[0] != 1 && var_8[1] != 1 )
    {
        var_8[2] = var_8[1];
        var_8[1] = 1;
    }

    level.lep_bunkercircleorder = var_8;
}

crate_falling_collision()
{
    scripts\cp_mp\utility\game_utility::_id_11ED3( "delete_on_load", "targetname" );
}

create_ambient_vehicle()
{
    level endon( "game_ended" );
    level waittill( "br_dialog_initialized" );
    game["dialog"]["exfil_friendly_50"] = "powergrab_friendly_50";
    game["dialog"]["exfil_friendly_start"] = "powergrab_friendly_capture";
    game["dialog"]["exfil_friendly_win"] = "powergrab_friendly_success";
    game["dialog"]["match_start"] = "gametype_lep";
    game["dialog"]["mode_desc1"] = "gametype_desc_lep";
    game["dialog"]["mode_desc2"] = "infil_desc";
    game["dialog"]["lep_chall_success"] = "challenge_success";
    game["dialog"]["lep_exfil_start"] = "exfil_start";
    game["dialog"]["lep_bomb_shelter"] = "bomb_shelter";
    game["dialog"]["lep_bomb_incoming"] = "bomb_incoming";
    game["dialog"]["lep_air_defences"] = "air_defences";
}

create_ammo_crate_objectives()
{
    level endon( "game_ended" );
}

create_apc_vehicle_interaction()
{
    var_0 = "mp/br_lep_dis_locations.csv";

    for ( var_1 = int( tablelookuprownum( var_0, 0, "1" ) ); tablelookupbyrow( var_0, var_1, 0 ) == "1"; var_1-- )
    {
        var_2 = ( int( tablelookupbyrow( var_0, var_1, 1 ) ), int( tablelookupbyrow( var_0, var_1, 2 ) ), int( tablelookupbyrow( var_0, var_1, 3 ) ) );
        level.planecrashlocations.launch_smoke_mortar = brlep_addplanecrashlocation( level.planecrashlocations.launch_smoke_mortar, var_2, ( 0, 90, 0 ) );
    }

    level.should_enter_combat_after_checking_smoke_grenade = ( -265, -4121, 58 );
}

create_badplace_extraction()
{
    var_0 = "mp/br_lep_dis_locations.csv";

    for ( var_1 = 0; tablelookupbyrow( var_0, var_1, 0 ) == "0"; var_1++ )
    {
        var_2 = [];
        var_2[0] = ( int( tablelookupbyrow( var_0, var_1, 1 ) ), int( tablelookupbyrow( var_0, var_1, 2 ) ), int( tablelookupbyrow( var_0, var_1, 3 ) ) );
        var_2[1] = ( int( tablelookupbyrow( var_0, var_1, 4 ) ), int( tablelookupbyrow( var_0, var_1, 5 ) ), int( tablelookupbyrow( var_0, var_1, 6 ) ) );
        var_3 = level.br_level.circleradius[3];
        var_4 = level.br_level.br_circleradii[3];

        if ( distance2d( var_3, var_2[0] ) > var_4 )
        {
            level.planecrashlocations.launch_smoke_mortar = brlep_addplanecrashlocation( level.planecrashlocations.launch_smoke_mortar, var_2[0], var_2[1] );
            continue;
        }

        level.planecrashlocations.thirdcircleplanecrashlocations = brlep_addplanecrashlocation( level.planecrashlocations.thirdcircleplanecrashlocations, var_2[0], var_2[1] );
    }

    for ( var_1 = int( tablelookuprownum( var_0, 0, "2" ) ); tablelookupbyrow( var_0, var_1, 0 ) == "2"; var_1-- )
    {
        var_2 = [];
        var_2[0] = ( int( tablelookupbyrow( var_0, var_1, 1 ) ), int( tablelookupbyrow( var_0, var_1, 2 ) ), int( tablelookupbyrow( var_0, var_1, 3 ) ) );
        var_2[1] = ( int( tablelookupbyrow( var_0, var_1, 4 ) ), int( tablelookupbyrow( var_0, var_1, 5 ) ), int( tablelookupbyrow( var_0, var_1, 6 ) ) );
        level.planecrashlocations._id_121CC = brlep_addplanecrashlocation( level.planecrashlocations._id_121CC, var_2[0], var_2[1] );
    }

    for ( var_1 = 0; tablelookupbyrow( var_0, var_1, 7 ) != ""; var_1++ )
        cqb_laser_guy_internal( int( tablelookupbyrow( var_0, var_1, 7 ) ), int( tablelookupbyrow( var_0, var_1, 8 ) ) );
}

brlep_initexfil()
{
    brlep_setdomflagiconinfo( "waypoint_captureneutral", "neutral", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    brlep_setdomflagiconinfo( "waypoint_capture", "enemy", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    brlep_setdomflagiconinfo( "waypoint_defend", "friendly", "MP_INGAME_ONLY/OBJ_DEFEND_CAPS", 0 );
    brlep_setdomflagiconinfo( "waypoint_defending", "friendly", "MP_INGAME_ONLY/OBJ_DEFENDING_CAPS", 0 );
    brlep_setdomflagiconinfo( "waypoint_contested", "contest", "MP_INGAME_ONLY/OBJ_CONTESTED_CAPS", 1 );
    brlep_setdomflagiconinfo( "waypoint_taking", "friendly", "MP_INGAME_ONLY/OBJ_TAKING_CAPS", 1 );
    brlep_setdomflagiconinfo( "waypoint_losing", "enemy", "MP_INGAME_ONLY/OBJ_LOSING_CAPS", 1 );
    scripts\mp\gametypes\br_dom_quest.gsc::_id_12442();
}

brlep_setdomflagiconinfo( var_0, var_1, var_2, var_3 )
{
    level.waypointcolors[var_0] = var_1;
    level.waypointbgtype[var_0] = 1;
    level.waypointstring[var_0] = var_2;
    level.waypointshader[var_0] = "ui_mp_br_mapmenu_icon_gulag_overtime_objective";
    level.waypointpulses[var_0] = var_3;
}

brlep_initplanecacheitems()
{
    var_0 = [ [ "brloot_killstreak_assaultdrone", 1 ], [ "brloot_offhand_frag", 1 ], [ "brloot_offhand_semtex", 1 ], [ "brloot_offhand_smoke", 1 ], [ "brloot_killstreak_recondrone", 1 ], [ "brloot_super_deadsilence", 1 ] ];
    var_1 = 0;
    level.lep_planecacheitems = spawnstruct();
    level.lep_planecacheitems.itemlist = [];

    foreach ( var_3 in var_0 )
    {
        var_4 = var_3[1];
        var_1 = var_1 + var_4;
        var_5 = spawnstruct();
        var_5.name = var_3[0];
        var_5.rollchance = var_1;
        level.lep_planecacheitems.itemlist[level.lep_planecacheitems.itemlist.size] = var_5;
    }

    level.lep_planecacheitems.totalrollchance = var_1;
}

brlep_playerintrodialogs()
{
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    wait 1;

    if ( !istrue( game["liveLobbyCompleted"] ) )
        scripts\mp\hud_message::showsplash( "br_prematch_welcome" );

    if ( !istrue( level.br_infils_disabled ) )
    {
        self waittill( "br_jump" );
        thread scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "mode_desc1", self );

        while ( !self isonground() )
            waitframe();

        thread scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "mode_desc2", self );
    }
    else
        level waittill( "prematch_done" );

    scripts\mp\gametypes\br_analytics.gsc::close_trap_room_door( self );
}

brlep_infilsequenceend()
{
    level thread brlep_initaudio();
}

create_cursor_hint_forced()
{
    return level.should_enter_combat_after_checking_smoke_grenade;
}

create_disconnectplayer()
{
    for ( var_0 = 6; var_0 > 3; var_0-- )
        crate_equipment( 1, var_0 );

    for ( var_0 = 3; var_0 > 1; var_0-- )
        crate_equipment( 2, var_0 );

    for ( var_0 = 1; var_0 >= 0; var_0-- )
        crate_equipment( 3, var_0 );
}

brlep_postendgamesplashescallback( var_0 )
{
    wait 8;
    setomnvarforallclients( "post_game_state", 15 );
    wait 8;
    brlep_playendmovie();
    wait 15;
}

brlep_oncontractend( var_0 )
{
    foreach ( var_2 in level.planecrashlocations.activeobjectiveids )
        objective_removeclientfrommask( var_2, self );

    level.planecrashlocations.maskedplayers = scripts\engine\utility::array_remove( level.planecrashlocations.maskedplayers, self );
}

brlep_playerkilledspawn( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    thread brlep_playerspawn( 1 );
    return undefined;
}

brlep_playerspawn( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( var_0 )
    {
        self waittill( "forcePlayerSpectateTarget" );

        if ( isdefined( level._id_13324 ) )
            self visionsetnakedforplayer( level._id_13324, 0 );

        self waittill( "spawned_player" );

        if ( isdefined( level._id_13324 ) )
            self visionsetnakedforplayer( level._id_13324, 0 );
    }

    return;
}

crate_equipment( var_0, var_1 )
{
    if ( var_0 > 0 )
    {
        var_2 = level.lep_bunkerclustercenters[level.lep_bunkercircleorder[0]];

        for ( var_3 = 1; var_3 < var_0; var_3++ )
            var_2 = var_2 + level.lep_bunkerclustercenters[level.lep_bunkercircleorder[var_3]];

        var_2 = var_2 / var_0;
        var_4 = 0;

        for ( var_3 = 0; var_3 < var_0; var_3++ )
        {
            var_5 = [ level.should_do_vo_call[level.lep_bunkercircleorder[var_3]] ];

            foreach ( var_7 in level.lep_bunkerfartherentrancelocations[level.lep_bunkercircleorder[var_3]] )
                var_5 = scripts\engine\utility::array_add( var_5, var_7 );

            foreach ( var_10 in var_5 )
            {
                var_11 = distance2d( var_2, var_10 );

                if ( var_11 > var_4 )
                    var_4 = var_11;
            }
        }

        var_13 = var_1 + 1;
        var_14 = var_2 - level.br_level.circleradius[var_13];
        var_15 = length2d( var_14 );
        var_16 = var_15 + level.br_level.br_circleradii[var_13];
        var_17 = max( var_4, var_16 );
        var_18 = level.br_level.br_circleradii[var_1];

        if ( var_18 < var_17 )
        {
            var_19 = 1.0 - var_18 / var_16;
            var_20 = var_14 * ( var_16 / var_15 );
            level.br_level.circleradius[var_1] = var_2 - var_20 * var_19;
            return;
        }

        var_21 = var_18 - var_17;
        var_22 = var_21 / var_18;
        level.br_level.circleradius[var_1] = scripts\mp\gametypes\br_circle.gsc::getrandompointincircle( var_2, var_18, var_22, var_22 );
        return;
    }
    else
        var_2 = level.should_enter_combat_after_checking_smoke_grenade;
}

crate_weapons( var_0 )
{
    var_1 = 0;

    foreach ( var_3 in level.should_do_vo_call )
    {
        var_4 = level.br_level.circleradius[var_0];
        var_5 = level.br_level.br_circleradii[var_0];

        if ( scripts\engine\utility::safefromnuke( var_3, var_4, var_5 ) )
            var_1++;
    }

    return var_1;
}

brlep_initchallenges()
{
    level endon( "game_ended" );
    var_0 = getdvarint( "scr_br_lep_challenge_enable", 0 );

    if ( !var_0 )
        return;

    game["dialog"]["lep_item_near"] = "item_near";
    game["dialog"]["lep_item_interact"] = "item_interact";
    game["dialog"]["lep_chall_completed"] = "challenge_complete";
    level.should_spawn_boss_one = [];
    level waittill( "br_prematchEnded" );
    var_1 = "mp/br_lep_cha_locations.csv";
    var_2 = 0;
    var_3 = [];
    var_3[0] = [ "furniture_ping_pong_paddle_01_ch3", 1 ];
    var_3[1] = [ "decor_microphone_01", 3 ];
    var_3[2] = [ "decor_vintage_cash_register_ch3", 3 ];
    var_3[3] = [ "medical_self_revive_kit_01_closed_ch3", 4 ];
    var_3[4] = [ "construction_mine_dynamite_crate_full_01", 2 ];
    var_3[5] = [ "boat_set_lep", 2 ];

    for (;;)
    {
        var_4 = tablelookupbyrow( var_1, var_2, 0 );

        if ( var_4 == "" )
            break;

        var_5 = int( tablelookupbyrow( var_1, var_2, 10 ) );
        var_6 = var_5 - 1;

        if ( var_6 > var_3.size )
            continue;

        var_7 = [];
        var_8 = [];

        for ( var_9 = []; int( tablelookupbyrow( var_1, var_2, 10 ) ) == var_5; var_2++ )
        {
            var_7[var_7.size] = ( float( tablelookupbyrow( var_1, var_2, 1 ) ), float( tablelookupbyrow( var_1, var_2, 2 ) ), float( tablelookupbyrow( var_1, var_2, 3 ) ) );
            var_8[var_8.size] = ( float( tablelookupbyrow( var_1, var_2, 4 ) ), float( tablelookupbyrow( var_1, var_2, 5 ) ), float( tablelookupbyrow( var_1, var_2, 6 ) ) );
            var_9[var_9.size] = ( float( tablelookupbyrow( var_1, var_2, 7 ) ), float( tablelookupbyrow( var_1, var_2, 8 ) ), float( tablelookupbyrow( var_1, var_2, 9 ) ) );
        }

        level.should_spawn_boss_one[var_2] = create_oscilloscope_screen( var_3[var_6][0], var_7, var_8, var_9, var_5, var_3[var_6][1] );
    }

    foreach ( var_11 in level.players )
        var_11 thread brlep_monitorplayerclosestprop();
}

create_oscilloscope_screen( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = randomintrange( 0, var_1.size );
    var_7 = var_1[var_6];
    var_8 = var_3[var_6];
    var_9 = var_2[var_6];
    var_10 = spawn( "script_model", var_7 );
    var_10.angles = var_8;
    var_10 setmodel( var_0 );
    var_10.useprompt = scripts\mp\gameobjects::createhintobject( var_10.origin + var_9, "HINT_BUTTON", undefined, &"MP_BR_INGAME/COLLECT_INTEL", undefined, undefined, undefined, 480, 90, 72, 90 );
    thread brlep_challengeinteractwithprop( var_10.useprompt, var_4, var_5 );
    return var_10;
}

brlep_challengeinteractwithprop( var_0, var_1, var_2 )
{
    level endon( "game_ended" );

    for (;;)
    {
        var_0 waittill( "trigger", var_3 );
        var_3 thread brlep_challengeinteractwithpropplayer( var_1, var_2 );
    }
}

brlep_challengeinteractwithpropplayer( var_0, var_1 )
{
    var_2 = self;
    var_2 playsoundtoplayer( "ui_intel_interact", var_2 );
    var_2 thread brlep_cancelchallengeondeath();
    var_2 thread brlep_completechallengeonwin();
    var_2 thread brlep_challengespecialintelchallengemonitor( var_0, var_1 );

    foreach ( var_4 in level.should_spawn_boss_one )
    {
        var_4.useprompt disableplayeruse( var_2 );
        var_4.useprompt hidefromplayer( var_2 );
    }

    wait 0.25;
    var_2 scripts\mp\hud_message::showsplash( "br_lep_challenge_started", var_1 );
    thread scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "lep_item_interact", var_2, 1, 0, 3 );
}

brlep_resetactivechallengeprogression()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    brlep_setspecialintelchallengeindex( 0 );
    self waittill( "spawned" );

    foreach ( var_1 in level.should_spawn_boss_one )
    {
        var_1.useprompt enableplayeruse( self );
        var_1.useprompt showtoplayer( self );
    }

    thread brlep_monitorplayerclosestprop();
}

brlep_cancelchallengeondeath()
{
    self endon( "disconnect" );
    self endon( "br_lep_challenge_completed" );
    level endon( "game_ended" );
    self waittill( "death" );
    thread brlep_resetactivechallengeprogression();
}

brlep_completechallengeonwin()
{
    self endon( "death_or_disconnect" );
    self endon( "br_lep_challenge_completed" );
    level waittill( "game_ended", var_0 );

    if ( isdefined( var_0 ) && var_0 != "tie" )
    {
        var_1 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

        foreach ( var_3 in var_1 )
        {
            if ( var_3 == self )
                var_3 thread brlep_challengespecialintelchallengecompleted( 0 );
        }
    }
}

brlep_challengespecialintelchallengemonitor( var_0, var_1 )
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    self notify( "br_lep_challenge_started" );
    brlep_setspecialintelchallengeindex( var_0 );
    scripts\mp\trials\trial_utility::_id_1236B( "ui_br_lep_data_client", 3, 3, var_1 );
    var_2 = level.br_circle.circleindex;

    while ( level.br_circle.circleindex < var_2 + var_1 )
    {
        level waittill( "br_circle_set", var_3 );
        var_4 = var_2 + var_1 - var_3 + 1;

        if ( var_4 > 0 )
            scripts\mp\trials\trial_utility::_id_1236B( "ui_br_lep_data_client", 3, 3, var_4 );
    }

    thread brlep_challengespecialintelchallengecompleted( 5 );
}

brlep_challengespecialintelchallengecompleted( var_0 )
{
    self endon( "disconnect" );
    self notify( "br_lep_challenge_completed" );
    cratephysicson( "lep_intel_" + self.lepchallengeindex );

    if ( var_0 && var_0 > 0 )
        wait( var_0 );

    scripts\mp\trials\trial_utility::_id_1236B( "ui_br_lep_data_client", 3, 3, 0 );
    scripts\mp\hud_message::showsplash( "br_lep_challenge_completed" );
    thread scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "lep_chall_completed", self, 1, 0, 3 );
}

brlep_setspecialintelchallengeindex( var_0 )
{
    self.lepchallengeindex = var_0;
    scripts\mp\trials\trial_utility::_id_1236B( "ui_br_lep_data_client", 0, 3, var_0 );
}

brlep_monitorplayerclosestprop()
{
    self endon( "disconnect" );
    self endon( "br_lep_challenge_started" );

    for (;;)
    {
        var_0 = incrementpersistentstat( level.should_spawn_boss_one, self.origin, 400 );

        if ( var_0.size > 0 )
        {
            wait 1;

            if ( !isdefined( self.lepchallengeindex ) || self.lepchallengeindex == 0 )
            {
                thread scripts\mp\gametypes\br_public.gsc::cpcpammoarmorcratecapturecallback( "lep_item_near", self );
                wait 35;
            }
        }

        wait 1;
    }
}

crate_vo_play_on_first_use( var_0, var_1 )
{
    if ( var_0.size > 0 )
    {
        if ( istrue( var_1 ) )
        {
            var_2 = randomint( var_0.size );
            return var_0[var_2];
        }
        else
        {
            var_3 = [];

            foreach ( var_5 in var_0 )
            {
                var_6 = scripts\common\utility::playersinsphere( var_5.crashorigin, 3000 );
                var_5.numplayers = var_6.size;
            }

            var_3 = scripts\engine\utility::array_sort_with_func( var_0, ::brlep_comparenumplayers );

            if ( var_3[0].numplayers == 0 )
            {
                var_8 = crate_vo_play_on_first_use( var_0, 1 );
                level.previouscrashorigin = var_8.crashorigin;
                return var_8;
            }

            var_8 = brlep_getdistanceadjustedlocation( var_3 );
            level.previouscrashorigin = var_8.crashorigin;
            return var_8;
        }
    }

    return undefined;
}

brlep_comparenumplayers( var_0, var_1 )
{
    return var_0.numplayers > var_1.numplayers;
}

brlep_getdistanceadjustedlocation( var_0 )
{
    if ( isdefined( level.previouscrashorigin ) )
    {
        foreach ( var_2 in var_0 )
        {
            if ( distance2dsquared( var_2.crashorigin, level.previouscrashorigin ) > 100000000 )
                return var_2;
        }

        return var_0[0];
    }
    else
        return var_0[0];
}

create_exfil_animstruct( var_0 )
{
    var_1 = level.br_level.circleradius[level.br_circle.circleindex + 1];
    var_2 = level.br_level.br_circleradii[level.br_circle.circleindex + 1];

    foreach ( var_4 in level.planecrashlocations.launch_smoke_mortar )
    {
        if ( distance2d( var_4.crashorigin, var_1 ) > var_2 )
        {
            var_4.depletionrate = 1;
            level.planecrashlocations.launch_smoke_mortar = scripts\engine\utility::array_remove( level.planecrashlocations.launch_smoke_mortar, var_4 );
        }
    }
}

create_name_fx()
{
    level endon( "game_ended" );

    if ( !getdvarint( "scr_br_lep_cache_drop_enabled", 1 ) )
        return;

    for (;;)
    {
        level waittill( "br_circle_set", var_0 );
        var_1 = crate_vo_play_on_first_use( level.planecrashlocations.launch_smoke_mortar );

        if ( isdefined( var_1 ) )
        {
            level thread crate_munitions( var_1 );
            level.planecrashlocations.launch_smoke_mortar = scripts\engine\utility::array_remove( level.planecrashlocations.launch_smoke_mortar, var_1 );
        }

        level waittill( "br_circle_started", var_0 );
        create_exfil_animstruct( var_0 );
    }
}

create_name_fx_base()
{
    level endon( "game_ended" );

    if ( !getdvarint( "scr_br_lep_cache_drop_enabled", 1 ) )
        return;

    level waittill( "br_circle_set", var_0 );
    crate_index();
    level thread crate_objectives( var_0 );
    level waittill( "br_circle_started", var_0 );
    create_exfil_animstruct( var_0 );
    level waittill( "br_circle_set", var_0 );
    level thread crate_objectives( var_0 );
    level waittill( "br_circle_started", var_0 );
    create_exfil_animstruct( var_0 );
    level waittill( "br_circle_set", var_0 );
    level thread brlep_dropthirdwave( var_0 );
    brlep_changeambienceloop( "base", "attack_state_02" );
    level waittill( "br_circle_set" );
    brlep_changeambienceloop( "attack_state_03", "base" );
    level waittill( "br_circle_set" );
    level thread scripts\mp\gametypes\br_quest_util.gsc::disallow_player_mantles();
    level thread scripts\mp\gametypes\br_quest_util.gsc::helidestroyvehiclestouchnotify();
    level thread crate_set_flag_on_use();
}

crate_munitions( var_0 )
{
    var_0.gate_swings_open = 1;
    level crate_obj_offset( var_0 );
}

crate_obj_offset( var_0 )
{
    var_1 = var_0.crashorigin;
    var_2 = var_0.gate_closes;

    if ( !isdefined( var_0.gate_closes ) )
        var_2 = vectortoangles( var_0.crashorigin - var_0.spawnorigin );

    var_3 = ( 0, 0, 500 );
    var_4 = var_0.spawnorigin;
    var_5 = create_execution_devgui( var_1 + var_3, var_1 - var_3 );
    var_6 = var_5["position"];
    var_7 = ( var_2[2], var_2[1] + 90, var_2[0] );
    crate_model_anim_setup( var_0, var_4, var_6 );
    var_0.gate_swings_open = 0;
    var_0.depletionrate = 1;
    var_8 = create_intel_model( var_6, var_7 );
    var_8 radiusdamage( var_6, 500, 1000, 50 );
    create_circular_path_around( var_8, var_0.objid );
    var_8 thread create_nav_obstacle_for_wheelson();
}

crate_model_anim_setup( var_0, var_1, var_2 )
{
    var_3 = var_2 - var_1;
    var_4 = vectortoangles( var_3 );
    var_4 = ( var_4[2], var_4[1] + 90, var_4[0] );
    var_5 = create_heartbeat_sensor_pick_ups( var_1, var_4 );
    var_5 endon( "death" );
    waitframe();
    var_5 setscriptablepartstate( "model", "falling" );
    var_0.objid = brlep_makeplanecrashicon( var_5, 2000, 1, 1, 0 );
    var_6 = getdvarint( "scr_br_lep_cache_speed", 3000 );
    var_7 = getdvarfloat( "scr_br_lep_cache_accel", 0.75 );
    var_8 = distance( var_1, var_2 );
    var_9 = var_8 / var_6;
    var_10 = var_9 * var_7;
    var_5 moveto( var_2, var_9, var_10, 0.05 );
    level thread create_cypher_piece( var_5 );
    wait( var_9 );
    var_5 setscriptablepartstate( "model", "impact" );
    create_debug_model_for_spawnpoint( var_2 );
    waitframe();
    var_5 notify( "stop_plane_vehicle_crush" );
    var_5 notify( "plane_crashed" );
    var_5 delete();
}

create_heartbeat_sensor_pick_ups( var_0, var_1 )
{
    var_2 = spawn( "script_model", var_0 );
    var_2.angles = var_1;
    var_2 setmodel( "wz_usa_bomber_b17_destroyed_rig" );
    var_2 setscriptablepartstate( "model", "explosion" );
    return var_2;
}

create_intel_model( var_0, var_1 )
{
    var_2 = spawn( "script_model", var_0 + ( 0, 0, 45 ) );
    var_2.angles = var_1;
    var_2 setmodel( "usa_bomber_b17_hero_wing_combined" );
    var_2.brush_model = spawn( "script_model", var_0 );
    var_3 = getent( "bomber_crash_assets_col", "targetname" );

    if ( isdefined( var_3 ) )
    {
        var_2.brush_model clonebrushmodeltoscriptmodel( var_3 );
        var_2.brush_model linkto( var_2, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    }
    else
    {

    }

    var_2.id = "care_package";
    var_2.run_vehicle_group_with_respawn_on_failed_unload = 1;
    var_2.angles = ( 0, var_1[1], 0 );
    return var_2;
}

create_debug_model_for_spawnpoint( var_0 )
{
    var_1 = scripts\engine\trace::sphere_trace_get_all_results( var_0, var_0, 60 );

    foreach ( var_3 in var_1 )
    {
        var_4 = var_3["entity"];
        create_mp_version_of_vehicle( var_4, var_0 );
    }
}

create_cypher_piece( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "stop_plane_vehicle_crush" );

    for (;;)
    {
        var_0 waittill( "touch", var_1 );
        create_mp_version_of_vehicle( var_1, var_0.origin );
    }
}

create_mp_version_of_vehicle( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isalive( var_0 ) )
        return;

    if ( !var_0 scripts\common\vehicle::isvehicle() && !isdefined( var_0.classname ) )
        return;

    if ( var_0.classname == "script_vehicle" )
        var_0 dodamage( 10 * var_0.health, var_1 );
}

create_execution_devgui( var_0, var_1 )
{
    var_2 = scripts\engine\trace::ray_trace( var_0, var_1 );

    for ( var_3 = []; isdefined( var_2["entity"] ) && var_3.size < 25; var_2 = scripts\engine\trace::ray_trace( var_0, var_1, var_3 ) )
        var_3[var_3.size] = var_2["entity"];

    return var_2;
}

create_circular_path_around( var_0, var_1 )
{
    var_2 = anglestoforward( var_0.angles ) * 50;
    var_3 = scripts\engine\utility::drop_to_ground( var_0.origin + var_2 );
    var_4 = ( var_0.angles[0], var_0.angles[1] - 90, 0 );
    var_0.chest = easepower( "br_loot_cache_lep", var_3, var_4 );
    var_0.chest.dmztut_endgametransition = ::create_cam;
    var_0.chest.wait_for_tank_death = var_0;
    var_0.chest.objid = var_1;
    brlep_makeplanecrashicon( var_0.chest, 30, 1, 0, 1 );
}

create_cam( var_0, var_1, var_2, var_3, var_4 )
{
    if ( ( var_2 == "closed" || var_2 == "closed_nocol" ) && !isdefined( var_0.entity ) )
    {
        if ( var_2 == "closed" )
            var_0 setscriptablepartstate( var_1, "opening" );
        else if ( var_2 == "closed_nocol" )
            var_0 setscriptablepartstate( var_1, "opening_nocol" );

        var_3 thread scripts\mp\utility\points::giveunifiedpoints( "br_cacheOpen" );
        var_3 scripts\cp\helicopter\chopper_boss::tv_station_interior_enemy_should_break_stealth_immediately();

        if ( !isdefined( var_3.spawn_maint_wave_2 ) )
            var_3.spawn_maint_wave_2 = 1;
        else
            var_3.spawn_maint_wave_2++;

        var_3 scripts\mp\utility\stats::setextrascore1( var_3.spawn_maint_wave_2 );
        create_juggernaut_spawner( var_0 );
        level notify( "lootcache_opened_kill_callout" + var_0.origin );
        brlep_removeplanecrashicon( var_0.objid );
        var_0.objid = undefined;
        var_0 thread brlep_lepcachecloseagain( var_1 );
    }

    return 0;
}

brlep_lepcachecloseagain( var_0 )
{
    level endon( "game_ended" );
    self.wait_for_tank_death endon( "plane_cache_unusable" );
    var_1 = getdvarint( "scr_reusable_cache_recharge_time", 90 );
    wait( var_1 );
    self setscriptablepartstate( var_0, "closing" );
    brlep_makeplanecrashicon( self, 30, 1, 0, 1 );
}

create_nav_obstacle_for_wheelson()
{
    self endon( "death" );
    self endon( "plane_cache_unusable" );

    for (;;)
    {
        level waittill( "br_circle_started" );
        var_0 = level.br_level.circleradius[level.br_circle.circleindex + 1];
        var_1 = level.br_level.br_circleradii[level.br_circle.circleindex + 1];

        if ( distance2d( self.origin, var_0 ) > var_1 )
        {
            for (;;)
            {
                var_0 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
                var_1 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius() + 1000;

                if ( distance2d( self.origin, var_0 ) > var_1 )
                {
                    thread create_chopper_boss();
                    return;
                }

                wait 1;
            }
        }
    }
}

create_juggernaut_spawner( var_0 )
{
    var_1 = cratecleanup( var_0 );

    if ( !isdefined( var_1 ) || var_1.size <= 0 )
        return [];

    var_2 = spawnstruct();
    var_3 = anglestoforward( ( 0, var_0.angles[1] - -90, 0 ) );
    var_2.origin = var_0.origin + var_3 * 25;
    var_2.angles = ( 0, var_0.angles[1], 0 );
    var_2.itemsdropped = 0;
    var_4 = var_2 scripts\mp\gametypes\br_lootcache.gsc::spawn_single_cargo( var_1, 1, undefined );
    return var_4;
}

cratecleanup( var_0 )
{
    var_1 = randomint( 24 );
    var_2 = verifybunkercode( "lep_cache", var_1 );

    if ( !isdefined( var_2 ) )
        var_2 = [];

    var_3 = brlep_getplanecacherandomitem();

    if ( isdefined( var_3 ) )
        var_2[var_2.size] = var_3;

    var_2[var_2.size] = "brloot_lep_tablet";
    return var_2;
}

brlep_getplanecacherandomitem()
{
    if ( !isdefined( level.lep_planecacheitems ) )
        brlep_initplanecacheitems();

    var_0 = randomint( level.lep_planecacheitems.totalrollchance );

    foreach ( var_2 in level.lep_planecacheitems.itemlist )
    {
        if ( var_0 <= var_2.rollchance )
            return var_2.name;
    }

    return undefined;
}

create_chopper_boss()
{
    self endon( "death" );

    for (;;)
    {
        var_0 = scripts\common\utility::playersinsphere( self.origin, 3000 );

        if ( var_0.size == 0 )
            break;

        wait 1;
    }

    self.chest setscriptablepartstate( "body", "hidden" );
    brlep_removeplanecrashicon( self.chest.objid );
    self notify( "plane_cache_unusable" );
    self.plane_model delete();
    self.brush_model delete();
    self delete();
}

brlep_makeplanecrashicon( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_0.objid ) )
    {
        var_5 = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );
        var_0.objid = var_5;
        scripts\mp\objidpoolmanager::objective_add_objective( var_5, "current" );
        objective_setbackground( var_5, 1 );
        objective_icon( var_5, "ui_mp_br_minimap_icon_dis" );
        _func_421( var_5, 1 );
        objective_setplayintro( var_5, 0 );
        objective_setdescription( var_5, "BR_LEP_EVENT/PLANE_CRASH" );
        _func_0437( var_5, 1 );
        level.planecrashlocations.activeobjectiveids[level.planecrashlocations.activeobjectiveids.size] = var_5;

        foreach ( var_7 in level.planecrashlocations.maskedplayers )
        {
            if ( isdefined( var_7 ) )
            {
                objective_addclienttomask( var_5, var_7 );
                objective_hidefromplayersinmask( var_5 );
            }
        }
    }
    else
        var_5 = var_0.objid;

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    if ( isdefined( var_3 ) )
        objective_setshowoncompass( var_5, var_3 );

    if ( istrue( var_2 ) )
        getbnetigrbattlepassxpmultiplier( var_5, 42500, 55000 );

    if ( isdefined( var_4 ) )
        objective_setshowdistance( var_5, var_4 );

    if ( isent( var_0 ) )
        var_0 thread brlep_updatefallingplaneicon( var_1 );
    else
        objective_setlocation( var_5, 0, var_0.origin + ( 0, 0, var_1 ) );

    return var_5;
}

brlep_updatefallingplaneicon( var_0 )
{
    self endon( "plane_crashed" );
    self endon( "death" );
    var_1 = ( 0, 0, var_0 );

    for (;;)
    {
        objective_position( self.objid, self.origin + var_1 );
        waitframe();
        waitframe();
    }
}

brlep_removeplanecrashicon( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        scripts\mp\objidpoolmanager::returnobjectiveid( var_0 );
        level.planecrashlocations.activeobjectiveids = scripts\engine\utility::array_remove( level.planecrashlocations.activeobjectiveids, var_0 );
    }
}

brlep_monitorcontractstart()
{
    level endon( "game_ended" );

    for (;;)
    {
        level waittill( "quest_started", var_0, var_1 );
        waitframe();
        var_2 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0, var_1 );

        foreach ( var_4 in var_2 )
        {
            if ( isdefined( var_4 ) )
            {
                foreach ( var_6 in level.planecrashlocations.activeobjectiveids )
                {
                    objective_addclienttomask( var_6, var_4 );
                    objective_hidefromplayersinmask( var_6 );
                }

                level.planecrashlocations.maskedplayers[level.planecrashlocations.maskedplayers.size] = var_4;
            }
        }
    }
}

brlep_addplanecrashlocation( var_0, var_1, var_2 )
{
    var_3 = var_1 + anglestoforward( var_2 ) * -30000;
    var_3 = ( var_3[0], var_3[1], 15594 );
    var_4 = spawnstruct();
    var_4.crashorigin = var_1;
    var_4.spawnorigin = var_3;
    var_4.gate_closes = var_2;
    var_4.gate_swings_open = 0;
    var_4.depletionrate = 0;
    var_0 = scripts\engine\utility::array_add( var_0, var_4 );
    return var_0;
}

cqb_laser_guy_internal( var_0, var_1 )
{
    var_2 = var_0 - 1;

    if ( !isdefined( level.launcher_second_techo ) )
        level.launcher_second_techo = [];

    if ( !isdefined( level.launcher_second_techo[var_2] ) )
        level.launcher_second_techo[var_2] = [];

    level.launcher_second_techo[var_2] = scripts\engine\utility::array_add( level.launcher_second_techo[var_2], var_1 );
}

crate_objectives( var_0 )
{
    var_1 = level.launcher_second_techo[var_0 - 1];

    foreach ( var_3 in var_1 )
    {
        wait( var_3 );
        var_4 = crate_vo_play_on_first_use( level.planecrashlocations.launch_smoke_mortar );

        if ( !isdefined( var_4 ) )
            return;

        level thread crate_munitions( var_4 );
        level.planecrashlocations.launch_smoke_mortar = scripts\engine\utility::array_remove( level.planecrashlocations.launch_smoke_mortar, var_4 );
    }
}

brlep_dropthirdwave( var_0 )
{
    var_1 = level.launcher_second_techo[var_0 - 1];

    foreach ( var_3 in var_1 )
    {
        wait( var_3 );
        var_4 = crate_vo_play_on_first_use( level.planecrashlocations.thirdcircleplanecrashlocations, 1 );

        if ( !isdefined( var_4 ) )
            return;

        level thread crate_munitions( var_4 );
        level.planecrashlocations.thirdcircleplanecrashlocations = scripts\engine\utility::array_remove( level.planecrashlocations.thirdcircleplanecrashlocations, var_4 );
    }
}

crate_index()
{
    wait 1;
    level thread crate_munitions( level.planecrashlocations._id_121CC[0] );
    wait 2;
    level thread crate_munitions( level.planecrashlocations._id_121CC[1] );
    wait 2;
    level thread crate_munitions( level.planecrashlocations._id_121CC[2] );
    wait 2;
    level thread crate_munitions( level.planecrashlocations._id_121CC[3] );
    wait 3;
    level thread crate_munitions( level.planecrashlocations._id_121CC[4] );
}

brlep_manageflakvfxspawns()
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    var_0 = 0;

    while ( var_0 <= 5 )
    {
        level waittill( "br_circle_set", var_0 );

        if ( var_0 == 1 )
            wait 20;

        var_1 = ( 8131, 12276, 0 );

        if ( var_0 > 1 && var_0 < level.br_level.circleradius.size )
            var_1 = level.br_level.circleradius[var_0];

        var_1 = ( var_1[0], var_1[1], 21000 );
        brx2_setflakvfx( var_1, var_0 );
    }
}

brx2_setflakvfx( var_0, var_1 )
{
    if ( !isdefined( level.flakvfx ) )
    {
        level.flakvfx = spawnstruct();
        level.flakvfx.ent = spawn( "script_model", var_0 );
        level.flakvfx.ent setmodel( "vfx_br_lep" );
        thread brlep_deleteentityonendgame( level.flakvfx.ent );
    }

    level.flakvfx.amount = clamp( var_1, 1, 5 );
    level.flakvfx.ent.origin = var_0;
    level.flakvfx.ent setscriptablepartstate( "vfx", "flak_" + level.flakvfx.amount );
}

brlep_spawnbombersstartsequence()
{
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );

    if ( !isdefined( level.infilstruct ) )
        return;

    create_model_at();
    thread create_laser_trap( 2048, [ "planeWaves", "planeWaves", "planeWaves" ], level.infilstruct.c130pathstruct.angle[1] );
}

create_laser_trap( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    level endon( "stop_planes" );

    if ( !isdefined( level.change_keypad_display_digit ) )
        level.change_keypad_display_digit = spawnstruct();

    var_3 = gettime() + var_0 * 1000;
    var_4 = -8500;
    var_2 = var_2;
    var_5 = var_1;
    var_6 = 0;
    var_7 = 15;

    while ( gettime() < var_3 )
    {
        if ( getdvarint( "scr_br_lep_plane_waves_enabled", 1 ) )
            create_heartbeat_sensor_pick_up( var_4, var_2, var_5, var_6 );

        wait( var_7 );
    }
}

create_model_at()
{
    level notify( "stop_planes" );

    if ( !isdefined( level.change_keypad_display_digit ) || !isdefined( level.change_keypad_display_digit._id_1354E ) )
        return;

    foreach ( var_1 in level.change_keypad_display_digit._id_1354E )
    {
        if ( isdefined( var_1 ) )
            crate_follow_text( var_1 );
    }

    level.change_keypad_display_digit._id_1354E = [];
}

create_heartbeat_sensor_pick_up( var_0, var_1, var_2, var_3 )
{
    var_4 = ( 8131, 12276, 0 );

    if ( level.br_circle.circleindex > 2 && level.br_circle.circleindex < level.br_level.circleradius.size )
        var_4 = level.br_level.circleradius[level.br_circle.circleindex - 1];

    var_4 = rotatevector( ( var_4[0] + 65000, var_4[1] + -35000, var_0 ), ( 0, var_1, 0 ) );
    var_5 = create_agent_definition( var_4, var_1, var_2, var_3 );
    thread create_digit_models( var_5 );
}

create_agent_definition( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( level.change_keypad_display_digit ) )
        level.change_keypad_display_digit.change_keypad_display_digit = spawnstruct();

    if ( !isdefined( level.change_keypad_display_digit.wait_spawn_center_trucks ) )
        level.change_keypad_display_digit.wait_spawn_center_trucks = 0;

    if ( !isdefined( level.change_keypad_display_digit._id_1354E ) )
        level.change_keypad_display_digit._id_1354E = [];

    var_4 = spawnstruct();
    var_4.spawnpos = var_0;
    var_4.boss_wave = ( 0, var_1, 0 );
    var_4.bot_choose_attack_role = scripts\engine\utility::spawn_tag_origin( var_4.spawnpos, var_4.boss_wave );
    var_4.init_track_point = var_3;
    var_4.models = [];
    var_5 = ( 0, 0, 0 );

    if ( var_2.size > 1 )
    {
        var_5 = ( randomfloat( 2500 ), randomfloat( 2500 ), randomfloat( 1200 ) );
        var_5 = rotatevector( var_5, anglestoforward( ( 0, var_1, 0 ) ) );
        var_0 = var_0 - ( var_2.size / 2, 0.5, 0.5 ) * var_5;
    }

    foreach ( var_9, var_7 in var_2 )
    {
        var_8 = create_head_icon_for_crate( var_0 );
        var_8.animname = var_7;
        var_8 useanimtree( level.scr_animtree[var_7] );
        var_8 forcenetfieldhighlod( 1 );
        var_4.models[var_9] = var_8;
        var_5 = var_5 * rotatevector( ( -1, 1, -1 ), ( 0, var_1, 0 ) );
        var_0 = var_0 + var_5;
    }

    var_4.isbossheli = var_4.models.size + 1;
    level.change_keypad_display_digit.wait_spawn_center_trucks = level.change_keypad_display_digit.wait_spawn_center_trucks + var_4.isbossheli;

    for ( var_10 = 0; var_10 <= level.change_keypad_display_digit._id_1354E.size; var_10++ )
    {
        var_11 = level.change_keypad_display_digit._id_1354E[var_10];

        if ( !isdefined( var_11 ) )
        {
            var_4.index = var_10;
            level.change_keypad_display_digit._id_1354E[var_10] = var_4;
            break;
        }

        waitframe();
    }

    return var_4;
}

crate_follow_text( var_0 )
{
    foreach ( var_2 in var_0.models )
        var_2 delete();

    var_0.bot_choose_attack_role delete();
    level.change_keypad_display_digit.wait_spawn_center_trucks = level.change_keypad_display_digit.wait_spawn_center_trucks - var_0.isbossheli;
    level.change_keypad_display_digit._id_1354E[var_0.index] = undefined;
}

create_digit_models( var_0 )
{
    level endon( "game_ended" );
    level endon( "stop_planes" );
    var_0.bot_choose_attack_role scripts\common\anim::anim_single( var_0.models, "bomber_planes", undefined, var_0.init_track_point );

    if ( isdefined( var_0 ) )
        crate_follow_text( var_0 );
}

create_head_icon_for_crate( var_0 )
{
    var_1 = clamp( level.br_circle.circleindex + 1, 1, 5 );
    var_2 = spawn( "script_model", var_0 );
    var_3 = "wz_usa_bomber_b17_phase0" + var_1;
    var_2 setmodel( var_3 );
    var_2.angles = ( 0, 0, 0 );
    return var_2;
}

crate_set_flag_on_use()
{
    level endon( "game_ended" );
    wait 5;
    level thread create_heli_stuct();
    wait 8;
    level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "lep_air_defences" );
    wait 8;
    level thread brlep_beginbombardmentsequence();
    wait 20.0;
    level thread brlep_exfilsetupdomextractflag();
}

brlep_beginbombardmentsequence()
{
    level endon( "game_ended" );
    level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "lep_bomb_shelter" );
    level.threatbombardmentscriptable = "vfx_br_lep_bomber_exp";
    level.threatmaxradiusstrikesaroundplayer = getdvarfloat( "scr_threat_max_radius_strikes_around_player", 500 );
    level.threatminradiusstrikesaroundplayer = getdvarfloat( "scr_threat_min_radius_strikes_around_player", 10 );
    level.threatexplosionperstrikes = getdvarint( "scr_threat_explosion_per_strikes", 1 );
    level.threatminradiusthicknessaroundplayer = getdvarfloat( "scr_threat_thickness_radius_strikes_around_player", 10 );
    level.threatdelaybetweenstrikes = getdvarfloat( "scr_threat_delay_between_strikes", 0.3 );
    level.threatexplosiondamage = getdvarint( "scr_threat_explosion_damage", 0 );

    for (;;)
    {
        if ( getdvarint( "scr_lep_bombardment_does_damage", 0 ) )
            create_keycard_for_reader();

        if ( getdvarint( "scr_lep_bombardment_fx", 0 ) )
        {
            foreach ( var_1 in level.players )
                level thread _calloutmarkerping_handleluinotify_added::brjugg_initfeatures( 10, var_1.origin );
        }

        wait 20;
    }
}

brlep_clusterdangernotifyplayersinrange( var_0, var_1, var_2, var_3 )
{
    if ( var_2 == "toma_strike" )
    {
        var_4 = scripts\common\utility::playersincylinder( var_0, var_1 );
        level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "lep_bomb_incoming", undefined, var_4 );

        foreach ( var_6 in var_4 )
        {
            if ( !isdefined( var_6 ) || !scripts\mp\utility\player::isreallyalive( var_6 ) || var_6.team == self.team )
                continue;

            scripts\mp\gametypes\br_killstreaks.gsc::getfilterformodifier( var_6, "lep_toma_strike", 0 );
        }
    }
    else
        scripts\mp\gametypes\br_killstreaks.gsc::getfirespoutlaunchvectors( var_0, var_1, var_2, var_3 );
}

create_keycard_for_reader()
{
    var_0 = 2 * level.framedurationseconds;

    foreach ( var_2 in level.players )
    {
        level brlep_shootclusterstrike( var_2 );
        wait( var_0 );
    }
}

brlep_shootclusterstrike( var_0 )
{
    var_1 = var_0 scripts\cp_mp\utility\killstreak_utility::createstreakinfo( "toma_strike", var_0 );
    var_1.trap_array = 0;
    var_1.trigger_elevator_spawners = 1;
    var_1.radiusoverwrite = 30;
    var_1.select_reception_spawners = 1;
    var_1.usereload = "ks_toma_strike_missile_mp_x2";
    var_1.usequesttimer = "ks_toma_strike_cluster_mp_x2";
    var_1.target = var_0;
    var_1.skipobjectives = 1;
    var_1._id_12BB0 = var_0.origin;
    var_0 thread scripts\cp_mp\killstreaks\toma_strike::tomastrikeatlocation( var_0.origin, var_0.angles, var_1 );
}

flashtheprops()
{
    if ( !isdefined( self ) )
        return;

    radiusdamage( self.origin, 256, 15, 15, self, "MOD_EXPLOSIVE", "toma_proj_mp" );
}

create_fake_loot_model_from_struct( var_0, var_1 )
{
    level._id_13324 = var_0;

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    foreach ( var_3 in level.players )
        var_3 visionsetnakedforplayer( var_0, var_1 );
}

create_heli_stuct()
{
    level endon( "game_ended" );
    var_0 = 10;
    create_fake_loot_model_from_struct( "mp_don4_outro_shadow_lep", var_0 );
}

brlep_playendmovie()
{
    foreach ( var_1 in level.players )
    {
        if ( !isdefined( var_1 ) )
            continue;

        var_1 thread brlep_playcinematic( "cp_mbi_outro", 12, 15, 0 );
    }
}

brlep_playcinematic( var_0, var_1, var_2, var_3 )
{
    self setclientomnvar( "ui_br_bink_overlay_state", var_1 );
    self setsoundsubmix( "fade_to_black_all_except_music_and_scripted3", 0.5 );
    scripts\mp\utility\player::_freezecontrols( 1 );
    self playcinematicforplayer( var_0, 1, var_3 );
    var_4 = gettime();
    brlep_skiponkeypress( var_4, var_2 * 1000 );
    self stopcinematicforplayer();
    scripts\mp\utility\player::_freezecontrols( 0 );
    self setclientomnvar( "ui_br_bink_overlay_state", 0 );
    self clearsoundsubmix( "fade_to_black_all_except_music_and_scripted3", 0.5 );
}

brlep_skiponkeypress( var_0, var_1 )
{
    self endon( "bink_complete" );
    wait 2;

    while ( gettime() - var_0 < var_1 && !self crouchbuttonpressed() && !self usebuttonpressed() && !self jumpbuttonpressed() )
        waitframe();
}

brlep_notifybinkcompleted( var_0, var_1 )
{
    if ( var_0 == "bink_complete" )
        self notify( "bink_complete" );
}

brlep_exfilsetupdomextractflag()
{
    level endon( "game_ended" );
    level.should_enter_combat_after_checking_decoy_grenade = spawnstruct();
    var_0 = 225;
    var_1 = getgroundposition( level.should_enter_combat_after_checking_smoke_grenade, 1 );
    scripts\mp\gametypes\br_publicevents.gsc::_id_12557( "br_lep_exfil_incoming" );
    wait 20.0;
    scripts\mp\gametypes\br_publicevents.gsc::_id_12557( "br_lep_exfil_online" );

    foreach ( var_3 in level.players )
        var_3 scripts\mp\utility\lower_message::setlowermessageomnvar( 83, undefined, 10 );

    level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "lep_exfil_start" );
    wait 3.0;
    level.should_enter_combat_after_checking_decoy_grenade.trigger = spawn( "trigger_radius", var_1, 0, int( var_0 ), int( level.classify_players_based_on_laststand ) );
    var_5 = scripts\mp\gametypes\obj_dom.gsc::setupobjective( level.should_enter_combat_after_checking_decoy_grenade.trigger, "neutral" );
    var_5.flagmodel setmodel( "x2_military_old_recon_station" );
    var_5.onuse = ::brlep_exfilonuse;
    var_5.onbeginuse = ::brlep_exfilonbeginuse;
    var_5.onuseupdate = ::brlep_exfilonuseupdate;
    var_5.onenduse = ::brlep_exfilonenduse;
    var_5.oncontested = ::brlep_exfiloncontested;
    var_5.onuncontested = ::brlep_exfilonuncontested;
    var_5.onunoccupied = ::brlep_exfilonunoccupied;
    var_5.onpinnedstate = ::brlep_exfilonpinnedstate;
    var_5.onunpinnedstate = ::brlep_exfilonunpinnedstate;
    var_5._id_12A14 = ::brlep_exfilonstompenemyprogressupdate;
    var_5.stompprogressreward = ::brlep_exfilstompprogressreward;
    var_5.disablespawncamera = 1;
    var_5.id = "domFlag";
    var_5.pinobj = 0;
    var_5.lockupdatingicons = 1;
    var_5 scripts\mp\gameobjects::setcapturebehavior( "persistent" );
    var_5 scripts\mp\gameobjects::setusetime( 60 );
    var_5 brlep_exfilupdatewaypointinfo();
    playencryptedcinematicforall( var_5.objidnum, 1 );
    level.should_enter_combat_after_checking_decoy_grenade.isplayerindanger_think = var_5;
    level.objectivescaler = 1;

    foreach ( var_3 in level.players )
    {
        var_3 setclientomnvar( "ui_securing", 17 );
        var_3 setclientomnvar( "ui_securing_progress", 0 );
    }
}

brlep_exfilsetallobjectivestate( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2 ) && isdefined( var_2.team ) )
        {
            if ( var_2.team == var_0 )
            {
                var_2 setclientomnvar( "ui_securing", 18 );
                continue;
            }

            var_2 setclientomnvar( "ui_securing", 19 );
        }
    }
}

brlep_exfilsetplayerobjectivestate( var_0 )
{
    if ( var_0 == "contested" )
        self setclientomnvar( "ui_securing", 20 );
    else if ( var_0 == "friendly" )
        self setclientomnvar( "ui_securing", 18 );
    else
        self setclientomnvar( "ui_securing", 19 );
}

brlep_exfilupdateplayerprogressbars( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2 ) )
            var_2 setclientomnvar( "ui_securing_progress", var_0 );
    }
}

brlep_exfilnewownerfeedback( var_0 )
{
    self notify( "exfil_newOwnerFeedback" );
    self endon( "exfil_newOwnerFeedback" );

    if ( isplayer( var_0 ) )
        var_1 = var_0.team;
    else
        var_1 = var_0;

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3 ) && isdefined( var_1 ) )
        {
            if ( var_3.team == var_1 )
            {
                var_3 thread brlep_exfilsetplayerobjectivestate( "friendly" );
                var_3 thread scripts\mp\hud_message::showsplash( "br_body_count_friendly_team_exfil" );
                continue;
            }

            var_3 thread brlep_exfilsetplayerobjectivestate( "enemy" );
            var_3 thread scripts\mp\hud_message::showsplash( "br_body_count_enemy_team_exfil" );
        }
    }

    brlep_playteamdialog( var_1, "exfil_friendly_start", "exfil_enemy_start" );
}

brlep_exfilonuse( var_0 )
{
    var_1 = var_0.team;
    self.capturetime = gettime();
    self.doarmsraceopencachenags = 1;

    if ( self.touchlist[var_1].size == 0 && isdefined( self.oldtouchlist ) )
        self.touchlist = self.oldtouchlist;

    brlep_playteamdialog( var_1, "lep_chall_success", "exfil_enemy_win" );
    brlep_exfilupdateplayerprogressbars( 1 );
    thread brlep_exfilgivewincondition( var_1 );
}

brlep_exfilonbeginuse( var_0 )
{
    if ( !isdefined( self.tripledefenderkill ) || !self.tripledefenderkill )
    {
        self.tripledefenderkill = 1;
        thread brlep_exfilnewownerfeedback( var_0 );
        var_1 = scripts\mp\utility\teams::getfriendlyplayers( var_0.team, 0 );

        foreach ( var_3 in var_1 )
            var_3 notify( "calloutmarkerping_warzoneKillQuestIcon" );
    }
}

brlep_exfilonuseupdate( var_0, var_1, var_2, var_3 )
{
    if ( var_1 < 1.0 && !level.gameended && !istrue( self.doarmsraceopencachenags ) )
    {
        brlep_exfilupdateplayerprogressbars( var_1 );
        brlep_exfilplayspotrepcapturesfx( var_1, var_0 );
    }

    if ( var_1 > 0.05 && var_2 && !istrue( self.didstatusnotify ) )
        self.didstatusnotify = 1;

    if ( self.disablespawncamera && var_1 > 0.5 )
    {
        self.disablespawncamera = 0;
        brlep_playteamdialog( var_0, "exfil_friendly_50", "exfil_enemy_50" );
    }
}

brlep_exfilonenduse( var_0, var_1, var_2 )
{
    scripts\mp\gametypes\obj_dom.gsc::dompoint_onuseend( var_0, var_1, var_2 );
}

brlep_exfiloncontested()
{
    scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_contested" );
    scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, undefined );
    level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "exfil_contested" );
    var_0 = scripts\mp\gameobjects::getownerteam();

    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2 ) && isdefined( var_0 ) )
            var_2 thread brlep_exfilsetplayerobjectivestate( "contested" );
    }
}

brlep_exfilonuncontested( var_0 )
{
    var_1 = scripts\mp\gameobjects::getownerteam();
    var_2 = undefined;
    var_3 = brlep_exfilgetnumteamstouching();

    if ( var_3 <= 1 )
    {
        foreach ( var_5 in level.teamnamelist )
        {
            var_6 = self.teamprogress[var_5];

            if ( var_6 > 0 )
            {
                var_2 = var_5;
                break;
            }
        }

        if ( isdefined( var_2 ) )
        {
            scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, var_2 );
            brlep_exfilsetallobjectivestate( var_2 );
        }
        else if ( var_1 != "neutral" )
            scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, var_1 );
        else if ( var_0 != "none" )
            scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, var_0 );

        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defend", "waypoint_capture" );

        if ( var_0 == "none" || var_1 == "neutral" )
            self.didstatusnotify = 0;
    }
}

brlep_exfilonunoccupied()
{
    var_0 = scripts\mp\gameobjects::getownerteam();

    if ( var_0 == "neutral" )
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_captureneutral" );
    else
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defend", "waypoint_capture" );

    self.didstatusnotify = 0;
}

brlep_exfilonpinnedstate( var_0 )
{
    if ( self.ownerteam != "neutral" && self.numtouching[self.ownerteam] && !self.stalemate )
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defending", "waypoint_capture" );
}

brlep_exfilonunpinnedstate( var_0 )
{
    if ( self.ownerteam != "neutral" && !self.numtouching[self.ownerteam] && !self.stalemate )
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defend", "waypoint_capture" );
}

brlep_exfilonstompenemyprogressupdate( var_0 )
{
    var_1 = scripts\mp\utility\teams::getenemyteams( var_0 );
    var_2 = undefined;

    foreach ( var_4 in var_1 )
    {
        var_5 = self.teamprogress[var_4];

        if ( var_5 > 0 )
            var_2 = var_5 / self.usetime;
    }

    if ( isdefined( var_2 ) )
    {
        brlep_exfilupdateplayerprogressbars( var_2 );

        if ( var_2 <= 0.008 )
            thread brlep_exfilnewownerfeedback( self.claimteam );

        if ( !self.disablespawncamera && var_2 < 0.4 )
            self.disablespawncamera = 1;
    }
}

brlep_exfilstompprogressreward( var_0 )
{
    var_0 thread scripts\mp\utility\points::giveunifiedpoints( "obj_prog_defend" );
    scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defending", "waypoint_capture" );

    if ( isdefined( self.lastprogressteam ) )
    {
        thread brlep_exfilnewownerfeedback( var_0 );
        self.lastprogressteam = undefined;
    }
}

brlep_exfilplayspotrepcapturesfx( var_0, var_1 )
{
    if ( !isdefined( self.lastsfxplayedtime ) )
        self.lastsfxplayedtime = gettime();

    if ( self.lastsfxplayedtime + 995 < gettime() )
    {
        self.lastsfxplayedtime = gettime();
        var_2 = "";
        var_0 = int( floor( var_0 * 10 ) );
        var_2 = "mp_dom_capturing_tick_0" + var_0;
        self.visuals[0] playsoundtoteam( var_2, var_1 );
    }
}

brlep_exfilgivewincondition( var_0 )
{
    waitframe();

    if ( istrue( level._id_12E94 ) )
        return;

    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2 ) )
            var_2 scripts\mp\utility\player::_freezecontrols( 1 );
    }

    level._id_12E94 = 1;
    level._id_135D1 = 1;
    level thread scripts\mp\gamelogic::endgame( var_0, game["end_reason"]["objective_completed"], undefined, undefined, undefined, 1 );
    var_4 = [];

    if ( isdefined( var_0 ) && var_0 != "tie" )
        var_4 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    thread scripts\mp\music_and_dialog::_id_11AA3( var_4 );
    thread crateusefunc( var_4 );
}

brlep_exfilgetnumteamstouching()
{
    var_0 = 0;

    foreach ( var_3, var_2 in self.numtouching )
    {
        if ( var_2 > 0 && ( !isstring( var_3 ) || var_3 != "none" ) )
            var_0++;
    }

    return var_0;
}

brlep_exfilupdatewaypointinfo()
{
    scripts\mp\objidpoolmanager::update_objective_setneutrallabel( self.objidnum, "BR_BODYCOUNT/EXFIL" );
}

cratephysicsoncallback()
{
    var_0 = scripts\engine\utility::array_removeundefined( level.players );

    foreach ( var_2 in var_0 )
        var_2 scripts\cp\helicopter\chopper_boss::update_focus_fire_objective( "lep_dis_1" );
}

crateusefunc( var_0 )
{
    foreach ( var_2 in var_0 )
        var_2 scripts\cp\helicopter\chopper_boss::update_focus_fire_objective( "lep_dis_3" );
}

cratephysicson( var_0 )
{
    scripts\cp\helicopter\chopper_boss::update_focus_fire_objective( var_0 );
}

cratephysicsoff()
{
    var_0 = scripts\engine\utility::array_removeundefined( level.players );
    return scripts\mp\gametypes\br_ending.gsc::get_center_of_array( var_0 );
}

brlep_playteamdialog( var_0, var_1, var_2 )
{
    foreach ( var_4 in level.teamnamelist )
    {
        if ( var_4 == var_0 )
        {
            level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( var_1, var_4 );
            continue;
        }

        level thread scripts\mp\gametypes\br_public.gsc::cpoperationcrateactivatecallback( var_2, var_4 );
    }
}

brlep_deleteentityonendgame( var_0 )
{
    level waittill( "game_ended" );

    if ( isdefined( var_0 ) )
        var_0 delete();
}

brlep_initaudio()
{
    level endon( "game_ended" );
    var_0 = spawn( "script_model", ( 0, 0, 500 ) );
    var_0 setmodel( "lep_sfx" );
    waitframe();
    var_0 setscriptablepartstate( "sfx", "attack_state_01" );
    level.lepaudioloop01 = var_0;
    var_0 = spawn( "script_model", ( 0, 0, 500 ) );
    var_0 setmodel( "lep_sfx" );
    waitframe();
    var_0 setscriptablepartstate( "sfx", "base" );
    level.lepaudioloop02 = var_0;
}

brlep_changeambienceloop( var_0, var_1 )
{
    level.lepaudioloop01 setscriptablepartstate( "sfx", var_0 );
    level.lepaudioloop02 setscriptablepartstate( "sfx", var_1 );
}
