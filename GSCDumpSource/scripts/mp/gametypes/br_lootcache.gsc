// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

brlootcache_init()
{
    scripts\engine\scriptable::_id_1219E( "body", ::lootcacheused );
    var_0 = getdvar( "scr_br_debug_loot_name", "" );
    var_1 = getdvar( "scr_br_debug_loot_probability", 0.0 );
    var_2 = strtok( var_0, " " );
    var_3 = strtok( var_1, " " );

    if ( var_3.size == 0 )
        var_3[var_3.size] = "1.0";

    level.create_rig_for_usb_animation = [];

    for ( var_4 = 0; var_4 < var_2.size; var_4++ )
    {
        var_5 = spawnstruct();
        var_5.name = var_2[var_4];
        var_6 = int( min( var_4, var_3.size - 1 ) );
        var_5._id_11B9E = float( var_3[var_6] );
        level.create_rig_for_usb_animation[level.create_rig_for_usb_animation.size] = var_5;
    }

    if ( istrue( level.play_hud_reminder_vo ) )
    {
        setmatchdata( "halloweenTrickOrTreatRules", 1 );
        _branalytics_addeventallowed::init();
    }
}

divide_living_ai( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( scripts\mp\gametypes\br_public.gsc::risk_flagspawnshiftingcenter() )
    {
        if ( isdefined( level.linecircleintersection2d ) && isdefined( level.linecircleintersection2d[var_0] ) )
            return 0;
    }

    if ( var_0 == "brloot_respawn_token" && scripts\mp\gametypes\br_pickups.gsc::_id_11F66() )
        return 0;

    return 1;
}

spawn_silo_door_ai( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( istrue( var_4 ) )
    {
        var_8 = 35;

        if ( isdefined( var_6 ) )
        {
            var_9 = [ 115, 75, 95, 85, 105, 65 ];
            var_10 = ( var_1.init_reach_wind_room + var_6 * 3 ) % var_9.size;
            var_11 = var_9[var_10];
            var_8 = var_8 + 20 * var_6;
        }
        else if ( var_1.init_reach_wind_room % 2 > 0 )
            var_11 = 75;
        else
            var_11 = 115;

        var_11 = var_11 + randomfloatrange( -10, 10 );
        var_12 = var_8 + var_1.init_reach_wind_room / 2 * 25 + randomfloatrange( -5, 5 );
        var_13 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_1, var_2, var_3, var_7, var_11, var_12 );
    }
    else
        var_13 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_1, var_2, var_3, var_7 );

    var_14 = level.br_pickups.counts[var_0];
    var_15 = undefined;
    var_16 = scripts\mp\gametypes\br_pickups.gsc::new_objective_thread( var_0 );

    if ( isdefined( var_16 ) )
    {
        var_14 = scripts\mp\gametypes\br_weapons.gsc::br_getweaponstartingclipammo( var_16 );

        if ( scripts\mp\utility\weapon::respawnplayers( var_16 ) )
            var_15 = var_14;
    }

    var_17 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_0, var_13, var_14, 1, undefined, undefined, var_15 );
    var_18 = level.br_pickups.clean_up_strafe[var_0];

    if ( var_5 )
        playsoundatpos( var_13.origin, "br_legendary_loot_drop" );

    return var_17;
}

spawn_single_cargo( var_0, var_1, var_2, var_3 )
{
    var_4 = [];
    var_5 = 0;
    var_6 = scripts\mp\gametypes\br_pickups.gsc::register_respawn_functions();
    var_6.init_reach_wind_room = self.itemsdropped;

    foreach ( var_8 in var_0 )
    {
        if ( divide_living_ai( var_8 ) )
        {
            var_9 = level.br_pickups.clean_up_strafe[var_8];

            if ( isdefined( var_9 ) && var_9 == 4 && var_5 == 0 )
            {
                var_4[var_4.size] = spawn_silo_door_ai( var_8, var_6, self.origin, self.angles, var_1, 1, var_2, var_3 );
                self.itemsdropped++;
                var_5 = 1;
            }
            else
            {
                var_4[var_4.size] = spawn_silo_door_ai( var_8, var_6, self.origin, self.angles, var_1, 0, var_2, var_3 );
                self.itemsdropped++;
            }
        }
    }

    return var_4;
}

spawn_manual_turret( var_0, var_1 )
{
    return spawn_single_cargo( var_0, 1, var_1 );
}

fixuptrigspostship( var_0 )
{
    level endon( "game_ended" );
    self endon( "death" );
    var_1 = getdvarint( "scr_reusable_cache_recharge_time", 90 );
    var_2 = 10;
    var_3 = 1;

    for ( var_4 = var_1 / var_2; var_3 < var_2; var_3++ )
    {
        wait( var_4 );
        self setscriptablepartstate( var_0, "vfx" + var_3 );
    }

    waitframe();
    var_5 = getdvarint( "scr_reusable_cache_loot_sets", 3 );
    self.get_track_location_index = ( self.get_track_location_index + 1 ) % var_5;
    self setscriptablepartstate( var_0, "closing" );
}

lootcacheused( var_0, var_1, var_2, var_3, var_4 )
{
    if ( istrue( var_3 scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "playerSkipLootPickup", var_0 ) ) )
        return;

    if ( isdefined( var_0 ) && isdefined( var_0.dmztut_endgametransition ) && ![[ var_0.dmztut_endgametransition ]]( var_0, var_1, var_2, var_3, var_4 ) )
        return;

    if ( ( var_2 == "closed" || var_2 == "closed_nocol" ) && !isdefined( var_0.entity ) )
    {
        if ( var_2 == "closed" )
            var_0 setscriptablepartstate( var_1, "opening" );
        else if ( var_2 == "closed_nocol" )
            var_0 setscriptablepartstate( var_1, "opening_nocol" );

        if ( isdefined( var_0 ) && isdefined( var_0._id_13100 ) )
            thread [[ var_0._id_13100 ]]( var_0, var_1, var_2, var_3, var_4 );

        var_0.itemsdropped = 0;
        thread additionalrecondronetargets( var_0, var_1, var_2, var_3, var_4 );

        if ( scripts\mp\gametypes\br_gametypes.gsc::revive_stim( "addSpawnLootContents" ) )
            var_0 thread scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "addSpawnLootContents" );

        scripts\mp\gametypes\br_plunder.gsc::survivorstreakoverride( "br_loot_cache", -1 );
        var_3 thread scripts\mp\utility\points::giveunifiedpoints( "br_cacheOpen" );
        var_3 scripts\cp\helicopter\chopper_boss::tv_station_interior_enemy_should_break_stealth_immediately();

        if ( !isdefined( var_3.spawn_maint_wave_2 ) )
            var_3.spawn_maint_wave_2 = 1;
        else
            var_3.spawn_maint_wave_2++;

        var_3 scripts\mp\utility\stats::setextrascore1( var_3.spawn_maint_wave_2 );

        if ( istrue( level.play_hud_reminder_vo ) )
            var_3 thread _branalytics_addeventallowed::updateassassinationdataomnvar( var_0.type, var_0, var_3.calloutarea );

        if ( scripts\mp\gametypes\br_gametypes.gsc::revive_stim( "lootCacheOpened" ) )
            var_3 thread scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "lootCacheOpened", var_0 );

        level notify( "lootcache_opened_kill_callout" + var_0.origin );
    }
}

additionalrecondronetargets( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = [];
    var_6 = 0;

    if ( var_0.type == "br_reusable_loot_cache" )
    {
        if ( !isdefined( var_0.get_track_location_index ) )
            var_0.get_track_location_index = 0;

        var_6 = var_0.get_track_location_index;
    }

    if ( isdefined( var_0._id_121C0 ) )
    {
        if ( isdefined( var_0._id_121C1 ) )
            var_7 = verifybunkercode( var_0._id_121C0, var_0._id_121C1 );
        else
            var_7 = verifybunkercode( var_0._id_121C0 );

        var_7 = scripts\engine\utility::array_randomize( var_7 );
    }
    else
        var_7 = pickscriptablelootitem( var_0, var_6 );

    if ( isdefined( var_7 ) )
        var_7 = spawn_obit_struct( var_7, var_3 );

    if ( isdefined( var_7 ) && var_3 scripts\mp\utility\perk::_hasperk( "specialty_br_extra_killstreak_chance" ) )
        var_7 = spawn_overwatch_extra_atvs( var_7, var_3 );

    var_7 = spawn_overwatch_final_tank( var_7, var_3 );

    if ( isdefined( var_7 ) )
    {
        if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
        {
            if ( scripts\mp\flags::gameflag( "placement_updates_allowed" ) )
            {
                var_8 = game["teamPlacements"][var_3.team];

                if ( !isdefined( level.hoopty_initdamage ) )
                    scripts\mp\gametypes\br_gametype_dmz.gsc::desired_landing_spot();

                var_9 = 100 - 100 * var_8 / level.hoopty_initdamage;

                if ( isdefined( level.chopperexfil_sh040_start ) && var_9 < level.chopperexfil_sh040_start )
                    var_7 = spawn_objective( var_0, var_7 );
                else if ( isdefined( level._id_12CDD ) && var_9 > level._id_12CDD )
                    var_7 = spawn_origin( var_0, var_7 );
            }
        }

        if ( isdefined( level.start_coop_escape_safehouse ) )
            var_7 = spawn_obit_model( var_7 );

        if ( var_0.type != "br_reusable_loot_cache" )
            var_6 = undefined;

        if ( var_0.type == "br_loot_cache_zom" )
        {
            if ( isdefined( var_0._id_121C1 ) )
                var_6 = var_0._id_121C1 % 3;

            wait 0.7;
        }

        var_5 = var_0 spawn_manual_turret( var_7, var_6 );
    }
    else
    {
        var_10 = ( 0, 0, 0 );
        var_11 = "mp/loot_set_cache_contents_base.csv";

        if ( getdvarint( "scr_br_alt_mode_cash", 0 ) )
            var_11 = "mp/loot_set_cache_contents_base_cash.csv";
        else if ( getdvarint( "scr_br_alt_mode_gg", 0 ) )
            var_11 = "mp/loot_set_cache_contents_base_gg.csv";
        else if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
        {
            var_10 = ( 0, 45, 0 );

            if ( var_0.type == "br_loot_cache_lege" )
                var_11 = "mp/loot_set_cache_contents_lege_dmz_ground_tablets.csv";
            else if ( var_0.type == "br_loot_cache" )
                var_11 = "mp/loot_set_cache_contents_rare_dmz_ground_tablets.csv";
        }

        var_12 = var_0 chooseandspawnitems( 2, 1, "weapon", var_11, var_10 );
        var_5[var_5.size] = var_12[0];
        var_12 = var_0 chooseandspawnitems( 0, 1, "ammo", var_11, var_10 );
        var_5[var_5.size] = var_12[0];
        var_12 = var_0 chooseandspawnitems( 0, 1, undefined, var_11, var_10 );
        var_5[var_5.size] = var_12[0];
        var_12 = var_0 chooseandspawnitems( 0, 1, undefined, var_11, var_10 );
        var_5[var_5.size] = var_12[0];
        var_12 = var_0 chooseandspawnitems( 2, 1, "plunder", var_11, var_10 );
        var_5[var_5.size] = var_12[0];
        var_0 setscriptablepartstate( var_1, "open" );
    }

    var_13 = "cache";

    switch ( var_0.type )
    {
        case "br_lep_quest_cache":
        case "br_scavenger_quest_cache_adler":
        case "br_scavenger_quest_cache":
            var_13 = "cache_scavenger";
            break;
        case "br_loot_cache_pow":
        case "br_loot_cache_reddoor":
        case "br_loot_cache_easterevent":
        case "br_loot_cache_lege":
            var_13 = "cache_legendary";
            break;
        case "br_geiger_quest_cache":
            var_13 = "cache_geigerstash";
            break;
        case "br_reusable_loot_cache":
            var_0 thread fixuptrigspostship( var_1 );
            break;
    }

    if ( istrue( level.cleanupmolotovs ) && getdvarfloat( "scr_br_pe_restock_weight", 0 ) )
        var_0 scripts\mp\gametypes\br_publicevent_restock.gsc::restockcrate();

    foreach ( var_15 in var_5 )
    {
        if ( isdefined( var_15 ) )
            var_15.spawn_set_jugg_value = var_13;
    }
}

spawn_objective( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in var_1 )
    {
        if ( issubstr( var_4, "brloot_plunder" ) )
        {
            if ( var_0.type == "br_loot_cache_lege" )
            {
                if ( var_4 != "brloot_plunder_cash_legendary_1" && scripts\engine\utility::cointoss() )
                    var_4 = "brloot_plunder_cash_legendary_1";
            }
            else if ( var_4 != "brloot_plunder_cash_epic_2" && scripts\engine\utility::cointoss() )
                var_4 = "brloot_plunder_cash_epic_2";
        }

        var_2[var_2.size] = var_4;
    }

    return var_2;
}

spawn_origin( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in var_1 )
    {
        if ( issubstr( var_4, "brloot_plunder" ) )
        {
            if ( var_0.type == "br_loot_cache_lege" )
            {
                if ( ( var_4 == "brloot_plunder_cash_epic_2" || var_4 == "brloot_plunder_cash_legendary_1" ) && scripts\engine\utility::cointoss() )
                    var_4 = "brloot_plunder_cash_epic_1";
            }
            else if ( ( var_4 == "brloot_plunder_cash_epic_2" || var_4 == "brloot_plunder_cash_epic_1" ) && scripts\engine\utility::cointoss() )
                var_4 = "brloot_plunder_cash_rare_2";
        }

        var_2[var_2.size] = var_4;
    }

    return var_2;
}

spawn_obit_model( var_0 )
{
    var_1 = [];

    foreach ( var_3 in var_0 )
    {
        if ( var_3 != "brloot_access_card_red" )
        {
            var_1[var_1.size] = var_3;
            continue;
        }

        if ( level.start_coop_escape_safehouse > level.aigroundturret_shouldmountturret )
        {
            var_1[var_1.size] = var_3;
            level.aigroundturret_shouldmountturret++;
        }
    }

    return var_1;
}

chooseandspawnitems( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = [];
    var_6 = 0;

    if ( !isdefined( var_2 ) )
        var_2 = "";

    if ( !isdefined( var_0 ) )
        var_0 = 0;

    var_7 = "mp/loot_set_cache_contents_base.csv";

    if ( isdefined( var_3 ) )
        var_7 = var_3;

    var_8 = scripts\mp\gametypes\br_pickups.gsc::register_respawn_functions();

    for ( var_9 = 0; var_9 < var_1; var_9++ )
    {
        var_10 = registerscriptedspawnpoints( var_2, var_0, 0, var_7 );

        if ( divide_living_ai( var_10 ) )
        {
            var_11 = self.angles;

            if ( isdefined( var_4 ) )
                var_11 = var_11 + var_4;

            var_12 = level.br_pickups.clean_up_strafe[var_10];

            if ( isdefined( var_12 ) && var_12 == 4 && var_6 == 0 )
            {
                var_5[var_5.size] = spawn_silo_door_ai( var_10, var_8, self.origin, var_11, undefined, 1 );
                self.itemsdropped++;
                var_6 = 1;
            }
            else
            {
                var_5[var_5.size] = spawn_silo_door_ai( var_10, var_8, self.origin, var_11, undefined, 0 );
                self.itemsdropped++;
            }
        }
    }

    return var_5;
}

spawn_overwatch_extra_atvs( var_0, var_1 )
{
    if ( !isdefined( var_1.convoy_anim_sequence ) )
        var_1.convoy_anim_sequence = 10;

    var_2 = 0;

    foreach ( var_5, var_4 in var_0 )
    {
        if ( issubstr( var_4, "killstreak" ) )
        {
            var_2 = 1;
            break;
        }
    }

    if ( !var_2 )
    {
        if ( randomint( 100 ) < var_1.convoy_anim_sequence )
        {
            if ( !isdefined( level.serverroomrewardroll ) )
                level.serverroomrewardroll = 0;
            else
                level.serverroomrewardroll = randomint( 25 );

            var_6 = verifybunkercode( "killchain_boost", level.serverroomrewardroll );

            foreach ( var_8 in var_6 )
                var_0[var_0.size] = var_8;

            var_1.convoy_anim_sequence = 10;
        }
        else
            var_1.convoy_anim_sequence = var_1.convoy_anim_sequence + 15;
    }

    return var_0;
}

spawn_obit_struct( var_0, var_1 )
{
    foreach ( var_3 in level.create_rig_for_usb_animation )
    {
        if ( var_3._id_11B9E > randomfloat( 1.0 ) )
            var_0[var_0.size] = var_3.name;
    }

    return var_0;
}

spawn_overwatch_final_tank( var_0, var_1 )
{
    var_2 = getdvarfloat( "scr_br_plunder_adjust_prob", 0.8 );

    if ( randomfloat( 1.0 ) < var_2 && !scriptable_addusedcallbackbypart( var_0 ) )
    {
        if ( !var_1 _id_128B0() )
            var_0[var_0.size] = "brloot_plunder_cash_uncommon_1";
    }

    return var_0;
}

scriptable_addusedcallbackbypart( var_0 )
{
    foreach ( var_2 in var_0 )
    {
        if ( issubstr( var_2, "brloot_plunder" ) )
            return 1;
    }

    return 0;
}

_id_128B0()
{
    var_0 = self;

    if ( !isalive( var_0 ) )
        return 0;

    var_1 = 0;
    var_2 = 0;
    var_3 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0.team, var_0.squadindex );

    foreach ( var_5 in var_3 )
    {
        if ( var_5 scripts\mp\gametypes\br_public.gsc::risktokens() )
        {
            var_2 = 1;
            continue;
        }

        if ( isdefined( var_5.plundercount ) )
            var_1 = var_1 + var_5.plundercount;
    }

    var_7 = level.br_armory_kiosk._id_12BEA;
    var_8 = var_0 scripts\mp\utility\perk::_hasperk( "specialty_br_cheaper_kiosk" );
    var_9 = level.br_armory_kiosk._id_12BEB;

    if ( !isdefined( var_9 ) )
        var_9 = 0;

    var_10 = scripts\mp\gametypes\br_armory_kiosk.gsc::add_pack_modelanim( level.br_armory_kiosk._id_12BE9, 0, var_7, var_8, var_9 );

    if ( var_2 && isdefined( var_10 ) && var_1 < var_10 )
        return 0;

    return 1;
}
