// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

spectate_init()
{
    level thread updateactivespectatorcounts();
}

initplayer()
{
    weapon_xp_iw8_ar_golf36();
}

movequestobjicon( var_0, var_1 )
{
    var_2 = undefined;

    if ( isdefined( var_0.train_lootcrates_save_offsets ) )
    {
        var_2 = numberaudioalias( var_0.train_lootcrates_save_offsets );
        var_0.train_lootcrates_save_offsets = undefined;
    }

    if ( !isdefined( var_2 ) )
        var_2 = var_0 scripts\mp\gametypes\br_gulag.gsc::weaponpickupflyoutbit( undefined, undefined, 1 );

    if ( !isdefined( var_2 ) )
    {
        var_3 = scripts\mp\gametypes\br_public.gsc::ondefuse( var_0.team, var_0.squadindex );
        var_2 = movequestlocale( var_0, var_3 );
    }

    if ( !isdefined( var_2 ) && scripts\mp\menus::_id_128AB() )
    {
        var_3 = scripts\mp\utility\teams::getteamdata( var_0.team, "players" );
        var_2 = movequestlocale( var_0, var_3 );
    }

    if ( !isdefined( var_2 ) )
    {
        if ( isdefined( var_1 ) && isplayer( var_1 ) && var_1.team != var_0.team )
        {
            if ( isalive( var_1 ) && !istrue( var_1.gulag ) && !istrue( var_1.inlaststand ) && !var_1 scripts\mp\gametypes\br_public.gsc::zombiejumping() )
                var_2 = var_1;
            else
            {
                var_4 = scripts\mp\utility\teams::getfriendlyplayers( var_1.team );
                var_2 = movequestlocale( var_0, var_4, 1 );
            }
        }
    }

    if ( !isdefined( var_2 ) && isplayer( var_1 ) && var_1 != var_0 )
    {
        var_2 = numberaudioalias( var_1 );

        if ( isdefined( var_2 ) && var_2 scripts\mp\gametypes\br_public.gsc::zombiejumping() )
            var_2 = undefined;
    }

    if ( !isdefined( var_2 ) )
        var_2 = movequestlocale( var_0, level.players );

    if ( !isdefined( var_2 ) && level.players.size > 1 && !istrue( level.gameended ) )
    {
        var_5 = 0;

        foreach ( var_7 in level.players )
        {
            if ( istrue( var_7.clean_up_search ) )
                var_5++;
        }

        scripts\mp\utility\script::handle_train_veh_collision( "getBestSpectateCandidate - no valid players found (" + var_5 + " of " + level.players.size + ") eliminated" );
    }

    return var_2;
}

getserachparams( var_0, var_1, var_2 )
{
    var_3 = "player: " + var_0.name + ", candidate: " + var_1.name + ", playersChecked.size: " + var_2.size;
    scripts\mp\utility\script::handle_train_veh_collision( var_3 );
    var_3 = "";
    var_4 = int( min( var_2.size, 3 ) );
    var_5 = 0;

    foreach ( var_7 in var_2 )
    {
        var_3 = var_3 + ( " - player: " + var_7.name + ", eliminated: " + istrue( var_7.clean_up_search ) );
        var_5++;

        if ( var_5 > var_4 )
            break;
    }

    scripts\mp\utility\script::handle_train_veh_collision( var_3 );
}

numberaudioalias( var_0 )
{
    var_1 = [];
    var_2 = 0;

    for ( var_3 = var_0; isdefined( var_3 ) && !scoreleadchanged( var_3 ); var_3 = var_3 whizby_onplayerconnect() )
    {
        var_2++;
        var_4 = var_3 getentitynumber();

        if ( var_2 >= 150 || isdefined( var_1[var_4] ) )
        {
            getserachparams( var_0, var_3, var_1 );
            return;
        }

        var_1[var_4] = var_3;
    }

    return var_3;
}

movequestlocale( var_0, var_1, var_2 )
{
    var_3 = undefined;
    var_4 = [];
    var_5 = [];
    var_6 = [];
    var_7 = [];

    foreach ( var_9 in var_1 )
    {
        if ( !isdefined( var_9 ) || !scoreleadchanged( var_9 ) || var_9 == var_0 )
            continue;

        if ( istrue( var_9.gulag ) )
        {
            var_5[var_5.size] = var_9;
            continue;
        }

        if ( istrue( var_9.inlaststand ) )
        {
            var_6[var_6.size] = var_9;
            continue;
        }

        if ( var_9 scripts\mp\gametypes\br_public.gsc::zombiejumping() )
        {
            var_7[var_7.size] = var_9;
            continue;
        }

        var_4[var_4.size] = var_9;
    }

    if ( var_4.size > 0 )
    {
        var_11 = randomint( var_4.size );
        var_3 = var_4[var_11];
    }

    if ( !isdefined( var_3 ) && var_5.size > 0 )
    {
        var_11 = randomint( var_5.size );
        var_3 = var_5[var_11];
    }

    if ( !isdefined( var_3 ) && var_6.size > 0 )
    {
        var_11 = randomint( var_6.size );
        var_3 = var_6[var_11];
    }

    if ( !isdefined( var_3 ) && var_7.size > 0 && !istrue( var_2 ) )
    {
        var_11 = randomint( var_7.size );
        var_3 = var_7[var_11];
    }

    return var_3;
}

scoreleadchanged( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( istrue( scripts\mp\gametypes\br_gametypes.gsc::revive_stim( "isValidSpectateTarget" ) ) )
        return scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "isValidSpectateTarget", var_0 );

    if ( !isalive( var_0 ) && !istrue( var_0.respawningfromtoken ) && ( istrue( var_0.gulagarena ) || !istrue( var_0.gulag ) ) )
        return 0;

    return !istrue( var_0.clean_up_search );
}

_id_127EC( var_0 )
{
    var_1 = spawnstruct();

    if ( istrue( level._id_1360F ) && level._id_1360F == 6 && getdvarint( "scr_br_x1_intermission_location_enabled", 1 ) )
    {
        var_1.origin = getdvarvector( "scr_br_x1_intermission_origin", ( 29247, 1991, 6334 ) );
        var_1.angles = getdvarvector( "scr_br_x1_intermission_angles", ( 85, 135, 0 ) );
    }
    else if ( isdefined( level._id_11FAF ) && level._id_11FAF == 2 && getdvarint( "scr_br_dov1_intermission_location_enabled", 1 ) )
    {
        var_1.origin = getdvarvector( "scr_br_dov1_intermission_origin", ( 29247, 1991, 6334 ) );
        var_1.angles = getdvarvector( "scr_br_dov1_intermission_angles", ( 85, 135, 0 ) );
    }
    else if ( isdefined( var_0._id_12858 ) )
    {
        var_1 = var_0._id_12858;
        var_0._id_12858 = undefined;
    }
    else
    {
        var_1.origin = var_0.origin + ( 0, 0, 100 );
        var_1.angles = var_0.angles;
    }

    scripts\mp\playerlogic::spawnintermission( var_1, undefined, 0 );
}

spawnspectator( var_0, var_1, var_2 )
{
    if ( scripts\mp\gametypes\br_public.gsc::scn_infil_tango_npc_4_sfx() )
        return;

    var_3 = self;
    var_3 _id_127EC( var_3 );

    if ( scripts\mp\gametypes\br_gametypes.gsc::roof_enemy_groups( "teamSpectate" ) )
        return;

    thread scripts\mp\gametypes\br_gulag.gsc::_id_119D8();

    if ( !istrue( var_2 ) )
        var_3 thread _id_12E96();

    var_4 = undefined;

    if ( isdefined( var_0.attacker ) )
        var_4 = var_0.attacker;

    var_5 = movequestobjicon( var_3, var_4 );
    assignspectatortospectateplayer( var_3, var_5 );

    if ( !istrue( var_3.br_spectatorinitialized ) )
    {
        var_3 notify( "br_spectatorInitialized" );
        var_3.br_spectatorinitialized = 1;
    }
}

_id_12E96()
{
    self endon( "disconnect" );
    self endon( "br_team_fully_eliminated" );
    var_0 = scripts\mp\utility\teams::getfriendlyplayers( self.team, 1 );

    if ( var_0.size > 0 )
    {
        var_1 = 1;

        switch ( scripts\mp\utility\game::onfieldupgradeendbuffer() )
        {
            case "risk":
            case "dmz":
            case "rumble":
                var_1 = 0;
                break;
            case "truckwar":
                var_1 = !isdefined( level._id_12BF5 ) || !isdefined( level._id_12BF5[self.team] );
                break;
        }

        if ( var_1 )
        {
            thread _id_1235F();
            wait 0.25;
            self setclientomnvar( "ui_br_end_game_splash_type", 5 );
            wait 1.0;
            self setclientomnvar( "ui_br_end_game_splash_type", 0 );
        }
    }
}

x1opstransbink()
{
    var_0 = 0;
    var_1 = scripts\mp\gametypes\br_public.gsc::ondefuse( self.team, self.squadindex );

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3 ) && self != var_3 && isalive( var_3 ) && !var_3 scripts\mp\gametypes\br_public.gsc::zombiejumping() )
        {
            var_0 = 1;
            break;
        }
    }

    return var_0;
}

_id_1235F()
{
    self endon( "disconnect" );
    self endon( "br_team_fully_eliminated" );
    self endon( "started_spawnPlayer" );
    self endon( "gulag_auto_win" );

    if ( !istrue( level.br_plunder_enabled ) )
        return;

    if ( scripts\mp\utility\game::getgametype() != "dmz" )
    {
        _id_13441( self );

        if ( scripts\mp\gametypes\br_public.gsc::sat_setup_access_card_pickup( self ) )
            return;

        scripts\mp\utility\lower_message::setlowermessageomnvar( 75 );

        for (;;)
        {
            waittillframeend;

            if ( isdefined( self._id_119F9 ) && istrue( self._id_119F9.gulag ) )
            {
                scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
                waitframe();
                continue;
            }

            scripts\mp\utility\lower_message::setlowermessageomnvar( 75 );

            if ( !x1opstransbink() )
            {
                scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
                waitframe();
            }

            var_0 = scripts\engine\utility::_id_133F9( "buybackRequested", "br_spectator_end_forced_spectator", "playertospectate_set", "spectating_cycle" );

            if ( var_0 == "buybackRequested" )
            {
                scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
                wait 10;
            }
        }
    }
}

getserverroomspawnpoint( var_0, var_1 )
{
    var_2 = "player: " + var_0.name;

    if ( isdefined( var_1 ) )
        var_2 = var_2 + ( ", playerToSpectate: " + var_1.name + ", alive: " + isalive( var_1 ) + ", eliminated: " + istrue( var_1.clean_up_search ) + ", gulag: " + istrue( var_1.gulag ) );

    scripts\mp\utility\script::handle_train_veh_collision( var_2 );
    waitframe();
    var_2 = "waitframe - playerToSpectate: " + var_1.name + ", alive: " + isalive( var_1 ) + ", eliminated: " + istrue( var_1.clean_up_search ) + ", gulag: " + istrue( var_1.gulag );
    scripts\mp\utility\script::handle_train_veh_collision( var_2 );
}

weapon_xp_iw8_ar_golf36()
{
    self._id_11B7E = undefined;
    self.train_lootcrates_save_offsets = undefined;
    self._id_119F9 = undefined;
    self setclientomnvar( "ui_show_spectateHud", -1 );
    self notify( "forcePlayerSpectateTarget" );
    self notify( "playerMonitorSpectatorCycle" );
}

_id_119D9()
{
    var_0 = self;

    if ( var_0.sessionstate != "intermission" )
    {
        var_1 = var_0 whizby_onplayerconnect();

        if ( istrue( var_1._id_13480 ) )
        {
            var_0 scripts\mp\gametypes\br_gulag.gsc::_id_119BD( 1 );
            level notify( "update_circle_hide" );
        }

        var_0 _id_127EC( var_1 );
    }
}

forceplayerspectatetarget( var_0 )
{
    if ( istrue( level.current_volume_enemy ) )
        return;

    var_1 = self;
    level endon( "brSpawnPlayersEnding" );
    var_1 endon( "disconnect" );
    var_1 notify( "forcePlayerSpectateTarget" );
    var_1 endon( "forcePlayerSpectateTarget" );
    var_1._id_11B7E = 1;
    var_1 _id_119D9();

    if ( !isdefined( var_0 ) || !isplayer( var_0 ) || !isalive( var_0 ) && !var_0 zombiedropstags() )
    {
        if ( level.gameended || level.players.size == 1 )
        {
            var_1 setclientomnvar( "ui_show_spectateHud", var_1 getentitynumber() );
            var_1._id_11B7E = undefined;
            return;
        }

        thread getserverroomspawnpoint( var_1, var_0 );
        var_0 = movequestobjicon( var_1 );

        if ( !isdefined( var_0 ) )
        {
            var_1 setclientomnvar( "ui_show_spectateHud", var_1 getentitynumber() );
            var_1._id_11B7E = undefined;
            return;
        }
    }

    var_0 endon( "disconnect" );
    var_2 = var_0 getentitynumber();
    var_1._id_119F9 = var_0;
    var_1 setclientomnvar( "ui_show_spectateHud", var_2 );

    if ( !var_1 isadditionalstreamposready() )
        var_1 clearadditionalstreampos();

    var_1 setadditionalstreamloaddist( 0.0 );
    var_3 = var_0.origin;

    if ( istrue( var_0.respawningfromtoken ) && isdefined( var_0.forcespawnorigin ) )
    {
        if ( !var_0 scripts\mp\gametypes\br_gulag.gsc::zdrop() )
            var_1 thread scripts\mp\gametypes\br_gulag.gsc::weapon_should_not_get_ammo();
        else if ( !var_1 scripts\mp\gametypes\br_gulag.gsc::zdrop() )
            var_1 scripts\mp\gametypes\br_gulag.gsc::weapon_pick_up_monitor();

        var_3 = var_0.forcespawnorigin;
        var_1 setadditionalstreampos( var_3, 1 );
    }
    else if ( isdefined( var_0._id_12A76 ) )
    {
        var_3 = var_0._id_12A76.origin;
        var_1 setadditionalstreampos( var_3, 1 );
    }
    else
        var_1 setadditionalstreampos( var_3, 1, 0, var_0 );

    var_1 loadcustomizationplayerview( var_0 );
    var_4 = var_0 getweaponslistprimaries();
    var_1 loadweaponsforplayer( var_4, 1 );
    waitframe();
    var_5 = getdvarint( "spectate_stream_update_distsq", 2500 );
    var_6 = getdvarint( "spectate_stream_update_time", 500 );
    var_7 = getdvarint( "spectate_stream_timeout", 9000 );
    var_8 = gettime() + var_6;
    var_9 = gettime() + var_7;

    while ( ( !var_1 isadditionalstreamposready() || isdefined( var_0 ) && !var_1 hasloadedcustomizationplayerview( var_0 ) || !var_1 hasloadedviewweapons( var_4 ) ) && gettime() < var_9 )
    {
        if ( isdefined( var_0 ) && !isdefined( var_0._id_12A76 ) && gettime() > var_8 )
        {
            var_10 = distance2dsquared( var_0.origin, var_3 );

            if ( var_10 > var_5 )
            {
                var_3 = var_0.origin;
                var_1 setadditionalstreampos( var_3, 1, 0, var_0 );
                var_8 = gettime() + var_6;
            }
        }

        waitframe();
    }

    var_12 = getdvarint( "spectate_stream_update_time", 2000 );
    var_9 = gettime() + var_7;
    var_13 = 0;

    while ( ( isdefined( var_0._id_12A76 ) || !isalive( var_0 ) ) && gettime() < var_9 )
    {
        if ( gettime() > var_13 )
        {
            var_1 setadditionalstreampos( var_3, 1 );
            var_13 = gettime() + var_12;
        }

        waitframe();
    }

    if ( isdefined( var_0 ) )
        var_1 weaponfixup( var_0 );

    var_1 thread zombieregendelayscaleoutgas();
    var_1 clearadditionalstreampos();

    if ( istrue( var_1._id_13480 ) )
    {
        var_1 scripts\mp\gametypes\br_gulag.gsc::_id_119BD( 0 );
        level notify( "update_circle_hide" );
    }
}

weaponfixup( var_0 )
{
    var_1 = self;

    if ( !var_0 scripts\mp\gametypes\br_gulag.gsc::zdrop() )
        var_1 thread scripts\mp\gametypes\br_gulag.gsc::weapon_should_not_get_ammo();
    else if ( !var_1 scripts\mp\gametypes\br_gulag.gsc::zdrop() )
    {
        var_1 scripts\mp\gametypes\br_gulag.gsc::weapon_pick_up_monitor();
        wait 0.5;
    }

    var_2 = var_0 getentitynumber();
    var_1 scripts\mp\utility\player::updatesessionstate( "spectator" );
    var_1.forcespectatorclient = var_2;
    var_1 scripts\mp\utility\player::_freezecontrols( 0, undefined, "spawnIntermission" );
    var_1 setallstreamloaddist( 0.0 );
    var_1 setclientomnvar( "ui_show_spectateHud", -1 );
    var_3 = var_1 getspectatingplayer();

    while ( !isdefined( var_3 ) || var_2 != var_3 getentitynumber() )
    {
        waitframe();
        var_3 = var_1 getspectatingplayer();

        if ( !isdefined( var_0 ) || !scoreleadchanged( var_0 ) )
            break;
    }

    var_1 notify( "br_spectator_end_forced_spectator" );
    var_1.forcespectatorclient = -1;

    if ( isdefined( var_0 ) && scoreleadchanged( var_0 ) )
        var_1 spectateclientnum( var_2, 1 );

    var_1._id_11B7E = undefined;
}

assignspectatortospectateplayer( var_0, var_1 )
{
    var_2 = scripts\mp\gametypes\br_gametypes.gsc::_id_1209E( "assignSpectatorToSpectatePlayer", var_0, var_1 );

    if ( istrue( var_2 ) )
        return;

    var_0 allowspectateteam( "freelook", 0 );
    var_0 allowspectateteam( "none", 0 );
    var_0 allowspectateallteams( 0 );

    if ( level.teambased && isdefined( var_1 ) )
        var_0 allowspectateteam( var_1.team, 1 );

    var_0 thread forceplayerspectatetarget( var_1 );
    self notify( "playertospectate_set" );
}

zombieregendelayscaleoutgas()
{
    self notify( "playerMonitorSpectatorCycle" );
    self endon( "playerMonitorSpectatorCycle" );
    self endon( "forcePlayerSpectateTarget" );
    self endon( "disconnect" );
    self endon( "started_spawnPlayer" );

    for (;;)
    {
        self waittill( "spectating_cycle_start", var_0 );

        if ( !isdefined( var_0 ) )
            continue;

        if ( var_0 scripts\mp\gametypes\br_gulag.gsc::zdrop() )
            scripts\mp\gametypes\br_gulag.gsc::weapon_pick_up_monitor();

        var_1 = _id_11A12( var_0 );
        var_2 = self getspectatingplayer();

        if ( !istrue( var_1 ) || !isdefined( var_2 ) )
        {
            stopspectateplayer( self getentitynumber(), 1 );

            if ( scoreleadchanged( self._id_119F9 ) )
                weaponfixup( self._id_119F9 );
            else
            {
                var_0 = movequestobjicon( self );

                if ( isdefined( var_0 ) && !var_0 scripts\mp\gametypes\br_gulag.gsc::zdrop() )
                    thread scripts\mp\gametypes\br_gulag.gsc::weapon_should_not_get_ammo();

                assignspectatortospectateplayer( self, var_0 );
            }

            continue;
        }

        self._id_119F9 = var_0;

        if ( var_2 != var_0 )
            self._id_119F9 = var_2;

        if ( self._id_119F9 scripts\mp\gametypes\br_gulag.gsc::zdrop() )
        {
            if ( !scripts\mp\gametypes\br_gulag.gsc::zdrop() )
                scripts\mp\gametypes\br_gulag.gsc::weapon_pick_up_monitor();

            continue;
        }

        thread scripts\mp\gametypes\br_gulag.gsc::weapon_should_not_get_ammo();
    }
}

_id_11A12( var_0 )
{
    var_0 endon( "death_or_disconnect" );
    self waittill( "spectating_cycle" );
    return 1;
}

whizby_onplayerconnect()
{
    var_0 = undefined;

    if ( !istrue( self.spectatekillcam ) )
        var_0 = self getspectatingplayer();

    if ( !isdefined( var_0 ) && isdefined( self.train_lootcrates_save_offsets ) )
        var_0 = self.train_lootcrates_save_offsets;

    if ( !isdefined( var_0 ) && isdefined( self._id_119F9 ) )
        var_0 = self._id_119F9;

    return var_0;
}

ondamagepredamagemodrelicfocusfire( var_0 )
{
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( !isdefined( var_3 ) )
            continue;

        if ( scoreleadchanged( var_3 ) )
            continue;

        if ( !istrue( var_3.br_spectatorinitialized ) )
            continue;

        var_4 = var_3 whizby_onplayerconnect();

        if ( !isdefined( var_4 ) )
            continue;

        if ( var_4 == var_0 )
            var_1[var_1.size] = var_3;
    }

    return var_1;
}

steam_damage_player( var_0, var_1, var_2 )
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        return;

    var_3 = movequestobjicon( var_0, var_1 );

    if ( var_2 && !istrue( var_0.gulag ) )
        var_0.train_lootcrates_save_offsets = var_3;

    updateexistingspectatorsofvictim( var_0, var_3 );
}

zombiedropstags()
{
    return isdefined( self._id_12A76 ) || scripts\mp\gametypes\br_public.gsc::zombiejumping() || istrue( self.return_enemy_type_mask ) || istrue( self.respawningfromtoken );
}

updateexistingspectatorsofvictim( var_0, var_1 )
{
    var_2 = ondamagepredamagemodrelicfocusfire( var_0 );

    foreach ( var_4 in var_2 )
    {
        if ( isdefined( var_1 ) && var_0.team == var_4.team && var_1.team != var_0.team && var_0 zombiedropstags() )
        {
            assignspectatortospectateplayer( var_4, var_0 );
            continue;
        }

        if ( isdefined( var_4.train_lootcrates_save_offsets ) )
        {
            var_4.train_lootcrates_save_offsets = var_1;
            continue;
        }

        assignspectatortospectateplayer( var_4, var_1 );
    }
}

updateactivespectatorcounts()
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_done" );

    for (;;)
    {
        var_0 = [];

        foreach ( var_2 in level.players )
        {
            if ( isdefined( var_2 ) )
            {
                var_3 = var_2 getspectatingplayer();

                if ( isdefined( var_3 ) )
                {
                    var_4 = var_3 getentitynumber();
                    var_0[var_4] = scripts\mp\gametypes\br.gsc::get_int_or_0( var_0[var_4] ) + 1;
                }
            }
        }

        var_6 = 0;

        foreach ( var_2 in level.players )
        {
            if ( isdefined( var_2 ) )
            {
                var_8 = var_2 getentitynumber();
                var_9 = scripts\mp\gametypes\br.gsc::get_int_or_0( var_0[var_8] );
                var_10 = var_2 getclientomnvar( "ui_br_active_spectators" );

                if ( var_9 != var_10 )
                    var_2 setclientomnvar( "ui_br_active_spectators", var_9 );

                var_6++;

                if ( var_6 % 10 == 0 )
                    waitframe();
            }
        }

        wait 1.0;
    }
}

_id_13441( var_0 )
{
    while ( var_0.sessionstate != "intermission" )
        waitframe();

    while ( var_0.sessionstate == "intermission" )
        waitframe();

    while ( var_0.sessionstate != "spectator" )
        waitframe();
}
